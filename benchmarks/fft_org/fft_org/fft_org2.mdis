
../benchmarks/fft_org/fft_org/fft_org2:     file format ss-coff-little

Disassembly of section .text:
00400140 <__start> lw $16,0($29)
00400148 <__start+0x8> lui $28,4097
00400150 <__start+0x10> addiu $28,$28,-31984
00400158 <__start+0x18> addiu $17,$29,4
00400160 <__start+0x20> addiu $3,$17,4
00400168 <__start+0x28> sll $2,$16,0x2
00400170 <__start+0x30> addu $3,$3,$2
00400178 <__start+0x38> addu $18,$0,$3
00400180 <__start+0x40> sw $18,-32028($28)
00400188 <__start+0x48> addiu $29,$29,-24
00400190 <__start+0x50> addu $4,$0,$16
00400198 <__start+0x58> addu $5,$0,$17
004001a0 <__start+0x60> addu $6,$0,$18
004001a8 <__start+0x68> jal 00401010 <__libc_init>
004001b0 <__start+0x70> sw $0,-32032($28)
004001b8 <__start+0x78> addu $4,$0,$16
004001c0 <__start+0x80> addu $5,$0,$17
004001c8 <__start+0x88> addu $6,$0,$18
004001d0 <__start+0x90> jal 004003e8 <main>
004001d8 <__start+0x98> addu $4,$0,$2
004001e0 <__start+0xa0> jal 00401040 <exit>
004001e8 <__start+0xa8> nop 
NumberOfBitsNeeded():
../benchmarks/fft_org/fft_org/fft_org2.c:55
  return(app);
} */

unsigned NumberOfBitsNeeded ( unsigned PowerOfTwo )
{
004001f0 <NumberOfBitsNeeded> addiu $29,$29,-16
004001f8 <NumberOfBitsNeeded+0x8> sw $30,8($29)
00400200 <NumberOfBitsNeeded+0x10> addu $30,$0,$29
00400208 <NumberOfBitsNeeded+0x18> sw $4,16($30)
../benchmarks/fft_org/fft_org/fft_org2.c:57
    unsigned i;
    if (PowerOfTwo<2) return 0;
00400210 <NumberOfBitsNeeded+0x20> lw $2,16($30)
00400218 <NumberOfBitsNeeded+0x28> sltiu $3,$2,2
00400220 <NumberOfBitsNeeded+0x30> beq $3,$0,00400238 <NumberOfBitsNeeded+0x48>
00400228 <NumberOfBitsNeeded+0x38> addu $2,$0,$0
00400230 <NumberOfBitsNeeded+0x40> j 004002c8 <NumberOfBitsNeeded+0xd8>
../benchmarks/fft_org/fft_org/fft_org2.c:58
    for ( i=0; i<32 ; i++ )
00400238 <NumberOfBitsNeeded+0x48> sw $0,0($30)
00400240 <NumberOfBitsNeeded+0x50> lw $2,0($30)
00400248 <NumberOfBitsNeeded+0x58> sltiu $3,$2,32
00400250 <NumberOfBitsNeeded+0x60> bne $3,$0,00400260 <NumberOfBitsNeeded+0x70>
00400258 <NumberOfBitsNeeded+0x68> j 004002c8 <NumberOfBitsNeeded+0xd8>
../benchmarks/fft_org/fft_org/fft_org2.c:60
    {
        if ( PowerOfTwo & (1 << i) )
00400260 <NumberOfBitsNeeded+0x70> addiu $2,$0,1
00400268 <NumberOfBitsNeeded+0x78> lw $3,0($30)
00400270 <NumberOfBitsNeeded+0x80> sllv $2,$2,$3
00400278 <NumberOfBitsNeeded+0x88> lw $3,16($30)
00400280 <NumberOfBitsNeeded+0x90> and $2,$2,$3
00400288 <NumberOfBitsNeeded+0x98> beq $2,$0,004002a0 <NumberOfBitsNeeded+0xb0>
../benchmarks/fft_org/fft_org/fft_org2.c:61
            return i;
00400290 <NumberOfBitsNeeded+0xa0> lw $2,0($30)
00400298 <NumberOfBitsNeeded+0xa8> j 004002c8 <NumberOfBitsNeeded+0xd8>
../benchmarks/fft_org/fft_org/fft_org2.c:58
004002a0 <NumberOfBitsNeeded+0xb0> lw $3,0($30)
004002a8 <NumberOfBitsNeeded+0xb8> addiu $2,$3,1
004002b0 <NumberOfBitsNeeded+0xc0> addu $3,$0,$2
004002b8 <NumberOfBitsNeeded+0xc8> sw $3,0($30)
004002c0 <NumberOfBitsNeeded+0xd0> j 00400240 <NumberOfBitsNeeded+0x50>
../benchmarks/fft_org/fft_org/fft_org2.c:63
    }
}
004002c8 <NumberOfBitsNeeded+0xd8> addu $29,$0,$30
004002d0 <NumberOfBitsNeeded+0xe0> lw $30,8($29)
004002d8 <NumberOfBitsNeeded+0xe8> addiu $29,$29,16
004002e0 <NumberOfBitsNeeded+0xf0> jr $31
ReverseBits():
../benchmarks/fft_org/fft_org/fft_org2.c:66

unsigned ReverseBits ( unsigned index, unsigned NumBits )
{
004002e8 <ReverseBits> addiu $29,$29,-16
004002f0 <ReverseBits+0x8> sw $30,8($29)
004002f8 <ReverseBits+0x10> addu $30,$0,$29
00400300 <ReverseBits+0x18> sw $4,16($30)
00400308 <ReverseBits+0x20> sw $5,20($30)
../benchmarks/fft_org/fft_org/fft_org2.c:69
    unsigned i, rev;

    for ( i=rev=0; i < NumBits; i++ )
00400310 <ReverseBits+0x28> sw $0,4($30)
00400318 <ReverseBits+0x30> sw $0,0($30)
00400320 <ReverseBits+0x38> lw $2,0($30)
00400328 <ReverseBits+0x40> lw $3,20($30)
00400330 <ReverseBits+0x48> sltu $2,$2,$3
00400338 <ReverseBits+0x50> bne $2,$0,00400348 <ReverseBits+0x60>
00400340 <ReverseBits+0x58> j 004003b8 <ReverseBits+0xd0>
../benchmarks/fft_org/fft_org/fft_org2.c:71
    {
        rev = (rev << 1) | (index & 1);
00400348 <ReverseBits+0x60> lw $3,4($30)
00400350 <ReverseBits+0x68> sll $2,$3,0x1
00400358 <ReverseBits+0x70> lw $4,16($30)
00400360 <ReverseBits+0x78> andi $3,$4,1
00400368 <ReverseBits+0x80> or $2,$2,$3
00400370 <ReverseBits+0x88> sw $2,4($30)
../benchmarks/fft_org/fft_org/fft_org2.c:72
        index >>= 1;
00400378 <ReverseBits+0x90> lw $2,16($30)
00400380 <ReverseBits+0x98> srl $3,$2,0x1
00400388 <ReverseBits+0xa0> sw $3,16($30)
../benchmarks/fft_org/fft_org/fft_org2.c:69
00400390 <ReverseBits+0xa8> lw $3,0($30)
00400398 <ReverseBits+0xb0> addiu $2,$3,1
004003a0 <ReverseBits+0xb8> addu $3,$0,$2
004003a8 <ReverseBits+0xc0> sw $3,0($30)
004003b0 <ReverseBits+0xc8> j 00400320 <ReverseBits+0x38>
../benchmarks/fft_org/fft_org/fft_org2.c:75
    }

    return rev;
004003b8 <ReverseBits+0xd0> lw $2,4($30)
004003c0 <ReverseBits+0xd8> j 004003c8 <ReverseBits+0xe0>
../benchmarks/fft_org/fft_org/fft_org2.c:76
}
004003c8 <ReverseBits+0xe0> addu $29,$0,$30
004003d0 <ReverseBits+0xe8> lw $30,8($29)
004003d8 <ReverseBits+0xf0> addiu $29,$29,16
004003e0 <ReverseBits+0xf8> jr $31
main():
../benchmarks/fft_org/fft_org/fft_org2.c:79


int main(int argc, char *argv[]) {
004003e8 <main> addiu $29,$29,-4256
004003f0 <main+0x8> sw $31,4240($29)
004003f8 <main+0x10> sw $30,4236($29)
00400400 <main+0x18> sw $16,4232($29)
00400408 <main+0x20> s.d $f20,4248($29)
00400410 <main+0x28> addu $30,$0,$29
00400418 <main+0x30> sw $4,4256($30)
00400420 <main+0x38> sw $5,4260($30)
../benchmarks/fft_org/fft_org/fft_org2.c:84
    int RealIn[MAXSIZE];
    int ImagIn[MAXSIZE];
    int RealOut[MAXSIZE];
    int ImagOut[MAXSIZE];
    int invfft=0;
00400428 <main+0x40> sw $0,4112($30)
../benchmarks/fft_org/fft_org/fft_org2.c:91
    int coeff,amp;
    unsigned InverseTransform,NumSamples;
    unsigned NumBits;    /* Number of bits needed to store indices */
    unsigned i, j, k, n;
    unsigned BlockSize, BlockEnd;

    int angle_numerator = 2.0 * DDC_PI;
00400430 <main+0x48> addiu $2,$0,6
00400438 <main+0x50> sw $2,4160($30)
../benchmarks/fft_org/fft_org/fft_org2.c:95
    int tr, ti;     /* temp real, temp imaginary */


    InverseTransform = 0;
00400440 <main+0x58> sw $0,4124($30)
../benchmarks/fft_org/fft_org/fft_org2.c:96
    NumSamples = MAXSIZE;
00400448 <main+0x60> addiu $2,$0,256
00400450 <main+0x68> sw $2,4128($30)
../benchmarks/fft_org/fft_org/fft_org2.c:98

    for (i=0;i<MAXSIZE;i++) {
00400458 <main+0x70> sw $0,4136($30)
00400460 <main+0x78> lw $2,4136($30)
00400468 <main+0x80> sltiu $3,$2,256
00400470 <main+0x88> bne $3,$0,00400480 <main+0x98>
00400478 <main+0x90> j 004006e0 <main+0x2f8>
../benchmarks/fft_org/fft_org/fft_org2.c:99
        coeff = ((i+39)*91)%1000;
00400480 <main+0x98> lw $2,4136($30)
00400488 <main+0xa0> addiu $3,$2,39
00400490 <main+0xa8> addu $4,$0,$3
00400498 <main+0xb0> sll $2,$4,0x1
004004a0 <main+0xb8> addu $2,$2,$3
004004a8 <main+0xc0> sll $4,$2,0x3
004004b0 <main+0xc8> subu $4,$4,$3
004004b8 <main+0xd0> sll $2,$4,0x2
004004c0 <main+0xd8> subu $2,$2,$3
004004c8 <main+0xe0> lui $6,4194
004004d0 <main+0xe8> ori $6,$6,19923
004004d8 <main+0xf0> multu $2,$6
004004e0 <main+0xf8> mfhi $5
004004e8 <main+0x100> mflo $4
004004f0 <main+0x108> srl $6,$5,0x0
004004f8 <main+0x110> addu $7,$0,$0
00400500 <main+0x118> srl $3,$6,0x6
00400508 <main+0x120> addu $5,$0,$3
00400510 <main+0x128> sll $4,$5,0x5
00400518 <main+0x130> subu $4,$4,$3
00400520 <main+0x138> sll $5,$4,0x2
00400528 <main+0x140> addu $5,$5,$3
00400530 <main+0x148> sll $3,$5,0x3
00400538 <main+0x150> subu $2,$2,$3
00400540 <main+0x158> sw $2,4116($30)
../benchmarks/fft_org/fft_org/fft_org2.c:100
        amp = ((i+71)*83)%1000;
00400548 <main+0x160> lw $2,4136($30)
00400550 <main+0x168> addiu $3,$2,71
00400558 <main+0x170> addu $4,$0,$3
00400560 <main+0x178> sll $2,$4,0x2
00400568 <main+0x180> addu $2,$2,$3
00400570 <main+0x188> sll $4,$2,0x2
00400578 <main+0x190> addu $4,$4,$3
00400580 <main+0x198> sll $2,$4,0x2
00400588 <main+0x1a0> subu $2,$2,$3
00400590 <main+0x1a8> lui $6,4194
00400598 <main+0x1b0> ori $6,$6,19923
004005a0 <main+0x1b8> multu $2,$6
004005a8 <main+0x1c0> mfhi $5
004005b0 <main+0x1c8> mflo $4
004005b8 <main+0x1d0> srl $6,$5,0x0
004005c0 <main+0x1d8> addu $7,$0,$0
004005c8 <main+0x1e0> srl $3,$6,0x6
004005d0 <main+0x1e8> addu $5,$0,$3
004005d8 <main+0x1f0> sll $4,$5,0x5
004005e0 <main+0x1f8> subu $4,$4,$3
004005e8 <main+0x200> sll $5,$4,0x2
004005f0 <main+0x208> addu $5,$5,$3
004005f8 <main+0x210> sll $3,$5,0x3
00400600 <main+0x218> subu $2,$2,$3
00400608 <main+0x220> sw $2,4120($30)
../benchmarks/fft_org/fft_org/fft_org2.c:101
        RealIn[i]=coeff*sin(amp);
00400610 <main+0x228> lw $2,4136($30)
00400618 <main+0x230> addu $3,$0,$2
00400620 <main+0x238> sll $2,$3,0x2
00400628 <main+0x240> addiu $3,$30,16
00400630 <main+0x248> addu $16,$2,$3
00400638 <main+0x250> l.s $f20,4116($30)
00400640 <main+0x258> cvt.d.w $f20,$f20
00400648 <main+0x260> l.s $f0,4120($30)
00400650 <main+0x268> cvt.d.w $f0,$f0
00400658 <main+0x270> mov.d $f12,$f0
00400660 <main+0x278> jal 004011e0 <sin>
00400668 <main+0x280> mul.d $f2,$f20,$f0
00400670 <main+0x288> cvt.w.d $f4,$f2
00400678 <main+0x290> s.s $f4,0($16)
../benchmarks/fft_org/fft_org/fft_org2.c:102
        ImagIn[i]=0;
00400680 <main+0x298> lw $2,4136($30)
00400688 <main+0x2a0> addu $3,$0,$2
00400690 <main+0x2a8> sll $2,$3,0x2
00400698 <main+0x2b0> addiu $3,$30,16
004006a0 <main+0x2b8> addu $2,$2,$3
004006a8 <main+0x2c0> addiu $3,$2,1024
004006b0 <main+0x2c8> sw $0,0($3)
../benchmarks/fft_org/fft_org/fft_org2.c:98
004006b8 <main+0x2d0> lw $3,4136($30)
004006c0 <main+0x2d8> addiu $2,$3,1
004006c8 <main+0x2e0> addu $3,$0,$2
004006d0 <main+0x2e8> sw $3,4136($30)
004006d8 <main+0x2f0> j 00400460 <main+0x78>
../benchmarks/fft_org/fft_org/fft_org2.c:104
    }
    if ( InverseTransform )
004006e0 <main+0x2f8> lw $2,4124($30)
004006e8 <main+0x300> beq $2,$0,00400708 <main+0x320>
../benchmarks/fft_org/fft_org/fft_org2.c:105
        angle_numerator = -angle_numerator;
004006f0 <main+0x308> lw $2,4160($30)
004006f8 <main+0x310> subu $3,$0,$2
00400700 <main+0x318> sw $3,4160($30)
../benchmarks/fft_org/fft_org/fft_org2.c:107

    NumBits = NumberOfBitsNeeded ( NumSamples );
00400708 <main+0x320> lw $4,4128($30)
00400710 <main+0x328> jal 004001f0 <NumberOfBitsNeeded>
00400718 <main+0x330> sw $2,4132($30)
../benchmarks/fft_org/fft_org/fft_org2.c:113

    /*
    **   Do simultaneous data copy and bit-reversal ordering into outputs...
    */

    for ( i=0; i < NumSamples; i++ )
00400720 <main+0x338> sw $0,4136($30)
00400728 <main+0x340> lw $2,4136($30)
00400730 <main+0x348> lw $3,4128($30)
00400738 <main+0x350> sltu $2,$2,$3
00400740 <main+0x358> bne $2,$0,00400750 <main+0x368>
00400748 <main+0x360> j 00400870 <main+0x488>
../benchmarks/fft_org/fft_org/fft_org2.c:115
    {
        j = ReverseBits ( i, NumBits );
00400750 <main+0x368> lw $4,4136($30)
00400758 <main+0x370> lw $5,4132($30)
00400760 <main+0x378> jal 004002e8 <ReverseBits>
00400768 <main+0x380> sw $2,4140($30)
../benchmarks/fft_org/fft_org/fft_org2.c:116
        RealOut[j] = RealIn[i];
00400770 <main+0x388> lw $2,4140($30)
00400778 <main+0x390> addu $3,$0,$2
00400780 <main+0x398> sll $2,$3,0x2
00400788 <main+0x3a0> addiu $4,$30,16
00400790 <main+0x3a8> addu $3,$2,$4
00400798 <main+0x3b0> addiu $2,$3,2048
004007a0 <main+0x3b8> lw $3,4136($30)
004007a8 <main+0x3c0> addu $4,$0,$3
004007b0 <main+0x3c8> sll $3,$4,0x2
004007b8 <main+0x3d0> addiu $4,$30,16
004007c0 <main+0x3d8> addu $3,$3,$4
004007c8 <main+0x3e0> lw $4,0($3)
004007d0 <main+0x3e8> sw $4,0($2)
../benchmarks/fft_org/fft_org/fft_org2.c:117
        ImagOut[j] = ImagIn[i];
004007d8 <main+0x3f0> lw $2,4140($30)
004007e0 <main+0x3f8> addu $3,$0,$2
004007e8 <main+0x400> sll $2,$3,0x2
004007f0 <main+0x408> addiu $4,$30,16
004007f8 <main+0x410> addu $3,$2,$4
00400800 <main+0x418> addiu $2,$3,3072
00400808 <main+0x420> lw $3,4136($30)
00400810 <main+0x428> addu $4,$0,$3
00400818 <main+0x430> sll $3,$4,0x2
00400820 <main+0x438> addiu $4,$30,16
00400828 <main+0x440> addu $3,$3,$4
00400830 <main+0x448> addiu $4,$3,1024
00400838 <main+0x450> lw $3,0($4)
00400840 <main+0x458> sw $3,0($2)
../benchmarks/fft_org/fft_org/fft_org2.c:113
00400848 <main+0x460> lw $3,4136($30)
00400850 <main+0x468> addiu $2,$3,1
00400858 <main+0x470> addu $3,$0,$2
00400860 <main+0x478> sw $3,4136($30)
00400868 <main+0x480> j 00400728 <main+0x340>
../benchmarks/fft_org/fft_org/fft_org2.c:124
    }

    /*
    **   Do the FFT itself...
    */

    BlockEnd = 1;
00400870 <main+0x488> addiu $2,$0,1
00400878 <main+0x490> sw $2,4156($30)
../benchmarks/fft_org/fft_org/fft_org2.c:125
    for ( BlockSize = 2; BlockSize <= NumSamples; BlockSize <<= 1 )
00400880 <main+0x498> addiu $2,$0,2
00400888 <main+0x4a0> sw $2,4152($30)
00400890 <main+0x4a8> lw $2,4152($30)
00400898 <main+0x4b0> lw $3,4128($30)
004008a0 <main+0x4b8> sltu $2,$3,$2
004008a8 <main+0x4c0> beq $2,$0,004008b8 <main+0x4d0>
004008b0 <main+0x4c8> j 00400fd8 <main+0xbf0>
../benchmarks/fft_org/fft_org/fft_org2.c:127
    {
        int delta_angle = angle_numerator / (int)BlockSize;
004008b8 <main+0x4d0> lw $2,4160($30)
004008c0 <main+0x4d8> lw $3,4152($30)
004008c8 <main+0x4e0> div $0,$2,$3
004008d0 <main+0x4e8> bne $3,$0,004008e0 <main+0x4f8>
004008d8 <main+0x4f0> break 
004008e0 <main+0x4f8> addiu $1,$0,-1
004008e8 <main+0x500> bne $3,$1,00400908 <main+0x520>
004008f0 <main+0x508> lui $1,32768
004008f8 <main+0x510> bne $2,$1,00400908 <main+0x520>
00400900 <main+0x518> break 
00400908 <main+0x520> mflo $2
00400910 <main+0x528> sw $2,4172($30)
../benchmarks/fft_org/fft_org/fft_org2.c:128
        int sm2 = sin ( -2 * delta_angle );
00400918 <main+0x530> lw $2,4172($30)
00400920 <main+0x538> addu $3,$0,$2
00400928 <main+0x540> sll $2,$3,0x1
00400930 <main+0x548> subu $3,$0,$2
00400938 <main+0x550> mtc1 $3,$f0
00400940 <main+0x558> cvt.d.w $f0,$f0
00400948 <main+0x560> mov.d $f12,$f0
00400950 <main+0x568> jal 004011e0 <sin>
00400958 <main+0x570> cvt.w.d $f4,$f0
00400960 <main+0x578> s.s $f4,4176($30)
../benchmarks/fft_org/fft_org/fft_org2.c:129
        int sm1 = sin ( -delta_angle );
00400968 <main+0x580> lw $3,4172($30)
00400970 <main+0x588> subu $2,$0,$3
00400978 <main+0x590> mtc1 $2,$f0
00400980 <main+0x598> cvt.d.w $f0,$f0
00400988 <main+0x5a0> mov.d $f12,$f0
00400990 <main+0x5a8> jal 004011e0 <sin>
00400998 <main+0x5b0> cvt.w.d $f4,$f0
004009a0 <main+0x5b8> s.s $f4,4180($30)
../benchmarks/fft_org/fft_org/fft_org2.c:130
        int cm2 = cos ( -2 * delta_angle );
004009a8 <main+0x5c0> lw $2,4172($30)
004009b0 <main+0x5c8> addu $3,$0,$2
004009b8 <main+0x5d0> sll $2,$3,0x1
004009c0 <main+0x5d8> subu $3,$0,$2
004009c8 <main+0x5e0> mtc1 $3,$f0
004009d0 <main+0x5e8> cvt.d.w $f0,$f0
004009d8 <main+0x5f0> mov.d $f12,$f0
004009e0 <main+0x5f8> jal 004015d0 <cos>
004009e8 <main+0x600> cvt.w.d $f4,$f0
004009f0 <main+0x608> s.s $f4,4184($30)
../benchmarks/fft_org/fft_org/fft_org2.c:131
        int cm1 = cos ( -delta_angle );
004009f8 <main+0x610> lw $3,4172($30)
00400a00 <main+0x618> subu $2,$0,$3
00400a08 <main+0x620> mtc1 $2,$f0
00400a10 <main+0x628> cvt.d.w $f0,$f0
00400a18 <main+0x630> mov.d $f12,$f0
00400a20 <main+0x638> jal 004015d0 <cos>
00400a28 <main+0x640> cvt.w.d $f4,$f0
00400a30 <main+0x648> s.s $f4,4188($30)
../benchmarks/fft_org/fft_org/fft_org2.c:132
        int w = 2 * cm1;
00400a38 <main+0x650> lw $2,4188($30)
00400a40 <main+0x658> addu $3,$0,$2
00400a48 <main+0x660> sll $2,$3,0x1
00400a50 <main+0x668> sw $2,4192($30)
../benchmarks/fft_org/fft_org/fft_org2.c:136
        int temp;
        int ar[3], ai[3];

        for ( i=0; i <= NumSamples; i += BlockSize )
00400a58 <main+0x670> sw $0,4136($30)
00400a60 <main+0x678> lw $2,4136($30)
00400a68 <main+0x680> lw $3,4128($30)
00400a70 <main+0x688> sltu $2,$3,$2
00400a78 <main+0x690> beq $2,$0,00400a88 <main+0x6a0>
00400a80 <main+0x698> j 00400fa8 <main+0xbc0>
../benchmarks/fft_org/fft_org/fft_org2.c:138
        {
            ar[2] = cm2;
00400a88 <main+0x6a0> lw $2,4184($30)
00400a90 <main+0x6a8> sw $2,4208($30)
../benchmarks/fft_org/fft_org/fft_org2.c:139
            ar[1] = cm1;
00400a98 <main+0x6b0> lw $2,4188($30)
00400aa0 <main+0x6b8> sw $2,4204($30)
../benchmarks/fft_org/fft_org/fft_org2.c:141

            ai[2] = sm2;
00400aa8 <main+0x6c0> lw $2,4176($30)
00400ab0 <main+0x6c8> sw $2,4224($30)
../benchmarks/fft_org/fft_org/fft_org2.c:142
            ai[1] = sm1;
00400ab8 <main+0x6d0> lw $2,4180($30)
00400ac0 <main+0x6d8> sw $2,4220($30)
../benchmarks/fft_org/fft_org/fft_org2.c:144

            for ( j=i, n=0; n < BlockEnd; j++, n++ )
00400ac8 <main+0x6e0> lw $2,4136($30)
00400ad0 <main+0x6e8> sw $2,4140($30)
00400ad8 <main+0x6f0> sw $0,4148($30)
00400ae0 <main+0x6f8> lw $2,4148($30)
00400ae8 <main+0x700> lw $3,4156($30)
00400af0 <main+0x708> sltu $2,$2,$3
00400af8 <main+0x710> bne $2,$0,00400b08 <main+0x720>
00400b00 <main+0x718> j 00400f80 <main+0xb98>
../benchmarks/fft_org/fft_org/fft_org2.c:146
            {
                ar[0] = w*ar[1] - ar[2];
00400b08 <main+0x720> lw $2,4192($30)
00400b10 <main+0x728> lw $3,4204($30)
00400b18 <main+0x730> mult $2,$3
00400b20 <main+0x738> mflo $2
00400b28 <main+0x740> lw $3,4208($30)
00400b30 <main+0x748> subu $2,$2,$3
00400b38 <main+0x750> sw $2,4200($30)
../benchmarks/fft_org/fft_org/fft_org2.c:147
                ar[2] = ar[1];
00400b40 <main+0x758> lw $2,4204($30)
00400b48 <main+0x760> sw $2,4208($30)
../benchmarks/fft_org/fft_org/fft_org2.c:148
                ar[1] = ar[0];
00400b50 <main+0x768> lw $2,4200($30)
00400b58 <main+0x770> sw $2,4204($30)
../benchmarks/fft_org/fft_org/fft_org2.c:150

                ai[0] = w*ai[1] - ai[2];
00400b60 <main+0x778> lw $2,4192($30)
00400b68 <main+0x780> lw $3,4220($30)
00400b70 <main+0x788> mult $2,$3
00400b78 <main+0x790> mflo $2
00400b80 <main+0x798> lw $3,4224($30)
00400b88 <main+0x7a0> subu $2,$2,$3
00400b90 <main+0x7a8> sw $2,4216($30)
../benchmarks/fft_org/fft_org/fft_org2.c:151
                ai[2] = ai[1];
00400b98 <main+0x7b0> lw $2,4220($30)
00400ba0 <main+0x7b8> sw $2,4224($30)
../benchmarks/fft_org/fft_org/fft_org2.c:152
                ai[1] = ai[0];
00400ba8 <main+0x7c0> lw $2,4216($30)
00400bb0 <main+0x7c8> sw $2,4220($30)
../benchmarks/fft_org/fft_org/fft_org2.c:154

                k = j + BlockEnd;
00400bb8 <main+0x7d0> lw $2,4140($30)
00400bc0 <main+0x7d8> lw $3,4156($30)
00400bc8 <main+0x7e0> addu $2,$2,$3
00400bd0 <main+0x7e8> sw $2,4144($30)
../benchmarks/fft_org/fft_org/fft_org2.c:155
                tr = ar[0]*RealOut[k] - ai[0]*ImagOut[k];
00400bd8 <main+0x7f0> lw $2,4144($30)
00400be0 <main+0x7f8> addu $3,$0,$2
00400be8 <main+0x800> sll $2,$3,0x2
00400bf0 <main+0x808> addiu $3,$30,16
00400bf8 <main+0x810> addu $2,$2,$3
00400c00 <main+0x818> addiu $3,$2,2048
00400c08 <main+0x820> lw $2,4200($30)
00400c10 <main+0x828> lw $3,0($3)
00400c18 <main+0x830> mult $2,$3
00400c20 <main+0x838> mflo $2
00400c28 <main+0x840> lw $3,4144($30)
00400c30 <main+0x848> addu $4,$0,$3
00400c38 <main+0x850> sll $3,$4,0x2
00400c40 <main+0x858> addiu $4,$30,16
00400c48 <main+0x860> addu $3,$3,$4
00400c50 <main+0x868> addiu $4,$3,3072
00400c58 <main+0x870> lw $3,4216($30)
00400c60 <main+0x878> lw $4,0($4)
00400c68 <main+0x880> mult $3,$4
00400c70 <main+0x888> mflo $3
00400c78 <main+0x890> subu $2,$2,$3
00400c80 <main+0x898> sw $2,4164($30)
../benchmarks/fft_org/fft_org/fft_org2.c:156
                ti = ar[0]*ImagOut[k] + ai[0]*RealOut[k];
00400c88 <main+0x8a0> lw $2,4144($30)
00400c90 <main+0x8a8> addu $3,$0,$2
00400c98 <main+0x8b0> sll $2,$3,0x2
00400ca0 <main+0x8b8> addiu $3,$30,16
00400ca8 <main+0x8c0> addu $2,$2,$3
00400cb0 <main+0x8c8> addiu $3,$2,3072
00400cb8 <main+0x8d0> lw $2,4200($30)
00400cc0 <main+0x8d8> lw $3,0($3)
00400cc8 <main+0x8e0> mult $2,$3
00400cd0 <main+0x8e8> mflo $2
00400cd8 <main+0x8f0> lw $3,4144($30)
00400ce0 <main+0x8f8> addu $4,$0,$3
00400ce8 <main+0x900> sll $3,$4,0x2
00400cf0 <main+0x908> addiu $4,$30,16
00400cf8 <main+0x910> addu $3,$3,$4
00400d00 <main+0x918> addiu $4,$3,2048
00400d08 <main+0x920> lw $3,4216($30)
00400d10 <main+0x928> lw $4,0($4)
00400d18 <main+0x930> mult $3,$4
00400d20 <main+0x938> mflo $3
00400d28 <main+0x940> addu $2,$2,$3
00400d30 <main+0x948> sw $2,4168($30)
../benchmarks/fft_org/fft_org/fft_org2.c:158

                RealOut[k] = RealOut[j] - tr;
00400d38 <main+0x950> lw $2,4144($30)
00400d40 <main+0x958> addu $3,$0,$2
00400d48 <main+0x960> sll $2,$3,0x2
00400d50 <main+0x968> addiu $4,$30,16
00400d58 <main+0x970> addu $3,$2,$4
00400d60 <main+0x978> addiu $2,$3,2048
00400d68 <main+0x980> lw $3,4140($30)
00400d70 <main+0x988> addu $4,$0,$3
00400d78 <main+0x990> sll $3,$4,0x2
00400d80 <main+0x998> addiu $4,$30,16
00400d88 <main+0x9a0> addu $3,$3,$4
00400d90 <main+0x9a8> addiu $4,$3,2048
00400d98 <main+0x9b0> lw $3,0($4)
00400da0 <main+0x9b8> lw $4,4164($30)
00400da8 <main+0x9c0> subu $3,$3,$4
00400db0 <main+0x9c8> sw $3,0($2)
../benchmarks/fft_org/fft_org/fft_org2.c:159
                ImagOut[k] = ImagOut[j] - ti;
00400db8 <main+0x9d0> lw $2,4144($30)
00400dc0 <main+0x9d8> addu $3,$0,$2
00400dc8 <main+0x9e0> sll $2,$3,0x2
00400dd0 <main+0x9e8> addiu $4,$30,16
00400dd8 <main+0x9f0> addu $3,$2,$4
00400de0 <main+0x9f8> addiu $2,$3,3072
00400de8 <main+0xa00> lw $3,4140($30)
00400df0 <main+0xa08> addu $4,$0,$3
00400df8 <main+0xa10> sll $3,$4,0x2
00400e00 <main+0xa18> addiu $4,$30,16
00400e08 <main+0xa20> addu $3,$3,$4
00400e10 <main+0xa28> addiu $4,$3,3072
00400e18 <main+0xa30> lw $3,0($4)
00400e20 <main+0xa38> lw $4,4168($30)
00400e28 <main+0xa40> subu $3,$3,$4
00400e30 <main+0xa48> sw $3,0($2)
../benchmarks/fft_org/fft_org/fft_org2.c:161

                RealOut[j] += tr;
00400e38 <main+0xa50> lw $2,4140($30)
00400e40 <main+0xa58> addu $3,$0,$2
00400e48 <main+0xa60> sll $2,$3,0x2
00400e50 <main+0xa68> addiu $4,$30,16
00400e58 <main+0xa70> addu $3,$2,$4
00400e60 <main+0xa78> addiu $2,$3,2048
00400e68 <main+0xa80> lw $3,4140($30)
00400e70 <main+0xa88> addu $4,$0,$3
00400e78 <main+0xa90> sll $3,$4,0x2
00400e80 <main+0xa98> addiu $4,$30,16
00400e88 <main+0xaa0> addu $3,$3,$4
00400e90 <main+0xaa8> addiu $4,$3,2048
00400e98 <main+0xab0> lw $3,0($4)
00400ea0 <main+0xab8> lw $4,4164($30)
00400ea8 <main+0xac0> addu $3,$3,$4
00400eb0 <main+0xac8> sw $3,0($2)
../benchmarks/fft_org/fft_org/fft_org2.c:162
                ImagOut[j] += ti;
00400eb8 <main+0xad0> lw $2,4140($30)
00400ec0 <main+0xad8> addu $3,$0,$2
00400ec8 <main+0xae0> sll $2,$3,0x2
00400ed0 <main+0xae8> addiu $4,$30,16
00400ed8 <main+0xaf0> addu $3,$2,$4
00400ee0 <main+0xaf8> addiu $2,$3,3072
00400ee8 <main+0xb00> lw $3,4140($30)
00400ef0 <main+0xb08> addu $4,$0,$3
00400ef8 <main+0xb10> sll $3,$4,0x2
00400f00 <main+0xb18> addiu $4,$30,16
00400f08 <main+0xb20> addu $3,$3,$4
00400f10 <main+0xb28> addiu $4,$3,3072
00400f18 <main+0xb30> lw $3,0($4)
00400f20 <main+0xb38> lw $4,4168($30)
00400f28 <main+0xb40> addu $3,$3,$4
00400f30 <main+0xb48> sw $3,0($2)
../benchmarks/fft_org/fft_org/fft_org2.c:144
00400f38 <main+0xb50> lw $3,4140($30)
00400f40 <main+0xb58> addiu $2,$3,1
00400f48 <main+0xb60> addu $3,$0,$2
00400f50 <main+0xb68> sw $3,4140($30)
00400f58 <main+0xb70> lw $3,4148($30)
00400f60 <main+0xb78> addiu $2,$3,1
00400f68 <main+0xb80> addu $3,$0,$2
00400f70 <main+0xb88> sw $3,4148($30)
00400f78 <main+0xb90> j 00400ae0 <main+0x6f8>
../benchmarks/fft_org/fft_org/fft_org2.c:136
00400f80 <main+0xb98> lw $2,4136($30)
00400f88 <main+0xba0> lw $3,4152($30)
00400f90 <main+0xba8> addu $2,$2,$3
00400f98 <main+0xbb0> sw $2,4136($30)
00400fa0 <main+0xbb8> j 00400a60 <main+0x678>
../benchmarks/fft_org/fft_org/fft_org2.c:166
            }
        }

        BlockEnd = BlockSize;
00400fa8 <main+0xbc0> lw $2,4152($30)
00400fb0 <main+0xbc8> sw $2,4156($30)
../benchmarks/fft_org/fft_org/fft_org2.c:125
00400fb8 <main+0xbd0> lw $2,4152($30)
00400fc0 <main+0xbd8> sll $3,$2,0x1
00400fc8 <main+0xbe0> sw $3,4152($30)
00400fd0 <main+0xbe8> j 00400890 <main+0x4a8>
../benchmarks/fft_org/fft_org/fft_org2.c:170
    }

    /*forward FFT only*/
}
00400fd8 <main+0xbf0> addu $29,$0,$30
00400fe0 <main+0xbf8> lw $31,4240($29)
00400fe8 <main+0xc00> lw $30,4236($29)
00400ff0 <main+0xc08> lw $16,4232($29)
00400ff8 <main+0xc10> l.d $f20,4248($29)
00401000 <main+0xc18> addiu $29,$29,4256
00401008 <main+0xc20> jr $31
