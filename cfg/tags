!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BAD_RANGE	common.h	67;"	d
BB_LAST_ADDR	cfg.h	47;"	d
BB_LAST_INST	cfg.h	46;"	d
BCODE	ss.h	202;"	d
BETWEEN	common.h	59;"	d
BS	ss.h	208;"	d
BasicBlk	cfg.h	/^} BasicBlk;$/;"	t	typeref:struct:_basicblk
BasicBlkPtr	cfg.h	/^typedef struct _basicblk    *BasicBlkPtr;$/;"	t	typeref:struct:_basicblk
CC	Makefile	/^CC=gcc$/;"	m
CFG_H	cfg.h	26;"	d
CFLAGS	Makefile	/^CFLAGS=-g$/;"	m
CHECK_MEM	common.h	51;"	d
COMMON_H	common.h	32;"	d
CONNECT	ss.c	156;"	d	file:
CONNECT	ss.c	160;"	d	file:
CONNECT	ss.c	168;"	d	file:
CONNECT	ss.c	172;"	d	file:
CONNECT	ss.c	180;"	d	file:
CONNECT	ss.c	184;"	d	file:
CONNECT	ss.c	192;"	d	file:
CONNECT	ss.c	196;"	d	file:
CONNECT	ss.h	326;"	d
CONNECT	ss.h	331;"	d
CTRL_CALL	cfg.h	/^enum {CTRL_SEQ, CTRL_COND, CTRL_UNCOND, CTRL_CALL, CTRL_RET};$/;"	e	enum:__anon5
CTRL_COND	cfg.h	/^enum {CTRL_SEQ, CTRL_COND, CTRL_UNCOND, CTRL_CALL, CTRL_RET};$/;"	e	enum:__anon5
CTRL_RET	cfg.h	/^enum {CTRL_SEQ, CTRL_COND, CTRL_UNCOND, CTRL_CALL, CTRL_RET};$/;"	e	enum:__anon5
CTRL_SEQ	cfg.h	/^enum {CTRL_SEQ, CTRL_COND, CTRL_UNCOND, CTRL_CALL, CTRL_RET};$/;"	e	enum:__anon5
CTRL_UNCOND	cfg.h	/^enum {CTRL_SEQ, CTRL_COND, CTRL_UNCOND, CTRL_CALL, CTRL_RET};$/;"	e	enum:__anon5
Call	cfg.h	/^} Call;$/;"	t	typeref:struct:call_t
CfgEdge	cfg.h	/^} CfgEdge;$/;"	t	typeref:struct:_cfgedge
CfgEdgePtr	cfg.h	/^typedef struct _cfgedge	    *CfgEdgePtr;$/;"	t	typeref:struct:_cfgedge
DCGPR	ss.h	393;"	d
DEFINST	prog.c	68;"	d	file:
DEFINST	prog.c	78;"	d	file:
DEFINST	readfile.c	90;"	d	file:
DEFINST	readfile.c	96;"	d	file:
DEFINST	ss.c	143;"	d	file:
DEFINST	ss.c	148;"	d	file:
DEFINST	ss.c	154;"	d	file:
DEFINST	ss.c	158;"	d	file:
DEFINST	ss.c	166;"	d	file:
DEFINST	ss.c	170;"	d	file:
DEFINST	ss.c	178;"	d	file:
DEFINST	ss.c	182;"	d	file:
DEFINST	ss.c	190;"	d	file:
DEFINST	ss.c	194;"	d	file:
DEFINST	ss.h	324;"	d
DEFINST	ss.h	328;"	d
DEFLDST	ss.h	329;"	d
DEFLINK	ss.c	155;"	d	file:
DEFLINK	ss.c	159;"	d	file:
DEFLINK	ss.c	167;"	d	file:
DEFLINK	ss.c	171;"	d	file:
DEFLINK	ss.c	179;"	d	file:
DEFLINK	ss.c	183;"	d	file:
DEFLINK	ss.c	191;"	d	file:
DEFLINK	ss.c	195;"	d	file:
DEFLINK	ss.h	325;"	d
DEFLINK	ss.h	330;"	d
DEF_GLOBALS	main.c	13;"	d	file:
DFCC	ss.h	404;"	d
DFPR_D	ss.h	399;"	d
DFPR_F	ss.h	398;"	d
DFPR_L	ss.h	397;"	d
DGPR	ss.h	392;"	d
DGPR_D	ss.h	394;"	d
DHI	ss.h	402;"	d
DIV0	ss.h	260;"	d
DIV0	ss.h	279;"	d
DLO	ss.h	403;"	d
DNA	ss.h	406;"	d
DTMP	ss.h	405;"	d
ECOFF_EB_MAGIC	ecoff.h	89;"	d
ECOFF_EL_MAGIC	ecoff.h	90;"	d
ECOFF_H	ecoff.h	87;"	d
ECOFF_R_SN_BSS	ecoff.h	223;"	d
ECOFF_R_SN_DATA	ecoff.h	220;"	d
ECOFF_R_SN_RDATA	ecoff.h	219;"	d
ECOFF_R_SN_SBSS	ecoff.h	222;"	d
ECOFF_R_SN_SDATA	ecoff.h	221;"	d
ECOFF_R_SN_TEXT	ecoff.h	218;"	d
ECOFF_STYP_BSS	ecoff.h	230;"	d
ECOFF_STYP_DATA	ecoff.h	227;"	d
ECOFF_STYP_RDATA	ecoff.h	226;"	d
ECOFF_STYP_SBSS	ecoff.h	229;"	d
ECOFF_STYP_SDATA	ecoff.h	228;"	d
ECOFF_STYP_TEXT	ecoff.h	225;"	d
ECOFF_magicSym	ecoff.h	158;"	d
ECOFF_stBlock	ecoff.h	239;"	d
ECOFF_stConstant	ecoff.h	247;"	d
ECOFF_stEnd	ecoff.h	240;"	d
ECOFF_stFile	ecoff.h	243;"	d
ECOFF_stForward	ecoff.h	245;"	d
ECOFF_stGlobal	ecoff.h	233;"	d
ECOFF_stLabel	ecoff.h	237;"	d
ECOFF_stLocal	ecoff.h	236;"	d
ECOFF_stMember	ecoff.h	241;"	d
ECOFF_stNil	ecoff.h	232;"	d
ECOFF_stParam	ecoff.h	235;"	d
ECOFF_stProc	ecoff.h	238;"	d
ECOFF_stRegReloc	ecoff.h	244;"	d
ECOFF_stStatic	ecoff.h	234;"	d
ECOFF_stStaticProc	ecoff.h	246;"	d
ECOFF_stTypedef	ecoff.h	242;"	d
EXTERN	globals.h	13;"	d
EXTERN	globals.h	15;"	d
FALSE	misc.h	108;"	d
FD	ss.h	190;"	d
FDIV	ss.h	291;"	d
FINT	ss.h	292;"	d
FPALIGN	ss.h	267;"	d
FPALIGN	ss.h	281;"	d
FS	ss.h	188;"	d
FT	ss.h	189;"	d
FUClass_NA	ss.h	/^  FUClass_NA = 0,	\/* inst does not use a functional unit *\/$/;"	e	enum:ss_fu_class
F_CALL	ss.h	315;"	d
F_COND	ss.h	304;"	d
F_CTRL	ss.h	302;"	d
F_DIRECT	ss.h	310;"	d
F_DIRJMP	ss.h	313;"	d
F_DISP	ss.h	308;"	d
F_FCOMP	ss.h	301;"	d
F_FPCOND	ss.h	316;"	d
F_ICOMP	ss.h	300;"	d
F_INDIRJMP	ss.h	314;"	d
F_LOAD	ss.h	306;"	d
F_LONGLAT	ss.h	312;"	d
F_MEM	ss.h	305;"	d
F_RR	ss.h	309;"	d
F_STORE	ss.h	307;"	d
F_TRAP	ss.h	311;"	d
F_UNCOND	ss.h	303;"	d
FloatADD	ss.h	/^  FloatADD,		\/* floating point adder\/subtractor *\/$/;"	e	enum:ss_fu_class
FloatCMP	ss.h	/^  FloatCMP,		\/* floating point comparator *\/$/;"	e	enum:ss_fu_class
FloatCVT	ss.h	/^  FloatCVT,		\/* floating point<->integer converter *\/$/;"	e	enum:ss_fu_class
FloatDIV	ss.h	/^  FloatDIV,		\/* floating point divider *\/$/;"	e	enum:ss_fu_class
FloatMULT	ss.h	/^  FloatMULT,		\/* floating point multiplier *\/$/;"	e	enum:ss_fu_class
FloatSQRT	ss.h	/^  FloatSQRT,		\/* floating point square root *\/$/;"	e	enum:ss_fu_class
GLOBALS_H	globals.h	9;"	d
GOOD_RANGE	common.h	66;"	d
IDIV	ss.h	289;"	d
IFAIL	ss.h	240;"	d
IMM	ss.h	193;"	d
IMOD	ss.h	290;"	d
INC_DEC	ss.h	164;"	d
INLINE	misc.h	100;"	d
INLINE	misc.h	96;"	d
INLINE	misc.h	98;"	d
INSIDE	common.h	60;"	d
INST_NOP	cfg.c	/^SS_INST_TYPE	INST_NOP;$/;"	v
INST_NUM	cfg.h	35;"	d
INTALIGN	ss.h	263;"	d
INTALIGN	ss.h	280;"	d
IS_CALL	cfg.h	42;"	d
IS_COND	cfg.h	43;"	d
IS_RETURN	cfg.h	45;"	d
IS_UNCOND	cfg.h	44;"	d
IntALU	ss.h	/^  IntALU,		\/* integer ALU *\/$/;"	e	enum:ss_fu_class
IntDIV	ss.h	/^  IntDIV,		\/* integer divider *\/$/;"	e	enum:ss_fu_class
IntMULT	ss.h	/^  IntMULT,		\/* integer multiplier *\/$/;"	e	enum:ss_fu_class
LESS_GENERAL	common.h	70;"	d
LLHIGH	misc.h	120;"	d
LLLOW	misc.h	121;"	d
MAX	misc.h	113;"	d
MAXINT_VAL	ss.h	230;"	d
MAX_BB	common.h	40;"	d
MAX_BB_IN	cfg.h	30;"	d
MAX_BB_SIZE	cfg.h	40;"	d
MAX_CALLS	cfg.h	37;"	d
MAX_INST	common.h	39;"	d
MAX_PROCS	prog.h	28;"	d
MIN	misc.h	116;"	d
MISC_H	misc.h	77;"	d
MORE_GENERAL	common.h	71;"	d
NA	ss.h	91;"	d
NO_GENERAL	common.h	72;"	d
NUM_FU_CLASSES	ss.h	/^  NUM_FU_CLASSES	\/* total functional unit classes *\/$/;"	e	enum:ss_fu_class
N_ELT	misc.h	136;"	d
OBJ	Makefile	/^OBJ=$(SRC:.c=.o)$/;"	m
OFS	ss.h	205;"	d
OP_MAX	ss.h	/^  OP_MAX	\/* number of opcodes + NA *\/$/;"	e	enum:ss_opcode
OP_NA	ss.h	/^  OP_NA = 0,	\/* NA *\/$/;"	e	enum:ss_opcode
OVER	ss.h	244;"	d
OVER	ss.h	277;"	d
PATH_MAX_INST	common.h	47;"	d
PROC_LAST_ADDR	cfg.h	48;"	d
PROG_H	prog.h	23;"	d
Proc	cfg.h	/^} Proc;$/;"	t	typeref:struct:proc_t
ProcPtr	cfg.h	/^typedef struct proc_t	    *ProcPtr;$/;"	t	typeref:struct:proc_t
Prog	prog.h	/^} Prog;$/;"	t	typeref:struct:prog_t
QUEUE	common.h	102;"	d
QUEUE_ELEMS	common.h	49;"	d
Queue	common.h	/^} Queue;$/;"	t	typeref:struct:queue_t
RD	ss.h	177;"	d
READ_FILE_H	readfile.h	13;"	d
RESET_FLAG	common.h	62;"	d
ROUND_DOWN	misc.h	140;"	d
ROUND_UP	misc.h	139;"	d
RS	ss.h	174;"	d
RS	ss.h	175;"	d
RT	ss.h	176;"	d
RdPort	ss.h	/^  RdPort,		\/* memory read port *\/$/;"	e	enum:ss_fu_class
Rfp	ss.h	182;"	d
Rgp	ss.h	180;"	d
Rsp	ss.h	181;"	d
SAME_GENERAL	common.h	69;"	d
SET_FLAG	common.h	61;"	d
SET_TPC	ss.h	296;"	d
SHAMT	ss.h	185;"	d
SHOW_PROGRESS	common.h	37;"	d
SRC	Makefile	/^SRC=main.c common.c misc.c ss.c readfile.c prog.c cfg.c$/;"	m
SS_ADDR_TYPE	ss.h	/^typedef unsigned int SS_ADDR_TYPE;$/;"	t
SS_BYTE_TYPE	ss.h	/^typedef char SS_BYTE_TYPE;$/;"	t
SS_COMP_NOP	ss.h	149;"	d
SS_COMP_OP	ss.h	146;"	d
SS_COMP_POST_DBL_DEC	ss.h	155;"	d
SS_COMP_POST_DBL_INC	ss.h	154;"	d
SS_COMP_POST_DEC	ss.h	151;"	d
SS_COMP_POST_INC	ss.h	150;"	d
SS_COMP_PRE_DBL_DEC	ss.h	157;"	d
SS_COMP_PRE_DBL_INC	ss.h	156;"	d
SS_COMP_PRE_DEC	ss.h	153;"	d
SS_COMP_PRE_INC	ss.h	152;"	d
SS_COUNTER_TYPE	ss.h	/^typedef double SS_COUNTER_TYPE;$/;"	t
SS_COUNTER_TYPE	ss.h	/^typedef long long SS_COUNTER_TYPE;$/;"	t
SS_DATA_BASE	ss.h	120;"	d
SS_DOUBLE_TYPE	ss.h	/^typedef double SS_DOUBLE_TYPE;$/;"	t
SS_FLOAT_TYPE	ss.h	/^typedef float SS_FLOAT_TYPE;$/;"	t
SS_FRAME_REGNO	ss.h	132;"	d
SS_FU_NAME	ss.h	377;"	d
SS_GP_REGNO	ss.h	130;"	d
SS_H	ss.h	81;"	d
SS_HALF_TYPE	ss.h	/^typedef short SS_HALF_TYPE;$/;"	t
SS_INST_SIZE	ss.h	116;"	d
SS_INST_TYPE	ss.h	/^} SS_INST_TYPE;$/;"	t	typeref:struct:__anon4
SS_MAX_ENVIRON	ss.h	127;"	d
SS_MAX_MASK	ss.h	354;"	d
SS_NOP_INST	ss.c	/^SS_INST_TYPE SS_NOP_INST = { NOP, 0 };$/;"	v
SS_NUM_REGS	ss.h	135;"	d
SS_OPCODE	ss.h	143;"	d
SS_OP_ENUM	ss.h	357;"	d
SS_OP_FLAGS	ss.h	373;"	d
SS_OP_FORMAT	ss.h	365;"	d
SS_OP_FUCLASS	ss.h	369;"	d
SS_OP_NAME	ss.h	361;"	d
SS_PAGE_SIZE	ss.h	124;"	d
SS_PTR_TYPE	ss.h	/^typedef SS_WORD_TYPE SS_PTR_TYPE;$/;"	t
SS_STACK_BASE	ss.h	121;"	d
SS_STACK_REGNO	ss.h	131;"	d
SS_TEXT_BASE	ss.h	119;"	d
SS_TIME_TYPE	ss.h	/^typedef double SS_TIME_TYPE;$/;"	t
SS_TIME_TYPE	ss.h	/^typedef long long SS_TIME_TYPE;$/;"	t
SS_TOTAL_REGS	ss.h	138;"	d
SS_WORD_TYPE	ss.h	/^typedef int SS_WORD_TYPE;$/;"	t
STACK_ELEMS	common.h	48;"	d
SYMCAT	misc.h	126;"	d
SYMCAT	misc.h	129;"	d
SYMCAT	misc.h	131;"	d
Stack	common.h	/^} Stack;$/;"	t	typeref:struct:stack_t
TALIGN	ss.h	271;"	d
TALIGN	ss.h	282;"	d
TARG	ss.h	199;"	d
TARGET	Makefile	/^TARGET=main$/;"	m
TEST_FLAG	common.h	63;"	d
TRUE	misc.h	105;"	d
UIMM	ss.h	196;"	d
UNDER	ss.h	252;"	d
UNDER	ss.h	278;"	d
WL_BASE	ss.h	212;"	d
WL_PROT_MASK	ss.h	213;"	d
WL_SIZE	ss.h	211;"	d
WR_BASE	ss.h	217;"	d
WR_PROT_MASK	ss.h	218;"	d
WR_SIZE	ss.h	216;"	d
WrPort	ss.h	/^  WrPort,		\/* memory write port *\/$/;"	e	enum:ss_fu_class
XX	ss.c	81;"	d	file:
ZFILE	misc.h	/^} ZFILE;$/;"	t	typeref:struct:__anon1
_basicblk	cfg.h	/^typedef struct _basicblk {$/;"	s
_cfgedge	cfg.h	/^typedef struct _cfgedge {$/;"	s
_debug	misc.c	/^_debug(char *file, char *func, int line, char *fmt, ...)$/;"	f
_fatal	misc.c	/^_fatal(char *file, char *func, int line, char *fmt, ...)$/;"	f
_info	misc.c	/^_info(char *file, char *func, int line, char *fmt, ...)$/;"	f
_panic	misc.c	/^_panic(char *file, char *func, int line, char *fmt, ...)$/;"	f
_warn	misc.c	/^_warn(char *file, char *func, int line, char *fmt, ...)$/;"	f
a	ss.h	/^  unsigned int a;		\/* simplescalar opcode (must be unsigned) *\/$/;"	m	struct:__anon4
adr	ecoff.h	/^  unsigned int adr;$/;"	m	struct:ecoff_fdr
adr	ecoff.h	/^  unsigned int adr;$/;"	m	struct:ecoff_pdr
asym	ecoff.h	/^  ecoff_SYMR asym;$/;"	m	struct:ecoff_EXTR
b	ss.h	/^  unsigned int b;		\/* simplescalar unsigned immediate fields *\/$/;"	m	struct:__anon4
b1	cfg.h	/^    BasicBlkPtr	    b1, b2;	    \/\/ b1 -> b2$/;"	m	struct:_cfgedge
b2	cfg.h	/^    BasicBlkPtr	    b1, b2;	    \/\/ b1 -> b2$/;"	m	struct:_cfgedge
base	common.h	/^    void    *base;$/;"	m	struct:queue_t
base	common.h	/^    void    *base;$/;"	m	struct:stack_t
bb_inst_num	cfg.c	/^bb_inst_num(BasicBlk *bb)$/;"	f
bb_type	cfg.c	/^bb_type(BasicBlk *bb)$/;"	f
bbs	cfg.h	/^    BasicBlk	    *bbs;	    \/\/ basic blocks$/;"	m	struct:proc_t
bits	common.c	/^bits(unsigned x)$/;"	f
bsize	ecoff.h	/^  int bsize;$/;"	m	struct:ecoff_aouthdr
bss_start	ecoff.h	/^  int bss_start;$/;"	m	struct:ecoff_aouthdr
btarget_addr	cfg.c	/^btarget_addr(SS_INST_TYPE *inst, SS_ADDR_TYPE pc)$/;"	f
build_call_edges	cfg.c	/^build_call_edges(Prog *prog)$/;"	f	file:
build_cfg_edges	cfg.c	/^build_cfg_edges(Proc *proc)$/;"	f	file:
call_t	cfg.h	/^typedef struct call_t {$/;"	s
callee	cfg.h	/^    ProcPtr	    callee;$/;"	m	struct:call_t
callee_addr	cfg.c	/^callee_addr(SS_INST_TYPE *inst, SS_ADDR_TYPE pc)$/;"	f	file:
caller	cfg.h	/^    SS_INST_TYPE    *caller;$/;"	m	struct:call_t
calls	cfg.h	/^    Call	    calls[MAX_CALLS];$/;"	m	struct:proc_t
capt	common.h	/^    int	    capt;	    \/* capacity *\/$/;"	m	struct:queue_t
capt	common.h	/^    int	    capt;	\/* capacity *\/$/;"	m	struct:stack_t
caux	ecoff.h	/^  int caux;$/;"	m	struct:ecoff_fdr
cbAuxOffset	ecoff.h	/^  int cbAuxOffset;$/;"	m	struct:ecoff_symhdr_t
cbDnOffset	ecoff.h	/^  int cbDnOffset;$/;"	m	struct:ecoff_symhdr_t
cbExtOffset	ecoff.h	/^  int cbExtOffset;$/;"	m	struct:ecoff_symhdr_t
cbFdOffset	ecoff.h	/^  int cbFdOffset;$/;"	m	struct:ecoff_symhdr_t
cbLine	ecoff.h	/^  int cbLine;$/;"	m	struct:ecoff_fdr
cbLine	ecoff.h	/^  int cbLine;$/;"	m	struct:ecoff_symhdr_t
cbLineOffset	ecoff.h	/^  int cbLineOffset;$/;"	m	struct:ecoff_fdr
cbLineOffset	ecoff.h	/^  int cbLineOffset;$/;"	m	struct:ecoff_pdr
cbLineOffset	ecoff.h	/^  int cbLineOffset;$/;"	m	struct:ecoff_symhdr_t
cbOptOffset	ecoff.h	/^  int cbOptOffset;$/;"	m	struct:ecoff_symhdr_t
cbPdOffset	ecoff.h	/^  int cbPdOffset;$/;"	m	struct:ecoff_symhdr_t
cbRfdOffset	ecoff.h	/^  int cbRfdOffset;$/;"	m	struct:ecoff_symhdr_t
cbSs	ecoff.h	/^  int cbSs;$/;"	m	struct:ecoff_fdr
cbSsExtOffset	ecoff.h	/^  int cbSsExtOffset;$/;"	m	struct:ecoff_symhdr_t
cbSsOffset	ecoff.h	/^  int cbSsOffset;$/;"	m	struct:ecoff_symhdr_t
cbSymOffset	ecoff.h	/^  int cbSymOffset;$/;"	m	struct:ecoff_symhdr_t
clear_queue	common.c	/^clear_queue(Queue *queue)$/;"	f
clear_stack	common.c	/^clear_stack(Stack *stack)$/;"	f
cline	ecoff.h	/^  int cline;$/;"	m	struct:ecoff_fdr
cmp_caller	cfg.c	/^cmp_caller(const void *k, const void *datum)$/;"	f
cmp_general	common.c	/^cmp_general(range_t *x, range_t *y)$/;"	f
cmp_proc_sa	cfg.c	/^cmp_proc_sa(const void *key, const void *datum)$/;"	f	file:
code	cfg.h	/^    SS_INST_TYPE    *code;	    \/\/ first instruction$/;"	m	struct:_basicblk
code	cfg.h	/^    SS_INST_TYPE    *code;	    \/\/ first instruction$/;"	m	struct:proc_t
code	prog.h	/^    SS_INST_TYPE    *code;  \/\/ program text$/;"	m	struct:prog_t
code_size	run	/^code_size()$/;"	f
code_size	run.sh	/^code_size()$/;"	f
collect_blks_addr	cfg.c	/^collect_blks_addr(Proc *proc)$/;"	f
collect_procs_addr	cfg.c	/^collect_procs_addr(Prog *prog)$/;"	f
copt	ecoff.h	/^  int copt;$/;"	m	struct:ecoff_fdr
copy_stack	common.c	/^copy_stack(Stack *y, Stack *x)$/;"	f
cpd	ecoff.h	/^  unsigned short cpd;$/;"	m	struct:ecoff_fdr
cprmask	ecoff.h	/^  int cprmask[4];$/;"	m	struct:ecoff_aouthdr
create_bbs	cfg.c	/^create_bbs(Proc *proc)$/;"	f
create_bbs_basic	cfg.c	/^create_bbs_basic(Proc *proc, SS_ADDR_TYPE *bsa, int nbb)$/;"	f
create_cfg_edge	cfg.c	/^create_cfg_edge(BasicBlk *b1, BasicBlk *b2, CfgEdge **out)$/;"	f	file:
create_procs	cfg.c	/^void create_procs(Prog *prog)$/;"	f
create_procs_basic	cfg.c	/^create_procs_basic(Prog *prog, SS_ADDR_TYPE *psa, int nproc)$/;"	f	file:
crfd	ecoff.h	/^  int crfd;$/;"	m	struct:ecoff_fdr
crfd	ecoff.h	/^  int crfd;$/;"	m	struct:ecoff_symhdr_t
csym	ecoff.h	/^  int csym;$/;"	m	struct:ecoff_fdr
data_start	ecoff.h	/^  int data_start;$/;"	m	struct:ecoff_aouthdr
dcode	prog.h	/^    decoded_inst_t  *dcode; \/\/ decoded instructions$/;"	m	struct:prog_t
debug	misc.h	/^static void debug(char *fmt, ...) {}$/;"	f
debug	misc.h	208;"	d
debug	misc.h	224;"	d
debugging	misc.c	/^int debugging = FALSE;$/;"	v
decode_text	prog.c	/^decode_text()$/;"	f
decoded_inst_t	prog.h	/^} decoded_inst_t;$/;"	t	typeref:struct:__anon6
dequeue	common.c	/^dequeue(Queue *queue)$/;"	f
do_cfg	main.c	/^do_cfg(int argc, char ** argv)$/;"	f	file:
dsize	ecoff.h	/^  int dsize;$/;"	m	struct:ecoff_aouthdr
dump_bbs	cfg.c	/^dump_bbs(Proc *proc)$/;"	f
dump_call_graph	cfg.c	/^dump_call_graph(Prog *prog)$/;"	f
dump_cfg	cfg.c	/^dump_cfg(FILE *fptr, Proc *proc)$/;"	f
dump_inst	cfg.c	/^dump_inst(SS_INST_TYPE inst, SS_ADDR_TYPE pc)$/;"	f
dump_procs	cfg.c	/^dump_procs(Proc *procs, int nproc)$/;"	f
dump_vaddr	cfg.c	/^dump_vaddr(SS_ADDR_TYPE *va, int n)$/;"	f
ecoff_EXTR	ecoff.h	/^typedef struct ecoff_EXTR {$/;"	s
ecoff_EXTR	ecoff.h	/^} ecoff_EXTR;$/;"	t	typeref:struct:ecoff_EXTR
ecoff_FDR	ecoff.h	/^} ecoff_FDR;$/;"	t	typeref:struct:ecoff_fdr
ecoff_HDRR	ecoff.h	/^} ecoff_HDRR;$/;"	t	typeref:struct:ecoff_symhdr_t
ecoff_PDR	ecoff.h	/^} ecoff_PDR;$/;"	t	typeref:struct:ecoff_pdr
ecoff_SYMR	ecoff.h	/^typedef struct ecoff_SYMR {$/;"	s
ecoff_SYMR	ecoff.h	/^} ecoff_SYMR;$/;"	t	typeref:struct:ecoff_SYMR
ecoff_aouthdr	ecoff.h	/^struct ecoff_aouthdr {$/;"	s
ecoff_fdr	ecoff.h	/^typedef struct ecoff_fdr {$/;"	s
ecoff_filehdr	ecoff.h	/^struct ecoff_filehdr {$/;"	s
ecoff_pdr	ecoff.h	/^typedef struct ecoff_pdr {$/;"	s
ecoff_scnhdr	ecoff.h	/^struct ecoff_scnhdr {$/;"	s
ecoff_symhdr_t	ecoff.h	/^typedef struct ecoff_symhdr_t {$/;"	s
elapsed_time	misc.c	/^elapsed_time(long sec)$/;"	f
enqueue	common.c	/^enqueue(Queue *queue, void *x)$/;"	f
entry	ecoff.h	/^  int entry;$/;"	m	struct:ecoff_aouthdr
esize	common.h	/^    int	    esize;	    \/* element size *\/$/;"	m	struct:queue_t
esize	common.h	/^    int	    esize;	\/* element size *\/$/;"	m	struct:stack_t
extractl	misc.c	/^extractl(int word,		\/* the word from which to extract *\/$/;"	f
fBigendian	ecoff.h	/^  unsigned fBigendian :1;$/;"	m	struct:ecoff_fdr
fMerge	ecoff.h	/^  unsigned fMerge :1;$/;"	m	struct:ecoff_fdr
fReadin	ecoff.h	/^  unsigned fReadin :1;$/;"	m	struct:ecoff_fdr
f_flags	ecoff.h	/^  unsigned short f_flags;$/;"	m	struct:ecoff_filehdr
f_magic	ecoff.h	/^  unsigned short f_magic;$/;"	m	struct:ecoff_filehdr
f_nscns	ecoff.h	/^  unsigned short f_nscns;$/;"	m	struct:ecoff_filehdr
f_nsyms	ecoff.h	/^  int f_nsyms;$/;"	m	struct:ecoff_filehdr
f_opthdr	ecoff.h	/^  unsigned short f_opthdr;$/;"	m	struct:ecoff_filehdr
f_symptr	ecoff.h	/^  int f_symptr;$/;"	m	struct:ecoff_filehdr
f_timdat	ecoff.h	/^  int f_timdat;$/;"	m	struct:ecoff_filehdr
fatal	misc.h	156;"	d
fatal_hook	misc.c	/^fatal_hook(void (*fn)(FILE *stream))	\/* fatal hook function *\/$/;"	f
fd	misc.h	/^  FILE *fd;$/;"	m	struct:__anon1
filp	globals.h	/^EXTERN FILE	    *filp, *fvar, *fusr;$/;"	v
flags	cfg.h	/^    int		    flags;$/;"	m	struct:_basicblk
flags	cfg.h	/^    int		    flags;$/;"	m	struct:proc_t
frameoffset	ecoff.h	/^  int frameoffset;$/;"	m	struct:ecoff_pdr
framereg	ecoff.h	/^  short framereg;$/;"	m	struct:ecoff_pdr
free_queue	common.c	/^free_queue(Queue *queue)$/;"	f
free_stack	common.c	/^free_stack(Stack *stack)$/;"	f
fregmask	ecoff.h	/^  int fregmask;$/;"	m	struct:ecoff_pdr
fregoffset	ecoff.h	/^  int fregoffset;$/;"	m	struct:ecoff_pdr
ft	misc.h	/^  enum { ft_file, ft_prog } ft;$/;"	m	struct:__anon1	typeref:enum:__anon1::__anon2
ft_file	misc.h	/^  enum { ft_file, ft_prog } ft;$/;"	e	enum:__anon1::__anon2
ft_prog	misc.h	/^  enum { ft_file, ft_prog } ft;$/;"	e	enum:__anon1::__anon2
fu	prog.h	/^    unsigned char   fu;$/;"	m	struct:__anon6
fusr	globals.h	/^EXTERN FILE	    *filp, *fvar, *fusr;$/;"	v
fvar	globals.h	/^EXTERN FILE	    *filp, *fvar, *fusr;$/;"	v
get_callee	cfg.c	/^get_callee(Proc *proc, BasicBlk *bb)$/;"	f
get_dcode	prog.c	/^get_dcode(SS_INST_TYPE *inst)$/;"	f
getcore	misc.c	/^getcore(int nbytes)$/;"	f
gp_value	ecoff.h	/^  int gp_value;$/;"	m	struct:ecoff_aouthdr
gprmask	ecoff.h	/^  int gprmask;$/;"	m	struct:ecoff_aouthdr
head	common.h	/^    void    *head, *tail;   \/* head points to oldest element *\/$/;"	m	struct:queue_t
hi	common.h	/^    int	    lo, hi;$/;"	m	struct:__anon3
hook_fn	misc.c	/^static void (*hook_fn)(FILE *stream) = NULL;$/;"	v	file:
iauxBase	ecoff.h	/^  int iauxBase;$/;"	m	struct:ecoff_fdr
iauxMax	ecoff.h	/^  int iauxMax;$/;"	m	struct:ecoff_symhdr_t
id	cfg.h	/^    int		    id;		    \/\/ block id$/;"	m	struct:_basicblk
id	cfg.h	/^    int		    id;		    \/\/ proc id$/;"	m	struct:proc_t
idnMax	ecoff.h	/^  int idnMax;$/;"	m	struct:ecoff_symhdr_t
iextMax	ecoff.h	/^  int iextMax;$/;"	m	struct:ecoff_symhdr_t
ifd	ecoff.h	/^  short ifd;$/;"	m	struct:ecoff_EXTR
ifdMax	ecoff.h	/^  int ifdMax;$/;"	m	struct:ecoff_symhdr_t
iline	ecoff.h	/^  int iline;$/;"	m	struct:ecoff_pdr
ilineBase	ecoff.h	/^  int ilineBase;$/;"	m	struct:ecoff_fdr
ilineMax	ecoff.h	/^  int ilineMax;$/;"	m	struct:ecoff_symhdr_t
in	cfg.h	/^    CfgEdgePtr	    in[MAX_BB_IN];  \/\/ in edges$/;"	m	struct:_basicblk
in	prog.h	/^    unsigned char   in[3];$/;"	m	struct:__anon6
index	ecoff.h	/^  unsigned index :20;$/;"	m	struct:ecoff_SYMR
info	misc.h	194;"	d
init_queue	common.c	/^init_queue(Queue *queue, int elem_size)$/;"	f
init_stack	common.c	/^init_stack(Stack *stack, int elem_size)$/;"	f
inst_addr	cfg.c	/^inst_addr(SS_INST_TYPE *code, SS_ADDR_TYPE sa, SS_INST_TYPE *inst)$/;"	f
inst_num	common.h	57;"	d
inst_size	common.h	58;"	d
inst_type	cfg.c	/^inst_type(SS_INST_TYPE *inst)$/;"	f
iopt	ecoff.h	/^  int iopt;$/;"	m	struct:ecoff_pdr
ioptBase	ecoff.h	/^  int ioptBase;$/;"	m	struct:ecoff_fdr
ioptMax	ecoff.h	/^  int ioptMax;$/;"	m	struct:ecoff_symhdr_t
ipdFirst	ecoff.h	/^  unsigned short ipdFirst;$/;"	m	struct:ecoff_fdr
ipdMax	ecoff.h	/^  int ipdMax;$/;"	m	struct:ecoff_symhdr_t
is_ctrl	cfg.c	/^is_ctrl(SS_INST_TYPE *inst)$/;"	f	file:
isolated_bb	cfg.c	/^isolated_bb(BasicBlk *bb)$/;"	f
iss	ecoff.h	/^  int iss;$/;"	m	struct:ecoff_SYMR
issBase	ecoff.h	/^  int issBase;$/;"	m	struct:ecoff_fdr
issExtMax	ecoff.h	/^  int issExtMax;$/;"	m	struct:ecoff_symhdr_t
issMax	ecoff.h	/^  int issMax;$/;"	m	struct:ecoff_symhdr_t
isym	ecoff.h	/^  int isym;$/;"	m	struct:ecoff_pdr
isymBase	ecoff.h	/^  int isymBase;$/;"	m	struct:ecoff_fdr
isymMax	ecoff.h	/^  int isymMax;$/;"	m	struct:ecoff_symhdr_t
lang	ecoff.h	/^  unsigned lang :5;$/;"	m	struct:ecoff_fdr
lnHigh	ecoff.h	/^  int lnHigh;$/;"	m	struct:ecoff_pdr
lnLow	ecoff.h	/^  int lnLow;$/;"	m	struct:ecoff_pdr
lo	common.h	/^    int	    lo, hi;$/;"	m	struct:__anon3
log_base2	misc.c	/^log_base2(int n)$/;"	f
lookup_bb	cfg.c	/^lookup_bb(Proc *proc, SS_ADDR_TYPE addr)$/;"	f
lookup_inst	cfg.c	/^lookup_inst(SS_INST_TYPE *code, SS_ADDR_TYPE sa, SS_ADDR_TYPE pc)$/;"	f
lookup_proc	prog.c	/^lookup_proc(SS_ADDR_TYPE pc)$/;"	f
magic	ecoff.h	/^  short magic;$/;"	m	struct:ecoff_aouthdr
magic	ecoff.h	/^  short magic;$/;"	m	struct:ecoff_symhdr_t
main	main.c	/^main(int argc, char **argv)$/;"	f
main_sa	prog.h	/^    SS_ADDR_TYPE    main_sa;\/\/ start address of main (might be in middle of prog$/;"	m	struct:prog_t
my_bsearch	common.c	/^my_bsearch(const void *key, const void *base, size_t n, size_t size,$/;"	f
my_insert	common.c	/^my_insert(const void *x, void *base, void *y, int *nelem, int size)$/;"	f
mystrdup	misc.c	/^mystrdup(char *s)		\/* string to duplicate to heap storage *\/$/;"	f
mystricmp	misc.c	/^mystricmp(char *s1, char *s2)	\/* strings to compare, case insensitive *\/$/;"	f
mystrrchr	misc.c	/^mystrrchr(char *s, char c)$/;"	f
n	cfg.h	/^    CfgEdgePtr	    n, t;	    \/\/ non-taken\/taken edges$/;"	m	struct:_basicblk
nbb	cfg.h	/^    int		    nbb;	    \/\/ number of basic blocks$/;"	m	struct:proc_t
ncall	cfg.h	/^    int		    ncall;	    \/\/ number of calls$/;"	m	struct:proc_t
nproc	prog.h	/^    int		    nproc;  \/\/ number of procedures$/;"	m	struct:prog_t
num_in	cfg.h	/^    int		    num_in;	    \/\/ total in edges$/;"	m	struct:_basicblk
op	prog.h	/^    unsigned short  op;$/;"	m	struct:__anon6
out	prog.h	/^    unsigned char   out[2];$/;"	m	struct:__anon6
panic	misc.h	169;"	d
pcreg	ecoff.h	/^  short pcreg;$/;"	m	struct:ecoff_pdr
print_code	readfile.c	/^void print_code(SS_INST_TYPE *code, int size, unsigned entry)$/;"	f
proc	cfg.h	/^    ProcPtr	    proc;	    \/\/ up-link (proc where it is in)$/;"	m	struct:_basicblk
proc_t	cfg.h	/^typedef struct proc_t {$/;"	s
procs	prog.h	/^    Proc	    procs[MAX_PROCS];$/;"	m	struct:prog_t
prog	globals.h	/^EXTERN Prog	    prog;$/;"	v
prog_name	run	/^prog_name()$/;"	f
prog_name	run.sh	/^prog_name()$/;"	f
prog_t	prog.h	/^typedef struct prog_t {$/;"	s
queue_empty	common.c	/^queue_empty(Queue *queue)$/;"	f
queue_t	common.h	/^typedef struct queue_t {$/;"	s
range_isect	common.c	/^range_isect(range_t *x, range_t *y)$/;"	f
range_t	common.h	/^} range_t;$/;"	t	typeref:struct:__anon3
range_union	common.c	/^range_union(range_t *x, range_t *y)$/;"	f
readcode	readfile.c	/^SS_INST_TYPE * readcode(char *fname, int *start, int *end)$/;"	f
regmask	ecoff.h	/^  int regmask;$/;"	m	struct:ecoff_pdr
regoffset	ecoff.h	/^  int regoffset;$/;"	m	struct:ecoff_pdr
remove_out_edges	cfg.c	/^remove_out_edges(BasicBlk *bb)$/;"	f	file:
reserved	ecoff.h	/^  short reserved;$/;"	m	struct:ecoff_EXTR
reserved	ecoff.h	/^  unsigned reserved :1;$/;"	m	struct:ecoff_SYMR
reserved	ecoff.h	/^  unsigned reserved :24;$/;"	m	struct:ecoff_fdr
reset_procs_flags	cfg.c	/^reset_procs_flags(Prog *prog)$/;"	f	file:
rfdBase	ecoff.h	/^  int rfdBase;$/;"	m	struct:ecoff_fdr
root	prog.h	/^    Proc	    *root;  \/\/ root = main$/;"	m	struct:prog_t
rss	ecoff.h	/^  int rss;$/;"	m	struct:ecoff_fdr
run_prog	run	/^run_prog()$/;"	f
run_prog	run.sh	/^run_prog()$/;"	f
s_flags	ecoff.h	/^  int s_flags;$/;"	m	struct:ecoff_scnhdr
s_lnnoptr	ecoff.h	/^  int s_lnnoptr;$/;"	m	struct:ecoff_scnhdr
s_name	ecoff.h	/^  char s_name[8];$/;"	m	struct:ecoff_scnhdr
s_nlnno	ecoff.h	/^  unsigned short s_nlnno;$/;"	m	struct:ecoff_scnhdr
s_nreloc	ecoff.h	/^  unsigned short s_nreloc;$/;"	m	struct:ecoff_scnhdr
s_paddr	ecoff.h	/^  int s_paddr;$/;"	m	struct:ecoff_scnhdr
s_relptr	ecoff.h	/^  int s_relptr;$/;"	m	struct:ecoff_scnhdr
s_scnptr	ecoff.h	/^  int s_scnptr;$/;"	m	struct:ecoff_scnhdr
s_size	ecoff.h	/^  int s_size;$/;"	m	struct:ecoff_scnhdr
s_vaddr	ecoff.h	/^  int s_vaddr;$/;"	m	struct:ecoff_scnhdr
sa	cfg.h	/^    SS_ADDR_TYPE    sa;		    \/\/ start addr$/;"	m	struct:_basicblk
sa	cfg.h	/^    SS_ADDR_TYPE    sa;		    \/\/ start addr$/;"	m	struct:proc_t
sa	prog.h	/^    SS_ADDR_TYPE    sa;	    \/\/ program start address$/;"	m	struct:prog_t
sc	ecoff.h	/^  unsigned sc :5;$/;"	m	struct:ecoff_SYMR
scan_bbs	cfg.c	/^scan_bbs(Proc *proc, SS_ADDR_TYPE *bsa)$/;"	f	file:
scan_procs	cfg.c	/^scan_procs(Prog *prog, SS_ADDR_TYPE *psa)$/;"	f	file:
ss_aft_tab	ss.c	/^int ss_aft_tab[\/* operand size *\/8][\/* operation *\/5] = {$/;"	v
ss_fore_tab	ss.c	/^int ss_fore_tab[\/* operand size *\/8][\/* operation *\/5] = {$/;"	v
ss_fu2name	ss.c	/^char *ss_fu2name[NUM_FU_CLASSES] = {$/;"	v
ss_fu_class	ss.h	/^enum ss_fu_class {$/;"	g
ss_init_decoder	ss.c	/^ss_init_decoder(void)$/;"	f
ss_lr_masks	ss.c	/^unsigned int ss_lr_masks[] = {$/;"	v
ss_lr_temp	ss.c	/^SS_ADDR_TYPE ss_lr_temp;$/;"	v
ss_mask2op	ss.c	/^enum ss_opcode ss_mask2op[SS_MAX_MASK+1];$/;"	v	typeref:enum:ss_opcode
ss_op2flags	ss.c	/^unsigned int ss_op2flags[OP_MAX] = {$/;"	v
ss_op2format	ss.c	/^char *ss_op2format[OP_MAX] = {$/;"	v
ss_op2fu	ss.c	/^enum ss_fu_class ss_op2fu[OP_MAX] = {$/;"	v	typeref:enum:ss_fu_class
ss_op2name	ss.c	/^char *ss_op2name[OP_MAX] = {$/;"	v
ss_opcode	ss.h	/^enum ss_opcode {$/;"	g
ss_print_insn	ss.c	/^ss_print_insn(SS_INST_TYPE inst,	\/* instruction to disassemble *\/$/;"	f
st	ecoff.h	/^  unsigned st :6;$/;"	m	struct:ecoff_SYMR
stack_empty	common.c	/^stack_empty(Stack *stack)$/;"	f
stack_pop	common.c	/^stack_pop(Stack *stack)$/;"	f
stack_push	common.c	/^stack_push(Stack *stack, void *x)$/;"	f
stack_t	common.h	/^typedef struct stack_t {$/;"	s
strtoul	misc.h	267;"	d
sz	cfg.h	/^    int		    sz;		    \/\/ size (in bytes)$/;"	m	struct:_basicblk
sz	cfg.h	/^    int		    sz;		    \/\/ size (in bytes)$/;"	m	struct:proc_t
sz	prog.h	/^    int		    sz;	    \/\/ program text size (in bytes)$/;"	m	struct:prog_t
t	cfg.h	/^    CfgEdgePtr	    n, t;	    \/\/ non-taken\/taken edges$/;"	m	struct:_basicblk
tail	common.h	/^    void    *head, *tail;   \/* head points to oldest element *\/$/;"	m	struct:queue_t
temp_bs	ss.c	/^SS_ADDR_TYPE temp_bs, temp_rd;$/;"	v
temp_rd	ss.c	/^SS_ADDR_TYPE temp_bs, temp_rd;$/;"	v
text_start	ecoff.h	/^  int text_start;$/;"	m	struct:ecoff_aouthdr
top	common.h	/^    void    *top;$/;"	m	struct:stack_t
tsize	ecoff.h	/^  int tsize;$/;"	m	struct:ecoff_aouthdr
tulika_ss_print_insn	ss.c	/^tulika_ss_print_insn(SS_INST_TYPE inst,	\/* instruction to disassemble *\/$/;"	f
type	cfg.h	/^    int		    type;	    \/\/ branch\/call\/return ...$/;"	m	struct:_basicblk
value	ecoff.h	/^  int value;$/;"	m	struct:ecoff_SYMR
verbose	misc.c	/^int verbose = FALSE;$/;"	v
vstamp	ecoff.h	/^  short vstamp;$/;"	m	struct:ecoff_aouthdr
vstamp	ecoff.h	/^  short vstamp;$/;"	m	struct:ecoff_symhdr_t
warn	misc.h	182;"	d
