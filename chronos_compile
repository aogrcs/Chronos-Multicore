#!/bin/sh

# Check parameters
declare USAGE="\nUsage: $0 <benchmark_name>\n\nThis script compiles the given benchmark with the simplescalar gcc and does further preprocessing needed for the analysis with Chronos."

if (( $# != 1 )); then
  echo -e $USAGE;
  exit 1;
fi;

# Set parameters
declare CHRONOS_PATH=/home/kelter/chronos/multicore/iterative
declare SIMPLESCALAR_GCC_PATH=/home/kelter/chronos/simplescalar/gcc

# Extracts source code part of the assembly.
# (i.e. discards compiler-generated functions, except the initializer at the very beginning)
# For purpose of variable mapping. Initializer section needed to calculate base address.
# Result written to $1.mdis
extractmdis()
{
  # By convention __do_global_dtors() is the first compiler-generated function
  # following the source code functions.
  
  #x=`findstr __do_global_dtors\(\) $1.dis | grep __do_global_dtors\(\) | awk '{ print $1 }'`
  #x=`findstr __libc_init\(\) $1.dis | grep __libc_init\(\) | awk '{ print $1 }'`
  
  declare X=`grep -inr __libc_init\(\) $1.dis | cut -d: -f1`
  
  X=$(($X-1))
  head -$X $1.dis > $1.mdis
  
  
  # Extracts only the assembly instructions corresponding to source code
  # (minus the intermixed source code, source line numbers, and initializer section).
  # For purpose of conflict detection. Will be mapped to basic blocks later on.
  
  sed '/__start/d' $1.mdis | grep ^[0-9] |\
  awk '
  {
    print $1, $3, $4
  }' |\
  tr ',' '\ ' | tr '(' '\ ' | tr ')' '\ ' > $1.md
  
  return $?
}

# from assembly files $1.md and $1.mdis (see extractmdis)
# produces the "argument list" $1.arg
# containing the addresses of the program's start insn, end insn, and start of main function.
# (the rest are irrelevant values used by xianfeng's cfg builder)
getarg()
{
  sed '/nop/d' $1.md > $1.mdt
  
  echo \
  `head -1 $1.mdt | awk '{print $1}'` \
  `tail -1 $1.mdt | awk '{print $1}'` \
  `grep \<main\> $1.mdis | awk '$2 ~ /main/ {print $1}'` \
  32 4 32 10 > $1.arg
  
  rm $1.mdt
  
  return $?
}

# Builds the CFG of the given disassembly
buildcfg()
{
  declare MAIN=${CHRONOS_PATH}/cfg/main

  # Build the CFG
  arg=`head -1 $1.arg`
  $MAIN $1 $arg
    
  # Dump the code size for analysis purposes
  #arg=`head -1 $1.arg`
  #cat $1.arg | awk '{printf("0x%s 0x%s\n", $1, $2)}' \ 
  #           | awk --non-decimal-data '{print $2-$1}'
  
  return $?
}

# Compiles and disassembles the given benchmark
compile()
{
  declare SOURCE=$1.c
  if [ -f "$SOURCE" ]; then
    ${SIMPLESCALAR_GCC_PATH}/bin/sslittle-na-sstrix-gcc -g              \
      -o $SOURCE $SOURCE.c                                           && \
    ${SIMPLESCALAR_GCC_PATH}/bin/sslittle-na-sstrix-objdump -dlS        \ 
      --disassemble-zeroes --prefix-addresses $SOURCE >& $SOURCE.dis && \
    ${SIMPLESCALAR_GCC_PATH}/bin/sslittle-na-sstrix-objdump             \
      -t $SOURCE >& $SOURCE.sym
    return $?
  else
    return 1;
  fi;
}


# Start the work. We assume that the script is called inside of one of the
# benchmark directories. If we do not find the source file then we abort.
declare BENCHMARK=$1
compile $BENCHMARK      && \
extractmdis $BENCHMARK  && \
getarg $BENCHMARK       && \
buildcfg $BENCHMARK
