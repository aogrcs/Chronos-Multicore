#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.50)
AC_INIT(Chronos Multicore Analyzer, 0.1, sudiptac@comp.nus.edu.sg)
AC_CONFIG_SRCDIR([m_cache/header.h])
AC_CONFIG_HEADER([config.h])

chronos_path=$(pwd)
AC_SUBST(chronos_path)
AC_DEFINE_UNQUOTED([chronos_path], ["$chronos_path"], [Define to the path where Chronos is built.])


##### Check external dependencies (User supplied) ##### 

# Single core, non-bus-aware simple scalar simulator
AC_ARG_WITH(sim-singlecore,
        AC_HELP_STRING([--with-sim-singlecore],
               [specify the path to the classical single-core simple scalar simulator (no default value)]),
               [av_cv_sim_singlecore="$withval"], [av_cv_sim_singlecore=""])
# Substitute the path to the simulator in all files that need it
AC_SUBST(av_cv_sim_singlecore)

# Check whether the user omitted an important switch and warn him in this case
if test ! "$av_cv_sim_singlecore"; then
  AC_MSG_WARN([--with-sim-singlecore was not specified: The single core simulator will be unavailable!]);
elif test ! -d "$av_cv_sim_singlecore"; then
  AC_MSG_ERROR([The argument to --with-sim-singlecore was no directory! (Only absolute or relative pathnames will work)]);
fi;


# Single core, bus-aware simple scalar simulator
AC_ARG_WITH(sim-sharedbus,
        AC_HELP_STRING([--with-sim-sharedbus],
               [specify the path to the bus-aware single-core simple scalar simulator (no default value)]),
               [ac_cv_sim_sharedbus="$withval"], [ac_cv_sim_sharedbus=""])
# Substitute the path to the simulator in all files that need it
AC_SUBST(ac_cv_sim_sharedbus)

if test ! "$ac_cv_sim_sharedbus"; then
  AC_MSG_WARN([--with-sim-sharedbus was not specified: The bus-aware single core simulator will be unavailable!]);
elif test ! -d "$ac_cv_sim_sharedbus"; then
  AC_MSG_ERROR([The argument to --with-sim-sharedbus was no directory! (Only absolute or relative pathnames will work)]);
fi;


# Multicore simple scalar simulator
AC_ARG_WITH(sim-multicore,
        AC_HELP_STRING([--with-sim-multicore],
               [specify the path to the multi-core simple scalar simulator (no default value)]),
               [ac_cv_sim_multicore="$withval"], [ac_cv_sim_multicore=""])
# Substitute the path to the simulator in all files that need it
AC_SUBST(ac_cv_sim_multicore)

if test ! "$ac_cv_sim_multicore"; then
  AC_MSG_WARN([--with-sim-multicore was not specified: The multi-core simulator will be unavailable!]);
elif test ! -d "$ac_cv_sim_multicore"; then
  AC_MSG_ERROR([The argument to --with-sim-multicore was no directory! (Only absolute or relative pathnames will work)]);
fi;


# Simple scalar GCC bin-path
AC_ARG_WITH(ss-gcc,
        AC_HELP_STRING([--with-ss-gcc],
               [specify the path to the bin folder of your simple scalar gcc (no default value)]),
               [ac_cv_simplescalar_gcc="$withval"], [ac_cv_simplescalar_gcc=""])
# Substitute the path to the simulator in all files that need it
AC_SUBST(ac_cv_simplescalar_gcc)

if test ! "$ac_cv_simplescalar_gcc"; then
  AC_MSG_WARN([--with-ss-gcc was not specified: The simple scalar compiler will be unavailable!]);
elif test ! -d "$ac_cv_simplescalar_gcc"; then
  AC_MSG_ERROR([The argument to --with-ss-gcc was no directory! (Only absolute or relative pathnames will work)]);
fi;


# Simple scalar GCC bin-path
AC_ARG_WITH(lp-solve,
        AC_HELP_STRING([--with-lp-solve],
               [specify the path to the lp_solve folder (no default value)]),
               [ac_cv_lp_solve="$withval"], [ac_cv_lp_solve=""])
# Supply the path to lp_solve in a define
AC_DEFINE_UNQUOTED([LP_SOLVE_PATH], ["$ac_cv_lp_solve"], [Define to the path of lp_solve.])

if test ! "$ac_cv_lp_solve"; then
  AC_MSG_ERROR([--with-lp-solve was not specified: Chronos will not work without an ILP solver!]);
elif test ! -d "$ac_cv_lp_solve"; then
  AC_MSG_ERROR([The argument to --with-lp-solve was no directory! (Only absolute or relative pathnames will work)]);
fi;



##### Continue with usual autoconf invocations #####

# Tell automake to generate makefiles
AM_INIT_AUTOMAKE

# Checks for programs.
AC_PROG_CXX
AC_PROG_RANLIB

# Checks for libraries.
AC_CHECK_LIB([m], pow)

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([stdlib.h string.h unistd.h, stdio.h, time.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_STDBOOL
AC_TYPE_PID_T
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([bzero floor memmove memset pow strrchr strstr])

# Check which optimization level to use
AC_ARG_WITH(release-quality,
        AC_HELP_STRING([--with-release-quality],
               [set compiler flags to highest optimization level (default=no)]),
                ac_cv_release_quality="$withval", ac_cv_release_quality=no)

if test "$ac_cv_release_quality" = yes; then
  CFLAGS="-O3"
  CXXFLAGS="-O3"
else
  CFLAGS="-O0 -g"
  CXXFLAGS="-O0 -g"
fi
# Set common flags
CFLAGS+=" -Wall -std=c99 -m32"
CXXFLAGS+=" -Wall -m32"

# Enabling Debug mode
AC_ARG_ENABLE(debug,
        AC_HELP_STRING([--enable-debug],
               [enable debug mode (default=yes)]),
                ac_cv_debug="$enableval", ac_cv_debug=yes)

if test "$ac_cv_debug" = yes; then
  AC_DEFINE(DEBUGMACROS, 1, [Define to 1 if you want to enable debugmacros.])
  ac_cv_debugmacros=yes
else
  ac_cv_debugmacros=no
  CFLAGS+=" -DNDEBUG"
  CXXFLAGS+=" -DNDEBUG"
fi

AM_CONDITIONAL([DEBUGMACROS], [test $ac_cv_debugmacros = yes])

# Prefix to debug configuration
AC_ARG_WITH(debugmacro-configuration,
        AC_HELP_STRING([--with-debugmacro-configuration=PATH],
               [Prefix where the debug macro configuration files reside (default=${srcdir}/debugmacros/)]),
                debugmacro_prefix="$withval", debugmacro_prefix="${chronos_path}/debugmacros")
debugmacro_prefix+="/"

AC_DEFINE_UNQUOTED([DEBUGMACRO_CONF], ["$debugmacro_prefix"], [Defines the path to the debug conf files.])

# Specify which Makefiles to construct
AC_CONFIG_FILES([
  Makefile
  cfg/Makefile
  debugmacros/Makefile
  m_cache/Makefile
  m_cache/wcrt/Makefile
  scripts/Makefile])

# List all the files here, which need configuration (as f.e. the scripts) 
AC_CONFIG_FILES([
  scripts/chronos_analyze
  scripts/chronos_compile
  scripts/chronos_simulate
])

AC_OUTPUT
