cscope 15 $HOME/sudiptac/mWork/simplesim-3.0 -q 0000003555 0000728839
	@bitmap.h

52 #i‚de‡
BITMAP_H


53 
	#BITMAP_H


	)

61 
	#BITMAP_SIZE
(
BITS
Ë(((BITS)+31)/32)

	)

62 
	#BITMAP_TYPE
(
BITS
, 
NAME
Ë(NAME)[
	`BITMAP_SIZE
(BITS)]

	)

64 
	tBITMAP_ENT_TYPE
;

65 *
	tBITMAP_PTR_TYPE
;

68 
	#BITMAP_SET_MAP
(
BMAP
, 
SZ
) \

69 { 
i
; i=0; i<(
SZ
); i++Ë(
BMAP
)[i] = 0xffffffff; }

	)

72 
	#BITMAP_CLEAR_MAP
(
BMAP
, 
SZ
) \

73 { 
i
; i=0; i<(
SZ
); i++Ë(
BMAP
)[i] = 0; }

	)

76 
	#BITMAP_SET
(
BMAP
, 
SZ
, 
BIT
) \

77 (((
BMAP
)[(
BIT
)/32] |(1 << ((BITË% 32))), (BMAP))

	)

80 
	#BITMAP_CLEAR
(
BMAP
, 
SZ
, 
BIT
) \

81 (((
BMAP
)[(
BIT
)/32] &~(1 << ((BITË% 32))), (BMAP))

	)

84 
	#BITMAP_COPY
(
DESTMAP
, 
SRCMAP
, 
SZ
) \

85 { 
i
; i=0; i<(
SZ
); i++Ë(
DESTMAP
)[i] = (
SRCMAP
)[i]; }

	)

88 
	#__BITMAP_OP
(
B1
, 
B2
, 
B3
, 
SZ
, 
OP
) \

89 { 
i
; i=0; i<(
SZ
); i++Ë(
B1
)[i] = (
B2
)[i] 
	`OP
 (
B3
)[i]; }

	)

92 
	#BITMAP_IOR
(
B1
, 
B2
, 
B3
, 
SZ
) \

93 
	`__BITMAP_OP
(
B1
, 
B2
, 
B3
, 
SZ
, |)

	)

96 
	#BITMAP_XOR
(
B1
, 
B2
, 
B3
, 
SZ
) \

97 
	`__BITMAP_OP
(
B1
, 
B2
, 
B3
, 
SZ
, ^)

	)

100 
	#BITMAP_AND
(
B1
, 
B2
, 
B3
, 
SZ
) \

101 
	`__BITMAP_OP
(
B1
, 
B2
, 
B3
, 
SZ
, &)

	)

104 
	#BITMAP_NOT
(
B1
, 
B2
, 
SZ
) \

105 { 
i
; i=0; i<(
SZ
); i++Ë(
B1
)[i] = ~((
B2
)[i]); }

	)

108 
	#BITMAP_EMPTY_P
(
BMAP
, 
SZ
) \

109 ({ 
i
, 
ªs
=0; i=0; i<(
SZ
); i++Ëª†|(
BMAP
)[i]; !ªs; })

	)

112 
	#BITMAP_DISJOINT_P
(
B1
, 
B2
, 
SZ
) \

113 ({ 
i
, 
ªs
=0; i=0; i<(
SZ
); i++Ëª†|(
B1
)[i] & (
B2
)[i]; !ªs; })

	)

116 
	#BITMAP_SET_P
(
BMAP
, 
SZ
, 
BIT
) \

117 (((
BMAP
)[(
BIT
)/32] & (1 << ((BITË% 32))Ë!0)

	)

120 
	#BITMAP_CLEAR_P
(
BMAP
, 
SZ
, 
BIT
) \

121 (!
	`BMAP_SET_P
((
BMAP
), (
SZ
), (
BIT
)))

	)

124 
	#BITMAP_COUNT_ONES
(
BMAP
, 
SZ
) \

126 
i
, 
j
, 
n
 = 0; \

127 
i
 = 0; i < (
SZ
) ; i++) \

129 
w‹d
 = (
BMAP
)[
i
]; \

130 
j
=0; j < (()*8); j++) \

132 
√w_vÆ
, 
ﬁd_vÆ
 = 
w‹d
; \

133 
w‹d
 >>= 1; \

134 
√w_vÆ
 = 
w‹d
 << 1; \

135 i‡(
ﬁd_vÆ
 !
√w_vÆ
) \

136 
n
++; \

139 
n
; \

140 })

	)

	@bpred.c

71 
	~<°dio.h
>

72 
	~<°dlib.h
>

73 
	~<m©h.h
>

74 
	~<as£π.h
>

76 
	~"ho°.h
"

77 
	~"misc.h
"

78 
	~"machöe.h
"

79 
	~"b¥ed.h
"

81 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

82 
ef„˘_b¥ed_mis£s
;

88 
b¥ed_t
 *

89 
	$b¥ed_¸óã
(
b¥ed_˛ass
 
˛ass
,

90 
bimod_size
,

91 
l1size
,

92 
l2size
,

93 
mëa_size
,

94 
shi·_width
,

95 
x‹
,

96 
btb_£ts
,

97 
btb_assoc
,

98 
ªt°ack_size
)

100 
b¥ed_t
 *
¥ed
;

102 i‡(!(
¥ed
 = 
	`ˇŒoc
(1, (
b¥ed_t
))))

103 
	`Áèl
("out of virtual memory");

105 
¥ed
->
˛ass
 = class;

107 
˛ass
) {

108 
BPªdComb
:

110 
¥ed
->
dú¥ed
.
bimod
 =

111 
	`b¥ed_dú_¸óã
(
BPªd2bô
, 
bimod_size
, 0, 0, 0);

114 
¥ed
->
dú¥ed
.
twﬁev
 =

115 
	`b¥ed_dú_¸óã
(
BPªd2Levñ
, 
l1size
, 
l2size
, 
shi·_width
, 
x‹
);

118 
¥ed
->
dú¥ed
.
mëa
 =

119 
	`b¥ed_dú_¸óã
(
BPªd2bô
, 
mëa_size
, 0, 0, 0);

123 
BPªd2Levñ
:

124 
¥ed
->
dú¥ed
.
twﬁev
 =

125 
	`b¥ed_dú_¸óã
(
˛ass
, 
l1size
, 
l2size
, 
shi·_width
, 
x‹
);

128 
BPªd2bô
:

129 
¥ed
->
dú¥ed
.
bimod
 =

130 
	`b¥ed_dú_¸óã
(
˛ass
, 
bimod_size
, 0, 0, 0);

132 
BPªdTakí
:

133 
BPªdNŸTakí
:

138 
	`∑nic
("bogusÖredictor class");

142 
˛ass
) {

143 
BPªdComb
:

144 
BPªd2Levñ
:

145 
BPªd2bô
:

147 
i
;

150 i‡(!
btb_£ts
 || (btb_sets & (btb_sets-1)) != 0)

151 
	`Áèl
("number of BTB sets must beÇon-zeroándáÖower ofÅwo");

152 i‡(!
btb_assoc
 || (btb_assoc & (btb_assoc-1)) != 0)

153 
	`Áèl
("BTBássociativity must beÇon-zeroándáÖower ofÅwo");

155 i‡(!(
¥ed
->
btb
.
btb_d©a
 = 
	`ˇŒoc
(
btb_£ts
 * 
btb_assoc
,

156 (
b¥ed_btb_ít_t
))))

157 
	`Áèl
("cannotállocate BTB");

159 
¥ed
->
btb
.
£ts
 = 
btb_£ts
;

160 
¥ed
->
btb
.
assoc
 = 
btb_assoc
;

162 i‡(
¥ed
->
btb
.
assoc
 > 1)

163 
i
=0; i < (
¥ed
->
btb
.
assoc
*¥ed->btb.
£ts
); i++)

165 i‡(
i
 % 
¥ed
->
btb
.
assoc
 !=Öred->btb.assoc - 1)

166 
¥ed
->
btb
.
btb_d©a
[
i
].
√xt
 = &pred->btb.btb_data[i+1];

168 
¥ed
->
btb
.
btb_d©a
[
i
].
√xt
 = 
NULL
;

170 i‡(
i
 % 
¥ed
->
btb
.
assoc
 !=Öred->btb.assoc - 1)

171 
¥ed
->
btb
.
btb_d©a
[
i
+1].
¥ev
 = &pred->btb.btb_data[i];

175 i‡((
ªt°ack_size
 & (retstack_size-1)) != 0)

176 
	`Áèl
("Return-address-stack size must be zero oráÖower ofÅwo");

178 
¥ed
->
ªt°ack
.
size
 = 
ªt°ack_size
;

179 i‡(
ªt°ack_size
)

180 i‡(!(
¥ed
->
ªt°ack
.
°ack
 = 
	`ˇŒoc
(
ªt°ack_size
,

181 (
b¥ed_btb_ít_t
))))

182 
	`Áèl
("cannotállocateÑeturn-address-stack");

183 
¥ed
->
ªt°ack
.
tos
 = 
ªt°ack_size
 - 1;

188 
BPªdTakí
:

189 
BPªdNŸTakí
:

194 
	`∑nic
("bogusÖredictor class");

197  
¥ed
;

198 
	}
}

201 
b¥ed_dú_t
 *

202 
	$b¥ed_dú_¸óã
 (

203 
b¥ed_˛ass
 
˛ass
,

204 
l1size
,

205 
l2size
,

206 
shi·_width
,

207 
x‹
)

209 
b¥ed_dú_t
 *
¥ed_dú
;

210 
˙t
;

213 i‡(!(
¥ed_dú
 = 
	`ˇŒoc
(1, (
b¥ed_dú_t
))))

214 
	`Áèl
("out of virtual memory");

216 
¥ed_dú
->
˛ass
 = class;

218 
˙t
 = -1;

219 
˛ass
) {

220 
BPªd2Levñ
:

222 i‡(!
l1size
 || (l1size & (l1size-1)) != 0)

223 
	`Áèl
("level-1 size, `%d', must beÇon-zeroándáÖower ofÅwo",

224 
l1size
);

225 
¥ed_dú
->
c⁄fig
.
two
.
l1size
 =Ü1size;

227 i‡(!
l2size
 || (l2size & (l2size-1)) != 0)

228 
	`Áèl
("level-2 size, `%d', must beÇon-zeroándáÖower ofÅwo",

229 
l2size
);

230 
¥ed_dú
->
c⁄fig
.
two
.
l2size
 =Ü2size;

231 
¥ed_dú
->
c⁄fig
.
two
.
l2width
 = 0;

232 
tmp_l2size
;

233 
tmp_l2size
 = 
l2size
;Åmp_l2size > 1;Åmp_l2size >>= 1)

234 
¥ed_dú
->
c⁄fig
.
two
.
l2width
++;

236 i‡(!
shi·_width
 || shift_width > 30)

237 
	`Áèl
("shiftÑegister width, `%d', must beÇon-zeroándÖositive",

238 
shi·_width
);

239 
¥ed_dú
->
c⁄fig
.
two
.
shi·_width
 = shift_width;

241 
¥ed_dú
->
c⁄fig
.
two
.
x‹
 = xor;

242 
¥ed_dú
->
c⁄fig
.
two
.
shi·ªgs
 = 
	`ˇŒoc
(
l1size
, ());

243 i‡(!
¥ed_dú
->
c⁄fig
.
two
.
shi·ªgs
)

244 
	`Áèl
("cannotállocate shiftÑegisterÅable");

246 
¥ed_dú
->
c⁄fig
.
two
.
l2èbÀ
 = 
	`ˇŒoc
(
l2size
, ());

247 i‡(!
¥ed_dú
->
c⁄fig
.
two
.
l2èbÀ
)

248 
	`Áèl
("cannotállocate secondÜevelÅable");

259 
˙t
 = 0; c¡ < 
l2size
; cnt++)

260 
¥ed_dú
->
c⁄fig
.
two
.
l2èbÀ
[
˙t
] = 0;

265 
BPªd2bô
:

266 i‡(!
l1size
 || (l1size & (l1size-1)) != 0)

267 
	`Áèl
("2bitÅable size, `%d', must beÇon-zeroándáÖower ofÅwo",

268 
l1size
);

269 
¥ed_dú
->
c⁄fig
.
bimod
.
size
 = 
l1size
;

270 i‡(!(
¥ed_dú
->
c⁄fig
.
bimod
.
èbÀ
 =

271 
	`ˇŒoc
(
l1size
, ())))

272 
	`Áèl
("cannotállocate 2bit storage");

282 
˙t
 = 0; c¡ < 
l2size
; cnt++)

283 
¥ed_dú
->
c⁄fig
.
bimod
.
èbÀ
[
˙t
] = 0;

287 
BPªdTakí
:

288 
BPªdNŸTakí
:

293 
	`∑nic
("bogus branch directionÖredictor class");

296  
¥ed_dú
;

297 
	}
}

301 
	$b¥ed_dú_c⁄fig
(

302 
b¥ed_dú_t
 *
¥ed_dú
,

303 
«me
[],

304 
FILE
 *
°ªam
)

306 
¥ed_dú
->
˛ass
) {

307 
BPªd2Levñ
:

308 
	`Ârötf
(
°ªam
,

310 
«me
, 
¥ed_dú
->
c⁄fig
.
two
.
l1size
,Öªd_dú->c⁄fig.two.
shi·_width
,

311 
¥ed_dú
->
c⁄fig
.
two
.
x‹
 ? "" : "no",Öªd_dú->c⁄fig.two.
l2size
);

314 
BPªd2bô
:

315 
	`Ârötf
(
°ªam
, "pred_dir: %s: 2-bit: %dÉntries, direct-mapped\n",

316 
«me
, 
¥ed_dú
->
c⁄fig
.
bimod
.
size
);

319 
BPªdTakí
:

320 
	`Ârötf
(
°ªam
, "¥ed_dú: %s:Öªdi˘Åakí\n", 
«me
);

323 
BPªdNŸTakí
:

324 
	`Ârötf
(
°ªam
, "¥ed_dú: %s:Öªdi˘ÇŸÅakí\n", 
«me
);

328 
	`∑nic
("bogus branch directionÖredictor class");

330 
	}
}

334 
	$b¥ed_c⁄fig
(
b¥ed_t
 *
¥ed
,

335 
FILE
 *
°ªam
)

337 
¥ed
->
˛ass
) {

338 
BPªdComb
:

339 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
bimod
, "bimod", 
°ªam
);

340 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
twﬁev
, "2Àv", 
°ªam
);

341 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
mëa
, "mëa", 
°ªam
);

342 
	`Ârötf
(
°ªam
, "btb: %d sets x %dássociativity",

343 
¥ed
->
btb
.
£ts
,Öªd->btb.
assoc
);

344 
	`Ârötf
(
°ªam
, "ªt_°ack: %dÉ¡rõs", 
¥ed
->
ªt°ack
.
size
);

347 
BPªd2Levñ
:

348 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
twﬁev
, "2Àv", 
°ªam
);

349 
	`Ârötf
(
°ªam
, "btb: %d sets x %dássociativity",

350 
¥ed
->
btb
.
£ts
,Öªd->btb.
assoc
);

351 
	`Ârötf
(
°ªam
, "ªt_°ack: %dÉ¡rõs", 
¥ed
->
ªt°ack
.
size
);

354 
BPªd2bô
:

355 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
bimod
, "bimod", 
°ªam
);

356 
	`Ârötf
(
°ªam
, "btb: %d sets x %dássociativity",

357 
¥ed
->
btb
.
£ts
,Öªd->btb.
assoc
);

358 
	`Ârötf
(
°ªam
, "ªt_°ack: %dÉ¡rõs", 
¥ed
->
ªt°ack
.
size
);

361 
BPªdTakí
:

362 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
bimod
, "èkí", 
°ªam
);

364 
BPªdNŸTakí
:

365 
	`b¥ed_dú_c⁄fig
 (
¥ed
->
dú¥ed
.
bimod
, "nŸèkí", 
°ªam
);

369 
	`∑nic
("bogus branchÖredictor class");

371 
	}
}

375 
	$b¥ed_°©s
(
b¥ed_t
 *
¥ed
,

376 
FILE
 *
°ªam
)

378 
	`Ârötf
(
°ªam
, "pred:áddr-predictionÑate = %f\n",

379 ()
¥ed
->
addr_hôs
/()’ªd->addr_hôs+¥ed->
mis£s
));

380 
	`Ârötf
(
°ªam
, "pred: dir-predictionÑate = %f\n",

381 ()
¥ed
->
dú_hôs
/()’ªd->dú_hôs+¥ed->
mis£s
));

382 
	}
}

386 
	$b¥ed_ªg_°©s
(
b¥ed_t
 *
¥ed
,

387 
°©_sdb_t
 *
sdb
)

389 
buf
[512], 
buf1
[512], *
«me
;

392 
¥ed
->
˛ass
)

394 
BPªdComb
:

395 
«me
 = "bpred_comb";

397 
BPªd2Levñ
:

398 
«me
 = "bpred_2lev";

400 
BPªd2bô
:

401 
«me
 = "bpred_bimod";

403 
BPªdTakí
:

404 
«me
 = "bpred_taken";

406 
BPªdNŸTakí
:

407 
«me
 = "bpred_nottaken";

410 
	`∑nic
("bogus branchÖredictor class");

413 
	`•rötf
(
buf
, "%s.lookups", 
«me
);

414 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÇumber of bpredÜookups",

415 &
¥ed
->
lookups
, 0, 
NULL
);

416 
	`•rötf
(
buf
, "%s.upd©es", 
«me
);

417 
	`•rötf
(
buf1
, "%s.dú_hô†+ %s.mis£s", 
«me
,Çame);

418 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "tŸÆÇumbî o‡upd©es", 
buf1
, "%12.0f");

419 
	`•rötf
(
buf
, "%s.addr_hôs", 
«me
);

420 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÇumber ofáddress-predicted hits",

421 &
¥ed
->
addr_hôs
, 0, 
NULL
);

422 
	`•rötf
(
buf
, "%s.dú_hôs", 
«me
);

423 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

426 &
¥ed
->
dú_hôs
, 0, 
NULL
);

427 i‡(
¥ed
->
˛ass
 =
BPªdComb
)

429 
	`•rötf
(
buf
, "%s.u£d_bimod", 
«me
);

430 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

432 &
¥ed
->
u£d_bimod
, 0, 
NULL
);

433 
	`•rötf
(
buf
, "%s.u£d_2Àv", 
«me
);

434 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

436 &
¥ed
->
u£d_2Àv
, 0, 
NULL
);

438 
	`•rötf
(
buf
, "%s.mis£s", 
«me
);

439 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "tŸÆÇumbî o‡mis£s", &
¥ed
->
mis£s
, 0, 
NULL
);

440 
	`•rötf
(
buf
, "%s.jr_hôs", 
«me
);

441 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

443 &
¥ed
->
jr_hôs
, 0, 
NULL
);

444 
	`•rötf
(
buf
, "%s.jr_£í", 
«me
);

445 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

447 &
¥ed
->
jr_£í
, 0, 
NULL
);

448 
	`•rötf
(
buf
, "%s.jr_n⁄_øs_hôs.PP", 
«me
);

449 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

451 &
¥ed
->
jr_n⁄_øs_hôs
, 0, 
NULL
);

452 
	`•rötf
(
buf
, "%s.jr_n⁄_øs_£í.PP", 
«me
);

453 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

455 &
¥ed
->
jr_n⁄_øs_£í
, 0, 
NULL
);

456 
	`•rötf
(
buf
, "%s.b¥ed_addr_øã", 
«me
);

457 
	`•rötf
(
buf1
, "%s.addr_hô†/ %s.upd©es", 
«me
,Çame);

458 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
,

460 
buf1
, "%9.4f");

461 
	`•rötf
(
buf
, "%s.b¥ed_dú_øã", 
«me
);

462 
	`•rötf
(
buf1
, "%s.dú_hô†/ %s.upd©es", 
«me
,Çame);

463 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
,

465 
buf1
, "%9.4f");

466 
	`•rötf
(
buf
, "%s.b¥ed_jr_øã", 
«me
);

467 
	`•rötf
(
buf1
, "%s.jr_hô†/ %s.jr_£í", 
«me
,Çame);

468 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
,

470 
buf1
, "%9.4f");

471 
	`•rötf
(
buf
, "%s.b¥ed_jr_n⁄_øs_øã.PP", 
«me
);

472 
	`•rötf
(
buf1
, "%s.jr_n⁄_øs_hôs.PP / %s.jr_n⁄_øs_£í.PP", 
«me
,Çame);

473 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
,

475 
buf1
, "%9.4f");

476 
	`•rötf
(
buf
, "%s.ªt°ack_pushes", 
«me
);

477 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

479 &
¥ed
->
ªt°ack_pushes
, 0, 
NULL
);

480 
	`•rötf
(
buf
, "%s.ªt°ack_p›s", 
«me
);

481 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

483 &
¥ed
->
ªt°ack_p›s
, 0, 
NULL
);

484 
	`•rötf
(
buf
, "%s.u£d_øs.PP", 
«me
);

485 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

487 &
¥ed
->
u£d_øs
, 0, 
NULL
);

488 
	`•rötf
(
buf
, "%s.øs_hôs.PP", 
«me
);

489 
	`°©_ªg_cou¡î
(
sdb
, 
buf
,

491 &
¥ed
->
øs_hôs
, 0, 
NULL
);

492 
	`•rötf
(
buf
, "%s.øs_øã.PP", 
«me
);

493 
	`•rötf
(
buf1
, "%s.øs_hôs.PP / %s.u£d_øs.PP", 
«me
,Çame);

494 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
,

496 
buf1
, "%9.4f");

497 
	}
}

500 
	$b¥ed_a·î_¥imög
(
b¥ed_t
 *
b¥ed
)

502 i‡(
b¥ed
 =
NULL
)

505 
b¥ed
->
lookups
 = 0;

506 
b¥ed
->
addr_hôs
 = 0;

507 
b¥ed
->
dú_hôs
 = 0;

508 
b¥ed
->
u£d_øs
 = 0;

509 
b¥ed
->
u£d_bimod
 = 0;

510 
b¥ed
->
u£d_2Àv
 = 0;

511 
b¥ed
->
jr_hôs
 = 0;

512 
b¥ed
->
jr_£í
 = 0;

513 
b¥ed
->
mis£s
 = 0;

514 
b¥ed
->
ªt°ack_p›s
 = 0;

515 
b¥ed
->
ªt°ack_pushes
 = 0;

516 
b¥ed
->
øs_hôs
 = 0;

517 
	}
}

519 
	#BIMOD_HASH
(
PRED
, 
ADDR
) \

520 ((((
ADDR
Ë>> 19Ë^ ((ADDRË>> 
MD_BR_SHIFT
)Ë& ((
PRED
)->
c⁄fig
.
bimod
.
size
-1))

	)

525 
	$b¥ed_dú_lookup
(
b¥ed_dú_t
 *
¥ed_dú
,

526 
md_addr_t
 
baddr
)

528 *
p
 = 
NULL
;

531 
¥ed_dú
->
˛ass
) {

532 
BPªd2Levñ
:

534 
l1ödex
, 
l2ödex
;

537 
l1ödex
 = (
baddr
 >> 
MD_BR_SHIFT
Ë& (
¥ed_dú
->
c⁄fig
.
two
.
l1size
 - 1);

538 
l2ödex
 = 
¥ed_dú
->
c⁄fig
.
two
.
shi·ªgs
[
l1ödex
];

539 i‡(
¥ed_dú
->
c⁄fig
.
two
.
x‹
)

546 
l2ödex
 = ((÷2ödex ^ (
baddr
 >> 
MD_BR_SHIFT
))

547 & ((1 << 
¥ed_dú
->
c⁄fig
.
two
.
shi·_width
) - 1))

548 | ((
baddr
 >> 
MD_BR_SHIFT
)

549 << 
¥ed_dú
->
c⁄fig
.
two
.
shi·_width
));

552 
l2ödex
 = (l2ödex << (
¥ed_dú
->
c⁄fig
.
two
.
l2width
 -

553 
¥ed_dú
->
c⁄fig
.
two
.
shi·_width
)Ë^ (
baddr
 >> 
MD_BR_SHIFT
);

558 
l2ödex
 =

559 
l2ödex


560 | ((
baddr
 >> 
MD_BR_SHIFT
Ë<< 
¥ed_dú
->
c⁄fig
.
two
.
shi·_width
);

562 
l2ödex
 =Ü2ödex & (
¥ed_dú
->
c⁄fig
.
two
.
l2size
 - 1);

565 
p
 = &
¥ed_dú
->
c⁄fig
.
two
.
l2èbÀ
[
l2ödex
];

568 
BPªd2bô
:

569 
p
 = &
¥ed_dú
->
c⁄fig
.
bimod
.
èbÀ
[
	`BIMOD_HASH
’ªd_dú, 
baddr
)];

571 
BPªdTakí
:

572 
BPªdNŸTakí
:

575 
	`∑nic
("bogus branch directionÖredictor class");

578  (*)
p
;

579 
	}
}

588 
md_addr_t


589 
	$b¥ed_lookup
(
b¥ed_t
 *
¥ed
,

590 
md_addr_t
 
baddr
,

591 
md_addr_t
 
bèrgë
,

592 
md_›code
 
›
,

593 
is_ˇŒ
,

594 
is_ªtu∫
,

595 
b¥ed_upd©e_t
 *
dú_upd©e_±r
,

596 *
°ack_ªcovî_idx
)

599 
b¥ed_btb_ít_t
 *
pbtb
 = 
NULL
;

600 
ödex
, 
i
;

602 i‡(!
dú_upd©e_±r
)

603 
	`∑nic
("no bpred updateÑecord");

606 i‡(!(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
))

609 
¥ed
->
lookups
++;

611 
dú_upd©e_±r
->
dú
.
øs
 = 
FALSE
;

612 
dú_upd©e_±r
->
pdú1
 = 
NULL
;

613 
dú_upd©e_±r
->
pdú2
 = 
NULL
;

614 
dú_upd©e_±r
->
pmëa
 = 
NULL
;

616 
¥ed
->
˛ass
) {

617 
BPªdComb
:

618 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) != (F_CTRL|F_UNCOND))

620 *
bimod
, *
twﬁev
, *
mëa
;

621 
bimod
 = 
	`b¥ed_dú_lookup
 (
¥ed
->
dú¥ed
.bimod, 
baddr
);

622 
twﬁev
 = 
	`b¥ed_dú_lookup
 (
¥ed
->
dú¥ed
.twﬁev, 
baddr
);

623 
mëa
 = 
	`b¥ed_dú_lookup
 (
¥ed
->
dú¥ed
.mëa, 
baddr
);

624 
dú_upd©e_±r
->
pmëa
 = 
mëa
;

625 
dú_upd©e_±r
->
dú
.
mëa
 = (*meta >= 2);

626 
dú_upd©e_±r
->
dú
.
bimod
 = (*bimod >= 2);

627 
dú_upd©e_±r
->
dú
.
twﬁev
 = (*twolev >= 2);

628 i‡(*
mëa
 >= 2)

630 
dú_upd©e_±r
->
pdú1
 = 
twﬁev
;

631 
dú_upd©e_±r
->
pdú2
 = 
bimod
;

635 
dú_upd©e_±r
->
pdú1
 = 
bimod
;

636 
dú_upd©e_±r
->
pdú2
 = 
twﬁev
;

640 
BPªd2Levñ
:

641 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) != (F_CTRL|F_UNCOND))

643 
dú_upd©e_±r
->
pdú1
 =

644 
	`b¥ed_dú_lookup
 (
¥ed
->
dú¥ed
.
twﬁev
, 
baddr
);

647 
BPªd2bô
:

648 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) != (F_CTRL|F_UNCOND))

650 
dú_upd©e_±r
->
pdú1
 =

651 
	`b¥ed_dú_lookup
 (
¥ed
->
dú¥ed
.
bimod
, 
baddr
);

654 
BPªdTakí
:

655  
bèrgë
;

656 
BPªdNŸTakí
:

657 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) != (F_CTRL|F_UNCOND))

659  
baddr
 + (
md_ö°_t
);

663  
bèrgë
;

666 
	`∑nic
("bogusÖredictor class");

677 i‡(
¥ed
->
ªt°ack
.
size
)

678 *
°ack_ªcovî_idx
 = 
¥ed
->
ªt°ack
.
tos
;

680 *
°ack_ªcovî_idx
 = 0;

683 i‡(
is_ªtu∫
 && 
¥ed
->
ªt°ack
.
size
)

685 
md_addr_t
 
èrgë
 = 
¥ed
->
ªt°ack
.
°ack
[¥ed->ªt°ack.
tos
].target;

686 
¥ed
->
ªt°ack
.
tos
 = (¥ed->ªt°ack.to†+Öªd->ªt°ack.
size
 - 1)

687 % 
¥ed
->
ªt°ack
.
size
;

688 
¥ed
->
ªt°ack_p›s
++;

689 
dú_upd©e_±r
->
dú
.
øs
 = 
TRUE
;

690  
èrgë
;

693 #i‚de‡
RAS_BUG_COMPATIBLE


695 i‡(
is_ˇŒ
 && 
¥ed
->
ªt°ack
.
size
)

697 
¥ed
->
ªt°ack
.
tos
 = (¥ed->ªt°ack.to†+ 1)%Öªd->ªt°ack.
size
;

698 
¥ed
->
ªt°ack
.
°ack
[¥ed->ªt°ack.
tos
].
èrgë
 =

699 
baddr
 + (
md_ö°_t
);

700 
¥ed
->
ªt°ack_pushes
++;

705 
ödex
 = (
baddr
 >> 
MD_BR_SHIFT
Ë& (
¥ed
->
btb
.
£ts
 - 1);

707 i‡(
¥ed
->
btb
.
assoc
 > 1)

709 
ödex
 *
¥ed
->
btb
.
assoc
;

712 
i
 = 
ödex
; i < (ödex+
¥ed
->
btb
.
assoc
) ; i++)

713 i‡(
¥ed
->
btb
.
btb_d©a
[
i
].
addr
 =
baddr
)

716 
pbtb
 = &
¥ed
->
btb
.
btb_d©a
[
i
];

722 
pbtb
 = &
¥ed
->
btb
.
btb_d©a
[
ödex
];

723 i‡(
pbtb
->
addr
 !
baddr
)

724 
pbtb
 = 
NULL
;

732 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) == (F_CTRL|F_UNCOND))

734  (
pbtb
 ?Öbtb->
èrgë
 : 1);

738 i‡(
pbtb
 =
NULL
)

746  ((*(
dú_upd©e_±r
->
pdú1
) >= 2)

750  *(
dú_upd©e_±r
->
pdú1
);

760  ((*(
dú_upd©e_±r
->
pdú1
) >= 2)

761 ? 
pbtb
->
èrgë


764 i‡(*(
dú_upd©e_±r
->
pdú1
) == 1)

765  
pbtb
->
èrgë
;

769 
	}
}

776 
	$b¥ed_ªcovî
(
b¥ed_t
 *
¥ed
,

777 
md_addr_t
 
baddr
,

778 
°ack_ªcovî_idx
)

781 i‡(
¥ed
 =
NULL
)

784 
¥ed
->
ªt°ack
.
tos
 = 
°ack_ªcovî_idx
;

785 
	}
}

796 
	$b¥ed_upd©e
(
b¥ed_t
 *
¥ed
,

797 
md_addr_t
 
baddr
,

798 
md_addr_t
 
bèrgë
,

799 
èkí
,

800 
¥ed_èkí
,

801 
c‹ª˘
,

802 
md_›code
 
›
,

803 
b¥ed_upd©e_t
 *
dú_upd©e_±r
)

805 
b¥ed_btb_ít_t
 *
pbtb
 = 
NULL
;

806 
b¥ed_btb_ít_t
 *
Ãuhód
 = 
NULL
, *
Ãuôem
 = NULL;

807 
ödex
, 
i
;

811 i‡(!(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
))

816 i‡(
c‹ª˘
)

817 
¥ed
->
addr_hôs
++;

819 i‡(!!
¥ed_èkí
 =!!
èkí
)

820 
¥ed
->
dú_hôs
++;

822 
¥ed
->
mis£s
++;

823 i‡((
baddr
 >
°¨t_addr
Ë&& (badd∏< 
íd_addr
)) {

824 
ef„˘_b¥ed_mis£s
++;

829 i‡(
dú_upd©e_±r
->
dú
.
øs
)

831 
¥ed
->
u£d_øs
++;

832 i‡(
c‹ª˘
)

833 
¥ed
->
øs_hôs
++;

835 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_COND
)) == (F_CTRL|F_COND))

837 i‡(
dú_upd©e_±r
->
dú
.
mëa
)

838 
¥ed
->
u£d_2Àv
++;

840 
¥ed
->
u£d_bimod
++;

845 i‡(
	`MD_IS_INDIR
(
›
))

847 
¥ed
->
jr_£í
++;

848 i‡(
c‹ª˘
)

849 
¥ed
->
jr_hôs
++;

851 i‡(!
dú_upd©e_±r
->
dú
.
øs
)

853 
¥ed
->
jr_n⁄_øs_£í
++;

854 i‡(
c‹ª˘
)

855 
¥ed
->
jr_n⁄_øs_hôs
++;

865 i‡(
¥ed
->
˛ass
 =
BPªdNŸTakí
 ||Öªd->˛as†=
BPªdTakí
)

873 #ifde‡
RAS_BUG_COMPATIBLE


875 i‡(
	`MD_IS_CALL
(
›
Ë&& 
¥ed
->
ªt°ack
.
size
)

877 
¥ed
->
ªt°ack
.
tos
 = (¥ed->ªt°ack.to†+ 1)%Öªd->ªt°ack.
size
;

878 
¥ed
->
ªt°ack
.
°ack
[¥ed->ªt°ack.
tos
].
èrgë
 =

879 
baddr
 + (
md_ö°_t
);

880 
¥ed
->
ªt°ack_pushes
++;

885 i‡((
baddr
 < 
°¨t_addr
Ë|| (badd∏>
íd_addr
))

890 i‡((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) != (F_CTRL|F_UNCOND) &&

891 (
¥ed
->
˛ass
 =
BPªd2Levñ
 ||Öªd->˛as†=
BPªdComb
))

893 
l1ödex
, 
shi·_ªg
;

896 
l1ödex
 =

897 (
baddr
 >> 
MD_BR_SHIFT
Ë& (
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
l1size
 - 1);

898 
shi·_ªg
 =

899 (
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
shi·ªgs
[
l1ödex
] << 1Ë| (!!
èkí
);

900 
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
shi·ªgs
[
l1ödex
] =

901 
shi·_ªg
 & ((1 << 
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
shi·_width
) - 1);

905 i‡(
èkí
)

907 
ödex
 = (
baddr
 >> 
MD_BR_SHIFT
Ë& (
¥ed
->
btb
.
£ts
 - 1);

909 i‡(
¥ed
->
btb
.
assoc
 > 1)

911 
ödex
 *
¥ed
->
btb
.
assoc
;

915 
i
 = 
ödex
; i < (ödex+
¥ed
->
btb
.
assoc
) ; i++)

917 i‡(
¥ed
->
btb
.
btb_d©a
[
i
].
addr
 =
baddr
)

920 
	`as£π
(!
pbtb
);

921 
pbtb
 = &
¥ed
->
btb
.
btb_d©a
[
i
];

924 
	`das£π
(
¥ed
->
btb
.
btb_d©a
[
i
].
¥ev


925 !
¥ed
->
btb
.
btb_d©a
[
i
].
√xt
);

926 i‡(
¥ed
->
btb
.
btb_d©a
[
i
].
¥ev
 =
NULL
)

929 
	`das£π
(
Ãuhód
 =
NULL
);

930 
Ãuhód
 = &
¥ed
->
btb
.
btb_d©a
[
i
];

932 i‡(
¥ed
->
btb
.
btb_d©a
[
i
].
√xt
 =
NULL
)

935 
	`das£π
(
Ãuôem
 =
NULL
);

936 
Ãuôem
 = &
¥ed
->
btb
.
btb_d©a
[
i
];

939 
	`das£π
(
Ãuhód
 && 
Ãuôem
);

941 i‡(!
pbtb
)

943 
pbtb
 = 
Ãuôem
;

949 i‡(
pbtb
 !
Ãuhód
)

952 i‡(
pbtb
->
¥ev
)

953 
pbtb
->
¥ev
->
√xt
 =Öbtb->next;

954 i‡(
pbtb
->
√xt
)

955 
pbtb
->
√xt
->
¥ev
 =Öbtb->prev;

957 
pbtb
->
√xt
 = 
Ãuhód
;

958 
pbtb
->
¥ev
 = 
NULL
;

959 
Ãuhód
->
¥ev
 = 
pbtb
;

960 
	`das£π
(
pbtb
->
¥ev
 ||Öbtb->
√xt
);

961 
	`das£π
(
pbtb
->
¥ev
 !pbtb->
√xt
);

966 
pbtb
 = &
¥ed
->
btb
.
btb_d©a
[
ödex
];

970 
ii
;

971 
	`¥ötf
("%x: ", 
baddr
);

972 
ii
 = 0; iò< 
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
l2size
; ii++) {

973 
	`¥ötf
("%d ", 
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
l2èbÀ
[
ii
]);

975 
	`¥ötf
("\n");

985 i‡(
dú_upd©e_±r
->
pdú1
)

987 i‡(
èkí
)

994 i‡(*
dú_upd©e_±r
->
pdú1
 < 3)

995 ++*
dú_upd©e_±r
->
pdú1
;

997 *
dú_upd©e_±r
->
pdú1
 = 1;

1006 i‡(*
dú_upd©e_±r
->
pdú1
 > 0)

1007 --*
dú_upd©e_±r
->
pdú1
;

1009 *
dú_upd©e_±r
->
pdú1
 = 0;

1014 i‡(
dú_upd©e_±r
->
pdú2
)

1017 i‡(
èkí
)

1024 i‡(*
dú_upd©e_±r
->
pdú2
 < 3)

1025 ++*
dú_upd©e_±r
->
pdú2
;

1027 *
dú_upd©e_±r
->
pdú2
 = 1;

1036 i‡(*
dú_upd©e_±r
->
pdú2
 > 0)

1037 --*
dú_upd©e_±r
->
pdú2
;

1039 *
dú_upd©e_±r
->
pdú2
 = 0;

1044 i‡(
dú_upd©e_±r
->
pmëa
)

1046 i‡(
dú_upd©e_±r
->
dú
.
bimod
 !dú_upd©e_±r->dú.
twﬁev
)

1049 i‡(
dú_upd©e_±r
->
dú
.
twﬁev
 =()
èkí
)

1057 i‡(*
dú_upd©e_±r
->
pmëa
 < 3)

1058 ++*
dú_upd©e_±r
->
pmëa
;

1060 *
dú_upd©e_±r
->
pmëa
 = 1;

1070 i‡(*
dú_upd©e_±r
->
pmëa
 > 0)

1071 --*
dú_upd©e_±r
->
pmëa
;

1073 
dú_upd©e_±r
->
pmëa
 = 0;

1079 i‡(
pbtb
)

1082 
	`das£π
(
èkí
);

1084 i‡(
pbtb
->
addr
 =
baddr
)

1086 i‡(!
c‹ª˘
)

1087 
pbtb
->
èrgë
 = 
bèrgë
;

1092 
pbtb
->
addr
 = 
baddr
;

1093 
pbtb
->
›
 = op;

1094 
pbtb
->
èrgë
 = 
bèrgë
;

1097 
	}
}

	@bpred.h

52 #i‚de‡
BPRED_H


53 
	#BPRED_H


	)

55 
	#das£π
(
a
Ë
	`as£π
◊)

	)

57 
	~<°dio.h
>

59 
	~"ho°.h
"

60 
	~"misc.h
"

61 
	~"machöe.h
"

62 
	~"°©s.h
"

101 
	eb¥ed_˛ass
 {

102 
	mBPªdComb
,

103 
	mBPªd2Levñ
,

104 
	mBPªd2bô
,

105 
	mBPªdTakí
,

106 
	mBPªdNŸTakí
,

107 
	mBPªd_NUM


111 
	sb¥ed_btb_ít_t
 {

112 
md_addr_t
 
	maddr
;

113 
md_›code
 
	m›
;

114 
md_addr_t
 
	mèrgë
;

115 
b¥ed_btb_ít_t
 *
	m¥ev
, *
	m√xt
;

119 
	sb¥ed_dú_t
 {

120 
b¥ed_˛ass
 
	m˛ass
;

123 
	msize
;

124 *
	mèbÀ
;

125 } 
	mbimod
;

127 
	ml1size
;

128 
	ml2size
;

129 
	ml2width
;

130 
	mshi·_width
;

131 
	mx‹
;

132 *
	mshi·ªgs
;

133 *
	ml2èbÀ
;

134 } 
	mtwo
;

135 } 
	mc⁄fig
;

139 
	sb¥ed_t
 {

140 
b¥ed_˛ass
 
	m˛ass
;

142 
b¥ed_dú_t
 *
	mbimod
;

143 
b¥ed_dú_t
 *
	mtwﬁev
;

144 
b¥ed_dú_t
 *
	mmëa
;

145 } 
	mdú¥ed
;

148 
	m£ts
;

149 
	massoc
;

150 
b¥ed_btb_ít_t
 *
	mbtb_d©a
;

151 } 
	mbtb
;

154 
	msize
;

155 
	mtos
;

156 
b¥ed_btb_ít_t
 *
	m°ack
;

157 } 
	mªt°ack
;

160 
cou¡î_t
 
	maddr_hôs
;

161 
cou¡î_t
 
	mdú_hôs
;

162 
cou¡î_t
 
	mu£d_øs
;

163 
cou¡î_t
 
	mu£d_bimod
;

164 
cou¡î_t
 
	mu£d_2Àv
;

165 
cou¡î_t
 
	mjr_hôs
;

166 
cou¡î_t
 
	mjr_£í
;

167 
cou¡î_t
 
	mjr_n⁄_øs_hôs
;

168 
cou¡î_t
 
	mjr_n⁄_øs_£í
;

169 
cou¡î_t
 
	mmis£s
;

171 
cou¡î_t
 
	mlookups
;

172 
cou¡î_t
 
	mªt°ack_p›s
;

173 
cou¡î_t
 
	mªt°ack_pushes
;

174 
cou¡î_t
 
	møs_hôs
;

178 
	sb¥ed_upd©e_t
 {

179 *
	mpdú1
;

180 *
	mpdú2
;

181 *
	mpmëa
;

183 
	møs
 : 1;

184 
	mbimod
 : 1;

185 
	mtwﬁev
 : 1;

186 
	mmëa
 : 1;

187 } 
	mdú
;

191 
b¥ed_t
 *

192 
b¥ed_¸óã
(
b¥ed_˛ass
 
˛ass
,

193 
bimod_size
,

194 
l1size
,

195 
l2size
,

196 
mëa_size
,

197 
shi·_width
,

198 
x‹
,

199 
btb_£ts
,

200 
btb_assoc
,

201 
ªt°ack_size
);

204 
b¥ed_dú_t
 *

205 
b¥ed_dú_¸óã
 (

206 
b¥ed_˛ass
 
˛ass
,

207 
l1size
,

208 
l2size
,

209 
shi·_width
,

210 
x‹
);

214 
b¥ed_c⁄fig
(
b¥ed_t
 *
¥ed
,

215 
FILE
 *
°ªam
);

219 
b¥ed_°©s
(
b¥ed_t
 *
¥ed
,

220 
FILE
 *
°ªam
);

224 
b¥ed_ªg_°©s
(
b¥ed_t
 *
¥ed
,

225 
°©_sdb_t
 *
sdb
);

228 
b¥ed_a·î_¥imög
(
b¥ed_t
 *
b¥ed
);

237 
md_addr_t


238 
b¥ed_lookup
(
b¥ed_t
 *
¥ed
,

239 
md_addr_t
 
baddr
,

240 
md_addr_t
 
bèrgë
,

241 
md_›code
 
›
,

242 
is_ˇŒ
,

243 
is_ªtu∫
,

244 
b¥ed_upd©e_t
 *
dú_upd©e_±r
,

245 *
°ack_ªcovî_idx
);

253 
b¥ed_ªcovî
(
b¥ed_t
 *
¥ed
,

254 
md_addr_t
 
baddr
,

255 
°ack_ªcovî_idx
);

267 
b¥ed_upd©e
(
b¥ed_t
 *
¥ed
,

268 
md_addr_t
 
baddr
,

269 
md_addr_t
 
bèrgë
,

270 
èkí
,

271 
¥ed_èkí
,

272 
c‹ª˘
,

273 
md_›code
 
›
,

274 
b¥ed_upd©e_t
 *
dú_upd©e_±r
);

277 #ifde‡
foo0


281 
b¥ed_dump
(
b¥ed_t
 *
¥ed
,

282 
FILE
 *
°ªam
);

	@cache.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<as£π.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ˇche.h
"

60 
	~"sh¨edbus.h
"

63 
sched_p
 
globÆ_sched_d©a
;

64 
uŒ
 
tŸÆ_bus_dñay
;

66 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

69 
	#CACHE_TAG
(
˝
, 
addr
Ë(◊ddrË>> (˝)->
èg_shi·
)

	)

70 
	#CACHE_SET
(
˝
, 
addr
Ë((◊ddrË>> (˝)->
£t_shi·
Ë& (˝)->
£t_mask
)

	)

71 
	#CACHE_BLK
(
˝
, 
addr
Ë(◊ddrË& (˝)->
blk_mask
)

	)

72 
	#CACHE_TAGSET
(
˝
, 
addr
Ë(◊ddrË& (˝)->
èg£t_mask
)

	)

75 
	#CACHE_BADDR
(
˝
, 
addr
Ë(◊ddrË& ~(˝)->
blk_mask
)

	)

76 
	#CACHE_MK_BADDR
(
˝
, 
èg
, 
£t
) \

77 (((
èg
Ë<< (
˝
)->
èg_shi·
)|((
£t
Ë<< (˝)->
£t_shi·
))

	)

80 
	#CACHE_BINDEX
(
˝
, 
blks
, 
i
) \

81 ((
ˇche_blk_t
 *)(((*)(
blks
)) + \

82 (
i
)*((
ˇche_blk_t
) + \

83 ((
˝
)->
bÆloc
 \

84 ? (
˝
)->
bsize
*(
byã_t
Ë: 0))))

	)

87 
	#__CACHE_ACCESS
(
ty≥
, 
d©a
, 
bofs
) \

88 (*((
ty≥
 *)(((*)
d©a
Ë+ (
bofs
))))

	)

91 
	#CACHE_DOUBLE
(
d©a
, 
bofs
Ë
	`__CACHE_ACCESS
(, d©a, bofs)

	)

92 
	#CACHE_FLOAT
(
d©a
, 
bofs
Ë
	`__CACHE_ACCESS
(, d©a, bofs)

	)

93 
	#CACHE_WORD
(
d©a
, 
bofs
Ë
	`__CACHE_ACCESS
(, d©a, bofs)

	)

94 
	#CACHE_HALF
(
d©a
, 
bofs
Ë
	`__CACHE_ACCESS
(, d©a, bofs)

	)

95 
	#CACHE_BYTE
(
d©a
, 
bofs
Ë
	`__CACHE_ACCESS
(, d©a, bofs)

	)

100 
	#CACHE_HASH
(
˝
, 
key
) \

101 (((
key
 >> 24Ë^ (key >> 16Ë^ (key >> 8Ë^ keyË& ((
˝
)->
hsize
-1))

	)

104 
	#CACHE_BCOPY
(
cmd
, 
blk
, 
bofs
, 
p
, 
nbyãs
) \

105 i‡(
cmd
 =
Ród
) \

107 
nbyãs
) { \

109 *((
byã_t
 *)
p
Ë
	`CACHE_BYTE
(&
blk
->
d©a
[0], 
bofs
); ; \

111 *((
hÆf_t
 *)
p
Ë
	`CACHE_HALF
(&
blk
->
d©a
[0], 
bofs
); ; \

113 *((
w‹d_t
 *)
p
Ë
	`CACHE_WORD
(&
blk
->
d©a
[0], 
bofs
); ; \

116 
w‹ds
 = 
nbyãs
 >> 2; \

117 
w‹ds
-- > 0) \

119 *((
w‹d_t
 *)
p
Ë
	`CACHE_WORD
(&
blk
->
d©a
[0], 
bofs
); \

120 
p
 +4; 
bofs
 += 4; \

127 
nbyãs
) { \

129 
	`CACHE_BYTE
(&
blk
->
d©a
[0], 
bofs
Ë*((
byã_t
 *)
p
); ; \

131 
	`CACHE_HALF
(&
blk
->
d©a
[0], 
bofs
Ë*((
hÆf_t
 *)
p
); ; \

133 
	`CACHE_WORD
(&
blk
->
d©a
[0], 
bofs
Ë*((
w‹d_t
 *)
p
); ; \

136 
w‹ds
 = 
nbyãs
 >> 2; \

137 
w‹ds
-- > 0) \

139 
	`CACHE_WORD
(&
blk
->
d©a
[0], 
bofs
Ë*((
w‹d_t
 *)
p
); \

140 
p
 +4; 
bofs
 += 4; \

144 }

	)

147 
	#BOUND_POS
(
N
Ë(()(
	`MIN
(
	`MAX
(0, (N)), 2147483647)))

	)

151 
	$u∆ök_hèb_ít
(
ˇche_t
 *
˝
,

152 
ˇche_£t_t
 *
£t
,

153 
ˇche_blk_t
 *
blk
)

155 
ˇche_blk_t
 *
¥ev
, *
ít
;

156 
ödex
 = 
	`CACHE_HASH
(
˝
, 
blk
->
èg
);

159 
¥ev
=
NULL
,
ít
=
£t
->
hash
[
ödex
];

160 
ít
;

161 
¥ev
=
ít
,ítÛ¡->
hash_√xt
)

163 i‡(
ít
 =
blk
)

166 
	`as£π
(
ít
);

169 i‡(!
¥ev
)

172 
£t
->
hash
[
ödex
] = 
ít
->
hash_√xt
;

177 
¥ev
->
hash_√xt
 = 
ít
->hash_next;

179 
ít
->
hash_√xt
 = 
NULL
;

180 
	}
}

184 
	$lök_hèb_ít
(
ˇche_t
 *
˝
,

185 
ˇche_£t_t
 *
£t
,

186 
ˇche_blk_t
 *
blk
)

188 
ödex
 = 
	`CACHE_HASH
(
˝
, 
blk
->
èg
);

191 
blk
->
hash_√xt
 = 
£t
->
hash
[
ödex
];

192 
£t
->
hash
[
ödex
] = 
blk
;

193 
	}
}

196 
	eli°_loc_t
 { 
	mHód
, 
	mTaû
 };

200 
	$upd©e_way_li°
(
ˇche_£t_t
 *
£t
,

201 
ˇche_blk_t
 *
blk
,

202 
li°_loc_t
 
whîe
)

205 i‡(!
blk
->
way_¥ev
 && !blk->
way_√xt
)

208 
	`as£π
(
£t
->
way_hód
 =
blk
 && së->
way_èû
 == blk);

213 i‡(!
blk
->
way_¥ev
)

215 
	`as£π
(
£t
->
way_hód
 =
blk
 && së->
way_èû
 != blk);

216 i‡(
whîe
 =
Hód
)

222 
£t
->
way_hód
 = 
blk
->
way_√xt
;

223 
blk
->
way_√xt
->
way_¥ev
 = 
NULL
;

225 i‡(!
blk
->
way_√xt
)

228 
	`as£π
(
£t
->
way_hód
 !
blk
 && së->
way_èû
 == blk);

229 i‡(
whîe
 =
Taû
)

234 
£t
->
way_èû
 = 
blk
->
way_¥ev
;

235 
blk
->
way_¥ev
->
way_√xt
 = 
NULL
;

240 
	`as£π
(
£t
->
way_hód
 !
blk
 && së->
way_èû
 != blk);

241 
blk
->
way_¥ev
->
way_√xt
 = blk->way_next;

242 
blk
->
way_√xt
->
way_¥ev
 = blk->way_prev;

246 i‡(
whîe
 =
Hód
)

249 
blk
->
way_√xt
 = 
£t
->
way_hód
;

250 
blk
->
way_¥ev
 = 
NULL
;

251 
£t
->
way_hód
->
way_¥ev
 = 
blk
;

252 
£t
->
way_hód
 = 
blk
;

254 i‡(
whîe
 =
Taû
)

257 
blk
->
way_¥ev
 = 
£t
->
way_èû
;

258 
blk
->
way_√xt
 = 
NULL
;

259 
£t
->
way_èû
->
way_√xt
 = 
blk
;

260 
£t
->
way_èû
 = 
blk
;

263 
	`∑nic
("bogus WHERE designator");

264 
	}
}

267 
ˇche_t
 *

268 
ˇche_¸óã
(*
«me
,

269 
n£ts
,

270 
bsize
,

271 
bÆloc
,

272 
usize
,

273 
assoc
,

274 
ˇche_pﬁicy
 
pﬁicy
,

276 (*
blk_ac˚ss_‚
)(
mem_cmd
 
cmd
,

277 
md_addr_t
 
baddr
, 
bsize
,

278 
ˇche_blk_t
 *
blk
,

279 
tick_t
 
now
),

280 
hô_œãncy
)

282 
ˇche_t
 *
˝
;

283 
ˇche_blk_t
 *
blk
;

284 
i
, 
j
, 
bödex
;

287 i‡(
n£ts
 <= 0)

288 
	`Áèl
("ˇchêsizê(ö sësË`%d' mu° bên⁄-zîo", 
n£ts
);

289 i‡((
n£ts
 & (nsets-1)) != 0)

290 
	`Áèl
("ˇchêsizê(ö sësË`%d' i†nŸáÖowî o‡two", 
n£ts
);

292 i‡(
bsize
 < 8)

293 
	`Áèl
("ˇchêblock sizê(ö byãsË`%d' mu° bê8 o∏gª©î", 
bsize
);

294 i‡((
bsize
 & (bsize-1)) != 0)

295 
	`Áèl
("ˇchêblock sizê(ö byãsË`%d' mu° bê®powî o‡two", 
bsize
);

296 i‡(
usize
 < 0)

297 
	`Áèl
("u£∏d©®sizê(ö byãsË`%d' mu° bê®posôivêvÆue", 
usize
);

298 i‡(
assoc
 <= 0)

299 
	`Áèl
("ˇchêassocütivôy `%d' mu° bên⁄-zîÿ™dÖosôive", 
assoc
);

300 i‡((
assoc
 & (assoc-1)) != 0)

301 
	`Áèl
("ˇchêassocütivôy `%d' mu° bê®powî o‡two", 
assoc
);

302 i‡(!
blk_ac˚ss_‚
)

303 
	`Áèl
("must specify miss/replacement functions");

306 
˝
 = (
ˇche_t
 *)

307 
	`ˇŒoc
(1, (
ˇche_t
Ë+ (
n£ts
-1)*(
ˇche_£t_t
));

308 i‡(!
˝
)

309 
	`Áèl
("out of virtual memory");

312 
˝
->
«me
 = 
	`my°rdup
(name);

313 
˝
->
n£ts
 =Çsets;

314 
˝
->
bsize
 = bsize;

315 
˝
->
bÆloc
 = balloc;

316 
˝
->
usize
 = usize;

317 
˝
->
assoc
 =ássoc;

318 
˝
->
pﬁicy
 =Öolicy;

319 
˝
->
hô_œãncy
 = hit_latency;

322 
˝
->
blk_ac˚ss_‚
 = blk_access_fn;

325 
˝
->
hsize
 = 
	`CACHE_HIGHLY_ASSOC
(˝Ë? (
assoc
 >> 2) : 0;

326 
˝
->
blk_mask
 = 
bsize
-1;

327 
˝
->
£t_shi·
 = 
	`log_ba£2
(
bsize
);

328 
˝
->
£t_mask
 = 
n£ts
-1;

329 
˝
->
èg_shi·
 = cp->
£t_shi·
 + 
	`log_ba£2
(
n£ts
);

330 
˝
->
èg_mask
 = (1 << (32 - cp->
èg_shi·
))-1;

331 
˝
->
èg£t_mask
 = ~˝->
blk_mask
;

332 
˝
->
bus_‰ì
 = 0;

335 
	`debug
("%s: cp->hsizê = %d", 
˝
->
«me
, cp->
hsize
);

336 
	`debug
("%s: cp->blk_mask = 0x%08x", 
˝
->
«me
, cp->
blk_mask
);

337 
	`debug
("%s: cp->£t_shi· = %d", 
˝
->
«me
, cp->
£t_shi·
);

338 
	`debug
("%s: cp->£t_mask = 0x%08x", 
˝
->
«me
, cp->
£t_mask
);

339 
	`debug
("%s: cp->èg_shi· = %d", 
˝
->
«me
, cp->
èg_shi·
);

340 
	`debug
("%s: cp->èg_mask = 0x%08x", 
˝
->
«me
, cp->
èg_mask
);

343 
˝
->
hôs
 = 0;

344 
˝
->
mis£s
 = 0;

345 
˝
->
ª∂a˚míts
 = 0;

346 
˝
->
wrôebacks
 = 0;

347 
˝
->
övÆid©i⁄s
 = 0;

350 
˝
->
œ°_èg£t
 = 0;

351 
˝
->
œ°_blk
 = 
NULL
;

354 
˝
->
d©a
 = (
byã_t
 *)
	`ˇŒoc
(
n£ts
 * 
assoc
,

355 (
ˇche_blk_t
) +

356 (
˝
->
bÆloc
 ? (
bsize
*(
byã_t
)) : 0));

357 i‡(!
˝
->
d©a
)

358 
	`Áèl
("out of virtual memory");

361 
bödex
=0,
i
=0; i<
n£ts
; i++)

363 
˝
->
£ts
[
i
].
way_hód
 = 
NULL
;

364 
˝
->
£ts
[
i
].
way_èû
 = 
NULL
;

366 i‡(
˝
->
hsize
)

368 
˝
->
£ts
[
i
].
hash
 =

369 (
ˇche_blk_t
 **)
	`ˇŒoc
(
˝
->
hsize
,

370 (
ˇche_blk_t
 *));

371 i‡(!
˝
->
£ts
[
i
].
hash
)

372 
	`Áèl
("out of virtual memory");

377 
˝
->
£ts
[
i
].
blks
 = 
	`CACHE_BINDEX
(˝, cp->
d©a
, 
bödex
);

381 
j
=0; j<
assoc
; j++)

384 
blk
 = 
	`CACHE_BINDEX
(
˝
, cp->
d©a
, 
bödex
);

385 
bödex
++;

388 
blk
->
°©us
 = 0;

389 
blk
->
èg
 = 0;

390 
blk
->
ªady
 = 0;

391 
blk
->
u£r_d©a
 = (
usize
 != 0

392 ? (
byã_t
 *)
	`ˇŒoc
(
usize
, (byã_t)Ë: 
NULL
);

395 i‡(
˝
->
hsize
)

396 
	`lök_hèb_ít
(
˝
, &˝->
£ts
[
i
], 
blk
);

399 
blk
->
way_√xt
 = 
˝
->
£ts
[
i
].
way_hód
;

400 
blk
->
way_¥ev
 = 
NULL
;

401 i‡(
˝
->
£ts
[
i
].
way_hód
)

402 
˝
->
£ts
[
i
].
way_hód
->
way_¥ev
 = 
blk
;

403 
˝
->
£ts
[
i
].
way_hód
 = 
blk
;

404 i‡(!
˝
->
£ts
[
i
].
way_èû
)

405 
˝
->
£ts
[
i
].
way_èû
 = 
blk
;

408  
˝
;

409 
	}
}

412 
ˇche_pﬁicy


413 
	$ˇche_ch¨2pﬁicy
(
c
)

415 
c
) {

416 'l':  
LRU
;

417 'r':  
R™dom
;

418 'f':  
FIFO
;

419 : 
	`Áèl
("bogu†ª∂a˚míàpﬁicy, `%c'", 
c
);

421 
	}
}

425 
	$ˇche_c⁄fig
(
ˇche_t
 *
˝
,

426 
FILE
 *
°ªam
)

428 
	`Ârötf
(
°ªam
,

430 
˝
->
«me
, cp->
n£ts
, cp->
bsize
, cp->
usize
);

431 
	`Ârötf
(
°ªam
,

433 
˝
->
«me
, cp->
assoc
,

434 
˝
->
pﬁicy
 =
LRU
 ? "LRU"

435 : 
˝
->
pﬁicy
 =
R™dom
 ? "Random"

436 : 
˝
->
pﬁicy
 =
FIFO
 ? "FIFO"

437 : (
	`ab‹t
(), ""));

438 
	}
}

442 
	$ˇche_ªg_°©s
(
ˇche_t
 *
˝
,

443 
°©_sdb_t
 *
sdb
)

445 
buf
[512], 
buf1
[512], *
«me
;

448 i‡(!
˝
->
«me
 || !cp->name[0])

449 
«me
 = "<unknown>";

451 
«me
 = 
˝
->name;

453 
	`•rötf
(
buf
, "%s.ac˚s£s", 
«me
);

454 
	`•rötf
(
buf1
, "%s.hô†+ %s.mis£s", 
«me
,Çame);

455 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "tŸÆÇumbî o‡ac˚s£s", 
buf1
, "%12.0f");

456 
	`•rötf
(
buf
, "%s.hôs", 
«me
);

457 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "tŸÆÇumbî o‡hôs", &
˝
->
hôs
, 0, 
NULL
);

458 
	`•rötf
(
buf
, "%s.mis£s", 
«me
);

459 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "tŸÆÇumbî o‡mis£s", &
˝
->
mis£s
, 0, 
NULL
);

460 
	`•rötf
(
buf
, "%s.ª∂a˚míts", 
«me
);

461 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÇumber ofÑeplacements",

462 &
˝
->
ª∂a˚míts
, 0, 
NULL
);

463 
	`•rötf
(
buf
, "%s.wrôebacks", 
«me
);

464 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÇumber of writebacks",

465 &
˝
->
wrôebacks
, 0, 
NULL
);

466 
	`•rötf
(
buf
, "%s.övÆid©i⁄s", 
«me
);

467 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÇumber of invalidations",

468 &
˝
->
övÆid©i⁄s
, 0, 
NULL
);

469 
	`•rötf
(
buf
, "%s.miss_øã", 
«me
);

470 
	`•rötf
(
buf1
, "%s.mis£†/ %s.ac˚s£s", 
«me
,Çame);

471 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "mis†øã (i.e., mis£s/ªf)", 
buf1
, 
NULL
);

472 
	`•rötf
(
buf
, "%s.ª∂_øã", 
«me
);

473 
	`•rötf
(
buf1
, "%s.ª∂a˚mít†/ %s.ac˚s£s", 
«me
,Çame);

474 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "ª∂a˚míàøã (i.e.,Ñïls/ªf)", 
buf1
, 
NULL
);

475 
	`•rötf
(
buf
, "%s.wb_øã", 
«me
);

476 
	`•rötf
(
buf1
, "%s.wrôeback†/ %s.ac˚s£s", 
«me
,Çame);

477 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "wrôebackÑ©ê(i.e., wrbks/ªf)", 
buf1
, 
NULL
);

478 
	`•rötf
(
buf
, "%s.öv_øã", 
«me
);

479 
	`•rötf
(
buf1
, "%s.övÆid©i⁄†/ %s.ac˚s£s", 
«me
,Çame);

480 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "övÆid©i⁄Ñ©ê(i.e., invs/ªf)", 
buf1
, 
NULL
);

481 
	}
}

485 
	$ˇche_°©s
(
ˇche_t
 *
˝
,

486 
FILE
 *
°ªam
)

488 
sum
 = ()(
˝
->
hôs
 + cp->
mis£s
);

490 
	`Ârötf
(
°ªam
,

492 
˝
->
«me
, ()˝->
hôs
, ()˝->
mis£s
,

493 ()
˝
->
ª∂a˚míts
, ()˝->
övÆid©i⁄s
);

494 
	`Ârötf
(
°ªam
,

496 
˝
->
«me
,

497 ()
˝
->
mis£s
/
sum
, ()()˝->
ª∂a˚míts
/sum,

498 ()
˝
->
övÆid©i⁄s
/
sum
);

499 
	}
}

507 
	$ˇche_ac˚ss
(
ˇche_t
 *
˝
,

508 
mem_cmd
 
cmd
,

509 
md_addr_t
 
addr
,

510 *
vp
,

511 
nbyãs
,

512 
tick_t
 
now
,

513 
byã_t
 **
ud©a
,

514 
md_addr_t
 *
ª∂_addr
)

516 
byã_t
 *
p
 = 
vp
;

517 
md_addr_t
 
èg
 = 
	`CACHE_TAG
(
˝
, 
addr
);

518 
md_addr_t
 
£t
 = 
	`CACHE_SET
(
˝
, 
addr
);

519 
md_addr_t
 
bofs
 = 
	`CACHE_BLK
(
˝
, 
addr
);

520 
ˇche_blk_t
 *
blk
, *
ª∂
;

521 
œt
 = 0;

523 
uöt
 
bus_dñay
 = 0;

526 i‡(
ª∂_addr
)

527 *
ª∂_addr
 = 0;

530 i‡((
nbyãs
 & (nbyãs-1)Ë!0 || (
addr
 & (nbytes-1)) != 0)

531 
	`Áèl
("ˇche:ác˚s†îr‹: bad sizê‹álignmít,ádd∏0x%08x", 
addr
);

536 i‡((
addr
 + 
nbyãs
Ë> (◊dd∏& ~
˝
->
blk_mask
Ë+ cp->
bsize
))

537 
	`Áèl
("ˇche:ác˚s†îr‹:ác˚s†•™†block,ádd∏0x%08x", 
addr
);

542 i‡(
	`CACHE_TAGSET
(
˝
, 
addr
Ë=˝->
œ°_èg£t
)

545 
blk
 = 
˝
->
œ°_blk
;

546 
ˇche_Á°_hô
;

549 i‡(
˝
->
hsize
)

552 
hödex
 = 
	`CACHE_HASH
(
˝
, 
èg
);

554 
blk
=
˝
->
£ts
[
£t
].
hash
[
hödex
];

555 
blk
;

556 
blk
=blk->
hash_√xt
)

558 i‡(
blk
->
èg
 =èg && (blk->
°©us
 & 
CACHE_BLK_VALID
))

559 
ˇche_hô
;

565 
blk
=
˝
->
£ts
[
£t
].
way_hód
;

566 
blk
;

567 
blk
=blk->
way_√xt
)

569 i‡(
blk
->
èg
 =èg && (blk->
°©us
 & 
CACHE_BLK_VALID
))

570 
ˇche_hô
;

579 
bus_dñay
 = 
	`compuã_bus_dñay
((
uŒ
)
now
, 0);

584 if(
addr
 >
°¨t_addr
 &&ádd∏<
íd_addr
)

585 
tŸÆ_bus_dñay
 +
bus_dñay
;

589 #ifde‡
_DEBUG


590 
FILE
* 
iÂ
;

591 if(!
iÂ
)

592 
iÂ
 = 
	`f›í
("cache_access.db", "w");

593 if(!
iÂ
)

595 
	`Ârötf
(
°dout
, "Internal file opening failed\n");

596 
	`exô
(-1);

598 
	`Ârötf
(
iÂ
, "Cachêac˚s†© = 0x%xáàsim cy˛ê%Lu\n", ()
addr
, (
uŒ
)
now
);

599 
	`Ârötf
(
iÂ
, "****Bu†dñayÉncou¡îed = %u****\n", 
bus_dñay
);

600 
	`Ârötf
(
iÂ
, "****TŸÆ bu†dñay sÿÁ∏%u****\n", 
tŸÆ_bus_dñay
);

601 if(
addr
 < 
°¨t_addr
 ||ádd∏> 
íd_addr
)

602 
	`Ârötf
(
iÂ
,"Instructionáccess is inÜibrary code\n");

606 
˝
->
mis£s
++;

610 
˝
->
pﬁicy
) {

611 
LRU
:

612 
FIFO
:

613 
ª∂
 = 
˝
->
£ts
[
£t
].
way_èû
;

614 
	`upd©e_way_li°
(&
˝
->
£ts
[
£t
], 
ª∂
, 
Hód
);

616 
R™dom
:

618 
bödex
 = 
	`myønd
(Ë& (
˝
->
assoc
 - 1);

619 
ª∂
 = 
	`CACHE_BINDEX
(
˝
, cp->
£ts
[
£t
].
blks
, 
bödex
);

623 
	`∑nic
("bogusÑeplacementÖolicy");

627 i‡(
˝
->
hsize
)

628 
	`u∆ök_hèb_ít
(
˝
, &˝->
£ts
[
£t
], 
ª∂
);

631 
˝
->
œ°_èg£t
 = 0;

632 
˝
->
œ°_blk
 = 
NULL
;

635 i‡(
ª∂
->
°©us
 & 
CACHE_BLK_VALID
)

637 
˝
->
ª∂a˚míts
++;

639 i‡(
ª∂_addr
)

640 *
ª∂_addr
 = 
	`CACHE_MK_BADDR
(
˝
, 
ª∂
->
èg
, 
£t
);

643 
œt
 +
	`BOUND_POS
(
ª∂
->
ªady
 - 
now
);

646 
œt
 +
	`BOUND_POS
(
˝
->
bus_‰ì
 - (
now
 +Üat));

651 
œt
 = 0;

654 
˝
->
bus_‰ì
 = 
	`MAX
(˝->bus_‰ì, (
now
 + 
œt
)) + 1;

656 i‡(
ª∂
->
°©us
 & 
CACHE_BLK_DIRTY
)

659 
˝
->
wrôebacks
++;

660 
œt
 +
˝
->
	`blk_ac˚ss_‚
(
Wrôe
,

661 
	`CACHE_MK_BADDR
(
˝
, 
ª∂
->
èg
, 
£t
),

662 
˝
->
bsize
, 
ª∂
, 
now
+
œt
);

667 
ª∂
->
èg
 =Åag;

668 
ª∂
->
°©us
 = 
CACHE_BLK_VALID
;

671 
œt
 +
˝
->
	`blk_ac˚ss_‚
(
Ród
, 
	`CACHE_BADDR
(˝, 
addr
), cp->
bsize
,

672 
ª∂
, 
now
+
œt
);

675 i‡(
˝
->
bÆloc
)

677 
	`CACHE_BCOPY
(
cmd
, 
ª∂
, 
bofs
, 
p
, 
nbyãs
);

681 i‡(
cmd
 =
Wrôe
)

682 
ª∂
->
°©us
 |
CACHE_BLK_DIRTY
;

685 i‡(
ud©a
)

686 *
ud©a
 = 
ª∂
->
u£r_d©a
;

689 
ª∂
->
ªady
 = 
now
+
œt
;

692 i‡(
˝
->
hsize
)

693 
	`lök_hèb_ít
(
˝
, &˝->
£ts
[
£t
], 
ª∂
);

698  (
œt
 + 
bus_dñay
);

701 
ˇche_hô
:

704 
˝
->
hôs
++;

707 i‡(
˝
->
bÆloc
)

709 
	`CACHE_BCOPY
(
cmd
, 
blk
, 
bofs
, 
p
, 
nbyãs
);

713 i‡(
cmd
 =
Wrôe
)

714 
blk
->
°©us
 |
CACHE_BLK_DIRTY
;

717 i‡(
blk
->
way_¥ev
 && 
˝
->
pﬁicy
 =
LRU
)

720 
	`upd©e_way_li°
(&
˝
->
£ts
[
£t
], 
blk
, 
Hód
);

726 
˝
->
œ°_èg£t
 = 
	`CACHE_TAGSET
(˝, 
addr
);

727 
˝
->
œ°_blk
 = 
blk
;

730 i‡(
ud©a
)

731 *
ud©a
 = 
blk
->
u£r_d©a
;

734  (Ë
	`MAX
(
˝
->
hô_œãncy
, (
blk
->
ªady
 - 
now
));

736 
ˇche_Á°_hô
:

739 
˝
->
hôs
++;

742 i‡(
˝
->
bÆloc
)

744 
	`CACHE_BCOPY
(
cmd
, 
blk
, 
bofs
, 
p
, 
nbyãs
);

748 i‡(
cmd
 =
Wrôe
)

749 
blk
->
°©us
 |
CACHE_BLK_DIRTY
;

756 i‡(
ud©a
)

757 *
ud©a
 = 
blk
->
u£r_d©a
;

760 
˝
->
œ°_èg£t
 = 
	`CACHE_TAGSET
(˝, 
addr
);

761 
˝
->
œ°_blk
 = 
blk
;

764  (Ë
	`MAX
(
˝
->
hô_œãncy
, (
blk
->
ªady
 - 
now
));

765 
	}
}

771 
	$ˇche_¥obe
(
ˇche_t
 *
˝
,

772 
md_addr_t
 
addr
)

774 
md_addr_t
 
èg
 = 
	`CACHE_TAG
(
˝
, 
addr
);

775 
md_addr_t
 
£t
 = 
	`CACHE_SET
(
˝
, 
addr
);

776 
ˇche_blk_t
 *
blk
;

780 i‡(
˝
->
hsize
)

783 
hödex
 = 
	`CACHE_HASH
(
˝
, 
èg
);

785 
blk
=
˝
->
£ts
[
£t
].
hash
[
hödex
];

786 
blk
;

787 
blk
=blk->
hash_√xt
)

789 i‡(
blk
->
èg
 =èg && (blk->
°©us
 & 
CACHE_BLK_VALID
))

790  
TRUE
;

796 
blk
=
˝
->
£ts
[
£t
].
way_hód
;

797 
blk
;

798 
blk
=blk->
way_√xt
)

800 i‡(
blk
->
èg
 =èg && (blk->
°©us
 & 
CACHE_BLK_VALID
))

801  
TRUE
;

806  
FALSE
;

807 
	}
}

811 
	$ˇche_Êush
(
ˇche_t
 *
˝
,

812 
tick_t
 
now
)

814 
i
, 
œt
 = 
˝
->
hô_œãncy
;

815 
ˇche_blk_t
 *
blk
;

818 
˝
->
œ°_èg£t
 = 0;

819 
˝
->
œ°_blk
 = 
NULL
;

822 
i
=0; i<
˝
->
n£ts
; i++)

824 
blk
=
˝
->
£ts
[
i
].
way_hód
; blk; blk=blk->
way_√xt
)

826 i‡(
blk
->
°©us
 & 
CACHE_BLK_VALID
)

828 
˝
->
övÆid©i⁄s
++;

829 
blk
->
°©us
 &~
CACHE_BLK_VALID
;

831 i‡(
blk
->
°©us
 & 
CACHE_BLK_DIRTY
)

834 
˝
->
wrôebacks
++;

835 
œt
 +
˝
->
	`blk_ac˚ss_‚
(
Wrôe
,

836 
	`CACHE_MK_BADDR
(
˝
, 
blk
->
èg
, 
i
),

837 
˝
->
bsize
, 
blk
, 
now
+
œt
);

844  
œt
;

845 
	}
}

850 
	$ˇche_Êush_addr
(
ˇche_t
 *
˝
,

851 
md_addr_t
 
addr
,

852 
tick_t
 
now
)

854 
md_addr_t
 
èg
 = 
	`CACHE_TAG
(
˝
, 
addr
);

855 
md_addr_t
 
£t
 = 
	`CACHE_SET
(
˝
, 
addr
);

856 
ˇche_blk_t
 *
blk
;

857 
œt
 = 
˝
->
hô_œãncy
;

859 i‡(
˝
->
hsize
)

862 
hödex
 = 
	`CACHE_HASH
(
˝
, 
èg
);

864 
blk
=
˝
->
£ts
[
£t
].
hash
[
hödex
];

865 
blk
;

866 
blk
=blk->
hash_√xt
)

868 i‡(
blk
->
èg
 =èg && (blk->
°©us
 & 
CACHE_BLK_VALID
))

875 
blk
=
˝
->
£ts
[
£t
].
way_hód
;

876 
blk
;

877 
blk
=blk->
way_√xt
)

879 i‡(
blk
->
èg
 =èg && (blk->
°©us
 & 
CACHE_BLK_VALID
))

884 i‡(
blk
)

886 
˝
->
övÆid©i⁄s
++;

887 
blk
->
°©us
 &~
CACHE_BLK_VALID
;

890 
˝
->
œ°_èg£t
 = 0;

891 
˝
->
œ°_blk
 = 
NULL
;

893 i‡(
blk
->
°©us
 & 
CACHE_BLK_DIRTY
)

896 
˝
->
wrôebacks
++;

897 
œt
 +
˝
->
	`blk_ac˚ss_‚
(
Wrôe
,

898 
	`CACHE_MK_BADDR
(
˝
, 
blk
->
èg
, 
£t
),

899 
˝
->
bsize
, 
blk
, 
now
+
œt
);

902 
	`upd©e_way_li°
(&
˝
->
£ts
[
£t
], 
blk
, 
Taû
);

906  
œt
;

907 
	}
}

	@cache.h

52 #i‚de‡
CACHE_H


53 
	#CACHE_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"machöe.h
"

60 
	~"mem‹y.h
"

61 
	~"°©s.h
"

99 
	#CACHE_HIGHLY_ASSOC
(
˝
Ë((˝)->
assoc
 > 4)

	)

102 
	eˇche_pﬁicy
 {

103 
	mLRU
,

104 
	mR™dom
,

105 
	mFIFO


109 
	#CACHE_BLK_VALID
 0x00000001

	)

110 
	#CACHE_BLK_DIRTY
 0x00000002

	)

113 
	sˇche_blk_t


115 
ˇche_blk_t
 *
	mway_√xt
;

117 
ˇche_blk_t
 *
	mway_¥ev
;

118 
ˇche_blk_t
 *
	mhash_√xt
;

122 
md_addr_t
 
	mèg
;

123 
	m°©us
;

124 
tick_t
 
	mªady
;

126 
byã_t
 *
	mu£r_d©a
;

131 
byã_t
 
	md©a
[1];

137 
	sˇche_£t_t


139 
ˇche_blk_t
 **
	mhash
;

141 
ˇche_blk_t
 *
	mway_hód
;

142 
ˇche_blk_t
 *
	mway_èû
;

143 
ˇche_blk_t
 *
	mblks
;

149 
	sˇche_t


152 *
	m«me
;

153 
	mn£ts
;

154 
	mbsize
;

155 
	mbÆloc
;

156 
	musize
;

157 
	massoc
;

158 
ˇche_pﬁicy
 
	mpﬁicy
;

159 
	mhô_œãncy
;

171 (*
	mblk_ac˚ss_‚
)(
mem_cmd
 
	mcmd
,

172 
md_addr_t
 
	mbaddr
,

173 
	mbsize
,

174 
ˇche_blk_t
 *
	mblk
,

175 
tick_t
 
	mnow
);

178 
	mhsize
;

179 
md_addr_t
 
	mblk_mask
;

180 
	m£t_shi·
;

181 
md_addr_t
 
	m£t_mask
;

182 
	mèg_shi·
;

183 
md_addr_t
 
	mèg_mask
;

184 
md_addr_t
 
	mèg£t_mask
;

187 
tick_t
 
	mbus_‰ì
;

197 
cou¡î_t
 
	mhôs
;

198 
cou¡î_t
 
	mmis£s
;

199 
cou¡î_t
 
	mª∂a˚míts
;

200 
cou¡î_t
 
	mwrôebacks
;

201 
cou¡î_t
 
	mövÆid©i⁄s
;

204 
md_addr_t
 
	mœ°_èg£t
;

205 
ˇche_blk_t
 *
	mœ°_blk
;

208 
byã_t
 *
	md©a
;

212 
ˇche_£t_t
 
	m£ts
[1];

216 
ˇche_t
 *

217 
ˇche_¸óã
(*
«me
,

218 
n£ts
,

219 
bsize
,

220 
bÆloc
,

221 
usize
,

222 
assoc
,

223 
ˇche_pﬁicy
 
pﬁicy
,

225 (*
blk_ac˚ss_‚
)(
mem_cmd
 
cmd
,

226 
md_addr_t
 
baddr
, 
bsize
,

227 
ˇche_blk_t
 *
blk
,

228 
tick_t
 
now
),

229 
hô_œãncy
);

232 
ˇche_pﬁicy


233 
	`ˇche_ch¨2pﬁicy
(
c
);

237 
	`ˇche_c⁄fig
(
ˇche_t
 *
˝
,

238 
FILE
 *
°ªam
);

242 
	`ˇche_ªg_°©s
(
ˇche_t
 *
˝
,

243 
°©_sdb_t
 *
sdb
);

247 
	`ˇche_°©s
(
ˇche_t
 *
˝
,

248 
FILE
 *
°ªam
);

251 
	`ˇche_°©s
(
ˇche_t
 *
˝
, 
FILE
 *
°ªam
);

259 
	`ˇche_ac˚ss
(
ˇche_t
 *
˝
,

260 
mem_cmd
 
cmd
,

261 
md_addr_t
 
addr
,

262 *
vp
,

263 
nbyãs
,

264 
tick_t
 
now
,

265 
byã_t
 **
ud©a
,

266 
md_addr_t
 *
ª∂_addr
);

270 
	#ˇche_doubÀ
(
˝
, 
cmd
, 
addr
, 
p
, 
now
, 
ud©a
) \

271 
	`ˇche_ac˚ss
(
˝
, 
cmd
, 
addr
, 
p
, (), 
now
, 
ud©a
)

	)

272 
	#ˇche_Êﬂt
(
˝
, 
cmd
, 
addr
, 
p
, 
now
, 
ud©a
) \

273 
	`ˇche_ac˚ss
(
˝
, 
cmd
, 
addr
, 
p
, (), 
now
, 
ud©a
)

	)

274 
	#ˇche_dw‹d
(
˝
, 
cmd
, 
addr
, 
p
, 
now
, 
ud©a
) \

275 
	`ˇche_ac˚ss
(
˝
, 
cmd
, 
addr
, 
p
, (), 
now
, 
ud©a
)

	)

276 
	#ˇche_w‹d
(
˝
, 
cmd
, 
addr
, 
p
, 
now
, 
ud©a
) \

277 
	`ˇche_ac˚ss
(
˝
, 
cmd
, 
addr
, 
p
, (), 
now
, 
ud©a
)

	)

278 
	#ˇche_hÆf
(
˝
, 
cmd
, 
addr
, 
p
, 
now
, 
ud©a
) \

279 
	`ˇche_ac˚ss
(
˝
, 
cmd
, 
addr
, 
p
, (), 
now
, 
ud©a
)

	)

280 
	#ˇche_byã
(
˝
, 
cmd
, 
addr
, 
p
, 
now
, 
ud©a
) \

281 
	`ˇche_ac˚ss
(
˝
, 
cmd
, 
addr
, 
p
, (), 
now
, 
ud©a
)

	)

287 
	`ˇche_¥obe
(
ˇche_t
 *
˝
,

288 
md_addr_t
 
addr
);

292 
	`ˇche_Êush
(
ˇche_t
 *
˝
,

293 
tick_t
 
now
);

298 
	`ˇche_Êush_addr
(
ˇche_t
 *
˝
,

299 
md_addr_t
 
addr
,

300 
tick_t
 
now
);

	@config.h

52 #i‚de‡
CONFIG_H


53 
	#CONFIG_H


	)

	@decode_cfg.h

1 #i‚de‡
DECODE_CFG_H


2 
	#DECODE_CFG_H


	)

9 
	#DNA
 (0)

	)

11 #i‡
deföed
(
TARGET_PISA
)

14 
	#DGPR
(
N
Ë(N)

	)

15 
	#DGPR_D
(
N
Ë((NË&~1)

	)

18 
	#DFPR_L
(
N
Ë(((N)+32)&~1)

	)

19 
	#DFPR_F
(
N
Ë(((N)+32)&~1)

	)

20 
	#DFPR_D
(
N
Ë(((N)+32)&~1)

	)

23 
	#DHI
 (0+32+32)

	)

24 
	#DLO
 (1+32+32)

	)

25 
	#DFCC
 (2+32+32)

	)

26 
	#DTMP
 (3+32+32)

	)

28 #ñi‡
deföed
(
TARGET_ALPHA
)

31 
	#DGPR
(
N
Ë(31 - (N)Ë

	)

34 
	#DFPR
(
N
Ë(((NË=31Ë? 
DNA
 : ((N)+32))

	)

37 
	#DFPCR
 (0+32+32)

	)

38 
	#DUNIQ
 (1+32+32)

	)

39 
	#DTMP
 (2+32+32)

	)

42 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

	@dlite.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<˘y≥.h
>

56 
	~<î∫o.h
>

58 
	~"ho°.h
"

59 
	~"misc.h
"

60 
	~"machöe.h
"

61 
	~"vîsi⁄.h
"

62 
	~"evÆ.h
"

63 
	~"ªgs.h
"

64 
	~"mem‹y.h
"

65 
	~"sim.h
"

66 
	~"symbﬁ.h
"

67 
	~"lﬂdî.h
"

68 
	~"›ti⁄s.h
"

69 
	~"°©s.h
"

70 
	~"ønge.h
"

71 
	~"dlôe.h
"

74 
dlôe_ªg_obj_t
 
	gf_dlôe_ªg_obj
 = 
NULL
;

75 
dlôe_mem_obj_t
 
	gf_dlôe_mem_obj
 = 
NULL
;

76 
dlôe_m°©e_obj_t
 
	gf_dlôe_m°©e_obj
 = 
NULL
;

79 
	gdlôe_a˘ive
 = 
FALSE
;

82 
	gdlôe_check
 = 
FALSE
;

85 
	gdlôe_ªtu∫
 = 
FALSE
;

88 
	#MOD_BYTE
 0x0001

	)

89 
	#MOD_HALF
 0x0002

	)

90 
	#MOD_WORD
 0x0004

	)

91 
	#MOD_QWORD
 0x0008

	)

92 
	#MOD_FLOAT
 0x0010

	)

93 
	#MOD_DOUBLE
 0x0020

	)

94 
	#MOD_CHAR
 0x0040

	)

95 
	#MOD_STRING
 0x0080

	)

97 
	#MOD_SIZES
 \

98 (
MOD_BYTE
|
MOD_HALF
|
MOD_WORD
|
MOD_QWORD
 \

99 |
MOD_FLOAT
|
MOD_DOUBLE
|
MOD_CHAR
|
MOD_STRING
)

	)

102 
	#MOD_DECIMAL
 0x0100

	)

103 
	#MOD_UNSIGNED
 0x0200

	)

104 
	#MOD_OCTAL
 0x0400

	)

105 
	#MOD_HEX
 0x0800

	)

106 
	#MOD_BINARY
 0x1000

	)

108 
	#MOD_FORMATS
 \

109 (
MOD_DECIMAL
|
MOD_UNSIGNED
|
MOD_OCTAL
|
MOD_HEX
|
MOD_BINARY
)

	)

114 
	$modifõr_∑r£r
(*
p
,

115 **
ídp
,

116 *
pmod
)

118 
modifõrs
 = 0;

121 *
pmod
 = 0;

124 i‡(*
p
 == '/')

126 
p
++;

128 *
p
 != '\0' && *p != '\n' && *p != ' ' && *p != '\t')

130 *
p
)

133 
modifõrs
 |
MOD_BYTE
;

136 
modifõrs
 |
MOD_HALF
;

139 
modifõrs
 |
MOD_WORD
;

142 
modifõrs
 |
MOD_QWORD
;

145 
modifõrs
 |
MOD_DECIMAL
;

148 
modifõrs
 |
MOD_UNSIGNED
;

151 
modifõrs
 |
MOD_OCTAL
;

154 
modifõrs
 |
MOD_HEX
;

157 
modifõrs
 |
MOD_BINARY
;

160 
modifõrs
 |
MOD_FLOAT
;

163 
modifõrs
 |
MOD_DOUBLE
;

166 
modifõrs
 |
MOD_CHAR
;

169 
modifõrs
 |
MOD_STRING
;

174 
p
++;

179 *
ídp
 = 
p
;

180 *
pmod
 = 
modifõrs
;

181  
NULL
;

182 
	}
}

185 
evÆ_°©e_t
 *
	gdlôe_evÆu©‹
 = 
NULL
;

186 
ªgs_t
 *
	gloˇl_ªgs
 = 
NULL
;

191 
evÆ_vÆue_t


192 
	$idít_evÆu©‹
(
evÆ_°©e_t
 *
es
)

194 
i
;

195 *
îr_°r
;

196 
evÆ_vÆue_t
 
vÆ
;

197 
°©_°©_t
 *
°©
;

198 
sym_sym_t
 *
sym
;

199 
evÆ_vÆue_t
 
îr_vÆue
 = { 
ë_öt
, { 0 } };

202 
i
=0; 
md_ªg_«mes
[i].
°r
 !
NULL
; i++)

204 i‡(!
	`my°ricmp
(
es
->
tok_buf
, 
md_ªg_«mes
[
i
].
°r
))

206 
îr_°r
 =

207 
	`f_dlôe_ªg_obj
(
loˇl_ªgs
, 
FALSE
,

208 
md_ªg_«mes
[
i
].
fûe
, md_ªg_«mes[i].
ªg
, &
vÆ
);

209 i‡(
îr_°r
)

211 
evÆ_îr‹
 = 
ERR_UNDEFVAR
;

212 
vÆ
 = 
îr_vÆue
;

214  
vÆ
;

219 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
TRUE
);

220 
sym
 = 
	`sym_böd_«me
(
es
->
tok_buf
, 
NULL
, 
sdb_™y
);

221 i‡(
sym
)

224 
vÆ
.
ty≥
 = 
ë_addr
;

225 
vÆ
.
vÆue
.
as_addr
 = 
sym
->
addr
;

226  
vÆ
;

230 
°©
 = 
	`°©_föd_°©
(
sim_sdb
, 
es
->
tok_buf
);

231 i‡(
°©
)

234 
°©
->
sc
)

236 
sc_öt
:

237 
vÆ
.
ty≥
 = 
ë_öt
;

238 
vÆ
.
vÆue
.
as_öt
 = *
°©
->
v¨ü¡
.
f‹_öt
.
v¨
;

240 
sc_uöt
:

241 
vÆ
.
ty≥
 = 
ë_uöt
;

242 
vÆ
.
vÆue
.
as_uöt
 = *
°©
->
v¨ü¡
.
f‹_uöt
.
v¨
;

244 #ifde‡
HOST_HAS_QWORD


245 
sc_qw‹d
:

246 
vÆ
.
ty≥
 = 
ë_qw‹d
;

247 
vÆ
.
vÆue
.
as_qw‹d
 = *
°©
->
v¨ü¡
.
f‹_qw‹d
.
v¨
;

250 
sc_Êﬂt
:

251 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

252 
vÆ
.
vÆue
.
as_Êﬂt
 = *
°©
->
v¨ü¡
.
f‹_Êﬂt
.
v¨
;

254 
sc_doubÀ
:

255 
vÆ
.
ty≥
 = 
ë_doubÀ
;

256 
vÆ
.
vÆue
.
as_doubÀ
 = *
°©
->
v¨ü¡
.
f‹_doubÀ
.
v¨
;

258 
sc_di°
:

259 
sc_sdi°
:

260 
evÆ_îr‹
 = 
ERR_BADEXPR
;

261 
vÆ
 = 
îr_vÆue
;

263 
sc_f‹muœ
:

266 
evÆ_°©e_t
 *
es
 = 
	`evÆ_√w
(
idít_evÆu©‹
, 
sim_sdb
);

267 *
ídp
;

269 
vÆ
 = 
	`evÆ_ex¥
(
es
, 
°©
->
v¨ü¡
.
f‹_f‹muœ
.
f‹muœ
, &
ídp
);

270 i‡(
evÆ_îr‹
 !
ERR_NOERR
 || *
ídp
 != '\0')

273 
vÆ
 = 
îr_vÆue
;

276 
	`evÆ_dñëe
(
es
);

280 
	`∑nic
("bogus stat class");

282  
vÆ
;

287 
evÆ_îr‹
 = 
ERR_UNDEFVAR
;

288 
vÆ
 = 
îr_vÆue
;

289  
vÆ
;

290 
	}
}

293 
	#MAX_ARGS
 4

	)

296 
	#MAX_STR
 128

	)

299 
	u¨g_vÆ_t
 {

300 
	mas_modifõr
;

301 
evÆ_vÆue_t
 
	mas_vÆue
;

302 
	mas_ac˚ss
;

303 
	mas_°r
[
MAX_STR
];

308 (*
	tcmd_‚_t
)(
	t«rgs
,

309 
	t¨g_vÆ_t
 
	t¨gs
[],

310 
	tªgs_t
 *
	tªgs
,

311 
	tmem_t
 *
	tmem
);

315 
	sdlôe_cmd_t
 {

316 *
	mcmd_°r
;

317 *
	m¨g_°rs
[
MAX_ARGS
];

325 
cmd_‚_t
 
	mcmd_‚
;

326 *
	mhñp_°r
;

331 
dlôe_hñp
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

332 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

334 
dlôe_vîsi⁄
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

335 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

337 
dlôe_ãrmö©e
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

338 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

340 
dlôe_quô
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

341 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

343 
dlôe_c⁄t
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

344 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

346 
dlôe_°ï
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

347 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

349 
dlôe_¥öt
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

350 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

352 
dlôe_›ti⁄s
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

353 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

355 
dlôe_›ti⁄
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

356 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

358 
dlôe_°©s
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

359 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

361 
dlôe_°©
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

362 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

364 
dlôe_wh©is
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

365 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

367 
dlôe_ªgs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

368 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

370 
dlôe_úegs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

371 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

373 
dlôe_Âªgs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

374 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

376 
dlôe_¸egs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

377 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

379 
dlôe_m°©e
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

380 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

382 
dlôe_di•œy
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

383 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

385 
dlôe_dump
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

386 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

388 
dlôe_dis
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

389 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

391 
dlôe_bªak
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

392 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

394 
dlôe_dbªak
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

395 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

397 
dlôe_rbªak
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

398 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

400 
dlôe_bªaks
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

401 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

403 
dlôe_dñëe
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

404 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

406 
dlôe_˛ór
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

407 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

409 
dlôe_symbﬁs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

410 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

412 
dlôe_tsymbﬁs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

413 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

415 
dlôe_dsymbﬁs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

416 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

418 
dlôe_symbﬁ
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

419 
ªgs_t
 *
ªgs
, 
mem_t
 *
mem
);

424 
dlôe_cmd_t
 
	gcmd_db
[] =

426 { "hñp", { "s?", 
NULL
 }, 
dlôe_hñp
,

428 { "vîsi⁄", { 
NULL
 }, 
dlôe_vîsi⁄
,

430 { "ãrmö©e", { 
NULL
 }, 
dlôe_ãrmö©e
,

432 { "quô", { 
NULL
 }, 
dlôe_quô
,

434 { "c⁄t", { "a?", 
NULL
 }, 
dlôe_c⁄t
,

436 { "°ï", { 
NULL
 }, 
dlôe_°ï
,

439 { "√xt", { 
NULL
 }, 
dlôe_√xt
,

442 { "¥öt", { "m?", "e", 
NULL
 }, 
dlôe_¥öt
,

444 { "›ti⁄s", { 
NULL
 }, 
dlôe_›ti⁄s
,

446 { "›ti⁄", { "s", 
NULL
 }, 
dlôe_›ti⁄
,

448 { "°©s", { 
NULL
 }, 
dlôe_°©s
,

450 { "°©", { "s", 
NULL
 }, 
dlôe_°©
,

452 { "wh©is", { "e", 
NULL
 }, 
dlôe_wh©is
,

454 { "---", { 
NULL
 }, NULL, NULL },

455 { "ªgs", { 
NULL
 }, 
dlôe_ªgs
,

457 { "úegs", { 
NULL
 }, 
dlôe_úegs
,

459 { "Âªgs", { 
NULL
 }, 
dlôe_Âªgs
,

461 { "¸egs", { 
NULL
 }, 
dlôe_¸egs
,

463 { "m°©e", { "s?", 
NULL
 }, 
dlôe_m°©e
,

465 { "di•œy", { "m?", "a", 
NULL
 }, 
dlôe_di•œy
,

467 { "dump", { "a?", "c?", 
NULL
 }, 
dlôe_dump
,

469 { "dis", { "a?", "c?", 
NULL
 }, 
dlôe_dis
,

471 { "bªak", { "a", 
NULL
 }, 
dlôe_bªak
,

473 { "dbªak", { "a", "t?", 
NULL
 }, 
dlôe_dbªak
,

476 { "rbªak", { "s", "t?", 
NULL
 }, 
dlôe_rbªak
,

479 { "bªaks", { 
NULL
 }, 
dlôe_bªaks
,

481 { "dñëe", { "i", 
NULL
 }, 
dlôe_dñëe
,

483 { "˛ór", { 
NULL
 }, 
dlôe_˛ór
,

485 { "---", { 
NULL
 }, NULL, NULL },

486 { "symbﬁs", { 
NULL
 }, 
dlôe_symbﬁs
,

488 { "tsymbﬁs", { 
NULL
 }, 
dlôe_tsymbﬁs
,

490 { "dsymbﬁs", { 
NULL
 }, 
dlôe_dsymbﬁs
,

492 { "symbﬁ", { "s", 
NULL
 }, 
dlôe_symbﬁ
,

494 { "---", { 
NULL
 }, NULL, NULL },

496 { 
NULL
, { NULL }, NULL, NULL }

500 *
	gdlôe_hñp_èû
 =

515 #ifde‡
HOST_HAS_QWORD


531 
	$dlôe_exec
(*
cmd_°r
,

532 
ªgs_t
 *
ªgs
,

533 
mem_t
 *
mem
)

535 
i
, 
¨g_˙t
;

536 
dlôe_cmd_t
 *
cmd
;

537 
cmd_buf
[512], *
p
, *
q
, *
ídp
;

538 
¨g_vÆ_t
 
¨gs
[
MAX_ARGS
];

540 
p
 = 
cmd_°r
;

541 
q
 = 
cmd_buf
;

544 *
p
 == ' ' || *p == '\t' || *p == '\n')

545 
p
++;

548 i‡(*
p
 == '\0')

551  
NULL
;

555 *
p
 != '\0' && *p != '\n' && *p != ' ' && *p != '\t' && *p != '/')

556 *
q
++ = *
p
++;

557 *
q
 = '\0';

560 
cmd
=
cmd_db
; cmd->
cmd_°r
 !
NULL
; cmd++)

562 i‡(!
	`°rcmp
(
cmd
->
cmd_°r
, 
cmd_buf
))

565 i‡(
cmd
->
cmd_°r
 =
NULL
)

569 
i
=0, 
¨g_˙t
=0; i<
MAX_ARGS
 && 
cmd
->
¨g_°rs
[i] !
NULL
; i++,árg_cnt++)

571 
›ti⁄Æ
, 
ac˚ss
, 
modifõrs
;

572 *
¨g
, 
¨g_ty≥
, *
îr_°r
;

573 
evÆ_vÆue_t
 
vÆ
;

576 *
p
 == ' ' || *p == '\t' || *p == '\n')

577 
p
++;

579 
¨g
 = 
cmd
->
¨g_°rs
[
i
];

580 
¨g_ty≥
 = 
¨g
[0];

581 
›ti⁄Æ
 = (
¨g
[1] == '?');

583 i‡(*
p
 == '\0')

585 i‡(
›ti⁄Æ
)

594 
ídp
 = 
p
;

595 
¨g_ty≥
)

598 
îr_°r
 = 
	`modifõr_∑r£r
(
p
, &
ídp
, &
modifõrs
);

599 i‡(
îr_°r
)

600  
îr_°r
;

601 
¨gs
[
¨g_˙t
].
as_modifõr
 = 
modifõrs
;

604 
loˇl_ªgs
 = 
ªgs
;

605 
vÆ
 = 
	`evÆ_ex¥
(
dlôe_evÆu©‹
, 
p
, &
ídp
);

606 i‡(
evÆ_îr‹
)

607  
evÆ_îr_°r
[
evÆ_îr‹
];

608 
¨gs
[
¨g_˙t
].
as_vÆue
 = 
vÆ
;

611 
loˇl_ªgs
 = 
ªgs
;

612 
vÆ
 = 
	`evÆ_ex¥
(
dlôe_evÆu©‹
, 
p
, &
ídp
);

613 i‡(
evÆ_îr‹
)

614  
evÆ_îr_°r
[
evÆ_îr‹
];

615 
¨gs
[
¨g_˙t
].
as_vÆue
 = 
vÆ
;

618 
loˇl_ªgs
 = 
ªgs
;

619 
vÆ
 = 
	`evÆ_ex¥
(
dlôe_evÆu©‹
, 
p
, &
ídp
);

620 i‡(
evÆ_îr‹
)

621  
evÆ_îr_°r
[
evÆ_îr‹
];

622 
¨gs
[
¨g_˙t
].
as_vÆue
 = 
vÆ
;

625 
ac˚ss
 = 0;

626 *
p
 != '\0' && *p != '\n' && *p != ' ' && *p != '\t')

628 *
p
)

631 
ac˚ss
 |
ACCESS_READ
;

634 
ac˚ss
 |
ACCESS_WRITE
;

637 
ac˚ss
 |
ACCESS_EXEC
;

642 
p
++;

644 
ídp
 = 
p
;

645 
¨gs
[
¨g_˙t
].
as_ac˚ss
 = 
ac˚ss
;

648 
loˇl_ªgs
 = 
ªgs
;

649 
vÆ
 = 
	`evÆ_ex¥
(
dlôe_evÆu©‹
, 
p
, &
ídp
);

650 i‡(
evÆ_îr‹
)

651  
evÆ_îr_°r
[
evÆ_îr‹
];

652 
¨gs
[
¨g_˙t
].
as_vÆue
 = 
vÆ
;

655 
q
 = 
¨gs
[
¨g_˙t
].
as_°r
;

656 *
p
 != ' ' && *p != '\t' && *p != '\0')

657 *
q
++ = *
p
++;

658 *
q
 = '\0';

659 
ídp
 = 
p
;

662 
	`∑nic
("bogu†¨gumíàty≥: `%c'", 
¨g_ty≥
);

664 
p
 = 
ídp
;

669 *
p
 == ' ' || *p == '\t' || *p == '\n')

670 
p
++;

673 i‡(*
p
 != '\0')

677  
cmd
->
	`cmd_‚
(
¨g_˙t
, 
¨gs
, 
ªgs
, 
mem
);

678 
	}
}

682 
	$¥öt_vÆ
(
modifõrs
,

683 
evÆ_vÆue_t
 
vÆ
)

685 *
f‹m©
 = "", *
¥efix
 = "", 
ødix
, 
buf
[512];

688 i‡((
modifõrs
 & 
MOD_SIZES
) == 0)

691 
vÆ
.
ty≥
)

693 
ë_öt
: 
modifõrs
 |
MOD_WORD
; ;

694 
ë_uöt
: 
modifõrs
 |
MOD_WORD
; ;

695 
ë_addr
:

696 #ifde‡
HOST_HAS_QWORD


697 i‡((
md_addr_t
) > 4)

698 
modifõrs
 |
MOD_QWORD
;

701 
modifõrs
 |
MOD_WORD
;

703 #ifde‡
HOST_HAS_QWORD


704 
ë_qw‹d
: 
modifõrs
 |
MOD_QWORD
; ;

705 
ë_sqw‹d
: 
modifõrs
 |
MOD_QWORD
; ;

707 
ë_Êﬂt
: 
modifõrs
 |
MOD_FLOAT
; ;

708 
ë_doubÀ
: 
modifõrs
 |
MOD_DOUBLE
; ;

709 
ë_symbﬁ
:

713 i‡(((
modifõrs
 & 
MOD_SIZES
) & ((modifiers & MOD_SIZES) - 1)) != 0)

717 i‡((
modifõrs
 & 
MOD_FORMATS
) == 0)

720 
vÆ
.
ty≥
)

722 
ë_öt
: 
modifõrs
 |
MOD_DECIMAL
; ;

723 
ë_uöt
: 
modifõrs
 |
MOD_UNSIGNED
; ;

724 
ë_addr
: 
modifõrs
 |
MOD_HEX
; ;

725 #ifde‡
HOST_HAS_QWORD


726 
ë_qw‹d
: 
modifõrs
 |
MOD_UNSIGNED
; ;

727 
ë_sqw‹d
: 
modifõrs
 |
MOD_DECIMAL
; ;

729 
ë_Êﬂt
: ;

730 
ë_doubÀ
: ;

731 
ë_symbﬁ
:

735 i‡(((
modifõrs
 & 
MOD_FORMATS
) & ((modifiers & MOD_FORMATS) - 1)) != 0)

739 i‡(
modifõrs
 & (
MOD_BYTE
|
MOD_HALF
|
MOD_WORD
|
MOD_QWORD
))

741 i‡(
modifõrs
 & 
MOD_DECIMAL
)

742 
ødix
 = 'd';

743 i‡(
modifõrs
 & 
MOD_UNSIGNED
)

744 
ødix
 = 'u';

745 i‡(
modifõrs
 & 
MOD_OCTAL
)

746 
ødix
 = 'o';

747 i‡(
modifõrs
 & 
MOD_HEX
)

748 
ødix
 = 'x';

749 i‡(
modifõrs
 & 
MOD_BINARY
)

752 
	`∑nic
("no default integer format");

754 i‡(
modifõrs
 & 
MOD_BYTE
)

756 i‡(
modifõrs
 & 
MOD_OCTAL
)

758 
¥efix
 = "0";

759 
f‹m©
 = "03";

761 i‡(
modifõrs
 & 
MOD_HEX
)

763 
¥efix
 = "0x";

764 
f‹m©
 = "02";

768 
¥efix
 = "";

769 
f‹m©
 = "";

772 
	`•rötf
(
buf
, "%s%%%s%c", 
¥efix
, 
f‹m©
, 
ødix
);

773 
	`myÂrötf
(
°dout
, 
buf
, 
	`evÆ_as_uöt
(
vÆ
));

775 i‡(
modifõrs
 & 
MOD_HALF
)

777 i‡(
modifõrs
 & 
MOD_OCTAL
)

779 
¥efix
 = "0";

780 
f‹m©
 = "06";

782 i‡(
modifõrs
 & 
MOD_HEX
)

784 
¥efix
 = "0x";

785 
f‹m©
 = "04";

789 
¥efix
 = "";

790 
f‹m©
 = "";

793 
	`•rötf
(
buf
, "%s%%%s%c", 
¥efix
, 
f‹m©
, 
ødix
);

794 
	`myÂrötf
(
°dout
, 
buf
, 
	`evÆ_as_uöt
(
vÆ
));

796 i‡(
modifõrs
 & 
MOD_WORD
)

798 i‡(
modifõrs
 & 
MOD_OCTAL
)

800 
¥efix
 = "0";

801 
f‹m©
 = "011";

803 i‡(
modifõrs
 & 
MOD_HEX
)

805 
¥efix
 = "0x";

806 
f‹m©
 = "08";

810 
¥efix
 = "";

811 
f‹m©
 = "";

814 
	`•rötf
(
buf
, "%s%%%s%c", 
¥efix
, 
f‹m©
, 
ødix
);

815 
	`myÂrötf
(
°dout
, 
buf
, 
	`evÆ_as_uöt
(
vÆ
));

817 #ifde‡
HOST_HAS_QWORD


818 i‡(
modifõrs
 & 
MOD_QWORD
)

820 i‡(
modifõrs
 & 
MOD_OCTAL
)

822 
¥efix
 = "0";

823 
f‹m©
 = "022";

825 i‡(
modifõrs
 & 
MOD_HEX
)

827 
¥efix
 = "0x";

828 
f‹m©
 = "016";

832 
¥efix
 = "";

833 
f‹m©
 = "";

836 
	`•rötf
(
buf
, "%s%%%¶%c", 
¥efix
, 
f‹m©
, 
ødix
);

837 
	`myÂrötf
(
°dout
, 
buf
, 
	`evÆ_as_qw‹d
(
vÆ
));

841 i‡(
modifõrs
 & 
MOD_FLOAT
)

842 
	`Ârötf
(
°dout
, "%f", ()
	`evÆ_as_Êﬂt
(
vÆ
));

843 i‡(
modifõrs
 & 
MOD_DOUBLE
)

844 
	`Ârötf
(
°dout
, "%f", 
	`evÆ_as_doubÀ
(
vÆ
));

845 i‡(
modifõrs
 & 
MOD_CHAR
)

846 
	`Ârötf
(
°dout
, "`%c'", 
	`evÆ_as_uöt
(
vÆ
));

847 i‡(
modifõrs
 & 
MOD_STRING
)

850 
	`∑nic
("no default format");

853  
NULL
;

854 
	}
}

858 
	$dlôe_mem_obj
(
mem_t
 *
mem
,

859 
is_wrôe
,

860 
md_addr_t
 
addr
,

861 *
p
,

862 
nbyãs
)

864 
mem_cmd
 
cmd
;

866 i‡(!
is_wrôe
)

867 
cmd
 = 
Ród
;

869 
cmd
 = 
Wrôe
;

872 *
îr°r
;

873 
îr°r
 = 
	`mem_vÆid
(
cmd
, 
addr
, 
nbyãs
, 
FALSE
);

874 i‡(
îr°r
)

875  
îr°r
;

879 
	`mem_ac˚ss
(
mem
, 
cmd
, 
addr
, 
p
, 
nbyãs
);

882  
NULL
;

883 
	}
}

887 
	$dlôe_m°©e_obj
(
FILE
 *
°ªam
,

888 *
cmd
,

889 
ªgs_t
 *
ªgs
,

890 
mem_t
 *
mem
)

893 
	`Ârötf
(
°ªam
, "No machine state.\n");

896  
NULL
;

897 
	}
}

901 
	$dlôe_∑u£
()

903 
buf
[512];

904 
	`Ârötf
(
°dout
, "Press <return>Åo continue...");

905 
	`fÊush
(
°dout
);

906 
	`fgës
(
buf
, 512, 
°dö
);

907 
	}
}

911 
	$¥öt_hñp
(
dlôe_cmd_t
 *
cmd
)

913 
i
;

916 
	`Ârötf
(
°dout
, " %†", 
cmd
->
cmd_°r
);

919 
i
=0; i < 
MAX_ARGS
 && 
cmd
->
¨g_°rs
[i] !
NULL
; i++)

921 
›ti⁄Æ
;

922 *
¨g
, 
¨g_ty≥
;

924 
¨g
 = 
cmd
->
¨g_°rs
[
i
];

925 
¨g_ty≥
 = 
¨g
[0];

926 
›ti⁄Æ
 = (
¨g
[1] == '?');

928 i‡(
›ti⁄Æ
)

929 
	`Ârötf
(
°dout
, "{");

931 
	`Ârötf
(
°dout
, "<");

933 
¨g_ty≥
)

936 
	`Ârötf
(
°dout
, "/modifiers");

939 
	`Ârötf
(
°dout
, "addr");

942 
	`Ârötf
(
°dout
, "count");

945 
	`Ârötf
(
°dout
, "expr");

948 
	`Ârötf
(
°dout
, "r|w|x");

951 
	`Ârötf
(
°dout
, "id");

954 
	`Ârötf
(
°dout
, "string");

957 
	`∑nic
("bogu†¨gumíàty≥: `%c'", 
¨g_ty≥
);

960 i‡(
›ti⁄Æ
)

961 
	`Ârötf
(
°dout
, "}");

963 
	`Ârötf
(
°dout
, ">");

965 
	`Ârötf
(
°dout
, " ");

967 
	`Ârötf
(
°dout
, "\n");

970 
	`Ârötf
(
°dout
, " %s\n", 
cmd
->
hñp_°r
);

971 
	}
}

975 
	$dlôe_hñp
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

976 
ªgs_t
 *
ªgs
,

977 
mem_t
 *
mem
)

979 
dlôe_cmd_t
 *
cmd
;

981 i‡(
«rgs
 != 0 &&Çargs != 1)

984 i‡(
«rgs
 == 1)

987 
cmd
=
cmd_db
; cmd->
cmd_°r
 !
NULL
; cmd++)

989 i‡(!
	`°rcmp
(
cmd
->
cmd_°r
, 
¨gs
[0].
as_°r
))

992 i‡(!
cmd
->
cmd_°r
)

995 
	`¥öt_hñp
(
cmd
);

1000 
cmd
=
cmd_db
; cmd->
cmd_°r
 !
NULL
; cmd++)

1003 i‡(!
	`°rcmp
(
cmd
->
cmd_°r
, "---"))

1004 
	`dlôe_∑u£
();

1006 
	`¥öt_hñp
(
cmd
);

1009 
	`Ârötf
 (
°dout
, "\n");

1010 i‡(
dlôe_hñp_èû
)

1011 
	`Ârötf
 (
°dout
, "%s\n", 
dlôe_hñp_èû
);

1015  
NULL
;

1016 
	}
}

1020 
	$dlôe_vîsi⁄
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1021 
ªgs_t
 *
ªgs
,

1022 
mem_t
 *
mem
)

1024 i‡(
«rgs
 != 0)

1028 
	`Ârötf
(
°dout
, "The SimpleScalar/%s Tool Set, version %d.%d of %s.\n",

1029 
VER_TARGET
, 
VER_MAJOR
, 
VER_MINOR
, 
VER_UPDATE
);

1030 
	`Ârötf
(
°dout
,

1034  
NULL
;

1035 
	}
}

1039 
	$dlôe_ãrmö©e
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1040 
ªgs_t
 *
ªgs
,

1041 
mem_t
 *
mem
)

1043 i‡(
«rgs
 != 0)

1046 
	`Ârötf
(
°dout
, "DLite:Åerminating simulation...\n");

1047 
	`l⁄gjmp
(
sim_exô_buf
, 1);

1050  
NULL
;

1051 
	}
}

1055 
	$dlôe_quô
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1056 
ªgs_t
 *
ªgs
,

1057 
mem_t
 *
mem
)

1059 i‡(
«rgs
 != 0)

1062 
	`Ârötf
(
°dout
, "DLite:Éxiting simulator...\n");

1063 
	`exô
(1);

1066  
NULL
;

1067 
	}
}

1071 
	$dlôe_c⁄t
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1072 
ªgs_t
 *
ªgs
,

1073 
mem_t
 *
mem
)

1075 
evÆ_vÆue_t
 
vÆ
;

1077 i‡(!
f_dlôe_ªg_obj
 || !
f_dlôe_mem_obj
)

1078 
	`∑nic
("DLite isÇot configured");

1080 i‡(
«rgs
 != 0 &&Çargs != 1)

1083 i‡(
«rgs
 == 1)

1086 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1090 
vÆ
.
ty≥
 = 
ë_addr
;

1091 
vÆ
.
vÆue
.
as_addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1092 
	`f_dlôe_ªg_obj
(
ªgs
, 
TRUE
, 
π_PC
, 0, &
vÆ
);

1094 
	`myÂrötf
(
°dout
, "DLite: continuingÉxecution @ 0x%08p...\n",

1095 
vÆ
.
vÆue
.
as_addr
);

1099 
dlôe_a˘ive
 = 
FALSE
;

1100 
dlôe_ªtu∫
 = 
TRUE
;

1103  
NULL
;

1104 
	}
}

1108 
	$dlôe_°ï
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1109 
ªgs_t
 *
ªgs
,

1110 
mem_t
 *
mem
)

1112 i‡(
«rgs
 != 0)

1116 
dlôe_a˘ive
 = 
TRUE
;

1117 
dlôe_ªtu∫
 = 
TRUE
;

1120  
NULL
;

1121 
	}
}

1126 
	$dlôe_√xt
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[])

1128 i‡(
«rgs
 != 0)

1132 
dlôe_°ï_˙t
 = 1;

1133 
dlôe_°ï_öto
 = 
FALSE
;

1136  
NULL
;

1137 
	}
}

1142 
	$dlôe_¥öt
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1143 
ªgs_t
 *
ªgs
,

1144 
mem_t
 *
mem
)

1146 
modifõrs
 = 0;

1147 *
îr_°r
;

1148 
evÆ_vÆue_t
 
vÆ
;

1150 i‡(
«rgs
 != 1 &&Çargs != 2)

1153 i‡(
«rgs
 == 2)

1156 
modifõrs
 = 
¨gs
[0].
as_modifõr
;

1157 
vÆ
 = 
¨gs
[1].
as_vÆue
;

1162 
vÆ
 = 
¨gs
[0].
as_vÆue
;

1166 
îr_°r
 = 
	`¥öt_vÆ
(
modifõrs
, 
vÆ
);

1167 i‡(
îr_°r
)

1168  
îr_°r
;

1169 
	`Ârötf
(
°dout
, "\n");

1172  
NULL
;

1173 
	}
}

1177 
	$dlôe_›ti⁄s
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1178 
ªgs_t
 *
ªgs
,

1179 
mem_t
 *
mem
)

1181 i‡(
«rgs
 != 0)

1185 
	`›t_¥öt_›ti⁄s
(
sim_odb
, 
°dout
, 
TRUE
, 
FALSE
);

1188  
NULL
;

1189 
	}
}

1193 
	$dlôe_›ti⁄
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1194 
ªgs_t
 *
ªgs
,

1195 
mem_t
 *
mem
)

1197 
›t_›t_t
 *
›t
;

1199 i‡(
«rgs
 != 1)

1203 
›t
 = 
	`›t_föd_›ti⁄
(
sim_odb
, 
¨gs
[0].
as_°r
);

1204 i‡(!
›t
)

1208 
	`Ârötf
(
°dout
, "%-16† ", 
›t
->
«me
);

1209 
	`›t_¥öt_›ti⁄
(
›t
, 
°dout
);

1210 i‡(
›t
->
desc
)

1211 
	`Ârötf
(
°dout
, " # %s", 
›t
->
desc
);

1212 
	`Ârötf
(
°dout
, "\n");

1215  
NULL
;

1216 
	}
}

1220 
	$dlôe_°©s
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1221 
ªgs_t
 *
ªgs
,

1222 
mem_t
 *
mem
)

1224 i‡(
«rgs
 != 0)

1228 
	`°©_¥öt_°©s
(
sim_sdb
, 
°dout
);

1229 
	`sim_aux_°©s
(
°dout
);

1232  
NULL
;

1233 
	}
}

1237 
	$dlôe_°©
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1238 
ªgs_t
 *
ªgs
,

1239 
mem_t
 *
mem
)

1241 
°©_°©_t
 *
°©
;

1243 i‡(
«rgs
 != 1)

1247 
°©
 = 
	`°©_föd_°©
(
sim_sdb
, 
¨gs
[0].
as_°r
);

1248 i‡(!
°©
)

1252 
	`°©_¥öt_°©
(
sim_sdb
, 
°©
, 
°dout
);

1255  
NULL
;

1256 
	}
}

1260 
	$dlôe_wh©is
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1261 
ªgs_t
 *
ªgs
,

1262 
mem_t
 *
mem
)

1264 i‡(
«rgs
 != 1)

1267 
	`Ârötf
(
°dout
, "ty≥ =`%s'\n", 
evÆ_ty≥_°r
[
¨gs
[0].
as_vÆue
.
ty≥
]);

1270  
NULL
;

1271 
	}
}

1275 
	$dlôe_úegs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1276 
ªgs_t
 *
ªgs
,

1277 
mem_t
 *
mem
)

1279 *
îr_°r
;

1281 i‡(
«rgs
 != 0)

1285 
	`myÂrötf
(
°dout
, "PC: 0x%08p NPC: 0x%08p\n",

1286 
ªgs
->
ªgs_PC
,Ñegs->
ªgs_NPC
);

1287 i‡((
îr_°r
 = 
	`dlôe_¸egs
(
«rgs
, 
¨gs
, 
ªgs
, 
mem
)Ë!
NULL
)

1288  
îr_°r
;

1289 
	`md_¥öt_úegs
(
ªgs
->
ªgs_R
, 
°dout
);

1292  
NULL
;

1293 
	}
}

1297 
	$dlôe_Âªgs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1298 
ªgs_t
 *
ªgs
,

1299 
mem_t
 *
mem
)

1302 
	`md_¥öt_Âªgs
(
ªgs
->
ªgs_F
, 
°dout
);

1305  
NULL
;

1306 
	}
}

1310 
	$dlôe_¸egs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1311 
ªgs_t
 *
ªgs
,

1312 
mem_t
 *
mem
)

1315 
	`md_¥öt_¸egs
(
ªgs
->
ªgs_C
, 
°dout
);

1318  
NULL
;

1319 
	}
}

1323 
	$dlôe_ªgs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1324 
ªgs_t
 *
ªgs
,

1325 
mem_t
 *
mem
)

1327 *
îr_°r
;

1329 
	`myÂrötf
(
°dout
, "PC: 0x%08p NPC: 0x%08p\n",

1330 
ªgs
->
ªgs_PC
,Ñegs->
ªgs_NPC
);

1331 i‡((
îr_°r
 = 
	`dlôe_¸egs
(
«rgs
, 
¨gs
, 
ªgs
, 
mem
)Ë!
NULL
)

1332  
îr_°r
;

1333 
	`md_¥öt_úegs
(
ªgs
->
ªgs_R
, 
°dout
);

1334 
	`dlôe_∑u£
();

1335 i‡((
îr_°r
 = 
	`dlôe_Âªgs
(
«rgs
, 
¨gs
, 
ªgs
, 
mem
)Ë!
NULL
)

1336  
îr_°r
;

1339  
NULL
;

1340 
	}
}

1344 
	$dlôe_m°©e
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1345 
ªgs_t
 *
ªgs
,

1346 
mem_t
 *
mem
)

1348 *
îr°r
;

1350 i‡(
«rgs
 != 0 &&Çargs != 1)

1353 i‡(
f_dlôe_m°©e_obj
)

1355 i‡(
«rgs
 == 0)

1357 
îr°r
 = 
	`f_dlôe_m°©e_obj
(
°dout
, 
NULL
, 
ªgs
, 
mem
);

1358 i‡(
îr°r
)

1359  
îr°r
;

1363 
îr°r
 = 
	`f_dlôe_m°©e_obj
(
°dout
, 
¨gs
[0].
as_°r
, 
ªgs
, 
mem
);

1364 i‡(
îr°r
)

1365  
îr°r
;

1370  
NULL
;

1371 
	}
}

1375 
	$dlôe_di•œy
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1376 
ªgs_t
 *
ªgs
,

1377 
mem_t
 *
mem
)

1379 
modifõrs
, 
size
;

1380 
md_addr_t
 
addr
;

1381 
buf
[512];

1382 
evÆ_vÆue_t
 
vÆ
;

1383 *
îr°r
;

1385 i‡(
«rgs
 != 1 &&Çargs != 2)

1388 i‡(
«rgs
 == 1)

1391 
modifõrs
 = 0;

1394 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1398 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1400 i‡(
«rgs
 == 2)

1402 
modifõrs
 = 
¨gs
[0].
as_modifõr
;

1405 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[1].
as_vÆue
.
ty≥
))

1409 
addr
 = 
	`evÆ_as_addr
(
¨gs
[1].
as_vÆue
);

1413 i‡(
modifõrs
 & (
MOD_BYTE
|
MOD_CHAR
))

1414 
size
 = 1;

1415 i‡(
modifõrs
 & 
MOD_HALF
)

1416 
size
 = 2;

1417 i‡(
modifõrs
 & (
MOD_QWORD
|
MOD_DOUBLE
))

1418 
size
 = 8;

1420 
size
 = 4;

1423 
îr°r
 = 
	`f_dlôe_mem_obj
(
mem
, 
FALSE
, 
addr
, (*)
buf
, 
size
);

1424 i‡(
îr°r
)

1425  
îr°r
;

1428 i‡(
modifõrs
 & (
MOD_BYTE
|
MOD_CHAR
))

1431 
vÆ
.
ty≥
 = 
ë_öt
;

1432 
vÆ
.
vÆue
.
as_öt
 = ()*(*)
buf
;

1434 i‡(
modifõrs
 & 
MOD_HALF
)

1437 
vÆ
.
ty≥
 = 
ë_öt
;

1438 
vÆ
.
vÆue
.
as_öt
 = ()*(*)
buf
;

1440 i‡(
modifõrs
 & (
MOD_QWORD
|
MOD_DOUBLE
))

1443 
vÆ
.
ty≥
 = 
ë_doubÀ
;

1444 
vÆ
.
vÆue
.
as_doubÀ
 = *(*)
buf
;

1449 
vÆ
.
ty≥
 = 
ë_uöt
;

1450 
vÆ
.
vÆue
.
as_uöt
 = *(*)
buf
;

1454 
îr°r
 = 
	`¥öt_vÆ
(
modifõrs
, 
vÆ
);

1455 i‡(
îr°r
)

1456  
îr°r
;

1457 
	`Ârötf
(
°dout
, "\n");

1460  
NULL
;

1461 
	}
}

1464 
	#BYTES_PER_LINE
 16

	)

1465 
	#LINES_PER_SCREEN
 4

	)

1469 
	$dlôe_dump
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1470 
ªgs_t
 *
ªgs
,

1471 
mem_t
 *
mem
)

1473 
i
, 
j
;

1474 
cou¡
 = 
LINES_PER_SCREEN
 * 
BYTES_PER_LINE
, 
i_cou¡
, 
fmt_cou¡
, 
fmt_löes
;

1475 
md_addr_t
 
fmt_addr
, 
i_addr
;

1476 
md_addr_t
 
addr
 = 0;

1477 
byã
;

1478 
buf
[512];

1479 *
îr°r
;

1481 i‡(
«rgs
 < 0 ||Çargs > 2)

1484 i‡(
«rgs
 == 1)

1487 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1491 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1493 i‡(
«rgs
 == 2)

1496 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1500 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1503 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[1].
as_vÆue
.
ty≥
))

1506 i‡(
	`evÆ_as_uöt
(
¨gs
[1].
as_vÆue
) > 1024)

1510 
cou¡
 = 
	`evÆ_as_uöt
(
¨gs
[1].
as_vÆue
);

1515 
fmt_addr
 = 
addr
 & ~(
BYTES_PER_LINE
 - 1);

1516 
fmt_cou¡
 = (
cou¡
 + (
BYTES_PER_LINE
 - 1)) & ~(BYTES_PER_LINE - 1);

1517 
fmt_löes
 = 
fmt_cou¡
 / 
BYTES_PER_LINE
;

1519 i‡(
fmt_löes
 < 1)

1520 
	`∑nic
("no outputÜines");

1523 i‡(
fmt_löes
 == 1)

1526 
i_addr
 = 
fmt_addr
;

1527 
	`myÂrötf
(
°dout
, "0x%08p: ", 
i_addr
);

1528 
i
=0; i < 
cou¡
; i++)

1530 
îr°r
 =

1531 
	`f_dlôe_mem_obj
(
mem
, 
FALSE
,

1532 
i_addr
, (*)&
byã
, 1);

1533 i‡(
îr°r
)

1534  
îr°r
;

1535 
	`Ârötf
(
°dout
, "%02x ", 
byã
);

1536 i‡(
	`i•röt
(
byã
))

1537 
buf
[
i
] = 
byã
;

1539 
buf
[
i
] = '.';

1540 
i_addr
++;

1541 
addr
++;

1543 
buf
[
i
] = '\0';

1546 
	`Ârötf
(
°dout
, "[%s]\n", 
buf
);

1550 
i_cou¡
 = 0;

1551 
i_addr
 = 
fmt_addr
;

1552 
i
=0; i < 
fmt_löes
; i++)

1554 
	`myÂrötf
(
°dout
, "0x%08p: ", 
i_addr
);

1557 
j
=0; j < 
BYTES_PER_LINE
; j++)

1559 i‡(
i_addr
 >
addr
 && 
i_cou¡
 <
cou¡
)

1561 
îr°r
 =

1562 
	`f_dlôe_mem_obj
(
mem
, 
FALSE
,

1563 
i_addr
, (*)&
byã
, 1);

1564 i‡(
îr°r
)

1565  
îr°r
;

1566 
	`Ârötf
(
°dout
, "%02x ", 
byã
);

1567 i‡(
	`i•röt
(
byã
))

1568 
buf
[
j
] = 
byã
;

1570 
buf
[
j
] = '.';

1571 
i_cou¡
++;

1572 
addr
++;

1576 
	`Ârötf
(
°dout
, " ");

1577 
buf
[
j
] = ' ';

1579 
i_addr
++;

1581 
buf
[
j
] = '\0';

1584 
	`Ârötf
(
°dout
, "[%s]\n", 
buf
);

1589  
NULL
;

1590 
	}
}

1593 
	#INSTS_PER_SCREEN
 16

	)

1597 
	$dlôe_dis
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1598 
ªgs_t
 *
ªgs
,

1599 
mem_t
 *
mem
)

1601 
i
;

1602 
cou¡
 = 
INSTS_PER_SCREEN
;

1603 
md_addr_t
 
addr
 = 0;

1604 
md_ö°_t
 
ö°
;

1605 *
îr°r
;

1607 i‡(
«rgs
 < 0 ||Çargs > 2)

1610 i‡(
«rgs
 == 1)

1613 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1617 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1619 i‡(
«rgs
 == 2)

1622 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1626 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1629 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1633 
cou¡
 = 
	`evÆ_as_uöt
(
¨gs
[1].
as_vÆue
);

1635 i‡(
cou¡
 < 0 || count > 1024)

1640 i‡((
addr
 % (
md_ö°_t
)) != 0)

1644 
i
=0; i<
cou¡
; i++)

1647 
	`myÂrötf
(
°dout
, " 0x%08p: ", 
addr
);

1648 
îr°r
 =

1649 
	`f_dlôe_mem_obj
(
mem
, 
FALSE
,

1650 
addr
, (*)&
ö°
, (inst));

1651 
ö°
 = 
	`MD_SWAPI
(inst);

1652 i‡(
îr°r
)

1653  
îr°r
;

1654 
	`md_¥öt_ö¢
(
ö°
, 
addr
, 
°dout
);

1655 
	`Ârötf
(
°dout
, "\n");

1658 
addr
 +(
md_ö°_t
);

1662  
NULL
;

1663 
	}
}

1666 
	sdlôe_bªak_t
 {

1667 
dlôe_bªak_t
 *
	m√xt
;

1668 
	mid
;

1669 
	m˛ass
;

1670 
ønge_ønge_t
 
	mønge
;

1674 
dlôe_bªak_t
 *
	gdlôe_bps
 = 
NULL
;

1677 
	gbªak_id
 = 1;

1681 
	$bp_˛ass_°r
(
˛ass
)

1683 i‡(
˛ass
 =(
ACCESS_READ
|
ACCESS_WRITE
|
ACCESS_EXEC
))

1685 i‡(
˛ass
 =(
ACCESS_READ
|
ACCESS_WRITE
))

1687 i‡(
˛ass
 =(
ACCESS_WRITE
|
ACCESS_EXEC
))

1689 i‡(
˛ass
 =(
ACCESS_READ
|
ACCESS_EXEC
))

1691 i‡(
˛ass
 =
ACCESS_READ
)

1693 i‡(
˛ass
 =
ACCESS_WRITE
)

1695 i‡(
˛ass
 =
ACCESS_EXEC
)

1698 
	`∑nic
("bogusáccess class");

1699 
	}
}

1703 
	$£t_bªak
(
˛ass
,

1704 
ønge_ønge_t
 *
ønge
)

1706 
dlôe_bªak_t
 *
bp
;

1709 
bp
 = 
	`ˇŒoc
(1, (
dlôe_bªak_t
));

1710 i‡(!
bp
)

1711 
	`Áèl
("out of virtual memory");

1713 
bp
->
id
 = 
bªak_id
++;

1714 
bp
->
ønge
 = *range;

1715 
bp
->
˛ass
 = class;

1717 
bp
->
√xt
 = 
dlôe_bps
;

1718 
dlôe_bps
 = 
bp
;

1720 
	`Ârötf
(
°dout
, "bªakpoöà#%d së @ ", 
bp
->
id
);

1721 
	`ønge_¥öt_ønge
(&
bp
->
ønge
, 
°dout
);

1722 
	`Ârötf
(
°dout
, ", cœss: %s\n", 
	`bp_˛ass_°r
(
˛ass
));

1725 
dlôe_check
 = 
TRUE
;

1728  
NULL
;

1729 
	}
}

1733 
	$dñëe_bªak
(
id
)

1735 
dlôe_bªak_t
 *
bp
, *
¥ev
;

1737 i‡(!
dlôe_bps
)

1740 
bp
=
dlôe_bps
,
¥ev
=
NULL
; b∞!NULL;Öªv=bp,bp=bp->
√xt
)

1742 i‡(
bp
->
id
 == id)

1745 i‡(!
bp
)

1748 i‡(!
¥ev
)

1751 
dlôe_bps
 = 
bp
->
√xt
;

1756 
¥ev
->
√xt
 = 
bp
->next;

1759 
	`Ârötf
(
°dout
, "bªakpoöà#%d dñëed @ ", 
bp
->
id
);

1760 
	`ønge_¥öt_ønge
(&
bp
->
ønge
, 
°dout
);

1761 
	`Ârötf
(
°dout
, ", cœss: %s\n", 
	`bp_˛ass_°r
(
bp
->
˛ass
));

1763 
bp
->
√xt
 = 
NULL
;

1764 
	`‰ì
(
bp
);

1766 i‡(!
dlôe_bps
)

1769 
dlôe_check
 = 
FALSE
;

1774 
dlôe_check
 = 
TRUE
;

1778  
NULL
;

1779 
	}
}

1782 
	gbªak_ac˚ss
 = 0;

1786 
	$__check_bªak
(
md_addr_t
 
√xt_PC
,

1787 
ac˚ss
,

1788 
md_addr_t
 
addr
,

1789 
cou¡î_t
 
icou¡
,

1790 
cou¡î_t
 
cy˛e
)

1792 
dlôe_bªak_t
 *
bp
;

1794 i‡(
dlôe_a˘ive
)

1797 
bªak_ac˚ss
 = 0;

1798  
TRUE
;

1802 
bp
=
dlôe_bps
; b∞!
NULL
; bp=bp->
√xt
)

1804 
bp
->
ønge
.
°¨t
.
±y≥
)

1806 
±_addr
:

1807 i‡((
bp
->
˛ass
 & 
ACCESS_EXEC
)

1808 && !
	`ønge_cmp_ønge
(&
bp
->
ønge
, 
√xt_PC
))

1811 
	`myÂrötf
(
°dout
,

1813 
bp
->
id
, 
√xt_PC
);

1814 
bªak_ac˚ss
 = 
ACCESS_EXEC
;

1815  
TRUE
;

1817 i‡((
bp
->
˛ass
 & 
ACCESS_READ
)

1818 && ((
ac˚ss
 & 
ACCESS_READ
)

1819 && !
	`ønge_cmp_ønge
(&
bp
->
ønge
, 
addr
)))

1822 
	`myÂrötf
(
°dout
,

1824 
bp
->
id
, 
addr
);

1825 
bªak_ac˚ss
 = 
ACCESS_READ
;

1826  
TRUE
;

1828 i‡((
bp
->
˛ass
 & 
ACCESS_WRITE
)

1829 && ((
ac˚ss
 & 
ACCESS_WRITE
)

1830 && !
	`ønge_cmp_ønge
(&
bp
->
ønge
, 
addr
)))

1833 
	`myÂrötf
(
°dout
,

1835 
bp
->
id
, 
addr
);

1836 
bªak_ac˚ss
 = 
ACCESS_WRITE
;

1837  
TRUE
;

1841 
±_ö°
:

1842 i‡(!
	`ønge_cmp_ønge
(&
bp
->
ønge
, 
icou¡
))

1845 
	`Ârötf
(
°dout
,

1847 
bp
->
id
, ()
icou¡
);

1848 
bªak_ac˚ss
 = 
ACCESS_EXEC
;

1849  
TRUE
;

1853 
±_cy˛e
:

1854 i‡(!
	`ønge_cmp_ønge
(&
bp
->
ønge
, 
cy˛e
))

1857 
	`Ârötf
(
°dout
,

1859 
bp
->
id
, ()
cy˛e
);

1860 
bªak_ac˚ss
 = 
ACCESS_EXEC
;

1861  
TRUE
;

1866 
	`∑nic
("bogusÑangeÅype");

1873 
bªak_ac˚ss
 = 0;

1874  
FALSE
;

1875 
	}
}

1879 
	$dlôe_bªak
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1880 
ªgs_t
 *
ªgs
,

1881 
mem_t
 *
mem
)

1883 
md_addr_t
 
addr
;

1884 
ønge_ønge_t
 
ønge
;

1886 i‡(
«rgs
 != 1)

1890 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1894 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1897 
ønge
.
°¨t
.
±y≥
 = 
±_addr
;

1898 
ønge
.
°¨t
.
pos
 = 
addr
;

1899 
ønge
.
íd
.
±y≥
 = 
±_addr
;

1900 #ifde‡
TARGET_ALPHA


1903 
ønge
.
íd
.
pos
 = 
addr
 + 9;

1905 
ønge
.
íd
.
pos
 = 
addr
 + 1;

1909  
	`£t_bªak
(
ACCESS_EXEC
, &
ønge
);

1910 
	}
}

1914 
	$dlôe_dbªak
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1915 
ªgs_t
 *
ªgs
,

1916 
mem_t
 *
mem
)

1918 
ac˚ss
;

1919 
md_addr_t
 
addr
;

1920 
ønge_ønge_t
 
ønge
;

1922 i‡(
«rgs
 != 1 &&Çargs != 2)

1925 i‡(
«rgs
 == 1)

1928 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1932 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1935 
ac˚ss
 = 
ACCESS_READ
|
ACCESS_WRITE
;

1937 i‡(
«rgs
 == 2)

1940 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

1944 
addr
 = 
	`evÆ_as_addr
(
¨gs
[0].
as_vÆue
);

1947 
ac˚ss
 = 
¨gs
[1].
as_ac˚ss
;

1951 
ønge
.
°¨t
.
±y≥
 = 
±_addr
;

1952 
ønge
.
°¨t
.
pos
 = 
addr
;

1953 
ønge
.
íd
.
±y≥
 = 
±_addr
;

1954 
ønge
.
íd
.
pos
 = 
addr
 + 1;

1957  
	`£t_bªak
(
ac˚ss
, &
ønge
);

1958 
	}
}

1962 
	$dlôe_rbªak
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

1963 
ªgs_t
 *
ªgs
,

1964 
mem_t
 *
mem
)

1966 
ac˚ss
;

1967 *
îr°r
;

1968 
ønge_ønge_t
 
ønge
;

1970 i‡(
«rgs
 != 1 &&Çargs != 2)

1973 i‡(
«rgs
 == 2)

1976 
ac˚ss
 = 
¨gs
[1].
as_ac˚ss
;

1981 
ac˚ss
 = 
ACCESS_READ
|
ACCESS_WRITE
|
ACCESS_EXEC
;

1985 
îr°r
 = 
	`ønge_∑r£_ønge
(
¨gs
[0].
as_°r
, &
ønge
);

1986 i‡(
îr°r
)

1987  
îr°r
;

1990 i‡(
ønge
.
°¨t
.
±y≥
 !ønge.
íd
.ptype)

1992 i‡(
ønge
.
°¨t
.
pos
 >Ñ™ge.
íd
.pos)

1996  
	`£t_bªak
(
ac˚ss
, &
ønge
);

1997 
	}
}

2001 
	$dlôe_bªaks
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2002 
ªgs_t
 *
ªgs
,

2003 
mem_t
 *
mem
)

2005 
dlôe_bªak_t
 *
bp
;

2007 i‡(!
dlôe_bps
)

2009 
	`Ârötf
(
°dout
, "Noáctive breakpoints.\n");

2012  
NULL
;

2015 
	`Ârötf
(
°dout
, "Active breakpoints:\n");

2016 
bp
=
dlôe_bps
; b∞!
NULL
; bp=bp->
√xt
)

2018 
	`Ârötf
(
°dout
, " bªakpoöà#%d @ ", 
bp
->
id
);

2019 
	`ønge_¥öt_ønge
(&
bp
->
ønge
, 
°dout
);

2020 
	`Ârötf
(
°dout
, ", cœss: %s\n", 
	`bp_˛ass_°r
(
bp
->
˛ass
));

2024  
NULL
;

2025 
	}
}

2029 
	$dlôe_dñëe
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2030 
ªgs_t
 *
ªgs
,

2031 
mem_t
 *
mem
)

2033 
id
;

2035 i‡(
«rgs
 != 1)

2039 i‡(!
	`EVAL_INTEGRAL
(
¨gs
[0].
as_vÆue
.
ty≥
))

2042 
id
 = 
	`evÆ_as_uöt
(
¨gs
[0].
as_vÆue
);

2043  
	`dñëe_bªak
(
id
);

2044 
	}
}

2048 
	$dlôe_˛ór
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2049 
ªgs_t
 *
ªgs
,

2050 
mem_t
 *
mem
)

2052 i‡(!
dlôe_bps
)

2054 
	`Ârötf
(
°dout
, "Noáctive breakpoints.\n");

2057  
NULL
;

2060 
dlôe_bps
 !
NULL
)

2063 
	`dñëe_bªak
(
dlôe_bps
->
id
);

2065 
	`Ârötf
(
°dout
, "All breakpoints cleared.\n");

2068  
NULL
;

2069 
	}
}

2073 
	$dlôe_symbﬁs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2074 
ªgs_t
 *
ªgs
,

2075 
mem_t
 *
mem
)

2077 
i
;

2079 i‡(
«rgs
 != 0)

2083 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
FALSE
);

2086 
i
=0; i<
sym_nsyms
; i++)

2087 
	`sym_dumpsym
(
sym_syms
[
i
], 
°dout
);

2090  
NULL
;

2091 
	}
}

2095 
	$dlôe_tsymbﬁs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2096 
ªgs_t
 *
ªgs
,

2097 
mem_t
 *
mem
)

2099 
i
;

2101 i‡(
«rgs
 != 0)

2105 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
FALSE
);

2108 
i
=0; i<
sym_¡extsyms
; i++)

2109 
	`sym_dumpsym
(
sym_ãxtsyms
[
i
], 
°dout
);

2112  
NULL
;

2113 
	}
}

2117 
	$dlôe_dsymbﬁs
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2118 
ªgs_t
 *
ªgs
,

2119 
mem_t
 *
mem
)

2121 
i
;

2123 i‡(
«rgs
 != 0)

2127 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
FALSE
);

2130 
i
=0; i<
sym_nd©asyms
; i++)

2131 
	`sym_dumpsym
(
sym_d©asyms
[
i
], 
°dout
);

2134  
NULL
;

2135 
	}
}

2139 
	$dlôe_symbﬁ
(
«rgs
, 
¨g_vÆ_t
 
¨gs
[],

2140 
ªgs_t
 *
ªgs
,

2141 
mem_t
 *
mem
)

2143 
ödex
;

2144 
sym_sym_t
 *
sym
;

2146 i‡(
«rgs
 != 1)

2150 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
FALSE
);

2153 
sym
 = 
	`sym_böd_«me
(
¨gs
[0].
as_°r
, &
ödex
, 
sdb_™y
);

2154 i‡(!
sym
)

2158 
	`sym_dumpsym
(
sym_syms_by_«me
[
ödex
], 
°dout
);

2161  
NULL
;

2162 
	}
}

2166 
	$dlôe_öô
(
dlôe_ªg_obj_t
 
ªg_obj
,

2167 
dlôe_mem_obj_t
 
mem_obj
,

2168 
dlôe_m°©e_obj_t
 
m°©e_obj
)

2171 
f_dlôe_ªg_obj
 = 
ªg_obj
;

2172 
f_dlôe_mem_obj
 = 
mem_obj
;

2173 
f_dlôe_m°©e_obj
 = 
m°©e_obj
;

2176 
dlôe_evÆu©‹
 = 
	`evÆ_√w
(
idít_evÆu©‹
, 
NULL
);

2177 
	}
}

2181 
	$dlôe_°©us
(
md_addr_t
 
ªgs_PC
,

2182 
md_addr_t
 
√xt_PC
,

2183 
cou¡î_t
 
cy˛e
,

2184 
dbªak
,

2185 
ªgs_t
 *
ªgs
,

2186 
mem_t
 *
mem
)

2188 
md_ö°_t
 
ö°
;

2189 *
îr°r
;

2191 i‡(
dbªak
)

2193 
	`Ârötf
(
°dout
, "\n");

2194 
	`Ârötf
(
°dout
, "Instruction (now finished)Åhat caused data break:\n");

2195 
	`myÂrötf
(
°dout
, "[%10n] 0x%08p: ", 
cy˛e
, 
ªgs_PC
);

2196 
îr°r
 =

2197 
	`f_dlôe_mem_obj
(
mem
, 
FALSE
,

2198 
ªgs_PC
, (*)&
ö°
, (inst));

2199 
ö°
 = 
	`MD_SWAPI
(inst);

2200 i‡(
îr°r
)

2201 
	`Ârötf
(
°dout
, "<övÆid mem‹y>: %s", 
îr°r
);

2203 
	`md_¥öt_ö¢
(
ö°
, 
ªgs_PC
, 
°dout
);

2204 
	`Ârötf
(
°dout
, "\n");

2205 
	`Ârötf
(
°dout
, "\n");

2209 
	`myÂrötf
(
°dout
, "[%10n] 0x%08p: ", 
cy˛e
, 
√xt_PC
);

2210 
îr°r
 =

2211 
	`f_dlôe_mem_obj
(
mem
, 
FALSE
,

2212 
√xt_PC
, (*)&
ö°
, (inst));

2213 
ö°
 = 
	`MD_SWAPI
(inst);

2214 i‡(
îr°r
)

2215 
	`Ârötf
(
°dout
, "<övÆid mem‹y>: %s", 
îr°r
);

2217 
	`md_¥öt_ö¢
(
ö°
, 
√xt_PC
, 
°dout
);

2218 
	`Ârötf
(
°dout
, "\n");

2219 
	}
}

2222 
	#DLITE_PROMPT
 "DLôe! > "

	)

2226 
	$dlôe_maö
(
md_addr_t
 
ªgs_PC
,

2227 
md_addr_t
 
√xt_PC
,

2228 
cou¡î_t
 
cy˛e
,

2229 
ªgs_t
 *
ªgs
,

2230 
mem_t
 *
mem
)

2232 
buf
[512], *
îr_°r
;

2233 
dbªak
 = (
bªak_ac˚ss
 & (
ACCESS_READ
|
ACCESS_WRITE
)) != 0;

2234 
cmd
[512] = "";

2236 
dlôe_a˘ive
 = 
TRUE
;

2237 
dlôe_ªtu∫
 = 
FALSE
;

2238 
	`dlôe_°©us
(
ªgs_PC
, 
√xt_PC
, 
cy˛e
, 
dbªak
, 
ªgs
, 
mem
);

2240 
dlôe_a˘ive
 && !
dlôe_ªtu∫
)

2242 
	`Ârötf
(
°dout
, 
DLITE_PROMPT
);

2243 
	`fÊush
(
°dout
);

2244 
	`fgës
(
buf
, 512, 
°dö
);

2247 i‡(
buf
[
	`°æí
(buf)-1] == '\n')

2248 
buf
[
	`°æí
(buf)-1] = '\0';

2250 i‡(
buf
[0] != '\0')

2253 
	`°r˝y
(
cmd
, 
buf
);

2257 
îr_°r
 = 
	`dlôe_exec
(
cmd
, 
ªgs
, 
mem
);

2258 i‡(
îr_°r
)

2259 
	`Ârötf
(
°dout
, "Dlôe:Éº‹: %s\n", 
îr_°r
);

2261 
	}
}

	@dlite.h

109 #i‚de‡
DLITE_H


110 
	#DLITE_H


	)

112 
	~<°dio.h
>

114 
	~"ho°.h
"

115 
	~"misc.h
"

116 
	~"machöe.h
"

117 
	~"ªgs.h
"

118 
	~"mem‹y.h
"

119 
	~"evÆ.h
"

124 (*
	tdlôe_ªg_obj_t
)(
	tªgs_t
 *
	tªgs
,

125 
	tis_wrôe
,

126 
	tmd_ªg_ty≥
 
	tπ
,

127 
	tªg
,

128 
	tevÆ_vÆue_t
 *
	tvÆ
);

133 (*
	tdlôe_mem_obj_t
)(
	tmem_t
 *
	tmem
,

134 
	tis_wrôe
,

135 
	tmd_addr_t
 
	taddr
,

136 *
	tp
,

137 
	tnbyãs
);

142 (*
	tdlôe_m°©e_obj_t
)(
	tFILE
 *
	t°ªam
,

143 *
	tcmd
,

144 
	tªgs_t
 *
	tªgs
,

145 
	tmem_t
 *
	tmem
);

149 
dlôe_öô
(
dlôe_ªg_obj_t
 
ªg_obj
,

150 
dlôe_mem_obj_t
 
mem_obj
,

151 
dlôe_m°©e_obj_t
 
m°©e_obj
);

159 
dlôe_mem_obj
(
mem_t
 *
mem
,

160 
is_wrôe
,

161 
md_addr_t
 
addr
,

162 *
p
,

163 
nbyãs
);

167 
dlôe_m°©e_obj
(
FILE
 *
°ªam
,

168 *
cmd
,

169 
ªgs_t
 *
ªgs
,

170 
mem_t
 *
mem
);

173 
	#ACCESS_READ
 0x01

	)

174 
	#ACCESS_WRITE
 0x02

	)

175 
	#ACCESS_EXEC
 0x04

	)

178 
md_addr_t
 
dlôe_Á°bªak
 ;

181 
dlôe_a˘ive
 ;

184 
dlôe_check
 ;

188 
__check_bªak
(
md_addr_t
 
√xt_PC
,

189 
ac˚ss
,

190 
md_addr_t
 
addr
,

191 
cou¡î_t
 
icou¡
,

192 
cou¡î_t
 
cy˛e
);

195 
	#dlôe_check_bªak
(
NPC
, 
ACCESS
, 
ADDR
, 
ICNT
, 
CYCLE
) \

196 ((
dlôe_check
 || 
dlôe_a˘ive
) \

197 ? 
	`__check_bªak
((
NPC
), (
ACCESS
), (
ADDR
), (
ICNT
), (
CYCLE
)) \

198 : 
FALSE
)

	)

202 
dlôe_maö
(
md_addr_t
 
ªgs_PC
,

203 
md_addr_t
 
√xt_PC
,

204 
cou¡î_t
 
cy˛e
,

205 
ªgs_t
 *
ªgs
,

206 
mem_t
 *
mem
);

	@eio.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 #ifde‡
_MSC_VER


55 
	~<io.h
>

57 
	~<uni°d.h
>

60 
	~"ho°.h
"

61 
	~"misc.h
"

62 
	~"machöe.h
"

63 
	~"ªgs.h
"

64 
	~"mem‹y.h
"

65 
	~"lﬂdî.h
"

66 
	~"libexo/libexo.h
"

67 
	~"sysˇŒ.h
"

68 
	~"sim.h
"

69 
	~"ídün.h
"

70 
	~"eio.h
"

72 #ifde‡
_MSC_VER


73 
	#wrôe
 
_wrôe


	)

76 
	#EIO_FILE_HEADER
 \

77 "/* Thi†i†®Sim∂eSˇœ∏EIO fûê- DO NOT MOVE OR EDIT THIS LINE! */\n"

	)

94 
cou¡î_t
 
	geio_å™s_i˙t
 = -1;

96 
FILE
 *

97 
	$eio_¸óã
(*
‚ame
)

99 
FILE
 *
fd
;

100 
exo_ãrm_t
 *
exo
;

101 
èrgë_big_ídün
;

103 
èrgë_big_ídün
 = (
	`ídün_ho°_byã_‹dî
(Ë=
ídün_big
);

105 
fd
 = 
	`gz›í
(
‚ame
, "w");

106 i‡(!
fd
)

107 
	`Áèl
("u«bÀÅÿ¸óã EIO fûê`%s'", 
‚ame
);

110 
	`Ârötf
(
fd
, "%s\n", 
EIO_FILE_HEADER
);

111 
	`Ârötf
(
fd
, "/* file_format: %d, file_version: %d, big_endian: %d */\n",

112 
MD_EIO_FILE_FORMAT
, 
EIO_FILE_VERSION
, 
ld_èrgë_big_ídün
);

113 
exo
 = 
	`exo_√w
(
ec_li°
,

114 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
MD_EIO_FILE_FORMAT
),

115 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
EIO_FILE_VERSION
),

116 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
èrgë_big_ídün
),

117 
NULL
);

118 
	`exo_¥öt
(
exo
, 
fd
);

119 
	`exo_dñëe
(
exo
);

120 
	`Ârötf
(
fd
, "\n\n");

122  
fd
;

123 
	}
}

125 
FILE
 *

126 
	$eio_›í
(*
‚ame
)

128 
FILE
 *
fd
;

129 
exo_ãrm_t
 *
exo
;

130 
fûe_f‹m©
, 
fûe_vîsi⁄
, 
big_ídün
, 
èrgë_big_ídün
;

132 
èrgë_big_ídün
 = (
	`ídün_ho°_byã_‹dî
(Ë=
ídün_big
);

134 
fd
 = 
	`gz›í
(
‚ame
, "r");

135 i‡(!
fd
)

136 
	`Áèl
("u«bÀÅÿ›í EIO fûê`%s'", 
‚ame
);

139 
exo
 = 
	`exo_ªad
(
fd
);

140 i‡(!
exo


141 || 
exo
->
ec
 !
ec_li°


142 || !
exo
->
as_li°
.
hód


143 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_öãgî


144 || !
exo
->
as_li°
.
hód
->
√xt


145 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_öãgî


146 || !
exo
->
as_li°
.
hód
->
√xt
->next

147 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->
ec
 !
ec_öãgî


148 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xà!
NULL
)

149 
	`Áèl
("couldÇotÑead EIO file header");

151 
fûe_f‹m©
 = 
exo
->
as_li°
.
hód
->
as_öãgî
.
vÆ
;

152 
fûe_vîsi⁄
 = 
exo
->
as_li°
.
hód
->
√xt
->
as_öãgî
.
vÆ
;

153 
big_ídün
 = 
exo
->
as_li°
.
hód
->
√xt
->√xt->
as_öãgî
.
vÆ
;

154 
	`exo_dñëe
(
exo
);

156 i‡(
fûe_f‹m©
 !
MD_EIO_FILE_FORMAT
)

157 
	`Áèl
("EIO fûê`%s' ha†öcom∑tibÀ f‹m©", 
‚ame
);

159 i‡(
fûe_vîsi⁄
 !
EIO_FILE_VERSION
)

160 
	`Áèl
("EIO fûê`%s' ha†öcom∑tibÀ vîsi⁄", 
‚ame
);

162 i‡(!!
big_ídün
 !!!
èrgë_big_ídün
)

164 
	`w¨n
("ídü¿o‡`%s' d€†nŸ m©ch ho°", 
‚ame
);

165 
	`w¨n
("running withÉxperimental cross-endianÉxecution support");

166 
	`w¨n
("****************************************");

167 
	`w¨n
("**>>Ölease checkÑesults carefully <<**");

168 
	`w¨n
("****************************************");

171  
fd
;

172 
	}
}

176 
	$eio_vÆid
(*
‚ame
)

178 
FILE
 *
fd
;

179 
buf
[512];

182 
fd
 = 
	`gz›í
(
‚ame
, "r");

183 i‡(!
fd
)

184  
FALSE
;

187 
	`fgës
(
buf
, 512, 
fd
);

190 i‡(
	`°rcmp
(
buf
, 
EIO_FILE_HEADER
))

191  
FALSE
;

194 
	`gz˛o£
(
fd
);

197  
TRUE
;

198 
	}
}

201 
	$eio_˛o£
(
FILE
 *
fd
)

203 
	`gz˛o£
(
fd
);

204 
	}
}

208 
cou¡î_t


209 
	$eio_wrôe_chk±
(
ªgs_t
 *
ªgs
,

210 
mem_t
 *
mem
,

211 
FILE
 *
fd
)

213 
i
;

214 
exo_ãrm_t
 *
exo
;

215 
mem_±e_t
 *
±e
;

217 
	`myÂrötf
(
fd
, "/* ** sèπ checkpoöà@ %n... */\n\n", 
eio_å™s_i˙t
);

219 
	`myÂrötf
(
fd
, "/* EIO fûêpoöãr: %n... */\n", 
eio_å™s_i˙t
);

220 
exo
 = 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
eio_å™s_i˙t
);

221 
	`exo_¥öt
(
exo
, 
fd
);

222 
	`Ârötf
(
fd
, "\n\n");

223 
	`exo_dñëe
(
exo
);

226 
	`Ârötf
(
fd
, "/* miscÑegs icnt, PC, NPC,Étc... */\n");

227 
exo
 = 
	`MD_MISC_REGS_TO_EXO
(
ªgs
);

228 
	`exo_¥öt
(
exo
, 
fd
);

229 
	`Ârötf
(
fd
, "\n\n");

230 
	`exo_dñëe
(
exo
);

233 
	`Ârötf
(
fd
, "/* integerÑegs */\n");

234 
exo
 = 
	`exo_√w
(
ec_li°
, 
NULL
);

235 
i
=0; i < 
MD_NUM_IREGS
; i++)

236 
exo
->
as_li°
.
hód
 = 
	`exo_chaö
”xo->as_li°.hód, 
	`MD_IREG_TO_EXO
(
ªgs
, 
i
));

237 
	`exo_¥öt
(
exo
, 
fd
);

238 
	`Ârötf
(
fd
, "\n\n");

239 
	`exo_dñëe
(
exo
);

242 
	`Ârötf
(
fd
, "/* FPÑegs (integer format) */\n");

243 
exo
 = 
	`exo_√w
(
ec_li°
, 
NULL
);

244 
i
=0; i < 
MD_NUM_FREGS
; i++)

245 
exo
->
as_li°
.
hód
 = 
	`exo_chaö
”xo->as_li°.hód, 
	`MD_FREG_TO_EXO
(
ªgs
, 
i
));

246 
	`exo_¥öt
(
exo
, 
fd
);

247 
	`Ârötf
(
fd
, "\n\n");

248 
	`exo_dñëe
(
exo
);

250 
	`Ârötf
(
fd
, "/* wrôög `%d' mem‹yÖages... */\n", ()
mem
->
∑ge_cou¡
);

251 
exo
 = 
	`exo_√w
(
ec_li°
,

252 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
mem
->
∑ge_cou¡
),

253 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ld_brk_poöt
),

254 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ld_°ack_mö
),

255 
NULL
);

256 
	`exo_¥öt
(
exo
, 
fd
);

257 
	`Ârötf
(
fd
, "\n\n");

258 
	`exo_dñëe
(
exo
);

260 
	`Ârötf
(
fd
, "/*Åext segment specifiers (base & size) */\n");

261 
exo
 = 
	`exo_√w
(
ec_li°
,

262 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ld_ãxt_ba£
),

263 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
ld_ãxt_size
),

264 
NULL
);

265 
	`exo_¥öt
(
exo
, 
fd
);

266 
	`Ârötf
(
fd
, "\n\n");

267 
	`exo_dñëe
(
exo
);

269 
	`Ârötf
(
fd
, "/* data segment specifiers (base & size) */\n");

270 
exo
 = 
	`exo_√w
(
ec_li°
,

271 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ld_d©a_ba£
),

272 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
ld_d©a_size
),

273 
NULL
);

274 
	`exo_¥öt
(
exo
, 
fd
);

275 
	`Ârötf
(
fd
, "\n\n");

276 
	`exo_dñëe
(
exo
);

278 
	`Ârötf
(
fd
, "/* stack segment specifiers (base & size) */\n");

279 
exo
 = 
	`exo_√w
(
ec_li°
,

280 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ld_°ack_ba£
),

281 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
ld_°ack_size
),

282 
NULL
);

283 
	`exo_¥öt
(
exo
, 
fd
);

284 
	`Ârötf
(
fd
, "\n\n");

285 
	`exo_dñëe
(
exo
);

288 
	`MEM_FORALL
(
mem
, 
i
, 
±e
)

291 
exo
 = 
	`exo_√w
(
ec_li°
,

292 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
	`MEM_PTE_ADDR
(
±e
, 
i
)),

293 
	`exo_√w
(
ec_blob
, 
MD_PAGE_SIZE
, 
±e
->
∑ge
),

294 
NULL
);

295 
	`exo_¥öt
(
exo
, 
fd
);

296 
	`Ârötf
(
fd
, "\n\n");

297 
	`exo_dñëe
(
exo
);

300 
	`myÂrötf
(
fd
, "/* **Énd checkpoöà@ %n... */\n\n", 
eio_å™s_i˙t
);

302  
eio_å™s_i˙t
;

303 
	}
}

307 
cou¡î_t


308 
	$eio_ªad_chk±
(
ªgs_t
 *
ªgs
,

309 
mem_t
 *
mem
,

310 
FILE
 *
fd
)

312 
i
, 
∑ge_cou¡
;

313 
cou¡î_t
 
å™s_i˙t
;

314 
exo_ãrm_t
 *
exo
, *
ñt
;

317 
exo
 = 
	`exo_ªad
(
fd
);

318 i‡(!
exo


319 || 
exo
->
ec
 !
ec_öãgî
)

320 
	`Áèl
("couldÇotÑead EIO fileÖointer");

321 
å™s_i˙t
 = 
exo
->
as_öãgî
.
vÆ
;

322 
	`exo_dñëe
(
exo
);

325 
exo
 = 
	`exo_ªad
(
fd
);

326 
	`MD_EXO_TO_MISC_REGS
(
exo
, 
sim_num_ö¢
, 
ªgs
);

327 
	`exo_dñëe
(
exo
);

330 
exo
 = 
	`exo_ªad
(
fd
);

331 i‡(!
exo


332 || 
exo
->
ec
 !
ec_li°
)

333 
	`Áèl
("couldÇotÑead EIO integerÑegs");

334 
ñt
 = 
exo
->
as_li°
.
hód
;

335 
i
=0; i < 
MD_NUM_IREGS
; i++)

337 i‡(!
ñt
)

338 
	`Áèl
("couldÇotÑead EIO integerÑegs (too few)");

340 i‡(
ñt
->
ec
 !
ec_addªss
)

341 
	`Áèl
("couldÇotÑead EIO integerÑegs (bad value)");

343 
	`MD_EXO_TO_IREG
(
ñt
, 
ªgs
, 
i
);

344 
ñt
 =É…->
√xt
;

346 i‡(
ñt
 !
NULL
)

347 
	`Áèl
("couldÇotÑead EIO integerÑegs (too many)");

348 
	`exo_dñëe
(
exo
);

351 
exo
 = 
	`exo_ªad
(
fd
);

352 i‡(!
exo


353 || 
exo
->
ec
 !
ec_li°
)

354 
	`Áèl
("couldÇotÑead EIO FPÑegs");

355 
ñt
 = 
exo
->
as_li°
.
hód
;

356 
i
=0; i < 
MD_NUM_FREGS
; i++)

358 i‡(!
ñt
)

359 
	`Áèl
("couldÇotÑead EIO FPÑegs (too few)");

361 i‡(
ñt
->
ec
 !
ec_addªss
)

362 
	`Áèl
("couldÇotÑead EIO FPÑegs (bad value)");

364 
	`MD_EXO_TO_FREG
(
ñt
, 
ªgs
, 
i
);

365 
ñt
 =É…->
√xt
;

367 i‡(
ñt
 !
NULL
)

368 
	`Áèl
("couldÇotÑead EIO FPÑegs (too many)");

369 
	`exo_dñëe
(
exo
);

372 
exo
 = 
	`exo_ªad
(
fd
);

373 i‡(!
exo


374 || 
exo
->
ec
 !
ec_li°


375 || !
exo
->
as_li°
.
hód


376 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_öãgî


377 || !
exo
->
as_li°
.
hód
->
√xt


378 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_addªss


379 || !
exo
->
as_li°
.
hód
->
√xt
->next

380 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->
ec
 !
ec_addªss


381 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xà!
NULL
)

382 
	`Áèl
("couldÇotÑead EIO memoryÖage count");

383 
∑ge_cou¡
 = 
exo
->
as_li°
.
hód
->
as_öãgî
.
vÆ
;

384 
ld_brk_poöt
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
√xt
->
as_addªss
.
vÆ
;

385 
ld_°ack_mö
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->
as_addªss
.
vÆ
;

386 
	`exo_dñëe
(
exo
);

389 
exo
 = 
	`exo_ªad
(
fd
);

390 i‡(!
exo


391 || 
exo
->
ec
 !
ec_li°


392 || !
exo
->
as_li°
.
hód


393 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_addªss


394 || !
exo
->
as_li°
.
hód
->
√xt


395 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_öãgî


396 || 
exo
->
as_li°
.
hód
->
√xt
->√xà!
NULL
)

397 
	`Áèl
("countÇotÑead EIOÅext segment specifiers");

398 
ld_ãxt_ba£
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
as_addªss
.
vÆ
;

399 
ld_ãxt_size
 = ()
exo
->
as_li°
.
hód
->
√xt
->
as_öãgî
.
vÆ
;

400 
	`exo_dñëe
(
exo
);

403 
exo
 = 
	`exo_ªad
(
fd
);

404 i‡(!
exo


405 || 
exo
->
ec
 !
ec_li°


406 || !
exo
->
as_li°
.
hód


407 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_addªss


408 || !
exo
->
as_li°
.
hód
->
√xt


409 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_öãgî


410 || 
exo
->
as_li°
.
hód
->
√xt
->√xà!
NULL
)

411 
	`Áèl
("countÇotÑead EIO data segment specifiers");

412 
ld_d©a_ba£
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
as_addªss
.
vÆ
;

413 
ld_d©a_size
 = ()
exo
->
as_li°
.
hód
->
√xt
->
as_öãgî
.
vÆ
;

414 
	`exo_dñëe
(
exo
);

417 
exo
 = 
	`exo_ªad
(
fd
);

418 i‡(!
exo


419 || 
exo
->
ec
 !
ec_li°


420 || !
exo
->
as_li°
.
hód


421 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_addªss


422 || !
exo
->
as_li°
.
hód
->
√xt


423 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_öãgî


424 || 
exo
->
as_li°
.
hód
->
√xt
->√xà!
NULL
)

425 
	`Áèl
("countÇotÑead EIO stack segment specifiers");

426 
ld_°ack_ba£
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
as_addªss
.
vÆ
;

427 
ld_°ack_size
 = ()
exo
->
as_li°
.
hód
->
√xt
->
as_öãgî
.
vÆ
;

428 
	`exo_dñëe
(
exo
);

430 
i
=0; i < 
∑ge_cou¡
; i++)

432 
j
;

433 
md_addr_t
 
∑ge_addr
;

434 
exo_ãrm_t
 *
blob
;

437 
exo
 = 
	`exo_ªad
(
fd
);

438 i‡(!
exo


439 || 
exo
->
ec
 !
ec_li°


440 || !
exo
->
as_li°
.
hód


441 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_addªss


442 || !
exo
->
as_li°
.
hód
->
√xt


443 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_blob


444 || 
exo
->
as_li°
.
hód
->
√xt
->√xà!
NULL
)

445 
	`Áèl
("couldÇotÑead EIO memoryÖage");

446 
∑ge_addr
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
as_addªss
.
vÆ
;

447 
blob
 = 
exo
->
as_li°
.
hód
->
√xt
;

450 
j
=0; j < 
blob
->
as_blob
.
size
; j++)

452 
byã_t
 
vÆ
;

454 
vÆ
 = 
blob
->
as_blob
.
d©a
[
j
];

456 
	`MEM_WRITE_BYTE
(
mem
, 
∑ge_addr
, 
vÆ
);

457 
∑ge_addr
++;

459 
	`exo_dñëe
(
exo
);

462  
å™s_i˙t
;

463 
	}
}

465 
	smem_ªc_t
 {

466 
md_addr_t
 
	maddr
;

467 
	msize
, 
	mmaxsize
;

468 
exo_ãrm_t
 *
	mexo
;

469 
exo_ãrm_t
 *
	mblob
;

473 
exo_ãrm_t
 *
	göput_ªgs
;

474 
exo_ãrm_t
 *
	gouçut_ªgs
;

477 
exo_ãrm_t
 *
	göput_mem
;

478 
mem_ªc_t
 
	göput_mem_ªc
;

481 
exo_ãrm_t
 *
	gouçut_mem
;

482 
mem_ªc_t
 
	gouçut_mem_ªc
;

484 
	g£í_wrôe
;

485 
mem_ac˚ss_‚
 
	gloˇl_mem_‚
;

488 
	#BLOB_TAIL_SIZE
 256

	)

491 
md_Áu…_ty≥


492 
	$my_mem_‚
(
mem_t
 *
mem
,

493 
mem_cmd
 
cmd
,

494 
md_addr_t
 
addr
,

495 *
vp
,

496 
nbyãs
)

498 
i
;

499 *
p
 = 
vp
;

500 
mem_ªc_t
 *
mem_ªc
 = 
NULL
;

501 
exo_ãrm_t
 *
mem_li°
 = 
NULL
;

502 
md_Áu…_ty≥
 
Áu…
 = 
md_Áu…_n⁄e
;

504 i‡(
cmd
 =
Ród
 && 
£í_wrôe
)

505 
	`Áèl
("Readáfter Write inÉio_syscall()");

507 i‡(
cmd
 =
Wrôe
)

508 
£í_wrôe
 = 
TRUE
;

511 i‡(
cmd
 =
Ród
)

513 
mem_ªc
 = &
öput_mem_ªc
;

514 
mem_li°
 = 
öput_mem
;

516 i‡(
cmd
 =
Wrôe
)

518 
mem_ªc
 = &
ouçut_mem_ªc
;

519 
mem_li°
 = 
ouçut_mem
;

522 
	`∑nic
("bogus memoryáccess command");

525 i‡(
cmd
 =
Ród
 )

526 
Áu…
 = (*
loˇl_mem_‚
)(
mem
, 
cmd
, 
addr
, 
p
, 
nbyãs
);

531 i‡(
mem_ªc
->
exo
 !
NULL


532 && (
mem_ªc
->
addr
 + mem_ªc->
size
 ==áddr)

533 && (
mem_ªc
->
size
 + 
nbyãs
 < mem_ªc->
maxsize
))

536 
i
=0; i < 
nbyãs
; i++)

537 
mem_ªc
->
blob
->
as_blob
.
d©a
[mem_ªc->
size
 + 
i
] = 
p
[i];

538 
mem_ªc
->
size
 +
nbyãs
;

539 
mem_ªc
->
blob
->
as_blob
.
size
 = mem_rec->size;

544 
mem_li°
->
as_li°
.
hód
 =

545 
	`exo_chaö
(
mem_li°
->
as_li°
.
hód
,

546 (
mem_ªc
->
exo
 =

547 
	`exo_√w
(
ec_li°
,

548 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
addr
),

549 (
mem_ªc
->
blob
 =

550 
	`exo_√w
(
ec_blob
, 
nbyãs
 + 
BLOB_TAIL_SIZE
, 
NULL
)),

551 
NULL
)));

552 
i
=0; i < 
nbyãs
; i++)

553 
mem_ªc
->
blob
->
as_blob
.
d©a
[
i
] = 
p
[i];

554 
mem_ªc
->
addr
 =áddr;

555 
mem_ªc
->
size
 = 
nbyãs
;

556 
mem_ªc
->
maxsize
 = 
nbyãs
 + 
BLOB_TAIL_SIZE
;

557 
mem_ªc
->
blob
->
as_blob
.
size
 = mem_rec->size;

561 i‡(
cmd
 =
Wrôe
 )

562 
Áu…
 = (*
loˇl_mem_‚
)(
mem
, 
cmd
, 
addr
, 
p
, 
nbyãs
);

564  
Áu…
;

565 
	}
}

571 
	$eio_wrôe_åa˚
(
FILE
 *
eio_fd
,

572 
cou¡î_t
 
i˙t
,

573 
ªgs_t
 *
ªgs
,

574 
mem_ac˚ss_‚
 
mem_‚
,

575 
mem_t
 *
mem
,

576 
md_ö°_t
 
ö°
)

578 
i
;

579 
exo_ãrm_t
 *
exo
;

582 
öput_ªgs
 = 
	`exo_√w
(
ec_li°
, 
NULL
);

583 
i
=
MD_FIRST_IN_REG
; i <
MD_LAST_IN_REG
; i++)

585 
öput_ªgs
->
as_li°
.
hód
 =

586 
	`exo_chaö
(
öput_ªgs
->
as_li°
.
hód
, 
	`MD_IREG_TO_EXO
(
ªgs
, 
i
));

590 
öput_mem
 = 
	`exo_√w
(
ec_li°
, 
NULL
); 
öput_mem_ªc
.
exo
 = NULL;

591 
ouçut_mem
 = 
	`exo_√w
(
ec_li°
, 
NULL
); 
ouçut_mem_ªc
.
exo
 = NULL;

594 
£í_wrôe
 = 
FALSE
;

595 
loˇl_mem_‚
 = 
mem_‚
;

597 i‡(
sim_eio_fd
 !
NULL
)

598 
	`eio_ªad_åa˚
(
sim_eio_fd
, 
i˙t
, 
ªgs
, 
my_mem_‚
, 
mem
, 
ö°
);

601 
	`sys_sysˇŒ
(
ªgs
, 
my_mem_‚
, 
mem
, 
ö°
, 
FALSE
);

605 
ouçut_ªgs
 = 
	`exo_√w
(
ec_li°
, 
NULL
);

606 
ouçut_ªgs
->
as_li°
.
hód
 =

607 
	`exo_chaö
(
ouçut_ªgs
->
as_li°
.
hód
,

608 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ld_brk_poöt
));

609 
i
=
MD_FIRST_OUT_REG
; i <
MD_LAST_OUT_REG
; i++)

611 
ouçut_ªgs
->
as_li°
.
hód
 =

612 
	`exo_chaö
(
ouçut_ªgs
->
as_li°
.
hód
, 
	`MD_IREG_TO_EXO
(
ªgs
, 
i
));

616 
exo
 = 
	`exo_√w
(
ec_li°
,

617  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
i˙t
),

618  
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)
ªgs
->
ªgs_PC
),

619 
öput_ªgs
, 
öput_mem
,

620 
ouçut_ªgs
, 
ouçut_mem
,

621 
NULL
);

622 
	`exo_¥öt
(
exo
, 
eio_fd
);

623 
	`Ârötf
(
eio_fd
, "\n\n");

626 
	`exo_dñëe
(
exo
);

629 
eio_å™s_i˙t
 = 
i˙t
;

630 
	}
}

636 
	$eio_ªad_åa˚
(
FILE
 *
eio_fd
,

637 
cou¡î_t
 
i˙t
,

638 
ªgs_t
 *
ªgs
,

639 
mem_ac˚ss_‚
 
mem_‚
,

640 
mem_t
 *
mem
,

641 
md_ö°_t
 
ö°
)

643 
i
;

644 
exo_ãrm_t
 *
exo
, *
exo_i˙t
, *
exo_pc
;

645 
exo_ãrm_t
 *
exo_öªgs
, *
exo_ömem
, *
exo_ouåegs
, *
exo_outmem
;

646 
exo_ãrm_t
 *
brkªc
, *
ªgªc
, *
memªc
;

649 i‡(
	`MD_EXIT_SYSCALL
(
ªgs
))

651 
	`sys_sysˇŒ
(
ªgs
, 
mem_‚
, 
mem
, 
ö°
, 
FALSE
);

652 
	`∑nic
("returned fromÉxit() system call");

656 
exo
 = 
	`exo_ªad
(
eio_fd
);

659 
eio_å™s_i˙t
 = 
i˙t
;

662 i‡(!
exo


663 || 
exo
->
ec
 !
ec_li°


664 || !(
exo_i˙t
 = 
exo
->
as_li°
.
hód
)

665 || 
exo_i˙t
->
ec
 !
ec_öãgî


666 || !(
exo_pc
 = 
exo_i˙t
->
√xt
)

667 || 
exo_pc
->
ec
 !
ec_addªss


668 || !(
exo_öªgs
 = 
exo_pc
->
√xt
)

669 || 
exo_öªgs
->
ec
 !
ec_li°


670 || !(
exo_ömem
 = 
exo_öªgs
->
√xt
)

671 || 
exo_ömem
->
ec
 !
ec_li°


672 || !(
exo_ouåegs
 = 
exo_ömem
->
√xt
)

673 || 
exo_ouåegs
->
ec
 !
ec_li°


674 || !(
exo_outmem
 = 
exo_ouåegs
->
√xt
)

675 || 
exo_outmem
->
ec
 !
ec_li°


676 || 
exo_outmem
->
√xt
 !
NULL
)

677 
	`Áèl
("cannotÑead EIOÅransaction");

684 i‡(
i˙t
 !(
cou¡î_t
)
exo_i˙t
->
as_öãgî
.
vÆ
)

685 
	`Áèl
("EIOÅrace inconsistency: ICNT mismatch");

688 i‡(
ªgs
->
ªgs_PC
 !(
md_addr_t
)
exo_pc
->
as_öãgî
.
vÆ
)

689 
	`Áèl
("EIOÅrace inconsistency: PC mismatch");

692 
i
=
MD_FIRST_IN_REG
, 
ªgªc
=
exo_öªgs
->
as_li°
.
hód
;

693 
i
 <
MD_LAST_IN_REG
; i++, 
ªgªc
Ùegªc->
√xt
)

695 i‡(!
ªgªc
 ||Ñegªc->
ec
 !
ec_addªss
)

696 
	`Áèl
("EIOÅrace inconsistency: missing inputÑeg");

698 i‡(
	`MD_EXO_CMP_IREG
(
ªgªc
, 
ªgs
, 
i
))

699 
	`Áèl
("EIOÅø˚ inc⁄si°ícy: R[%d] i≈uàmism©ch", 
i
);

700 #ifde‡
VERBOSE


701 
	`Ârötf
(
°dîr
, "** R[%d] check†out...\n", 
i
);

704 i‡(
ªgªc
 !
NULL
)

705 
	`Áèl
("EIOÅrace inconsistency:Åoo many inputÑegs");

708 
memªc
=
exo_ömem
->
as_li°
.
hód
; memª¯!
NULL
; memªc=memªc->
√xt
)

710 
md_addr_t
 
loc
;

711 
exo_ãrm_t
 *
addr
, *
blob
;

714 i‡(!
memªc


715 || 
memªc
->
ec
 !
ec_li°


716 || !(
addr
 = 
memªc
->
as_li°
.
hód
)

717 || 
addr
->
ec
 !
ec_addªss


718 || !(
blob
 = 
addr
->
√xt
)

719 || 
blob
->
ec
 !
ec_blob


720 || 
blob
->
√xt
 !
NULL
)

721 
	`Áèl
("EIOÅrace inconsistency: bad memoryÅransaction");

723 
loc
=
addr
->
as_öãgî
.
vÆ
, 
i
=0; i < 
blob
->
as_blob
.
size
;Üoc++,i++)

725 
vÆ
;

728 (*
mem_‚
)(
mem
, 
Ród
, 
loc
, &
vÆ
, ());

730 i‡(
vÆ
 !
blob
->
as_blob
.
d©a
[
i
])

731 
	`Áèl
("EIOÅø˚ inc⁄si°ícy:ádd∏0x%08∞öpuàmism©ch", 
loc
);

733 #ifde‡
VERBOSE


734 
	`myÂrötf
(
°dîr
, "** 0x%08∞check†out...\n", 
loc
);

739 i‡(
	`MD_OUTPUT_SYSCALL
(
ªgs
))

741 i‡(
sim_¥ogfd
)

744 
	`fwrôe
(
blob
->
as_blob
.
d©a
, 1, blob->as_blob.
size
, 
sim_¥ogfd
);

749 
	`wrôe
(
	`MD_STREAM_FILENO
(
ªgs
),

750 
blob
->
as_blob
.
d©a
, blob->as_blob.
size
);

760 
brkªc
 = 
exo_ouåegs
->
as_li°
.
hód
;

761 i‡(!
brkªc
 || brkªc->
ec
 !
ec_addªss
)

762 
	`Áèl
("EIOÅrace inconsistency: missing memory breakpoint");

763 
ld_brk_poöt
 = (
md_addr_t
)
brkªc
->
as_öãgî
.
vÆ
;

766 
i
=
MD_FIRST_OUT_REG
, 
ªgªc
=
exo_ouåegs
->
as_li°
.
hód
->
√xt
;

767 
i
 <
MD_LAST_OUT_REG
; i++, 
ªgªc
Ùegªc->
√xt
)

769 i‡(!
ªgªc
 ||Ñegªc->
ec
 !
ec_addªss
)

770 
	`Áèl
("EIOÅrace inconsistency: missing outputÑeg");

772 
	`MD_EXO_TO_IREG
(
ªgªc
, 
ªgs
, 
i
);

774 #ifde‡
VERBOSE


775 
	`Ârötf
(
°dîr
, "** R[%d] wrôãn...\n", 
i
);

778 i‡(
ªgªc
 !
NULL
)

779 
	`Áèl
("EIOÅrace inconsistency:Åoo many outputÑegs");

782 
memªc
=
exo_outmem
->
as_li°
.
hód
; memª¯!
NULL
; memªc=memªc->
√xt
)

784 
md_addr_t
 
loc
;

785 
exo_ãrm_t
 *
addr
, *
blob
;

788 i‡(!
memªc


789 || 
memªc
->
ec
 !
ec_li°


790 || !(
addr
 = 
memªc
->
as_li°
.
hód
)

791 || 
addr
->
ec
 !
ec_addªss


792 || !(
blob
 = 
addr
->
√xt
)

793 || 
blob
->
ec
 !
ec_blob


794 || 
blob
->
√xt
 !
NULL
)

795 
	`Áèl
("EIOÅrace icnonsistency: bad memoryÅransaction");

797 
loc
=
addr
->
as_öãgî
.
vÆ
, 
i
=0; i < 
blob
->
as_blob
.
size
;Üoc++,i++)

800 (*
mem_‚
)(
mem
, 
Wrôe
,

801 
loc
, &
blob
->
as_blob
.
d©a
[
i
], ());

803 #ifde‡
VERBOSE


804 
	`Ârötf
(
°dîr
, "** 0x%08∞wrôãn...\n", 
loc
);

810 
	`exo_dñëe
(
exo
);

811 
	}
}

815 
	$eio_Á°_f‹w¨d
(
FILE
 *
eio_fd
, 
cou¡î_t
 
i˙t
)

817 
exo_ãrm_t
 *
exo
, *
exo_i˙t
;

822 
exo
 = 
	`exo_ªad
(
eio_fd
);

824 i‡(!
exo
)

825 
	`Áèl
("couldÇot fast forwardÅo EIO checkpoint");

828 
eio_å™s_i˙t
 = 
i˙t
;

831 i‡(!
exo


832 || 
exo
->
ec
 !
ec_li°


833 || !(
exo_i˙t
 = 
exo
->
as_li°
.
hód
)

834 || 
exo_i˙t
->
ec
 !
ec_öãgî
)

835 
	`Áèl
("cannotÑead EIOÅransaction (during fast forward)");

837 (
cou¡î_t
)
exo_i˙t
->
as_öãgî
.
vÆ
 !
i˙t
);

840 
	}
}

	@eio.h

52 #i‚de‡
EIO_H


53 
	#EIO_H


	)

55 
	~<°dio.h
>

58 
	#EIO_PISA_FORMAT
 1

	)

59 
	#EIO_ALPHA_FORMAT
 2

	)

62 
	#EIO_FILE_VERSION
 3

	)

64 
FILE
 *
eio_¸óã
(*
‚ame
);

66 
FILE
 *
eio_›í
(*
‚ame
);

69 
eio_vÆid
(*
‚ame
);

71 
eio_˛o£
(
FILE
 *
fd
);

75 
cou¡î_t


76 
eio_wrôe_chk±
(
ªgs_t
 *
ªgs
,

77 
mem_t
 *
mem
,

78 
FILE
 *
fd
);

82 
cou¡î_t


83 
eio_ªad_chk±
(
ªgs_t
 *
ªgs
,

84 
mem_t
 *
mem
,

85 
FILE
 *
fd
);

91 
eio_wrôe_åa˚
(
FILE
 *
eio_fd
,

92 
cou¡î_t
 
i˙t
,

93 
ªgs_t
 *
ªgs
,

94 
mem_ac˚ss_‚
 
mem_‚
,

95 
mem_t
 *
mem
,

96 
md_ö°_t
 
ö°
);

102 
eio_ªad_åa˚
(
FILE
 *
eio_fd
,

103 
cou¡î_t
 
i˙t
,

104 
ªgs_t
 *
ªgs
,

105 
mem_ac˚ss_‚
 
mem_‚
,

106 
mem_t
 *
mem
,

107 
md_ö°_t
 
ö°
);

110 
eio_Á°_f‹w¨d
(
FILE
 *
eio_fd
, 
cou¡î_t
 
i˙t
);

	@endian.c

52 
	~"ídün.h
"

53 #i‚de‡
HOST_ONLY


54 
	~"lﬂdî.h
"

58 
ídün_t


59 
	$ídün_ho°_byã_‹dî
()

61 
i
 = 1, *
p
;

63 
p
 = &
i
;

64 i‡(*((*)
p
) == 1)

65  
ídün_lôée
;

66 i‡(*((*)
p
) == 0)

67  
ídün_big
;

69  
ídün_unknown
;

70 
	}
}

73 
ídün_t


74 
	$ídün_ho°_w‹d_‹dî
()

76 *
p
;

77 
x
 = 1.0;

80 
p
 = (*)&
x
;

81 i‡(*
p
 == 0)

82  
ídün_lôée
;

83 i‡(*
p
 == 0x3ff00000)

84  
ídün_big
;

86  
ídün_unknown
;

87 
	}
}

89 #i‚de‡
HOST_ONLY


93 
ídün_t


94 
	$ídün_èrgë_byã_‹dî
()

96  
ld_èrgë_big_ídün
 ? 
ídün_big
 : 
ídün_lôée
;

97 
	}
}

101 
ídün_t


102 
	$ídün_èrgë_w‹d_‹dî
()

105  
	`ídün_èrgë_byã_‹dî
();

106 
	}
}

	@endian.h

52 #i‚de‡
ENDIAN_H


53 
	#ENDIAN_H


	)

56 
	#SWAP_HALF
(
X
) \

57 (((((
hÆf_t
)(
X
)Ë& 0xffË<< 8Ë| ((((hÆf_t)(X)Ë& 0xff00Ë>> 8))

	)

58 
	#SWAP_WORD
(
X
Ë(((
w‹d_t
)(X) << 24) | \

59 (((
w‹d_t
)(
X
) << 8) & 0x00ff0000) | \

60 (((
w‹d_t
)(
X
) >> 8) & 0x0000ff00) | \

61 (((
w‹d_t
)(
X
Ë>> 24Ë& 0x000000ff))

	)

62 
	#SWAP_QWORD
(
X
Ë(((
qw‹d_t
)(X) << 56) | \

63 (((
qw‹d_t
)(
X
Ë<< 40Ë& 
	`ULL
(0x00ff000000000000)) |\

64 (((
qw‹d_t
)(
X
Ë<< 24Ë& 
	`ULL
(0x0000ff0000000000)) |\

65 (((
qw‹d_t
)(
X
Ë<< 8Ë& 
	`ULL
(0x000000ff00000000)) |\

66 (((
qw‹d_t
)(
X
Ë>> 8Ë& 
	`ULL
(0x00000000ff000000)) |\

67 (((
qw‹d_t
)(
X
Ë>> 24Ë& 
	`ULL
(0x0000000000ff0000)) |\

68 (((
qw‹d_t
)(
X
Ë>> 40Ë& 
	`ULL
(0x000000000000ff00)) |\

69 (((
qw‹d_t
)(
X
Ë>> 56Ë& 
	`ULL
(0x00000000000000ff)))

	)

72 
	eídün_t
 { 
	mídün_big
, 
	mídün_lôée
, 
	mídün_unknown
};

74 
ídün_t


75 
ídün_ho°_byã_‹dî
();

78 
ídün_t


79 
ídün_ho°_w‹d_‹dî
();

81 #i‚de‡
HOST_ONLY


85 
ídün_t


86 
ídün_èrgë_byã_‹dî
();

90 
ídün_t


91 
ídün_èrgë_w‹d_‹dî
();

	@eval.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<˘y≥.h
>

55 
	~<î∫o.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"evÆ.h
"

61 #i‡
deföed
(
•¨c
Ë&& !deföed(
__svr4__
)

62 
	#°πoul
 
°πﬁ


	)

66 
evÆ_îr_t
 
	gevÆ_îr‹
 = 
ERR_NOERR
;

69 *
	gevÆ_îr_°r
[
ERR_NUM
] = {

81 
evÆ_tokí_t
 
	gtok_m≠
[256];

82 
	gtok_m≠_öôülized
 = 
FALSE
;

86 
	$öô_tok_m≠
()

88 
i
;

90 
i
=0; i<256; i++)

91 
tok_m≠
[
i
] = 
tok_övÆid
;

94 
i
='a'; i<='z'; i++)

95 
tok_m≠
[
i
] = 
tok_idít
;

96 
i
='A'; i<='Z'; i++)

97 
tok_m≠
[
i
] = 
tok_idít
;

98 
tok_m≠
[()'_'] = 
tok_idít
;

99 
tok_m≠
[()'$'] = 
tok_idít
;

102 
i
='0'; i<='9'; i++)

103 
tok_m≠
[
i
] = 
tok_c⁄°
;

104 
tok_m≠
[()'.'] = 
tok_c⁄°
;

107 
tok_m≠
[()'+'] = 
tok_∂us
;

108 
tok_m≠
[()'-'] = 
tok_möus
;

109 
tok_m≠
[()'*'] = 
tok_mu…
;

110 
tok_m≠
[()'/'] = 
tok_div
;

111 
tok_m≠
[()'('] = 
tok_›¨í
;

112 
tok_m≠
[()')'] = 
tok_˝¨í
;

115 
tok_m≠
[()' '] = 
tok_whôe•a˚
;

116 
tok_m≠
[()'\t'] = 
tok_whôe•a˚
;

117 
	}
}

120 
evÆ_tokí_t


121 
	$gë_√xt_tokí
(
evÆ_°©e_t
 *
es
)

123 
Ælow_hex
;

124 
evÆ_tokí_t
 
tok
;

125 *
±ok_buf
, 
œ°_ch¨
;

128 i‡(!
tok_m≠_öôülized
)

130 
	`öô_tok_m≠
();

131 
tok_m≠_öôülized
 = 
TRUE
;

135 i‡(
es
->
≥ek_tok
 !
tok_övÆid
)

137 
tok
 = 
es
->
≥ek_tok
;

138 
es
->
≥ek_tok
 = 
tok_övÆid
;

139  
tok
;

143 
±ok_buf
 = 
es
->
tok_buf
;

144 *
±ok_buf
 = '\0';

147 *
es
->
p
 && 
tok_m≠
[()*es->p] =
tok_whôe•a˚
)

148 
es
->
p
++;

151 i‡(*
es
->
p
 == '\0')

152  
tok_eof
;

154 *
±ok_buf
++ = *
es
->
p
;

155 
tok
 = 
tok_m≠
[()*
es
->
p
++];

156 
tok
)

158 
tok_idít
:

160 *
es
->
p


161 && (
tok_m≠
[()*
es
->
p
] =
tok_idít


162 || 
tok_m≠
[()*
es
->
p
] =
tok_c⁄°
))

164 *
±ok_buf
++ = *
es
->
p
++;

167 
tok_c⁄°
:

169 
œ°_ch¨
 = '\0';

170 
Ælow_hex
 = 
FALSE
;

171 *
es
->
p
 &&

172 (
tok_m≠
[()*
es
->
p
] =
tok_c⁄°


173 || (*
es
->
p
 ='-' && 
œ°_ch¨
 == 'e')

174 || (*
es
->
p
 ='+' && 
œ°_ch¨
 == 'e')

175 || 
	`tﬁowî
(*
es
->
p
) == 'e'

176 || 
	`tﬁowî
(*
es
->
p
) == 'x'

177 || (
	`tﬁowî
(*
es
->
p
Ë='a' && 
Ælow_hex
)

178 || (
	`tﬁowî
(*
es
->
p
Ë='b' && 
Ælow_hex
)

179 || (
	`tﬁowî
(*
es
->
p
Ë='c' && 
Ælow_hex
)

180 || (
	`tﬁowî
(*
es
->
p
Ë='d' && 
Ælow_hex
)

181 || (
	`tﬁowî
(*
es
->
p
Ë='e' && 
Ælow_hex
)

182 || (
	`tﬁowî
(*
es
->
p
Ë='f' && 
Ælow_hex
)))

184 
œ°_ch¨
 = 
	`tﬁowî
(*
es
->
p
);

185 i‡(*
es
->
p
 == 'x' || *es->p == 'X')

186 
Ælow_hex
 = 
TRUE
;

187 *
±ok_buf
++ = *
es
->
p
++;

190 
tok_∂us
:

191 
tok_möus
:

192 
tok_mu…
:

193 
tok_div
:

194 
tok_›¨í
:

195 
tok_˝¨í
:

199 
tok
 = 
tok_övÆid
;

204 *
±ok_buf
 = '\0';

206  
tok
;

207 
	}
}

211 
evÆ_tokí_t


212 
	$≥ek_√xt_tokí
(
evÆ_°©e_t
 *
es
)

215 i‡(
es
->
≥ek_tok
 =
tok_övÆid
)

217 
es
->
œ°p
 =És->
p
;

218 
es
->
≥ek_tok
 = 
	`gë_√xt_tokí
(es);

222  
es
->
≥ek_tok
;

223 
	}
}

226 
evÆ_vÆue_t
 
ex¥
(
evÆ_°©e_t
 *
es
);

229 
evÆ_vÆue_t
 
	gîr_vÆue
 = { 
ë_öt
, { 0 } };

232 *
	gevÆ_ty≥_°r
[
ë_NUM
] = {

236 #ifde‡
HOST_HAS_QWORD


246 
evÆ_ty≥_t


247 
	$ªsu…_ty≥
(
evÆ_ty≥_t
 
t1
,

248 
evÆ_ty≥_t
 
t2
)

251 i‡(
t1
 =
ë_symbﬁ
 || 
t2
 ==Ét_symbol)

252 
	`∑nic
("symbol used inÉxpression");

255 i‡(
t1
 =
ë_doubÀ
 || 
t2
 ==Ét_double)

256  
ë_doubÀ
;

257 i‡(
t1
 =
ë_Êﬂt
 || 
t2
 ==Ét_float)

258  
ë_Êﬂt
;

259 #ifde‡
HOST_HAS_QWORD


260 i‡(
t1
 =
ë_qw‹d
 || 
t2
 ==Ét_qword)

261  
ë_qw‹d
;

262 i‡(
t1
 =
ë_sqw‹d
 || 
t2
 ==Ét_sqword)

263  
ë_sqw‹d
;

265 i‡(
t1
 =
ë_addr
 || 
t2
 ==Ét_addr)

266  
ë_addr
;

267 i‡(
t1
 =
ë_uöt
 || 
t2
 ==Ét_uint)

268  
ë_uöt
;

270  
ë_öt
;

271 
	}
}

279 
	$evÆ_as_doubÀ
(
evÆ_vÆue_t
 
vÆ
)

281 
vÆ
.
ty≥
)

283 
ë_doubÀ
:

284  
vÆ
.
vÆue
.
as_doubÀ
;

285 
ë_Êﬂt
:

286  ()
vÆ
.
vÆue
.
as_Êﬂt
;

287 #ifde‡
HOST_HAS_QWORD


288 
ë_qw‹d
:

289 #ifde‡
_MSC_VER


290  ()(
sqw‹d_t
)
vÆ
.
vÆue
.
as_qw‹d
;

292  ()
vÆ
.
vÆue
.
as_qw‹d
;

294 
ë_sqw‹d
:

295  ()
vÆ
.
vÆue
.
as_sqw‹d
;

297 
ë_addr
:

298 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
TARGET_ALPHA
)

300  ()(
sqw‹d_t
)
vÆ
.
vÆue
.
as_addr
;

302  ()
vÆ
.
vÆue
.
as_addr
;

304 
ë_uöt
:

305  ()
vÆ
.
vÆue
.
as_uöt
;

306 
ë_öt
:

307  ()
vÆ
.
vÆue
.
as_öt
;

308 
ë_symbﬁ
:

309 
	`∑nic
("symbol used inÉxpression");

311 
	`∑nic
("illegalárithmeticÉxpression conversion");

313 
	}
}

317 
	$evÆ_as_Êﬂt
(
evÆ_vÆue_t
 
vÆ
)

319 
vÆ
.
ty≥
)

321 
ë_doubÀ
:

322  ()
vÆ
.
vÆue
.
as_doubÀ
;

323 
ë_Êﬂt
:

324  
vÆ
.
vÆue
.
as_Êﬂt
;

325 #ifde‡
HOST_HAS_QWORD


326 
ë_qw‹d
:

327 #ifde‡
_MSC_VER


328  ()(
sqw‹d_t
)
vÆ
.
vÆue
.
as_qw‹d
;

330  ()
vÆ
.
vÆue
.
as_qw‹d
;

332 
ë_sqw‹d
:

333  ()
vÆ
.
vÆue
.
as_sqw‹d
;

335 
ë_addr
:

336 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
TARGET_ALPHA
)

338  ()(
sqw‹d_t
)
vÆ
.
vÆue
.
as_addr
;

340  ()
vÆ
.
vÆue
.
as_addr
;

342 
ë_uöt
:

343  ()
vÆ
.
vÆue
.
as_uöt
;

344 
ë_öt
:

345  ()
vÆ
.
vÆue
.
as_öt
;

346 
ë_symbﬁ
:

347 
	`∑nic
("symbol used inÉxpression");

349 
	`∑nic
("illegalárithmeticÉxpression conversion");

351 
	}
}

353 #ifde‡
HOST_HAS_QWORD


355 
qw‹d_t


356 
	$evÆ_as_qw‹d
(
evÆ_vÆue_t
 
vÆ
)

358 
vÆ
.
ty≥
)

360 
ë_doubÀ
:

361  (
qw‹d_t
)
vÆ
.
vÆue
.
as_doubÀ
;

362 
ë_Êﬂt
:

363  (
qw‹d_t
)
vÆ
.
vÆue
.
as_Êﬂt
;

364 
ë_qw‹d
:

365  
vÆ
.
vÆue
.
as_qw‹d
;

366 
ë_sqw‹d
:

367  (
qw‹d_t
)
vÆ
.
vÆue
.
as_sqw‹d
;

368 
ë_addr
:

369  (
qw‹d_t
)
vÆ
.
vÆue
.
as_addr
;

370 
ë_uöt
:

371  (
qw‹d_t
)
vÆ
.
vÆue
.
as_uöt
;

372 
ë_öt
:

373  (
qw‹d_t
)
vÆ
.
vÆue
.
as_öt
;

374 
ë_symbﬁ
:

375 
	`∑nic
("symbol used inÉxpression");

377 
	`∑nic
("illegalárithmeticÉxpression conversion");

379 
	}
}

382 
sqw‹d_t


383 
	$evÆ_as_sqw‹d
(
evÆ_vÆue_t
 
vÆ
)

385 
vÆ
.
ty≥
)

387 
ë_doubÀ
:

388  (
sqw‹d_t
)
vÆ
.
vÆue
.
as_doubÀ
;

389 
ë_Êﬂt
:

390  (
sqw‹d_t
)
vÆ
.
vÆue
.
as_Êﬂt
;

391 
ë_qw‹d
:

392  (
sqw‹d_t
)
vÆ
.
vÆue
.
as_qw‹d
;

393 
ë_sqw‹d
:

394  
vÆ
.
vÆue
.
as_sqw‹d
;

395 
ë_addr
:

396  (
sqw‹d_t
)
vÆ
.
vÆue
.
as_addr
;

397 
ë_uöt
:

398  (
sqw‹d_t
)
vÆ
.
vÆue
.
as_uöt
;

399 
ë_öt
:

400  (
sqw‹d_t
)
vÆ
.
vÆue
.
as_öt
;

401 
ë_symbﬁ
:

402 
	`∑nic
("symbol used inÉxpression");

404 
	`∑nic
("illegalárithmeticÉxpression conversion");

406 
	}
}

410 
md_addr_t


411 
	$evÆ_as_addr
(
evÆ_vÆue_t
 
vÆ
)

413 
vÆ
.
ty≥
)

415 
ë_doubÀ
:

416  (
md_addr_t
)
vÆ
.
vÆue
.
as_doubÀ
;

417 
ë_Êﬂt
:

418  (
md_addr_t
)
vÆ
.
vÆue
.
as_Êﬂt
;

419 #ifde‡
HOST_HAS_QWORD


420 
ë_qw‹d
:

421  (
md_addr_t
)
vÆ
.
vÆue
.
as_qw‹d
;

422 
ë_sqw‹d
:

423  (
md_addr_t
)
vÆ
.
vÆue
.
as_sqw‹d
;

425 
ë_addr
:

426  
vÆ
.
vÆue
.
as_addr
;

427 
ë_uöt
:

428  (
md_addr_t
)
vÆ
.
vÆue
.
as_uöt
;

429 
ë_öt
:

430  (
md_addr_t
)
vÆ
.
vÆue
.
as_öt
;

431 
ë_symbﬁ
:

432 
	`∑nic
("symbol used inÉxpression");

434 
	`∑nic
("illegalárithmeticÉxpression conversion");

436 
	}
}

440 
	$evÆ_as_uöt
(
evÆ_vÆue_t
 
vÆ
)

442 
vÆ
.
ty≥
)

444 
ë_doubÀ
:

445  ()
vÆ
.
vÆue
.
as_doubÀ
;

446 
ë_Êﬂt
:

447  ()
vÆ
.
vÆue
.
as_Êﬂt
;

448 #ifde‡
HOST_HAS_QWORD


449 
ë_qw‹d
:

450  ()
vÆ
.
vÆue
.
as_qw‹d
;

451 
ë_sqw‹d
:

452  ()
vÆ
.
vÆue
.
as_sqw‹d
;

454 
ë_addr
:

455  ()
vÆ
.
vÆue
.
as_addr
;

456 
ë_uöt
:

457  
vÆ
.
vÆue
.
as_uöt
;

458 
ë_öt
:

459  ()
vÆ
.
vÆue
.
as_öt
;

460 
ë_symbﬁ
:

461 
	`∑nic
("symbol used inÉxpression");

463 
	`∑nic
("illegalárithmeticÉxpression conversion");

465 
	}
}

469 
	$evÆ_as_öt
(
evÆ_vÆue_t
 
vÆ
)

471 
vÆ
.
ty≥
)

473 
ë_doubÀ
:

474  ()
vÆ
.
vÆue
.
as_doubÀ
;

475 
ë_Êﬂt
:

476  ()
vÆ
.
vÆue
.
as_Êﬂt
;

477 #ifde‡
HOST_HAS_QWORD


478 
ë_qw‹d
:

479  ()
vÆ
.
vÆue
.
as_qw‹d
;

480 
ë_sqw‹d
:

481  ()
vÆ
.
vÆue
.
as_sqw‹d
;

483 
ë_addr
:

484  ()
vÆ
.
vÆue
.
as_addr
;

485 
ë_uöt
:

486  ()
vÆ
.
vÆue
.
as_uöt
;

487 
ë_öt
:

488  
vÆ
.
vÆue
.
as_öt
;

489 
ë_symbﬁ
:

490 
	`∑nic
("symbol used inÉxpression");

492 
	`∑nic
("illegalárithmeticÉxpression conversion");

494 
	}
}

501 
evÆ_vÆue_t


502 
	$f_add
(
evÆ_vÆue_t
 
vÆ1
, evÆ_vÆue_à
vÆ2
)

504 
evÆ_ty≥_t
 
ë
;

505 
evÆ_vÆue_t
 
vÆ
;

508 i‡(
vÆ1
.
ty≥
 =
ë_symbﬁ
 || 
vÆ2
.type ==Ét_symbol)

510 
evÆ_îr‹
 = 
ERR_BADEXPR
;

511  
îr_vÆue
;

515 
ë
 = 
	`ªsu…_ty≥
(
vÆ1
.
ty≥
, 
vÆ2
.type);

516 
ë
)

518 
ë_doubÀ
:

519 
vÆ
.
ty≥
 = 
ë_doubÀ
;

520 
vÆ
.
vÆue
.
as_doubÀ
 = 
	`evÆ_as_doubÀ
(
vÆ1
Ë+ÉvÆ_as_doubÀ(
vÆ2
);

522 
ë_Êﬂt
:

523 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

524 
vÆ
.
vÆue
.
as_Êﬂt
 = 
	`evÆ_as_Êﬂt
(
vÆ1
Ë+ÉvÆ_as_Êﬂt(
vÆ2
);

526 #ifde‡
HOST_HAS_QWORD


527 
ë_qw‹d
:

528 
vÆ
.
ty≥
 = 
ë_qw‹d
;

529 
vÆ
.
vÆue
.
as_qw‹d
 = 
	`evÆ_as_qw‹d
(
vÆ1
Ë+ÉvÆ_as_qw‹d(
vÆ2
);

531 
ë_sqw‹d
:

532 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

533 
vÆ
.
vÆue
.
as_sqw‹d
 = 
	`evÆ_as_sqw‹d
(
vÆ1
Ë+ÉvÆ_as_sqw‹d(
vÆ2
);

536 
ë_addr
:

537 
vÆ
.
ty≥
 = 
ë_addr
;

538 
vÆ
.
vÆue
.
as_addr
 = 
	`evÆ_as_addr
(
vÆ1
Ë+ÉvÆ_as_addr(
vÆ2
);

540 
ë_uöt
:

541 
vÆ
.
ty≥
 = 
ë_uöt
;

542 
vÆ
.
vÆue
.
as_uöt
 = 
	`evÆ_as_uöt
(
vÆ1
Ë+ÉvÆ_as_uöt(
vÆ2
);

544 
ë_öt
:

545 
vÆ
.
ty≥
 = 
ë_öt
;

546 
vÆ
.
vÆue
.
as_öt
 = 
	`evÆ_as_öt
(
vÆ1
Ë+ÉvÆ_as_öt(
vÆ2
);

549 
	`∑nic
("bogusÉxpressionÅype");

552  
vÆ
;

553 
	}
}

556 
evÆ_vÆue_t


557 
	$f_sub
(
evÆ_vÆue_t
 
vÆ1
, evÆ_vÆue_à
vÆ2
)

559 
evÆ_ty≥_t
 
ë
;

560 
evÆ_vÆue_t
 
vÆ
;

563 i‡(
vÆ1
.
ty≥
 =
ë_symbﬁ
 || 
vÆ2
.type ==Ét_symbol)

565 
evÆ_îr‹
 = 
ERR_BADEXPR
;

566  
îr_vÆue
;

570 
ë
 = 
	`ªsu…_ty≥
(
vÆ1
.
ty≥
, 
vÆ2
.type);

571 
ë
)

573 
ë_doubÀ
:

574 
vÆ
.
ty≥
 = 
ë_doubÀ
;

575 
vÆ
.
vÆue
.
as_doubÀ
 = 
	`evÆ_as_doubÀ
(
vÆ1
Ë-ÉvÆ_as_doubÀ(
vÆ2
);

577 
ë_Êﬂt
:

578 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

579 
vÆ
.
vÆue
.
as_Êﬂt
 = 
	`evÆ_as_Êﬂt
(
vÆ1
Ë-ÉvÆ_as_Êﬂt(
vÆ2
);

581 #ifde‡
HOST_HAS_QWORD


582 
ë_qw‹d
:

583 
vÆ
.
ty≥
 = 
ë_qw‹d
;

584 
vÆ
.
vÆue
.
as_qw‹d
 = 
	`evÆ_as_qw‹d
(
vÆ1
Ë-ÉvÆ_as_qw‹d(
vÆ2
);

586 
ë_sqw‹d
:

587 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

588 
vÆ
.
vÆue
.
as_sqw‹d
 = 
	`evÆ_as_sqw‹d
(
vÆ1
Ë-ÉvÆ_as_sqw‹d(
vÆ2
);

591 
ë_addr
:

592 
vÆ
.
ty≥
 = 
ë_addr
;

593 
vÆ
.
vÆue
.
as_addr
 = 
	`evÆ_as_addr
(
vÆ1
Ë-ÉvÆ_as_addr(
vÆ2
);

595 
ë_uöt
:

596 
vÆ
.
ty≥
 = 
ë_uöt
;

597 
vÆ
.
vÆue
.
as_uöt
 = 
	`evÆ_as_uöt
(
vÆ1
Ë-ÉvÆ_as_uöt(
vÆ2
);

599 
ë_öt
:

600 
vÆ
.
ty≥
 = 
ë_öt
;

601 
vÆ
.
vÆue
.
as_öt
 = 
	`evÆ_as_öt
(
vÆ1
Ë-ÉvÆ_as_öt(
vÆ2
);

604 
	`∑nic
("bogusÉxpressionÅype");

607  
vÆ
;

608 
	}
}

611 
evÆ_vÆue_t


612 
	$f_mu…
(
evÆ_vÆue_t
 
vÆ1
, evÆ_vÆue_à
vÆ2
)

614 
evÆ_ty≥_t
 
ë
;

615 
evÆ_vÆue_t
 
vÆ
;

618 i‡(
vÆ1
.
ty≥
 =
ë_symbﬁ
 || 
vÆ2
.type ==Ét_symbol)

620 
evÆ_îr‹
 = 
ERR_BADEXPR
;

621  
îr_vÆue
;

625 
ë
 = 
	`ªsu…_ty≥
(
vÆ1
.
ty≥
, 
vÆ2
.type);

626 
ë
)

628 
ë_doubÀ
:

629 
vÆ
.
ty≥
 = 
ë_doubÀ
;

630 
vÆ
.
vÆue
.
as_doubÀ
 = 
	`evÆ_as_doubÀ
(
vÆ1
Ë*ÉvÆ_as_doubÀ(
vÆ2
);

632 
ë_Êﬂt
:

633 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

634 
vÆ
.
vÆue
.
as_Êﬂt
 = 
	`evÆ_as_Êﬂt
(
vÆ1
Ë*ÉvÆ_as_Êﬂt(
vÆ2
);

636 #ifde‡
HOST_HAS_QWORD


637 
ë_qw‹d
:

638 
vÆ
.
ty≥
 = 
ë_qw‹d
;

639 
vÆ
.
vÆue
.
as_qw‹d
 = 
	`evÆ_as_qw‹d
(
vÆ1
Ë*ÉvÆ_as_qw‹d(
vÆ2
);

641 
ë_sqw‹d
:

642 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

643 
vÆ
.
vÆue
.
as_sqw‹d
 = 
	`evÆ_as_sqw‹d
(
vÆ1
Ë*ÉvÆ_as_sqw‹d(
vÆ2
);

646 
ë_addr
:

647 
vÆ
.
ty≥
 = 
ë_addr
;

648 
vÆ
.
vÆue
.
as_addr
 = 
	`evÆ_as_addr
(
vÆ1
Ë*ÉvÆ_as_addr(
vÆ2
);

650 
ë_uöt
:

651 
vÆ
.
ty≥
 = 
ë_uöt
;

652 
vÆ
.
vÆue
.
as_uöt
 = 
	`evÆ_as_uöt
(
vÆ1
Ë*ÉvÆ_as_uöt(
vÆ2
);

654 
ë_öt
:

655 
vÆ
.
ty≥
 = 
ë_öt
;

656 
vÆ
.
vÆue
.
as_öt
 = 
	`evÆ_as_öt
(
vÆ1
Ë*ÉvÆ_as_öt(
vÆ2
);

659 
	`∑nic
("bogusÉxpressionÅype");

662  
vÆ
;

663 
	}
}

666 
evÆ_vÆue_t


667 
	$f_div
(
evÆ_vÆue_t
 
vÆ1
, evÆ_vÆue_à
vÆ2
)

669 
evÆ_ty≥_t
 
ë
;

670 
evÆ_vÆue_t
 
vÆ
;

673 i‡(
vÆ1
.
ty≥
 =
ë_symbﬁ
 || 
vÆ2
.type ==Ét_symbol)

675 
evÆ_îr‹
 = 
ERR_BADEXPR
;

676  
îr_vÆue
;

680 
ë
 = 
	`ªsu…_ty≥
(
vÆ1
.
ty≥
, 
vÆ2
.type);

681 
ë
)

683 
ë_doubÀ
:

684 
vÆ
.
ty≥
 = 
ë_doubÀ
;

685 
vÆ
.
vÆue
.
as_doubÀ
 = 
	`evÆ_as_doubÀ
(
vÆ1
Ë/ÉvÆ_as_doubÀ(
vÆ2
);

687 
ë_Êﬂt
:

688 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

689 
vÆ
.
vÆue
.
as_Êﬂt
 = 
	`evÆ_as_Êﬂt
(
vÆ1
Ë/ÉvÆ_as_Êﬂt(
vÆ2
);

691 #ifde‡
HOST_HAS_QWORD


692 
ë_qw‹d
:

693 
vÆ
.
ty≥
 = 
ë_qw‹d
;

694 
vÆ
.
vÆue
.
as_qw‹d
 = 
	`evÆ_as_qw‹d
(
vÆ1
Ë/ÉvÆ_as_qw‹d(
vÆ2
);

696 
ë_sqw‹d
:

697 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

698 
vÆ
.
vÆue
.
as_sqw‹d
 = 
	`evÆ_as_sqw‹d
(
vÆ1
Ë/ÉvÆ_as_sqw‹d(
vÆ2
);

701 
ë_addr
:

702 
vÆ
.
ty≥
 = 
ë_addr
;

703 
vÆ
.
vÆue
.
as_addr
 = 
	`evÆ_as_addr
(
vÆ1
Ë/ÉvÆ_as_addr(
vÆ2
);

705 
ë_uöt
:

706 
vÆ
.
ty≥
 = 
ë_uöt
;

707 
vÆ
.
vÆue
.
as_uöt
 = 
	`evÆ_as_uöt
(
vÆ1
Ë/ÉvÆ_as_uöt(
vÆ2
);

709 
ë_öt
:

710 
vÆ
.
ty≥
 = 
ë_öt
;

711 
vÆ
.
vÆue
.
as_öt
 = 
	`evÆ_as_öt
(
vÆ1
Ë/ÉvÆ_as_öt(
vÆ2
);

714 
	`∑nic
("bogusÉxpressionÅype");

717  
vÆ
;

718 
	}
}

721 
evÆ_vÆue_t


722 
	$f_√g
(
evÆ_vÆue_t
 
vÆ1
)

724 
evÆ_vÆue_t
 
vÆ
;

727 i‡(
vÆ1
.
ty≥
 =
ë_symbﬁ
)

729 
evÆ_îr‹
 = 
ERR_BADEXPR
;

730  
îr_vÆue
;

734 
vÆ1
.
ty≥
)

736 
ë_doubÀ
:

737 
vÆ
.
ty≥
 = 
ë_doubÀ
;

738 
vÆ
.
vÆue
.
as_doubÀ
 = - 
vÆ1
.value.as_double;

740 
ë_Êﬂt
:

741 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

742 
vÆ
.
vÆue
.
as_Êﬂt
 = - 
vÆ1
.value.as_float;

744 #ifde‡
HOST_HAS_QWORD


745 
ë_qw‹d
:

746 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

747 
vÆ
.
vÆue
.
as_qw‹d
 = - (
sqw‹d_t
)
vÆ1
.value.as_qword;

749 
ë_sqw‹d
:

750 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

751 
vÆ
.
vÆue
.
as_sqw‹d
 = - 
vÆ1
.value.as_sqword;

754 
ë_addr
:

755 
vÆ
.
ty≥
 = 
ë_addr
;

756 
vÆ
.
vÆue
.
as_addr
 = - 
vÆ1
.value.as_addr;

758 
ë_uöt
:

759 i‡(()
vÆ1
.
vÆue
.
as_uöt
 > 2147483648U)

762 #ifde‡
HOST_HAS_QWORD


763 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

764 
vÆ
.
vÆue
.
as_sqw‹d
 = - ((
sqw‹d_t
)
vÆ1
.vÆue.
as_uöt
);

766 
vÆ
.
ty≥
 = 
ë_doubÀ
;

767 
vÆ
.
vÆue
.
as_doubÀ
 = - (()
vÆ1
.vÆue.
as_uöt
);

773 
vÆ
.
ty≥
 = 
ë_öt
;

774 
vÆ
.
vÆue
.
as_öt
 = - (()
vÆ1
.vÆue.
as_uöt
);

777 
ë_öt
:

778 i‡(()
vÆ1
.
vÆue
.
as_öt
 == 0x80000000U)

781 
vÆ
.
ty≥
 = 
ë_uöt
;

782 
vÆ
.
vÆue
.
as_uöt
 = 2147483648U;

787 
vÆ
.
ty≥
 = 
ë_öt
;

788 
vÆ
.
vÆue
.
as_öt
 = - 
vÆ1
.value.as_int;

792 
	`∑nic
("bogusÉxpressionÅype");

795  
vÆ
;

796 
	}
}

800 
	$f_eq_zîo
(
evÆ_vÆue_t
 
vÆ1
)

802 
vÆ
;

805 i‡(
vÆ1
.
ty≥
 =
ë_symbﬁ
)

807 
evÆ_îr‹
 = 
ERR_BADEXPR
;

808  
FALSE
;

811 
vÆ1
.
ty≥
)

813 
ë_doubÀ
:

814 
vÆ
 = 
vÆ1
.
vÆue
.
as_doubÀ
 == 0.0;

816 
ë_Êﬂt
:

817 
vÆ
 = 
vÆ1
.
vÆue
.
as_Êﬂt
 == 0.0;

819 #ifde‡
HOST_HAS_QWORD


820 
ë_qw‹d
:

821 
vÆ
 = 
vÆ1
.
vÆue
.
as_qw‹d
 == 0;

823 
ë_sqw‹d
:

824 
vÆ
 = 
vÆ1
.
vÆue
.
as_sqw‹d
 == 0;

827 
ë_addr
:

828 
vÆ
 = 
vÆ1
.
vÆue
.
as_addr
 == 0;

830 
ë_uöt
:

831 
vÆ
 = 
vÆ1
.
vÆue
.
as_uöt
 == 0;

833 
ë_öt
:

834 
vÆ
 = 
vÆ1
.
vÆue
.
as_öt
 == 0;

837 
	`∑nic
("bogusÉxpressionÅype");

840  
vÆ
;

841 
	}
}

846 
evÆ_vÆue_t


847 
	$c⁄°™t
(
evÆ_°©e_t
 *
es
)

849 
evÆ_vÆue_t
 
vÆ
;

850 
öt_vÆ
;

851 
uöt_vÆ
;

852 
doubÀ_vÆ
;

853 *
ídp
;

854 #ifde‡
HOST_HAS_QWORD


855 
sqw‹d_t
 
sqw‹d_vÆ
;

856 
qw‹d_t
 
qw‹d_vÆ
;

860 #i‡
	`deföed
(
•¨c
Ë&& !deföed(
__svr4__
)

861 
	`°πﬁ
(*, **, );

862 
	`°πod
(*, **);

872 
î∫o
 = 0;

873 
öt_vÆ
 = 
	`°πﬁ
(
es
->
tok_buf
, &
ídp
, 0);

874 i‡(!
î∫o
 && !*
ídp
)

877 
vÆ
.
ty≥
 = 
ë_öt
;

878 
vÆ
.
vÆue
.
as_öt
 = 
öt_vÆ
;

879  
vÆ
;

883 
î∫o
 = 0;

884 
uöt_vÆ
 = 
	`°πoul
(
es
->
tok_buf
, &
ídp
, 0);

885 i‡(!
î∫o
 && !*
ídp
)

888 
vÆ
.
ty≥
 = 
ë_uöt
;

889 
vÆ
.
vÆue
.
as_uöt
 = 
uöt_vÆ
;

890  
vÆ
;

893 #ifde‡
HOST_HAS_QWORD


895 
î∫o
 = 0;

896 
sqw‹d_vÆ
 = 
	`my©osq
(
es
->
tok_buf
, &
ídp
, 0);

897 i‡(!
î∫o
 && !*
ídp
)

900 
vÆ
.
ty≥
 = 
ë_sqw‹d
;

901 
vÆ
.
vÆue
.
as_sqw‹d
 = 
sqw‹d_vÆ
;

902  
vÆ
;

906 
î∫o
 = 0;

907 
qw‹d_vÆ
 = 
	`my©oq
(
es
->
tok_buf
, &
ídp
, 0);

908 i‡(!
î∫o
 && !*
ídp
)

911 
vÆ
.
ty≥
 = 
ë_qw‹d
;

912 
vÆ
.
vÆue
.
as_qw‹d
 = 
qw‹d_vÆ
;

913  
vÆ
;

919 
î∫o
 = 0;

920 
doubÀ_vÆ
 = 
	`°πod
(
es
->
tok_buf
, &
ídp
);

921 i‡(!
î∫o
 && !*
ídp
)

924 
vÆ
.
ty≥
 = 
ë_doubÀ
;

925 
vÆ
.
vÆue
.
as_doubÀ
 = 
doubÀ_vÆ
;

926  
vÆ
;

931 
evÆ_îr‹
 = 
ERR_BADCONST
;

932  
îr_vÆue
;

933 
	}
}

937 
evÆ_vÆue_t


938 
	$Á˘‹
(
evÆ_°©e_t
 *
es
)

940 
evÆ_tokí_t
 
tok
;

941 
evÆ_vÆue_t
 
vÆ
;

943 
tok
 = 
	`≥ek_√xt_tokí
(
es
);

944 
tok
)

946 
tok_›¨í
:

947 ()
	`gë_√xt_tokí
(
es
);

948 
vÆ
 = 
	`ex¥
(
es
);

949 i‡(
evÆ_îr‹
)

950  
îr_vÆue
;

952 
tok
 = 
	`≥ek_√xt_tokí
(
es
);

953 i‡(
tok
 !
tok_˝¨í
)

955 
evÆ_îr‹
 = 
ERR_UPAREN
;

956  
îr_vÆue
;

958 ()
	`gë_√xt_tokí
(
es
);

961 
tok_möus
:

963 ()
	`gë_√xt_tokí
(
es
);

964 
vÆ
 = 
	`Á˘‹
(
es
);

965 i‡(
evÆ_îr‹
)

966  
îr_vÆue
;

967 
vÆ
 = 
	`f_√g
(val);

970 
tok_idít
:

971 ()
	`gë_√xt_tokí
(
es
);

973 
vÆ
 = 
es
->
	`f_evÆ_idít
(es);

974 i‡(
evÆ_îr‹
)

975  
îr_vÆue
;

978 
tok_c⁄°
:

979 ()
	`gë_√xt_tokí
(
es
);

980 
vÆ
 = 
	`c⁄°™t
(
es
);

981 i‡(
evÆ_îr‹
)

982  
îr_vÆue
;

986 
evÆ_îr‹
 = 
ERR_NOTERM
;

987  
îr_vÆue
;

990  
vÆ
;

991 
	}
}

995 
evÆ_vÆue_t


996 
	$ãrm
(
evÆ_°©e_t
 *
es
)

998 
evÆ_tokí_t
 
tok
;

999 
evÆ_vÆue_t
 
vÆ
, 
vÆ1
;

1001 
vÆ
 = 
	`Á˘‹
(
es
);

1002 i‡(
evÆ_îr‹
)

1003  
îr_vÆue
;

1005 
tok
 = 
	`≥ek_√xt_tokí
(
es
);

1006 
tok
)

1008 
tok_mu…
:

1009 ()
	`gë_√xt_tokí
(
es
);

1010 
vÆ
 = 
	`f_mu…
(vÆ, 
	`ãrm
(
es
));

1011 i‡(
evÆ_îr‹
)

1012  
îr_vÆue
;

1015 
tok_div
:

1016 ()
	`gë_√xt_tokí
(
es
);

1017 
vÆ1
 = 
	`ãrm
(
es
);

1018 i‡(
evÆ_îr‹
)

1019  
îr_vÆue
;

1020 i‡(
	`f_eq_zîo
(
vÆ1
))

1022 
evÆ_îr‹
 = 
ERR_DIV0
;

1023  
îr_vÆue
;

1025 
vÆ
 = 
	`f_div
(vÆ, 
vÆ1
);

1031  
vÆ
;

1032 
	}
}

1036 
evÆ_vÆue_t


1037 
	$ex¥
(
evÆ_°©e_t
 *
es
)

1039 
evÆ_tokí_t
 
tok
;

1040 
evÆ_vÆue_t
 
vÆ
;

1042 
vÆ
 = 
	`ãrm
(
es
);

1043 i‡(
evÆ_îr‹
)

1044  
îr_vÆue
;

1046 
tok
 = 
	`≥ek_√xt_tokí
(
es
);

1047 
tok
)

1049 
tok_∂us
:

1050 ()
	`gë_√xt_tokí
(
es
);

1051 
vÆ
 = 
	`f_add
(vÆ, 
	`ex¥
(
es
));

1052 i‡(
evÆ_îr‹
)

1053  
îr_vÆue
;

1056 
tok_möus
:

1057 ()
	`gë_√xt_tokí
(
es
);

1058 
vÆ
 = 
	`f_sub
(vÆ, 
	`ex¥
(
es
));

1059 i‡(
evÆ_îr‹
)

1060  
îr_vÆue
;

1066  
vÆ
;

1067 
	}
}

1070 
evÆ_°©e_t
 *

1071 
	$evÆ_√w
(
evÆ_idít_t
 
f_evÆ_idít
,

1072 *
u£r_±r
)

1074 
evÆ_°©e_t
 *
es
;

1076 
es
 = 
	`ˇŒoc
(1, (
evÆ_°©e_t
));

1077 i‡(!
es
)

1078 
	`Áèl
("out of virtual memory");

1080 
es
->
f_evÆ_idít
 = f_eval_ident;

1081 
es
->
u£r_±r
 = user_ptr;

1083  
es
;

1084 
	}
}

1088 
	$evÆ_dñëe
(
evÆ_°©e_t
 *
es
)

1090 
	`‰ì
(
es
);

1091 
	}
}

1095 
evÆ_vÆue_t


1096 
	$evÆ_ex¥
(
evÆ_°©e_t
 *
es
,

1097 *
p
,

1098 **
ídp
)

1100 
evÆ_vÆue_t
 
vÆ
;

1103 
evÆ_îr‹
 = 
ERR_NOERR
;

1104 
es
->
p
 =Ö;

1105 *
es
->
tok_buf
 = '\0';

1106 
es
->
≥ek_tok
 = 
tok_övÆid
;

1109 
vÆ
 = 
	`ex¥
(
es
);

1112 i‡(
ídp
)

1114 i‡(
es
->
≥ek_tok
 !
tok_övÆid
)

1117 *
ídp
 = 
es
->
œ°p
;

1120 *
ídp
 = 
es
->
p
;

1123  
vÆ
;

1124 
	}
}

1128 
	$evÆ_¥öt
(
FILE
 *
°ªam
,

1129 
evÆ_vÆue_t
 
vÆ
)

1131 
vÆ
.
ty≥
)

1133 
ë_doubÀ
:

1134 
	`Ârötf
(
°ªam
, "%‡[doubÀ]", 
vÆ
.
vÆue
.
as_doubÀ
);

1136 
ë_Êﬂt
:

1137 
	`Ârötf
(
°ªam
, "%‡[Êﬂt]", ()
vÆ
.
vÆue
.
as_Êﬂt
);

1139 #ifde‡
HOST_HAS_QWORD


1140 
ë_qw‹d
:

1141 
	`myÂrötf
(
°ªam
, "%lu [qw‹d_t]", 
vÆ
.
vÆue
.
as_qw‹d
);

1143 
ë_sqw‹d
:

1144 
	`myÂrötf
(
°ªam
, "%ld [sqw‹d_t]", 
vÆ
.
vÆue
.
as_sqw‹d
);

1147 
ë_addr
:

1148 
	`myÂrötf
(
°ªam
, "0x%∞[md_addr_t]", 
vÆ
.
vÆue
.
as_addr
);

1150 
ë_uöt
:

1151 
	`Ârötf
(
°ªam
, "%u [uöt]", 
vÆ
.
vÆue
.
as_uöt
);

1153 
ë_öt
:

1154 
	`Ârötf
(
°ªam
, "%d [öt]", 
vÆ
.
vÆue
.
as_öt
);

1156 
ë_symbﬁ
:

1157 
	`Ârötf
(
°ªam
, "\"%s\" [symbﬁ]", 
vÆ
.
vÆue
.
as_symbﬁ
);

1160 
	`∑nic
("bogusÉxpressionÅype");

1162 
	}
}

1165 #ifde‡
TEST


1167 
evÆ_vÆue_t
 
	g™_öt
;

1168 
evÆ_vÆue_t
 
	ga_uöt
;

1169 
evÆ_vÆue_t
 
	ga_Êﬂt
;

1170 
evÆ_vÆue_t
 
	ga_doubÀ
;

1171 
evÆ_vÆue_t
 
	ga_symbﬁ
;

1173 
	ssym_m≠_t
 {

1174 *
	msymbﬁ
;

1175 
evÆ_vÆue_t
 *
	mvÆue
;

1178 
sym_m≠_t
 
	gsym_m≠
[] = {

1179 { "™_öt", &
™_öt
 },

1180 { "a_uöt", &
a_uöt
 },

1181 { "a_Êﬂt", &
a_Êﬂt
 },

1182 { "a_doubÀ", &
a_doubÀ
 },

1183 { "a_symbﬁ", &
a_symbﬁ
 },

1184 { 
NULL
, NULL },

1187 
evÆ_vÆue_t


1188 
	$my_evÆ_idít
(
evÆ_°©e_t
 *
es
)

1190 
sym_m≠_t
 *
sym
;

1192 
sym
=
sym_m≠
; sym->
symbﬁ
 !
NULL
; sym++)

1194 i‡(!
	`°rcmp
(
sym
->
symbﬁ
, 
es
->
tok_buf
))

1195  *
sym
->
vÆue
;

1198 
evÆ_îr‹
 = 
ERR_UNDEFVAR
;

1199  
îr_vÆue
;

1200 
	}
}

1203 
	$maö
()

1205 
evÆ_°©e_t
 *
es
;

1208 
™_öt
.
ty≥
 = 
ë_öt
;án_öt.
vÆue
.
as_öt
 = 1;

1209 
a_uöt
.
ty≥
 = 
ë_uöt
;á_uöt.
vÆue
.
as_uöt
 = 2;

1210 
a_Êﬂt
.
ty≥
 = 
ë_Êﬂt
;á_Êﬂt.
vÆue
.
as_Êﬂt
 = 3.0f;

1211 
a_doubÀ
.
ty≥
 = 
ë_doubÀ
;á_doubÀ.
vÆue
.
as_doubÀ
 = 4.0;

1212 
a_symbﬁ
.
ty≥
 = 
ë_symbﬁ
;á_symbﬁ.
vÆue
.
as_symbﬁ
 = "testing 1 2 3...";

1215 
es
 = 
	`evÆ_√w
(
my_evÆ_idít
, 
NULL
);

1219 
evÆ_vÆue_t
 
vÆ
;

1220 
ex¥_buf
[1024];

1222 
	`fgës
(
ex¥_buf
, 1024, 
°dö
);

1225 i‡(
ex¥_buf
[
	`°æí
(expr_buf)-1] == '\n')

1226 
ex¥_buf
[
	`°æí
(expr_buf)-1] = '\0';

1228 i‡(
ex¥_buf
[0] == '\0')

1229 
	`exô
(0);

1231 
vÆ
 = 
	`evÆ_ex¥
(
es
, 
ex¥_buf
, 
NULL
);

1232 i‡(
evÆ_îr‹
)

1233 
	`Ârötf
(
°dout
, "evÆÉº‹: %s\n", 
evÆ_îr_°r
[
evÆ_îr‹
]);

1236 
	`Ârötf
(
°dout
, "%†=", 
ex¥_buf
);

1237 
	`evÆ_¥öt
(
°dout
, 
vÆ
);

1238 
	`Ârötf
(
°dout
, "\n");

1241 
	}
}

	@eval.h

52 #i‚de‡
EVAL_H


53 
	#EVAL_H


	)

55 
	~<°dio.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

61 
	gevÆ_°©e_t
;

62 
	gevÆ_vÆue_t
;

67 
	gevÆ_vÆue_t


68 (*
	tevÆ_idít_t
)(
	tevÆ_°©e_t
 *
	tes
);

71 
	eevÆ_tokí_t
 {

72 
	mtok_idít
,

73 
	mtok_c⁄°
,

74 
	mtok_∂us
,

75 
	mtok_möus
,

76 
	mtok_mu…
,

77 
	mtok_div
,

78 
	mtok_›¨í
,

79 
	mtok_˝¨í
,

80 
	mtok_eof
,

81 
	mtok_whôe•a˚
,

82 
	mtok_övÆid


86 
	sevÆ_°©e_t
 {

87 *
	mp
;

88 *
	mœ°p
;

89 
evÆ_idít_t
 
	mf_evÆ_idít
;

90 *
	mu£r_±r
;

91 
	mtok_buf
[512];

92 
evÆ_tokí_t
 
	m≥ek_tok
;

96 
	eevÆ_îr_t
 {

97 
	mERR_NOERR
,

98 
	mERR_UPAREN
,

99 
	mERR_NOTERM
,

100 
	mERR_DIV0
,

101 
	mERR_BADCONST
,

102 
	mERR_BADEXPR
,

103 
	mERR_UNDEFVAR
,

104 
	mERR_EXTRA
,

105 
	mERR_NUM


109 
evÆ_îr_t
 
evÆ_îr‹
 ;

112 *
evÆ_îr_°r
[
ERR_NUM
];

115 
	eevÆ_ty≥_t
 {

116 
	më_öt
,

117 
	më_uöt
,

118 
	më_addr
,

119 #ifde‡
HOST_HAS_QWORD


120 
	më_qw‹d
,

121 
	më_sqw‹d
,

123 
	më_Êﬂt
,

124 
	më_doubÀ
,

125 
	më_symbﬁ
,

126 
	më_NUM


130 #ifde‡
HOST_HAS_QWORD


131 
	#EVAL_INTEGRAL
(
TYPE
) \

132 ((
TYPE
Ë=
ë_öt
 || (TYPEË=
ë_uöt
 || (TYPEË=
ë_addr
 \

133 || (
TYPE
Ë=
ë_qw‹d
 || (TYPEË=
ë_sqw‹d
)

	)

135 
	#EVAL_INTEGRAL
(
TYPE
) \

136 ((
TYPE
Ë=
ë_öt
 || (TYPEË=
ë_uöt
 || (TYPEË=
ë_addr
)

	)

140 *
evÆ_ty≥_°r
[
ë_NUM
];

143 
	sevÆ_vÆue_t
 {

144 
evÆ_ty≥_t
 
	mty≥
;

146 
	mas_öt
;

147 
	mas_uöt
;

148 
md_addr_t
 
	mas_addr
;

149 #ifde‡
HOST_HAS_QWORD


150 
qw‹d_t
 
	mas_qw‹d
;

151 
sqw‹d_t
 
	mas_sqw‹d
;

153 
	mas_Êﬂt
;

154 
	mas_doubÀ
;

155 *
	mas_symbﬁ
;

156 } 
	mvÆue
;

164 
evÆ_as_doubÀ
(
evÆ_vÆue_t
 
vÆ
);

167 
evÆ_as_Êﬂt
(
evÆ_vÆue_t
 
vÆ
);

169 #ifde‡
HOST_HAS_QWORD


171 
qw‹d_t
 
evÆ_as_qw‹d
(
evÆ_vÆue_t
 
vÆ
);

174 
sqw‹d_t
 
evÆ_as_sqw‹d
(
evÆ_vÆue_t
 
vÆ
);

178 
md_addr_t
 
evÆ_as_addr
(
evÆ_vÆue_t
 
vÆ
);

181 
evÆ_as_uöt
(
evÆ_vÆue_t
 
vÆ
);

184 
evÆ_as_öt
(
evÆ_vÆue_t
 
vÆ
);

187 
evÆ_°©e_t
 *

188 
evÆ_√w
(
evÆ_idít_t
 
f_evÆ_idít
,

189 *
u£r_±r
);

193 
evÆ_dñëe
(
evÆ_°©e_t
 *
es
);

197 
evÆ_vÆue_t


198 
evÆ_ex¥
(
evÆ_°©e_t
 *
es
,

199 *
p
,

200 **
ídp
);

204 
evÆ_¥öt
(
FILE
 *
°ªam
,

205 
evÆ_vÆue_t
 
vÆ
);

	@eventq.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"evítq.h
"

60 
	gevítq_max_evíts
;

61 
	gevítq_evít_cou¡
;

62 
evítq_desc
 *
	gevítq_≥ndög
;

63 
evítq_desc
 *
	gevítq_‰ì
;

65 
EVENTQ_ID_TYPE
 
	g√xt_ID
 = 1;

68 
	$evítq_öô
(
max_evíts
)

70 
evítq_max_evíts
 = 
max_evíts
;

71 
evítq_evít_cou¡
 = 0;

72 
evítq_≥ndög
 = 
NULL
;

73 
evítq_‰ì
 = 
NULL
;

74 
	}
}

76 
	#__QUEUE_EVENT
(
WHEN
, 
ID
, 
ACTION
) \

77 
evítq_desc
 *
¥ev
, *
ev
, *
√w
; \

79 i‡(!
evítq_‰ì
) \

81 i‡(
evítq_max_evíts
 && 
evítq_evít_cou¡
 >=Éventq_max_events) \

82 
	`∑nic
("too manyÉvents"); \

83 
evítq_‰ì
 = 
	`ˇŒoc
(1, (
evítq_desc
)); \

85 
√w
 = 
evítq_‰ì
; \

86 
evítq_‰ì
 =Évítq_‰ì->
√xt
; \

88 
√w
->
whí
 = (
WHEN
); (
ID
Ë√w->
id
 = 
√xt_ID
++; 
ACTION
; \

90 
¥ev
=
NULL
,
ev
=
evítq_≥ndög
; \

91 
ev
 &&Év->
whí
 < when; \

92 
¥ev
=
ev
,ÉvÛv->
√xt
); \

94 i‡(
¥ev
) \

97 
√w
->
√xt
 = 
¥ev
->next; \

98 
¥ev
->
√xt
 = 
√w
; \

103 
√w
->
√xt
 = 
evítq_≥ndög
; \

104 
evítq_≥ndög
 = 
√w
; \

105 }

	)

107 
EVENTQ_ID_TYPE


108 
	$evítq_queue_£tbô
(
SS_TIME_TYPE
 
whí
,

109 
BITMAP_ENT_TYPE
 *
bm≠
, 
sz
, 
bônum
)

111 
EVENTQ_ID_TYPE
 
id
;

112 
	`__QUEUE_EVENT
(
whí
, 
id
, \

113 
√w
->
a˘i⁄
 = 
EvítSëBô
;Çew->
d©a
.
bô
.
bm≠
 = bmap; \

114 
√w
->
d©a
.
bô
.
sz
 = sz;Çew->d©a.bô.
bônum
 = bitnum);

115  
id
;

116 
	}
}

118 
EVENTQ_ID_TYPE


119 
	$evítq_queue_˛órbô
(
SS_TIME_TYPE
 
whí
,

120 
BITMAP_ENT_TYPE
 *
bm≠
, 
sz
, 
bônum
)

122 
EVENTQ_ID_TYPE
 
id
;

123 
	`__QUEUE_EVENT
(
whí
, 
id
, \

124 
√w
->
a˘i⁄
 = 
EvítCÀ¨Bô
;Çew->
d©a
.
bô
.
bm≠
 = bmap; \

125 
√w
->
d©a
.
bô
.
sz
 = sz;Çew->d©a.bô.
bônum
 = bitnum);

126  
id
;

127 
	}
}

129 
EVENTQ_ID_TYPE


130 
	$evítq_queue_£tÊag
(
SS_TIME_TYPE
 
whí
, *
pÊag
, 
vÆue
)

132 
EVENTQ_ID_TYPE
 
id
;

133 
	`__QUEUE_EVENT
(
whí
, 
id
, \

134 
√w
->
a˘i⁄
 = 
EvítSëFœg
; \

135 
√w
->
d©a
.
Êag
.
pÊag
 =ÖÊag;Çew->d©a.Êag.
vÆue
 = value);

136  
id
;

137 
	}
}

139 
EVENTQ_ID_TYPE


140 
	$evítq_queue_add›
(
SS_TIME_TYPE
 
whí
, *
summ™d
, 
addíd
)

142 
EVENTQ_ID_TYPE
 
id
;

143 
	`__QUEUE_EVENT
(
whí
, 
id
, \

144 
√w
->
a˘i⁄
 = 
EvítAddOp
; \

145 
√w
->
d©a
.
add›
.
summ™d
 = summand; \

146 
√w
->
d©a
.
add›
.
addíd
 =áddend);

147  
id
;

148 
	}
}

150 
EVENTQ_ID_TYPE


151 
evítq_queue_ˇŒback
(
SS_TIME_TYPE
 
whí
,

152 (*
‚
)(
SS_TIME_TYPE
 
time
, 
¨g
), arg)

154 
EVENTQ_ID_TYPE
 
id
;

155 
	`__QUEUE_EVENT
(
whí
, 
id
, \

156 
√w
->
a˘i⁄
 = 
EvítCÆlback
;Çew->
d©a
.
ˇŒback
.
‚
 = fn;\

157 
√w
->
d©a
.
ˇŒback
.
¨g
 =árg);

158  
id
;

159 
	}
}

161 
	#EXECUTE_ACTION
(
ev
, 
now
) \

163 
ev
->
a˘i⁄
) { \

164 
EvítSëBô
: \

165 
	`BITMAP_SET
(
ev
->
d©a
.
bô
.
bm≠
,Év->d©a.bô.
sz
,Év->d©a.bô.
bônum
);\

167 
EvítCÀ¨Bô
: \

168 
	`BITMAP_CLEAR
(
ev
->
d©a
.
bô
.
bm≠
,Év->d©a.bô.
sz
,Év->d©a.bô.
bônum
);\

170 
EvítSëFœg
: \

171 *
ev
->
d©a
.
Êag
.
pÊag
 =Év->d©a.Êag.
vÆue
; \

173 
EvítAddOp
: \

174 *
ev
->
d©a
.
add›
.
summ™d
 +ev->d©a.add›.
addíd
; \

176 
EvítCÆlback
: \

177 (*
ev
->
d©a
.
ˇŒback
.
‚
)(
now
,Év->d©a.ˇŒback.
¨g
); \

180 
	`∑nic
("bogusÉventáction"); \

181 }

	)

186 
	$evítq_execuã
(
EVENTQ_ID_TYPE
 
id
)

188 
evítq_desc
 *
¥ev
, *
ev
;

190 
¥ev
=
NULL
,
ev
=
evítq_≥ndög
;Év;ÖªvÛv,evÛv->
√xt
)

192 i‡(
ev
->
id
 == id)

194 i‡(
¥ev
)

197 
¥ev
->
√xt
 = 
ev
->next;

202 
evítq_≥ndög
 = 
ev
->
√xt
;

206 
	`EXECUTE_ACTION
(
ev
, 0);

209 
ev
->
√xt
 = 
evítq_‰ì
;

210 
evítq_‰ì
 = 
ev
;

213  
TRUE
;

217  
FALSE
;

218 
	}
}

223 
	$evítq_ªmove
(
EVENTQ_ID_TYPE
 
id
)

225 
evítq_desc
 *
¥ev
, *
ev
;

227 
¥ev
=
NULL
,
ev
=
evítq_≥ndög
;Év;ÖªvÛv,evÛv->
√xt
)

229 i‡(
ev
->
id
 == id)

231 i‡(
¥ev
)

234 
¥ev
->
√xt
 = 
ev
->next;

239 
evítq_≥ndög
 = 
ev
->
√xt
;

243 
ev
->
√xt
 = 
evítq_‰ì
;

244 
evítq_‰ì
 = 
ev
;

247  
TRUE
;

251  
FALSE
;

252 
	}
}

255 
	$evítq_£rvi˚_evíts
(
SS_TIME_TYPE
 
now
)

257 
evítq_≥ndög
 &&Évítq_≥ndög->
whí
 <
now
)

259 
evítq_desc
 *
ev
 = 
evítq_≥ndög
;

262 
	`EXECUTE_ACTION
(
ev
, 
now
);

265 
evítq_≥ndög
 = 
ev
->
√xt
;

266 
ev
->
√xt
 = 
evítq_‰ì
;

267 
evítq_‰ì
 = 
ev
;

269 
	}
}

272 
	$evítq_dump
(
FILE
 *
°ªam
)

274 
evítq_desc
 *
ev
;

276 i‡(!
°ªam
)

277 
°ªam
 = 
°dîr
;

279 
	`Ârötf
(
°ªam
, "Pending Events: ");

280 
ev
=
evítq_≥ndög
;Év;ÉvÛv->
√xt
)

282 
	`Ârötf
(
°ªam
, "@ %.0f:%s:",

283 ()
ev
->
whí
,

284 
ev
->
a˘i⁄
 =
EvítSëBô
 ? "set bit"

285 : 
ev
->
a˘i⁄
 =
EvítCÀ¨Bô
 ? "clear bit"

286 : 
ev
->
a˘i⁄
 =
EvítSëFœg
 ? "set flag"

287 : 
ev
->
a˘i⁄
 =
EvítAddOp
 ? "add operation"

288 : 
ev
->
a˘i⁄
 =
EvítCÆlback
 ? "call back"

289 : (
	`ab‹t
(), ""));

290 
ev
->
a˘i⁄
) {

291 
EvítSëBô
:

292 
EvítCÀ¨Bô
:

293 
	`Ârötf
(
°ªam
, "0x%p, %d, %d",

294 
ev
->
d©a
.
bô
.
bm≠
,Év->d©a.bô.
sz
,Év->d©a.bô.
bônum
);

296 
EvítSëFœg
:

297 
	`Ârötf
(
°ªam
, "0x%p, %d", 
ev
->
d©a
.
Êag
.
pÊag
,Év->d©a.Êag.
vÆue
);

299 
EvítAddOp
:

300 
	`Ârötf
(
°ªam
, "0x%p, %d",

301 
ev
->
d©a
.
add›
.
summ™d
,Év->d©a.add›.
addíd
);

303 
EvítCÆlback
:

304 
	`Ârötf
(
°ªam
, "0x%p, %d",

305 
ev
->
d©a
.
ˇŒback
.
‚
,Év->d©a.ˇŒback.
¨g
);

308 
	`∑nic
("bogusÉventáction");

310 
	`Ârötf
(
°ªam
, " ");

312 
	}
}

	@eventq.h

52 #i‚de‡
EVENTQ_H


53 
	#EVENTQ_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"bôm≠.h
"

66 
	eevítq_a˘i⁄
 {

67 
	mEvítSëBô
,

68 
	mEvítCÀ¨Bô
,

69 
	mEvítSëFœg
,

70 
	mEvítAddOp
,

71 
	mEvítCÆlback
,

75 
	tEVENTQ_ID_TYPE
;

78 
	sevítq_desc
 {

79 
evítq_desc
 *
	m√xt
;

80 
SS_TIME_TYPE
 
	mwhí
;

81 
EVENTQ_ID_TYPE
 
	mid
;

82 
evítq_a˘i⁄
 
	ma˘i⁄
;

83 
	uevítq_d©a
 {

85 
BITMAP_ENT_TYPE
 *
	mbm≠
;

86 
	msz
;

87 
	mbônum
;

88 } 
	mbô
;

90 *
	mpÊag
;

91 
	mvÆue
;

92 } 
	mÊag
;

94 *
	msumm™d
;

95 
	maddíd
;

96 } 
	madd›
;

98 (*
	m‚
)(
SS_TIME_TYPE
 
	mtime
, 
	m¨g
);

99 
	m¨g
;

100 } 
	mˇŒback
;

101 } 
	md©a
;

106 
evítq_öô
(
max_evíts
);

110 
EVENTQ_ID_TYPE
 
evítq_queue_£tbô
(
SS_TIME_TYPE
 
whí
,

111 
BITMAP_ENT_TYPE
 *
bm≠
, 
sz
, 
bônum
);

112 
EVENTQ_ID_TYPE
 
evítq_queue_˛órbô
(
SS_TIME_TYPE
 
whí
, 
BITMAP_ENT_TYPE
 *
bm≠
,

113 
sz
, 
bônum
);

114 
EVENTQ_ID_TYPE
 
evítq_queue_£tÊag
(
SS_TIME_TYPE
 
whí
,

115 *
pÊag
, 
vÆue
);

116 
EVENTQ_ID_TYPE
 
evítq_queue_add›
(
SS_TIME_TYPE
 
whí
,

117 *
summ™d
, 
addíd
);

118 
EVENTQ_ID_TYPE
 
evítq_queue_ˇŒback
(
SS_TIME_TYPE
 
whí
,

119 (*
‚
)(
SS_TIME_TYPE
 
time
, 
¨g
),

120 
¨g
);

124 
	`evítq_execuã
(
EVENTQ_ID_TYPE
 
id
);

128 
	`evítq_ªmove
(
EVENTQ_ID_TYPE
 
id
);

131 
	`evítq_£rvi˚_evíts
(
SS_TIME_TYPE
 
now
);

133 
	`evítq_dump
(
FILE
 *
°ªam
);

	@host.h

52 #i‚de‡
HOST_H


53 
	#HOST_H


	)

56 #i‚de‡
__STDC__


57 #îr‹ 
The
 
Sim∂eSˇœr
 
simuœt‹s
 
mu°
 
be
 
compûed
 
wôh
 
™
 
ANSI
 
C
 
compûî
.

61 #unde‡
INLINE


62 #i‡
deföed
(
__GNUC__
)

63 
	#INLINE
 
ölöe


	)

65 
	#INLINE


	)

69 #ifde‡
__GNUC__


71 
	#SYMCAT
(
X
,
Y
ËX##
	)
Y

72 
	#ANSI_SYMCAT


	)

74 #ifde‡
OLD_SYMCAT


75 
	#SYMCAT
(
X
,
Y
ËX 
	)
Y

77 
	#SYMCAT
(
X
,
Y
ËX##
	)
Y

78 
	#ANSI_SYMCAT


	)

83 
	tboﬁ_t
;

84 
	tbyã_t
;

85 sig√d 
	tsbyã_t
;

86 
	thÆf_t
;

87 sig√d 
	tshÆf_t
;

88 
	tw‹d_t
;

89 sig√d 
	tsw‹d_t
;

90 
	tsÊﬂt_t
;

91 
	tdÊﬂt_t
;

94 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__SUNPRO_C
Ë|| deföed(
__CC_C89
Ë|| deföed(
__CC_XLC
)

95 
	#HOST_HAS_QWORD


	)

96 
	tqw‹d_t
;

97 sig√d 
	tsqw‹d_t
;

98 #ifde‡
ANSI_SYMCAT


99 
	#ULL
(
N
ËN##
ULL


	)

100 
	#LL
(
N
ËN##
LL


	)

102 
	#ULL
(
N
ËN 
ULL


	)

103 
	#LL
(
N
ËN 
LL


	)

105 #ñi‡
deföed
(
__Æpha
)

106 
	#HOST_HAS_QWORD


	)

107 
	tqw‹d_t
;

108 sig√d 
	tsqw‹d_t
;

109 #ifde‡
ANSI_SYMCAT


110 
	#ULL
(
N
ËN##
UL


	)

111 
	#LL
(
N
ËN##
L


	)

113 
	#ULL
(
N
ËN 
UL


	)

114 
	#LL
(
N
ËN 
L


	)

116 #ñi‡
deföed
(
_MSC_VER
)

117 
	#HOST_HAS_QWORD


	)

118 
	t__öt64
 
	tqw‹d_t
;

119 sig√d 
	t__öt64
 
	tsqw‹d_t
;

120 
	#ULL
(
N
Ë((
qw‹d_t
)(N))

	)

121 
	#LL
(
N
Ë((
sqw‹d_t
)(N))

	)

123 #unde‡
HOST_HAS_QWORD


127 #ifde‡
HOST_HAS_QWORD


128 
sqw‹d_t
 
	tcou¡î_t
;

129 
sqw‹d_t
 
	ttick_t
;

131 
dÊﬂt_t
 
	tcou¡î_t
;

132 
dÊﬂt_t
 
	ttick_t
;

135 #ifde‡
__svr4__


136 
	#£tjmp
 
_£tjmp


	)

137 
	#l⁄gjmp
 
_l⁄gjmp


	)

	@libexo/exo-test.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~"misc.h
"

55 
	~"›ti⁄s.h
"

56 
	~"libexo.h
"

59 
›t_odb_t
 *
	godb
;

62 
	ghñp_me
;

65 
	gmake_defs
;

68 *
	glﬂd_fûe
;

71 *
	gßve_fûe
;

74 
	g¥öt_db
;

77 
exo_ãrm_t
 *
	gexo_db
 = 
NULL
;

80 
	$ußge
(
FILE
 *
°ªam
, 
¨gc
, **
¨gv
)

82 
	`Ârötf
(
°ªam
, "Ußge: %†{-›ti⁄s}\n", 
¨gv
[0]);

83 
	`›t_¥öt_hñp
(
odb
, 
°ªam
);

84 
	}
}

87 
	$maö
(
¨gc
, **
¨gv
)

90 
odb
 = 
	`›t_√w
–
NULL
);

91 
	`›t_ªg_Êag
(
odb
, "-h", "print help message",

92 &
hñp_me
, 
FALSE
, FALSE, 
NULL
);

93 
	`›t_ªg_Êag
(
odb
, "-defs", "make internal defs",

94 &
make_defs
, 
FALSE
, 
TRUE
, 
NULL
);

95 
	`›t_ªg_°rög
(
odb
, "-load", "loadán EXO file",

96 &
lﬂd_fûe
, 
NULL
,

97  
TRUE
, 
NULL
);

98 
	`›t_ªg_°rög
(
odb
, "-save", "saveán EXO file",

99 &
ßve_fûe
, 
NULL
,

100  
TRUE
, 
NULL
);

101 
	`›t_ªg_Êag
(
odb
, "-print", "printÅhe EXO DBÅo stdout",

102 &
¥öt_db
, 
FALSE
,

103  
TRUE
, 
NULL
);

106 
	`›t_¥o˚ss_›ti⁄s
(
odb
, 
¨gc
, 
¨gv
);

108 i‡(
hñp_me
)

111 
	`ußge
(
°dîr
, 
¨gc
, 
¨gv
);

112 
	`exô
(1);

116 
	`›t_¥öt_›ti⁄s
(
odb
, 
°dîr
, 
TRUE
, TRUE);

118 i‡(
lﬂd_fûe
)

120 
ZFILE
 *
exo_°ªam
;

121 
exo_ãrm_t
 *
exo
;

123 
exo_°ªam
 = 
	`myzf›í
(
lﬂd_fûe
, "r");

124 i‡(!
exo_°ªam
)

125 
	`Áèl
("couldÇŸ o≥¿EXO fûê`%s'", 
lﬂd_fûe
);

127 (
exo
 = 
	`exo_ªad
(
exo_°ªam
->
fd
)Ë!
NULL
)

128 
exo_db
 = 
	`exo_chaö
”xo_db, 
exo
);

130 
	`myzf˛o£
(
exo_°ªam
);

133 i‡(
make_defs
)

135 
exo_ãrm_t
 *
li°
, *
¨øy
, *
a
, *
b
, *
c
, *
d
, *
e
, *
f
, *
g
, *
h
, *
i
;

136 *
d©a
 = "This isáÅestÅo see if blobsÑeally work...";

137 *
d©a1
 = "This isáÅestÅo see if blobsÑeally work..."

145 
d©a2
[16] =

148 
exo_db
 =

149 
	`exo_chaö
(
exo_db
, 
	`exo_√w
(
ec_°rög
, "** basicÅypesÅests **"));

150 
exo_db
 = 
	`exo_chaö
”xo_db, 
a
 = 
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)42));

151 
exo_db
 = 
	`exo_chaö
(
b
 = 
	`exo_√w
(
ec_Êﬂt
, (
exo_Êﬂt_t
)42.0),Éxo_db);

152 
exo_db
 = 
	`exo_chaö
”xo_db, 
c
 = 
	`exo_√w
(
ec_ch¨
, ()'x'));

153 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_ch¨
, ()'\n'));

154 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_ch¨
, ()'\b'));

155 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_ch¨
, ()'\x02'));

156 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_ch¨
, ()'\xab'));

157 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_°rög
, "this isáÅest..."));

158 
exo_db
 =

159 
	`exo_chaö
(
exo_db
, 
d
 = 
	`exo_√w
(
ec_°rög
, "this is\naÅest...\n"));

160 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_°rög
, "aÅest... <<\\\b>>\n"));

162 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_°rög
, "** deep copyÅests **"));

163 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_dìpc›y
(
d
));

164 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_dìpc›y
(
c
));

165 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_dìpc›y
(
b
));

166 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_dìpc›y
(
a
));

168 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_°rög
, "**ÜistÅests **"));

169 
exo_db
 =

170 
	`exo_chaö
(
exo_db
, 
	`exo_√w
(
ec_li°
,

171 
	`exo_dìpc›y
(
d
),Éxo_dìpc›y(
c
),

172 
	`exo_dìpc›y
(
b
),Éxo_dìpc›y(
a
), 
NULL
));

173 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_li°
, 
NULL
));

174 
exo_db
 =

175 
	`exo_chaö
(
exo_db
, 
	`exo_√w
(
ec_li°
,

176 
	`exo_√w
(
ec_li°
, 
NULL
),

177 
	`exo_√w
(
ec_li°
, 
NULL
),

178 
	`exo_√w
(
ec_li°
, 
	`exo_dìpc›y
(
a
), 
NULL
),

179 
NULL
));

180 
li°
 = 
	`exo_dìpc›y
(
a
);

181 
li°
 = 
	`exo_chaö
÷i°, 
	`exo_dìpc›y
(
b
));

182 
li°
 = 
	`exo_chaö
÷i°, 
	`exo_dìpc›y
(
a
));

183 
li°
 = 
	`exo_chaö
÷i°, 
	`exo_dìpc›y
(
b
));

184 
li°
 = 
	`exo_chaö
(
	`exo_dìpc›y
(
c
),Üist);

185 
exo_db
 = 
	`exo_chaö
”xo_db, 
e
 = 
	`exo_√w
(
ec_li°
, 
li°
, 
NULL
));

186 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_li°
,

187 
	`exo_dìpc›y
(
e
),

188 
	`exo_√w
(
ec_li°
, 
NULL
),

189 
	`exo_dìpc›y
(
e
),

190 
	`exo_dìpc›y
(
a
), 
NULL
));

192 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_°rög
, "**árrayÅests **"));

193 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_¨øy
, 16, 
NULL
));

194 
f
 = 
¨øy
 = 
	`exo_√w
(
ec_¨øy
, 16, 
NULL
);

195 
	`EXO_ARR
(
¨øy
, 2Ë
	`exo_dìpc›y
(
e
);

196 
	`EXO_ARR
(
¨øy
, 3Ë
	`exo_dìpc›y
(
a
);

197 
	`EXO_ARR
(
¨øy
, 4Ë
	`exo_dìpc›y
(
c
);

198 
	`EXO_ARR
(
¨øy
, 6Ë
	`exo_dìpc›y
(EXO_ARR(array, 2));

199 
	`EXO_ARR
(
¨øy
, 7Ë
	`exo_dìpc›y
(EXO_ARR(array, 1));

200 
exo_db
 = 
	`exo_chaö
”xo_db, 
¨øy
);

201 
exo_db
 =

202 
	`exo_chaö
(
exo_db
, 
	`exo_√w
(
ec_¨øy
, 4,

203 
	`exo_dìpc›y
(
a
),

204 
	`exo_dìpc›y
(
e
),

205 
	`exo_dìpc›y
(
c
),

206 
	`exo_dìpc›y
(
f
),

207 
NULL
));

209 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_°rög
, "**ÅokenÅests **"));

210 
	#SYM1
 1

	)

211 
	#SYM2
 2

	)

212 
	`exo_öã∫_as
("sym1", 
SYM1
);

213 
	`exo_öã∫_as
("sym2", 
SYM2
);

214 
g
 = 
	`exo_√w
(
ec_tokí
, "sym1"),

215 
exo_db
 = 
	`exo_chaö
(exo_db,

216 
	`exo_√w
(
ec_li°
,

217 
g
,

218 
	`exo_√w
(
ec_öãgî
,

219 (
exo_öãgî_t
)

220 
g
->
as_tokí
.
ít
->
tokí
),

221 
NULL
));

222 
h
 = 
	`exo_√w
(
ec_tokí
, "sym2"),

223 
exo_db
 = 
	`exo_chaö
(exo_db,

224 
	`exo_√w
(
ec_li°
,

225 
h
,

226 
	`exo_√w
(
ec_öãgî
,

227 (
exo_öãgî_t
)

228 
h
->
as_tokí
.
ít
->
tokí
),

229 
NULL
));

230 
i
 = 
	`exo_√w
(
ec_tokí
, "sym3"),

231 
exo_db
 = 
	`exo_chaö
(exo_db,

232 
	`exo_√w
(
ec_li°
,

233 
i
,

234 
	`exo_√w
(
ec_öãgî
,

235 (
exo_öãgî_t
)

236 
i
->
as_tokí
.
ít
->
tokí
),

237 
NULL
));

240 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_blob
, 
	`°æí
(
d©a
), data));

241 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_blob
, 
	`°æí
(
d©a1
), data1));

242 
exo_db
 = 
	`exo_chaö
”xo_db, 
	`exo_√w
(
ec_blob
, (
d©a2
), data2));

245 i‡(
¥öt_db
)

247 
exo_ãrm_t
 *
exo
;

250 
	`Ârötf
(
°dout
, "\n/* EXO DB */\n\n");

251 
	`Ârötf
(
°dout
,

253 
EXO_FMT_MAJOR
, 
EXO_FMT_MINOR
);

256 
exo
=
exo_db
;Éxÿ!
NULL
;ÉxoÛxo->
√xt
)

258 
	`exo_¥öt
(
exo
, 
°dout
);

259 
	`Ârötf
(
°dout
, "\n\n");

263 i‡(
ßve_fûe
)

265 
ZFILE
 *
exo_°ªam
;

266 
exo_ãrm_t
 *
exo
;

268 
exo_°ªam
 = 
	`myzf›í
(
ßve_fûe
, "w");

269 i‡(!
exo_°ªam
)

270 
	`Áèl
("couldÇŸ o≥¿EXO fûê`%s'", 
ßve_fûe
);

273 
	`Ârötf
(
exo_°ªam
->
fd
,

275 
EXO_FMT_MAJOR
, 
EXO_FMT_MINOR
);

278 
exo
=
exo_db
;Éxÿ!
NULL
;ÉxoÛxo->
√xt
)

280 
	`exo_¥öt
(
exo
, 
exo_°ªam
->
fd
);

281 
	`Ârötf
(
exo_°ªam
->
fd
, "\n\n");

283 
	`myzf˛o£
(
exo_°ªam
);

285 
	}
}

	@libexo/exolex.c

7 
	#FLEX_SCANNER


	)

8 
	#YY_FLEX_MAJOR_VERSION
 2

	)

9 
	#YY_FLEX_MINOR_VERSION
 5

	)

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

16 #ifde‡
c_∂u•lus


17 #i‚de‡
__˝lu•lus


18 
	#__˝lu•lus


	)

23 #ifde‡
__˝lu•lus


25 
	~<°dlib.h
>

28 
	#YY_USE_PROTOS


	)

31 
	#YY_USE_CONST


	)

35 #i‡
__STDC__


37 
	#YY_USE_PROTOS


	)

38 
	#YY_USE_CONST


	)

43 #ifde‡
__TURBOC__


44 #¥agm®
w¨n
 -
rch


45 #¥agm®
w¨n
 -
u£


46 
	~<io.h
>

47 
	~<°dlib.h
>

48 
	#YY_USE_CONST


	)

49 
	#YY_USE_PROTOS


	)

52 #ifde‡
YY_USE_CONST


53 
	#yyc⁄°
 c⁄°

	)

55 
	#yyc⁄°


	)

59 #ifde‡
YY_USE_PROTOS


60 
	#YY_PROTO
(
¥Ÿo
Ë
	)
¥Ÿo

62 
	#YY_PROTO
(
¥Ÿo
Ë()

	)

66 
	#YY_NULL
 0

	)

73 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

79 
	#BEGIN
 
yy_°¨t
 = 1 + 2 *

	)

85 
	#YY_START
 ((
yy_°¨t
 - 1Ë/ 2)

	)

86 
	#YYSTATE
 
YY_START


	)

89 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

92 
	#YY_NEW_FILE
 
	`yyª°¨t
–
yyö
 )

	)

94 
	#YY_END_OF_BUFFER_CHAR
 0

	)

97 
	#YY_BUF_SIZE
 16384

	)

99 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

101 
yyÀng
;

102 
FILE
 *
yyö
, *
yyout
;

104 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

105 
	#EOB_ACT_END_OF_FILE
 1

	)

106 
	#EOB_ACT_LAST_MATCH
 2

	)

124 
	#yyÀss
(
n
) \

128 *
yy_˝
 = 
yy_hﬁd_ch¨
; \

129 
YY_RESTORE_YY_MORE_OFFSET
 \

130 
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
n
 - 
YY_MORE_ADJ
; \

131 
YY_DO_BEFORE_ACTION
; \

133  0 )

	)

135 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyãxt_±r
 )

	)

141 
	tyy_size_t
;

144 
	syy_buf„r_°©e


146 
FILE
 *
	myy_öput_fûe
;

148 *
	myy_ch_buf
;

149 *
	myy_buf_pos
;

154 
yy_size_t
 
	myy_buf_size
;

159 
	myy_n_ch¨s
;

165 
	myy_is_our_buf„r
;

172 
	myy_is_öãø˘ive
;

178 
	myy_©_bﬁ
;

183 
	myy_fûl_buf„r
;

185 
	myy_buf„r_°©us
;

186 
	#YY_BUFFER_NEW
 0

	)

187 
	#YY_BUFFER_NORMAL
 1

	)

198 
	#YY_BUFFER_EOF_PENDING
 2

	)

201 
YY_BUFFER_STATE
 
	gyy_cuºít_buf„r
 = 0;

207 
	#YY_CURRENT_BUFFER
 
yy_cuºít_buf„r


	)

211 
	gyy_hﬁd_ch¨
;

213 
	gyy_n_ch¨s
;

216 
	gyyÀng
;

219 *
	gyy_c_buf_p
 = (*) 0;

220 
	gyy_öô
 = 1;

221 
	gyy_°¨t
 = 0;

226 
	gyy_did_buf„r_swôch_⁄_eof
;

228 
yyª°¨t
 
YY_PROTO
(–
FILE
 *
öput_fûe
 ));

230 
yy_swôch_to_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
√w_buf„r
 ));

231 
yy_lﬂd_buf„r_°©e
 
YY_PROTO
(( ));

232 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 
YY_PROTO
(–
FILE
 *
fûe
, 
size
 ));

233 
yy_dñëe_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
 ));

234 
yy_öô_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 ));

235 
yy_Êush_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
 ));

236 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
–
yy_cuºít_buf„r
 )

	)

238 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 
YY_PROTO
(–*
ba£
, 
yy_size_t
 
size
 ));

239 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 
YY_PROTO
(–
yyc⁄°
 *
yy_°r
 ));

240 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 
YY_PROTO
(–
yyc⁄°
 *
byãs
, 
Àn
 ));

242 *
yy_Êex_Æloc
 
YY_PROTO
(–
yy_size_t
 ));

243 *
yy_Êex_ªÆloc
 
YY_PROTO
(–*, 
yy_size_t
 ));

244 
yy_Êex_‰ì
 
YY_PROTO
(( * ));

246 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

248 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

250 i‡–! 
yy_cuºít_buf„r
 ) \

251 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

252 
yy_cuºít_buf„r
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

253 }

	)

255 
	#yy_£t_bﬁ
(
©_bﬁ
) \

257 i‡–! 
yy_cuºít_buf„r
 ) \

258 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

259 
yy_cuºít_buf„r
->
yy_©_bﬁ
 = 
©_bﬁ
; \

260 }

	)

262 
	#YY_AT_BOL
(Ë(
yy_cuºít_buf„r
->
yy_©_bﬁ
)

	)

264 
	tYY_CHAR
;

265 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

266 
	tyy_°©e_ty≥
;

267 *
yyãxt
;

268 
	#yyãxt_±r
 
yyãxt


	)

270 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 
YY_PROTO
(( ));

271 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 
YY_PROTO
(–yy_°©e_ty≥ 
cuºít_°©e
 ));

272 
yy_gë_√xt_buf„r
 
YY_PROTO
(( ));

273 
yy_Áèl_îr‹
 
YY_PROTO
(–
yyc⁄°
 
msg
[] ));

278 
	#YY_DO_BEFORE_ACTION
 \

279 
yyãxt_±r
 = 
yy_bp
; \

280 
yyÀng
 = (Ë(
yy_˝
 - 
yy_bp
); \

281 
yy_hﬁd_ch¨
 = *
yy_˝
; \

282 *
yy_˝
 = '\0'; \

283 
yy_c_buf_p
 = 
yy_˝
;

	)

285 
	#YY_NUM_RULES
 25

	)

286 
	#YY_END_OF_BUFFER
 26

	)

287 
yyc⁄°
 
	gyy_ac˚±
[60] =

297 
yyc⁄°
 
	gyy_ec
[256] =

329 
yyc⁄°
 
	gyy_mëa
[37] =

337 
yyc⁄°
 
	gyy_ba£
[64] =

348 
yyc⁄°
 
	gyy_def
[64] =

359 
yyc⁄°
 
	gyy_nxt
[215] =

387 
yyc⁄°
 
	gyy_chk
[215] =

415 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

416 *
	gyy_œ°_ac˚±ög_˝os
;

421 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

422 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

423 
	#YY_MORE_ADJ
 0

	)

424 
	#YY_RESTORE_YY_MORE_OFFSET


	)

425 *
	gyyãxt
;

427 
	#INITIAL
 0

	)

479 
	~<°dio.h
>

480 
	~<°dlib.h
>

482 
	~"../ho°.h
"

483 
	~"../misc.h
"

484 
	~"libexo.h
"

487 #unde‡
YYLMAX


488 
	#YYLMAX
 (16*1024)

	)

491 
	#YY_NEVER_INTERACTIVE
 1

	)

493 
	glöe
 = 1;

495 
yywøp
();

496 
Àx_ót_commít
();

498 
	#BLOB_MODE
 1

	)

506 #i‚de‡
YY_SKIP_YYWRAP


507 #ifde‡
__˝lu•lus


508 "C" 
yywøp
 
YY_PROTO
(( ));

510 
yywøp
 
YY_PROTO
(( ));

514 #i‚de‡
YY_NO_UNPUT


515 
yyu≈ut
 
YY_PROTO
(–
c
, *
buf_±r
 ));

518 #i‚de‡
yyãxt_±r


519 
yy_Êex_°∫˝y
 
YY_PROTO
(–*, 
yyc⁄°
 *, ));

522 #ifde‡
YY_NEED_STRLEN


523 
yy_Êex_°æí
 
YY_PROTO
(–
yyc⁄°
 * ));

526 #i‚de‡
YY_NO_INPUT


527 #ifde‡
__˝lu•lus


528 
yyöput
 
YY_PROTO
(( ));

530 
öput
 
YY_PROTO
(( ));

534 #i‡
YY_STACK_USED


535 
	gyy_°¨t_°ack_±r
 = 0;

536 
	gyy_°¨t_°ack_dïth
 = 0;

537 *
	gyy_°¨t_°ack
 = 0;

538 #i‚de‡
YY_NO_PUSH_STATE


539 
yy_push_°©e
 
YY_PROTO
(–
√w_°©e
 ));

541 #i‚de‡
YY_NO_POP_STATE


542 
yy_p›_°©e
 
YY_PROTO
(( ));

544 #i‚de‡
YY_NO_TOP_STATE


545 
yy_t›_°©e
 
YY_PROTO
(( ));

549 
	#YY_NO_PUSH_STATE
 1

	)

550 
	#YY_NO_POP_STATE
 1

	)

551 
	#YY_NO_TOP_STATE
 1

	)

554 #ifde‡
YY_MALLOC_DECL


555 
	gYY_MALLOC_DECL


557 #i‡
__STDC__


558 #i‚de‡
__˝lu•lus


559 
	~<°dlib.h
>

570 #i‚de‡
YY_READ_BUF_SIZE


571 
	#YY_READ_BUF_SIZE
 8192

	)

576 #i‚de‡
ECHO


580 
	#ECHO
 (Ë
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )

	)

586 #i‚de‡
YY_INPUT


587 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

588 i‡–
yy_cuºít_buf„r
->
yy_is_öãø˘ive
 ) \

590 
c
 = '*', 
n
; \

591  
n
 = 0;Ç < 
max_size
 && \

592 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

593 
buf
[
n
] = (Ë
c
; \

594 i‡–
c
 == '\n' ) \

595 
buf
[
n
++] = (Ë
c
; \

596 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

597 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

598 
ªsu…
 = 
n
; \

600 i‡–((
ªsu…
 = 
	`‰ód
–
buf
, 1, 
max_size
, 
yyö
 )) == 0) \

601 && 
	`„º‹
–
yyö
 ) ) \

602 
	`YY_FATAL_ERROR
–"öpuàö fÀx sˇ¬î faûed" );

	)

609 #i‚de‡
yyãrmö©e


610 
	#yyãrmö©e
(Ë 
YY_NULL


	)

614 #i‚de‡
YY_START_STACK_INCR


615 
	#YY_START_STACK_INCR
 25

	)

619 #i‚de‡
YY_FATAL_ERROR


620 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

626 #i‚de‡
YY_DECL


627 
	#YY_DECL
 
yyÀx
 
	`YY_PROTO
(–))

	)

633 #i‚de‡
YY_USER_ACTION


634 
	#YY_USER_ACTION


	)

638 #i‚de‡
YY_BREAK


639 
	#YY_BREAK
 ;

	)

642 
	#YY_RULE_SETUP
 \

643 
YY_USER_ACTION


	)

645 
	gYY_DECL


647 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

648 *
	gyy_˝
 = 
NULL
, *
	gyy_bp
 = NULL;

649 
	gyy_a˘
;

656 i‡–
	gyy_öô
 )

658 
	gyy_öô
 = 0;

660 #ifde‡
YY_USER_INIT


661 
	gYY_USER_INIT
;

664 i‡–! 
	gyy_°¨t
 )

665 
	gyy_°¨t
 = 1;

667 i‡–! 
	gyyö
 )

668 
	gyyö
 = 
°dö
;

670 i‡–! 
	gyyout
 )

671 
	gyyout
 = 
°dout
;

673 i‡–! 
	gyy_cuºít_buf„r
 )

674 
	gyy_cuºít_buf„r
 =

675 
yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

677 
yy_lﬂd_buf„r_°©e
();

682 
	gyy_˝
 = 
yy_c_buf_p
;

685 *
	gyy_˝
 = 
yy_hﬁd_ch¨
;

690 
	gyy_bp
 = 
yy_˝
;

692 
	gyy_cuºít_°©e
 = 
yy_°¨t
;

693 
	gyy_m©ch
:

696 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

697 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

699 
	gyy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

700 
	gyy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

702  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

704 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

705 i‡–
	gyy_cuºít_°©e
 >= 60 )

706 
yy_c
 = 
yy_mëa
[() yy_c];

708 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

709 ++
	gyy_˝
;

711  
	gyy_ba£
[
yy_cuºít_°©e
] != 178 );

713 
	gyy_föd_a˘i⁄
:

714 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

715 i‡–
	gyy_a˘
 == 0 )

717 
yy_˝
 = 
yy_œ°_ac˚±ög_˝os
;

718 
	gyy_cuºít_°©e
 = 
yy_œ°_ac˚±ög_°©e
;

719 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

722 
	gYY_DO_BEFORE_ACTION
;

725 
	gdo_a˘i⁄
:

728  
yy_a˘
 )

732 *
yy_˝
 = 
yy_hﬁd_ch¨
;

733 
	gyy_˝
 = 
yy_œ°_ac˚±ög_˝os
;

734 
	gyy_cuºít_°©e
 = 
yy_œ°_ac˚±ög_°©e
;

735 
	gyy_föd_a˘i⁄
;

738 
YY_RULE_SETUP


740 {  
Àx_byã
; }

741 
YY_BREAK


743 
YY_RULE_SETUP


745 { 
Àx_ót_commít
(); }

746 
YY_BREAK


748 
YY_RULE_SETUP


750 {  
Àx_addªss
; }

751 
YY_BREAK


753 
YY_RULE_SETUP


755 {  
Àx_öãgî
; }

756 
YY_BREAK


758 
YY_RULE_SETUP


760 {  
Àx_öãgî
; }

761 
YY_BREAK


763 
YY_RULE_SETUP


765 {  
Àx_Êﬂt
; }

766 
YY_BREAK


768 
YY_RULE_SETUP


770 {  
Àx_Êﬂt
; }

771 
YY_BREAK


773 
YY_RULE_SETUP


775 {  
Àx_Êﬂt
; }

776 
YY_BREAK


778 
YY_RULE_SETUP


780 {  
Àx_ch¨
; }

781 
YY_BREAK


783 
YY_RULE_SETUP


785  {  
Àx_°rög
; }

786 
YY_BREAK


788 
YY_RULE_SETUP


790 {  
Àx_tokí
; }

791 
YY_BREAK


793 
YY_RULE_SETUP


795 {  
Àx_tokí
; }

796 
YY_BREAK


798 
YY_RULE_SETUP


801 
YY_BREAK


803 
YY_RULE_SETUP


806 
YY_BREAK


808 
YY_RULE_SETUP


811 
YY_BREAK


813 
YY_RULE_SETUP


816 
YY_BREAK


818 
YY_RULE_SETUP


821 
YY_BREAK


823 
YY_RULE_SETUP


826 
YY_BREAK


828 
YY_RULE_SETUP


831 
YY_BREAK


833 
YY_RULE_SETUP


835 { 
BEGIN
(
BLOB_MODE
);  '<'; }

836 
YY_BREAK


838 
YY_RULE_SETUP


840 { 
BEGIN
(
INITIAL
);  '>'; }

841 
YY_BREAK


843 
YY_RULE_SETUP


846 
YY_BREAK


848 
YY_RULE_SETUP


850 { 
löe
++; }

851 
YY_BREAK


852 
YY_STATE_EOF
(
INITIAL
):

853 
YY_STATE_EOF
(
BLOB_MODE
):

855 {  
Àx_eof
; }

856 
YY_BREAK


858 
YY_RULE_SETUP


861 
Áèl
("bogus character in input"); }

862 
YY_BREAK


864 
YY_RULE_SETUP


866 
ECHO
;

867 
	gYY_BREAK


870 
	gYY_END_OF_BUFFER
:

873 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyãxt_±r
) - 1;

876 *
	gyy_˝
 = 
yy_hﬁd_ch¨
;

877 
YY_RESTORE_YY_MORE_OFFSET


879 i‡–
	gyy_cuºít_buf„r
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

890 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->yy_n_chars;

891 
	gyy_cuºít_buf„r
->
	gyy_öput_fûe
 = 
yyö
;

892 
	gyy_cuºít_buf„r
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

902 i‡–
	gyy_c_buf_p
 <&
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] )

904 
yy_°©e_ty≥
 
yy_√xt_°©e
;

906 
	gyy_c_buf_p
 = 
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

908 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

919 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

921 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

923 i‡–
	gyy_√xt_°©e
 )

926 
	gyy_˝
 = ++
yy_c_buf_p
;

927 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

928 
	gyy_m©ch
;

933 
	gyy_˝
 = 
yy_c_buf_p
;

934 
	gyy_föd_a˘i⁄
;

938  
yy_gë_√xt_buf„r
() )

940 
	gEOB_ACT_END_OF_FILE
:

942 
yy_did_buf„r_swôch_⁄_eof
 = 0;

944 i‡–
yywøp
() )

955 
	gyy_c_buf_p
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

957 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

958 
	gdo_a˘i⁄
;

963 i‡–! 
	gyy_did_buf„r_swôch_⁄_eof
 )

964 
	gYY_NEW_FILE
;

969 
	gEOB_ACT_CONTINUE_SCAN
:

970 
yy_c_buf_p
 =

971 
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

973 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

975 
	gyy_˝
 = 
yy_c_buf_p
;

976 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

977 
	gyy_m©ch
;

979 
	gEOB_ACT_LAST_MATCH
:

980 
yy_c_buf_p
 =

981 &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
];

983 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

985 
	gyy_˝
 = 
yy_c_buf_p
;

986 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

987 
	gyy_föd_a˘i⁄
;

993 
YY_FATAL_ERROR
(

1008 
	$yy_gë_√xt_buf„r
()

1010 *
de°
 = 
yy_cuºít_buf„r
->
yy_ch_buf
;

1011 *
sour˚
 = 
yyãxt_±r
;

1012 
numbî_to_move
, 
i
;

1013 
ªt_vÆ
;

1015 i‡–
yy_c_buf_p
 > &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
 + 1] )

1016 
	`YY_FATAL_ERROR
(

1019 i‡–
yy_cuºít_buf„r
->
yy_fûl_buf„r
 == 0 )

1021 i‡–
yy_c_buf_p
 - 
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

1026  
EOB_ACT_END_OF_FILE
;

1034  
EOB_ACT_LAST_MATCH
;

1041 
numbî_to_move
 = (Ë(
yy_c_buf_p
 - 
yyãxt_±r
) - 1;

1043  
i
 = 0; i < 
numbî_to_move
; ++i )

1044 *(
de°
++Ë*(
sour˚
++);

1046 i‡–
yy_cuºít_buf„r
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1050 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars = 0;

1054 
num_to_ªad
 =

1055 
yy_cuºít_buf„r
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1057  
num_to_ªad
 <= 0 )

1059 #ifde‡
YY_USES_REJECT


1060 
	`YY_FATAL_ERROR
(

1065 
YY_BUFFER_STATE
 
b
 = 
yy_cuºít_buf„r
;

1067 
yy_c_buf_p_off£t
 =

1068 (Ë(
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

1070 i‡–
b
->
yy_is_our_buf„r
 )

1072 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1074 i‡–
√w_size
 <= 0 )

1075 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1077 
b
->
yy_buf_size
 *= 2;

1079 
b
->
yy_ch_buf
 = (*)

1081 
	`yy_Êex_ªÆloc
–(*Ë
b
->
yy_ch_buf
,

1082 
b
->
yy_buf_size
 + 2 );

1086 
b
->
yy_ch_buf
 = 0;

1088 i‡–! 
b
->
yy_ch_buf
 )

1089 
	`YY_FATAL_ERROR
(

1092 
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1094 
num_to_ªad
 = 
yy_cuºít_buf„r
->
yy_buf_size
 -

1095 
numbî_to_move
 - 1;

1099 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1100 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1103 
	`YY_INPUT
–(&
yy_cuºít_buf„r
->
yy_ch_buf
[
numbî_to_move
]),

1104 
yy_n_ch¨s
, 
num_to_ªad
 );

1106 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars;

1109 i‡–
yy_n_ch¨s
 == 0 )

1111 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1113 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1114 
	`yyª°¨t
–
yyö
 );

1119 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1120 
yy_cuºít_buf„r
->
yy_buf„r_°©us
 =

1121 
YY_BUFFER_EOF_PENDING
;

1126 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1128 
yy_n_ch¨s
 +
numbî_to_move
;

1129 
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

1130 
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

1132 
yyãxt_±r
 = &
yy_cuºít_buf„r
->
yy_ch_buf
[0];

1134  
ªt_vÆ
;

1135 
	}
}

1140 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
()

1142 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1143 *
yy_˝
;

1145 
yy_cuºít_°©e
 = 
yy_°¨t
;

1147  
yy_˝
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < 
yy_c_buf_p
; ++yy_cp )

1149 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1150 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1152 
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1153 
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1155  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1157 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1158 i‡–
yy_cuºít_°©e
 >= 60 )

1159 
yy_c
 = 
yy_mëa
[() yy_c];

1161 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1164  
yy_cuºít_°©e
;

1165 
	}
}

1174 #ifde‡
YY_USE_PROTOS


1175 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
–
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1177 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
–
yy_cuºít_°©e
 )

1178 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1181 
yy_is_jam
;

1182 *
yy_˝
 = 
yy_c_buf_p
;

1184 
YY_CHAR
 
yy_c
 = 1;

1185 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1187 
yy_œ°_ac˚±ög_°©e
 = 
yy_cuºít_°©e
;

1188 
yy_œ°_ac˚±ög_˝os
 = 
yy_˝
;

1190  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1192 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1193 i‡–
yy_cuºít_°©e
 >= 60 )

1194 
yy_c
 = 
yy_mëa
[() yy_c];

1196 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1197 
yy_is_jam
 = (
yy_cuºít_°©e
 == 59);

1199  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1200 
	}
}

1203 #i‚de‡
YY_NO_UNPUT


1204 #ifde‡
YY_USE_PROTOS


1205 
	$yyu≈ut
–
c
, *
yy_bp
 )

1207 
	$yyu≈ut
–
c
, 
yy_bp
 )

1208 
c
;

1209 *
yy_bp
;

1212 *
yy_˝
 = 
yy_c_buf_p
;

1215 *
yy_˝
 = 
yy_hﬁd_ch¨
;

1217 i‡–
yy_˝
 < 
yy_cuºít_buf„r
->
yy_ch_buf
 + 2 )

1220 
numbî_to_move
 = 
yy_n_ch¨s
 + 2;

1221 *
de°
 = &
yy_cuºít_buf„r
->
yy_ch_buf
[

1222 
yy_cuºít_buf„r
->
yy_buf_size
 + 2];

1223 *
sour˚
 =

1224 &
yy_cuºít_buf„r
->
yy_ch_buf
[
numbî_to_move
];

1226  
sour˚
 > 
yy_cuºít_buf„r
->
yy_ch_buf
 )

1227 *--
de°
 = *--
sour˚
;

1229 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1230 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1231 
yy_cuºít_buf„r
->
yy_n_ch¨s
 =

1232 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->
yy_buf_size
;

1234 i‡–
yy_˝
 < 
yy_cuºít_buf„r
->
yy_ch_buf
 + 2 )

1235 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1238 *--
yy_˝
 = (Ë
c
;

1241 
yyãxt_±r
 = 
yy_bp
;

1242 
yy_hﬁd_ch¨
 = *
yy_˝
;

1243 
yy_c_buf_p
 = 
yy_˝
;

1244 
	}
}

1248 #i‚de‡
YY_NO_INPUT


1249 #ifde‡
__˝lu•lus


1250 
	$yyöput
()

1252 
	$öput
()

1255 
c
;

1257 *
yy_c_buf_p
 = 
yy_hﬁd_ch¨
;

1259 i‡–*
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

1265 i‡–
yy_c_buf_p
 < &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] )

1267 *
yy_c_buf_p
 = '\0';

1271 
off£t
 = 
yy_c_buf_p
 - 
yyãxt_±r
;

1272 ++
yy_c_buf_p
;

1274  
	`yy_gë_√xt_buf„r
() )

1276 
EOB_ACT_LAST_MATCH
:

1288 
	`yyª°¨t
–
yyö
 );

1292 
EOB_ACT_END_OF_FILE
:

1294 i‡–
	`yywøp
() )

1295  
EOF
;

1297 i‡–! 
yy_did_buf„r_swôch_⁄_eof
 )

1298 
YY_NEW_FILE
;

1299 #ifde‡
__˝lu•lus


1300  
	`yyöput
();

1302  
	`öput
();

1306 
EOB_ACT_CONTINUE_SCAN
:

1307 
yy_c_buf_p
 = 
yyãxt_±r
 + 
off£t
;

1313 
c
 = *(*Ë
yy_c_buf_p
;

1314 *
yy_c_buf_p
 = '\0';

1315 
yy_hﬁd_ch¨
 = *++
yy_c_buf_p
;

1318  
c
;

1319 
	}
}

1322 #ifde‡
YY_USE_PROTOS


1323 
	$yyª°¨t
–
FILE
 *
öput_fûe
 )

1325 
	$yyª°¨t
–
öput_fûe
 )

1326 
FILE
 *
öput_fûe
;

1329 i‡–! 
yy_cuºít_buf„r
 )

1330 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

1332 
	`yy_öô_buf„r
–
yy_cuºít_buf„r
, 
öput_fûe
 );

1333 
	`yy_lﬂd_buf„r_°©e
();

1334 
	}
}

1337 #ifde‡
YY_USE_PROTOS


1338 
	$yy_swôch_to_buf„r
–
YY_BUFFER_STATE
 
√w_buf„r
 )

1340 
	$yy_swôch_to_buf„r
–
√w_buf„r
 )

1341 
YY_BUFFER_STATE
 
√w_buf„r
;

1344 i‡–
yy_cuºít_buf„r
 =
√w_buf„r
 )

1347 i‡–
yy_cuºít_buf„r
 )

1350 *
yy_c_buf_p
 = 
yy_hﬁd_ch¨
;

1351 
yy_cuºít_buf„r
->
yy_buf_pos
 = 
yy_c_buf_p
;

1352 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars;

1355 
yy_cuºít_buf„r
 = 
√w_buf„r
;

1356 
	`yy_lﬂd_buf„r_°©e
();

1363 
yy_did_buf„r_swôch_⁄_eof
 = 1;

1364 
	}
}

1367 #ifde‡
YY_USE_PROTOS


1368 
	$yy_lﬂd_buf„r_°©e
( )

1370 
	$yy_lﬂd_buf„r_°©e
()

1373 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->yy_n_chars;

1374 
yyãxt_±r
 = 
yy_c_buf_p
 = 
yy_cuºít_buf„r
->
yy_buf_pos
;

1375 
yyö
 = 
yy_cuºít_buf„r
->
yy_öput_fûe
;

1376 
yy_hﬁd_ch¨
 = *
yy_c_buf_p
;

1377 
	}
}

1380 #ifde‡
YY_USE_PROTOS


1381 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
–
FILE
 *
fûe
, 
size
 )

1383 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
–
fûe
, 
size
 )

1384 
FILE
 *
fûe
;

1385 
size
;

1388 
YY_BUFFER_STATE
 
b
;

1390 
b
 = (
YY_BUFFER_STATE
Ë
	`yy_Êex_Æloc
––
yy_buf„r_°©e
 ) );

1391 i‡–! 
b
 )

1392 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1394 
b
->
yy_buf_size
 = 
size
;

1399 
b
->
yy_ch_buf
 = (*Ë
	`yy_Êex_Æloc
–b->
yy_buf_size
 + 2 );

1400 i‡–! 
b
->
yy_ch_buf
 )

1401 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1403 
b
->
yy_is_our_buf„r
 = 1;

1405 
	`yy_öô_buf„r
–
b
, 
fûe
 );

1407  
b
;

1408 
	}
}

1411 #ifde‡
YY_USE_PROTOS


1412 
	$yy_dñëe_buf„r
–
YY_BUFFER_STATE
 
b
 )

1414 
	$yy_dñëe_buf„r
–
b
 )

1415 
YY_BUFFER_STATE
 
b
;

1418 i‡–! 
b
 )

1421 i‡–
b
 =
yy_cuºít_buf„r
 )

1422 
yy_cuºít_buf„r
 = (
YY_BUFFER_STATE
) 0;

1424 i‡–
b
->
yy_is_our_buf„r
 )

1425 
	`yy_Êex_‰ì
–(*Ë
b
->
yy_ch_buf
 );

1427 
	`yy_Êex_‰ì
–(*Ë
b
 );

1428 
	}
}

1432 #ifde‡
YY_USE_PROTOS


1433 
	$yy_öô_buf„r
–
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 )

1435 
	$yy_öô_buf„r
–
b
, 
fûe
 )

1436 
YY_BUFFER_STATE
 
b
;

1437 
FILE
 *
fûe
;

1442 
	`yy_Êush_buf„r
–
b
 );

1444 
b
->
yy_öput_fûe
 = 
fûe
;

1445 
b
->
yy_fûl_buf„r
 = 1;

1447 #i‡
YY_ALWAYS_INTERACTIVE


1448 
b
->
yy_is_öãø˘ive
 = 1;

1450 #i‡
YY_NEVER_INTERACTIVE


1451 
b
->
yy_is_öãø˘ive
 = 0;

1453 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1456 
	}
}

1459 #ifde‡
YY_USE_PROTOS


1460 
	$yy_Êush_buf„r
–
YY_BUFFER_STATE
 
b
 )

1462 
	$yy_Êush_buf„r
–
b
 )

1463 
YY_BUFFER_STATE
 
b
;

1467 i‡–! 
b
 )

1470 
b
->
yy_n_ch¨s
 = 0;

1476 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1477 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1479 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1481 
b
->
yy_©_bﬁ
 = 1;

1482 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1484 i‡–
b
 =
yy_cuºít_buf„r
 )

1485 
	`yy_lﬂd_buf„r_°©e
();

1486 
	}
}

1489 #i‚de‡
YY_NO_SCAN_BUFFER


1490 #ifde‡
YY_USE_PROTOS


1491 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
–*
ba£
, 
yy_size_t
 
size
 )

1493 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
–
ba£
, 
size
 )

1494 *
ba£
;

1495 
yy_size_t
 
size
;

1498 
YY_BUFFER_STATE
 
b
;

1500 i‡–
size
 < 2 ||

1501 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1502 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1506 
b
 = (
YY_BUFFER_STATE
Ë
	`yy_Êex_Æloc
––
yy_buf„r_°©e
 ) );

1507 i‡–! 
b
 )

1508 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1510 
b
->
yy_buf_size
 = 
size
 - 2;

1511 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1512 
b
->
yy_is_our_buf„r
 = 0;

1513 
b
->
yy_öput_fûe
 = 0;

1514 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1515 
b
->
yy_is_öãø˘ive
 = 0;

1516 
b
->
yy_©_bﬁ
 = 1;

1517 
b
->
yy_fûl_buf„r
 = 0;

1518 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1520 
	`yy_swôch_to_buf„r
–
b
 );

1522  
b
;

1523 
	}
}

1527 #i‚de‡
YY_NO_SCAN_STRING


1528 #ifde‡
YY_USE_PROTOS


1529 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
–
yyc⁄°
 *
yy_°r
 )

1531 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
–
yy_°r
 )

1532 
yyc⁄°
 *
yy_°r
;

1535 
Àn
;

1536  
Àn
 = 0; 
yy_°r
[len]; ++len )

1539  
	`yy_sˇn_byãs
–
yy_°r
, 
Àn
 );

1540 
	}
}

1544 #i‚de‡
YY_NO_SCAN_BYTES


1545 #ifde‡
YY_USE_PROTOS


1546 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
–
yyc⁄°
 *
byãs
, 
Àn
 )

1548 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
–
byãs
, 
Àn
 )

1549 
yyc⁄°
 *
byãs
;

1550 
Àn
;

1553 
YY_BUFFER_STATE
 
b
;

1554 *
buf
;

1555 
yy_size_t
 
n
;

1556 
i
;

1559 
n
 = 
Àn
 + 2;

1560 
buf
 = (*Ë
	`yy_Êex_Æloc
–
n
 );

1561 i‡–! 
buf
 )

1562 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1564  
i
 = 0; i < 
Àn
; ++i )

1565 
buf
[
i
] = 
byãs
[i];

1567 
buf
[
Àn
] = buf[Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1569 
b
 = 
	`yy_sˇn_buf„r
–
buf
, 
n
 );

1570 i‡–! 
b
 )

1571 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1576 
b
->
yy_is_our_buf„r
 = 1;

1578  
b
;

1579 
	}
}

1583 #i‚de‡
YY_NO_PUSH_STATE


1584 #ifde‡
YY_USE_PROTOS


1585 
	$yy_push_°©e
–
√w_°©e
 )

1587 
	$yy_push_°©e
–
√w_°©e
 )

1588 
√w_°©e
;

1591 i‡–
yy_°¨t_°ack_±r
 >
yy_°¨t_°ack_dïth
 )

1593 
yy_size_t
 
√w_size
;

1595 
yy_°¨t_°ack_dïth
 +
YY_START_STACK_INCR
;

1596 
√w_size
 = 
yy_°¨t_°ack_dïth
 * ( );

1598 i‡–! 
yy_°¨t_°ack
 )

1599 
yy_°¨t_°ack
 = (*Ë
	`yy_Êex_Æloc
–
√w_size
 );

1602 
yy_°¨t_°ack
 = (*Ë
	`yy_Êex_ªÆloc
(

1603 (*Ë
yy_°¨t_°ack
, 
√w_size
 );

1605 i‡–! 
yy_°¨t_°ack
 )

1606 
	`YY_FATAL_ERROR
(

1610 
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
++] = 
YY_START
;

1612 
	`BEGIN
(
√w_°©e
);

1613 
	}
}

1617 #i‚de‡
YY_NO_POP_STATE


1618 
	$yy_p›_°©e
()

1620 i‡–--
yy_°¨t_°ack_±r
 < 0 )

1621 
	`YY_FATAL_ERROR
( "start-condition stack underflow" );

1623 
	`BEGIN
(
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
]);

1624 
	}
}

1628 #i‚de‡
YY_NO_TOP_STATE


1629 
	$yy_t›_°©e
()

1631  
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
 - 1];

1632 
	}
}

1635 #i‚de‡
YY_EXIT_FAILURE


1636 
	#YY_EXIT_FAILURE
 2

	)

1639 #ifde‡
YY_USE_PROTOS


1640 
	$yy_Áèl_îr‹
–
yyc⁄°
 
msg
[] )

1642 
	$yy_Áèl_îr‹
–
msg
 )

1643 
msg
[];

1646 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1647 
	`exô
–
YY_EXIT_FAILURE
 );

1648 
	}
}

1654 #unde‡
yyÀss


1655 
	#yyÀss
(
n
) \

1659 
yyãxt
[
yyÀng
] = 
yy_hﬁd_ch¨
; \

1660 
yy_c_buf_p
 = 
yyãxt
 + 
n
; \

1661 
yy_hﬁd_ch¨
 = *
yy_c_buf_p
; \

1662 *
yy_c_buf_p
 = '\0'; \

1663 
yyÀng
 = 
n
; \

1665  0 )

	)

1670 #i‚de‡
yyãxt_±r


1671 #ifde‡
YY_USE_PROTOS


1672 
	$yy_Êex_°∫˝y
–*
s1
, 
yyc⁄°
 *
s2
, 
n
 )

1674 
	$yy_Êex_°∫˝y
–
s1
, 
s2
, 
n
 )

1675 *
s1
;

1676 
yyc⁄°
 *
s2
;

1677 
n
;

1680 
i
;

1681  
i
 = 0; i < 
n
; ++i )

1682 
s1
[
i
] = 
s2
[i];

1683 
	}
}

1686 #ifde‡
YY_NEED_STRLEN


1687 #ifde‡
YY_USE_PROTOS


1688 
	$yy_Êex_°æí
–
yyc⁄°
 *
s
 )

1690 
	$yy_Êex_°æí
–
s
 )

1691 
yyc⁄°
 *
s
;

1694 
n
;

1695  
n
 = 0; 
s
[n]; ++n )

1698  
n
;

1699 
	}
}

1703 #ifde‡
YY_USE_PROTOS


1704 *
	$yy_Êex_Æloc
–
yy_size_t
 
size
 )

1706 *
	$yy_Êex_Æloc
–
size
 )

1707 
yy_size_t
 
size
;

1710  (*Ë
	`mÆloc
–
size
 );

1711 
	}
}

1713 #ifde‡
YY_USE_PROTOS


1714 *
	$yy_Êex_ªÆloc
–*
±r
, 
yy_size_t
 
size
 )

1716 *
	$yy_Êex_ªÆloc
–
±r
, 
size
 )

1717 *
±r
;

1718 
yy_size_t
 
size
;

1728  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

1729 
	}
}

1731 #ifde‡
YY_USE_PROTOS


1732 
	$yy_Êex_‰ì
–*
±r
 )

1734 
	$yy_Êex_‰ì
–
±r
 )

1735 *
±r
;

1738 
	`‰ì
–
±r
 );

1739 
	}
}

1741 #i‡
YY_MAIN


1742 
	$maö
()

1744 
	`yyÀx
();

1746 
	}
}

1752 
	$yywøp
()

1755 
	}
}

1758 
	$Àx_ót_commít
()

1760 
c
, 
c1
;

1762 
lo›
:

1763 (
c
 = 
	`öput
()) != '*' && c != 0)

1765 i‡(
c
 == '\n')

1766 
löe
++;

1769 i‡((
c1
 = 
	`öput
()) != '/' && c1 != 0)

1771 
	`u≈ut
(
c1
);

1772 
lo›
;

1774 
	}
}

1777 
	$yy_√xtch¨
()

1779 
c
;

1782 
c
 = 
	`öput
();

1783 } 
c
 == ' ' || c == '\t' || c == '\v' || c == '\f' || c == '\n');

1784 
	`u≈ut
(
c
);

1786  
c
;

1787 
	}
}

1792 
	$yy_£t°ªam
(
FILE
 *
°ªam
)

1794 
i
;

1795 
	#MAX_STREAMS
 16

	)

1797 
FILE
 *
°ªam
;

1798 
YY_BUFFER_STATE
 
buf„r
;

1799 } 
°ªams
[
MAX_STREAMS
] = { {
NULL
, NULL}, };

1800 
num_°ªams
 = 0;

1801 
FILE
 *
œ°_°ªam
 = 
NULL
;

1804 i‡(
°ªam
 =
œ°_°ªam
)

1808 
i
=0; i < 
num_°ªams
; i++)

1810 i‡(
°ªams
[
i
].
°ªam
 == stream)

1812 
	`yy_swôch_to_buf„r
(
°ªams
[
i
].
buf„r
);

1818 i‡(
num_°ªams
 =
MAX_STREAMS
)

1819 
	`Áèl
("out ofÜex buffer streams, increase MAX_STREAMS");

1821 
°ªams
[
num_°ªams
].
°ªam
 = stream;

1822 
°ªams
[
num_°ªams
].
buf„r
 = 
	`yy_¸óã_buf„r
(
°ªam
, 
YY_BUF_SIZE
);

1823 
	`yy_swôch_to_buf„r
(
°ªams
[
num_°ªams
].
buf„r
);

1824 
num_°ªams
++;

1825 
	}
}

	@libexo/libexo.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°d¨g.h
>

55 
	~<˘y≥.h
>

56 
	~<limôs.h
>

57 
	~<î∫o.h
>

58 
	~<as£π.h
>

60 
	~"../ho°.h
"

61 
	~"../misc.h
"

62 
	~"../machöe.h
"

63 
	~"libexo.h
"

66 *
	gexo_˛ass_°r
[
ec_NUM
] = {

82 
	$öã∫_esˇ≥
(*
esc
, **
√xt
)

84 
c
, 
vÆue
, 
em±y
, 
cou¡
;

86 
c
 = *
esc
++) {

89 
vÆue
 = 0;

90 
em±y
 = 
TRUE
;

93 
c
 = *
esc
++;

94 i‡(!(
c
 >= 'a' && c <= 'f')

95 && !(
c
 >= 'A' && c <= 'F')

96 && !(
c
 >= '0' && c <= '9'))

98 
esc
--;

101 
vÆue
 *=16;

102 i‡(
c
 >= 'a' && c <= 'f')

103 
vÆue
 +
c
 - 'a' + 10;

104 i‡(
c
 >= 'A' && c <= 'F')

105 
vÆue
 +
c
 - 'A' + 10;

106 i‡(
c
 >= '0' && c <= '9')

107 
vÆue
 +
c
 - '0';

108 
em±y
 = 
FALSE
;

110 i‡(
em±y
)

111 
	`Áèl
("\\x used withÇoÅrailing hex digits");

117 
vÆue
 = 0;

118 
cou¡
 = 0;

119 (
c
 <'7'Ë&& (¯>'0'Ë&& (
cou¡
++ < 3))

121 
vÆue
 = (vÆuê* 8Ë+ (
c
 - '0');

122 
c
 = *
esc
++;

124 
esc
--;

130 
vÆue
 = 
c
;

134 
vÆue
 = '\n';

138 
vÆue
 = '\t';

142 
vÆue
 = '\r';

146 
vÆue
 = '\f';

150 
vÆue
 = '\b';

154 
vÆue
 = '\a';

158 
vÆue
 = '\v';

162 
vÆue
 = 
c
;

169 
vÆue
 = 
c
;

170 
	`w¨n
("n⁄-ANSIÉsˇ≥ sequí˚ `\\%c'", 
c
);

174 
	`Áèl
("unknow¿esˇ≥, '\\' fﬁlowed by ch¨ %x (`%c')", ()
c
, c);

177 i‡(*
√xt
)

178 *
√xt
 = 
esc
;

180  
vÆue
;

181 
	}
}

186 
	$öã∫_ch¨
(*
s
, **
√xt
)

188 
vÆue
;

190 i‡(
s
[0] !'\'' || s[
	`°æí
(s)-1] != '\'')

191 
	`∑nic
("mal-formed string constant");

193 i‡(
s
[1] != '\\')

195 
vÆue
 = ()
s
[1];

196 i‡(
s
[2] != '\'')

197 
	`∑nic
("mal-formed string constant");

198 i‡(
√xt
)

199 *
√xt
 = 
s
 + 2;

204 
vÆue
 = 
	`öã∫_esˇ≥
(
s
+2, 
√xt
);

208 
vÆue
 = (signed )(()(()(()value)));

210 i‡(
UCHAR_MAX
 < 
vÆue
)

211 
	`Áèl
("character constant out ofÑange");

213  
vÆue
;

214 
	}
}

217 
	$¥öt_ch¨
(
c
, 
FILE
 *
°ªam
)

219 
c
)

222 
	`Ârötf
(
°ªam
, "\\n");

226 
	`Ârötf
(
°ªam
, "\\\\");

230 
	`Ârötf
(
°ªam
, "\\'");

234 
	`Ârötf
(
°ªam
, "\\t");

238 
	`Ârötf
(
°ªam
, "\\r");

242 
	`Ârötf
(
°ªam
, "\\f");

246 
	`Ârötf
(
°ªam
, "\\b");

250 
	`Ârötf
(
°ªam
, "\\a");

254 
	`Ârötf
(
°ªam
, "\\v");

258 i‡(
	`i•röt
(
c
))

259 
	`Ârötf
(
°ªam
, "%c", 
c
);

261 
	`Ârötf
(
°ªam
, "\\x%02x", 
c
);

263 
	}
}

267 
	$öã∫_°rög
(*
°r
)

269 *
s
, *
i°r
;

272 
s
 = 
i°r
 = 
	`mÆloc
(
	`°æí
(
°r
)+1);

274 i‡(!
°r
 || !*str || *str != '\"')

275 
	`∑nic
("mal-formed string constant");

278 
°r
++;

280 *
°r
)

282 i‡(*
°r
 == '\\')

283 *
s
++ = 
	`öã∫_esˇ≥
(
°r
+1, &str);

287 i‡(*
°r
 == '\n')

288 
	`w¨n
("ANSI C forbidsÇewline in character constant");

290 i‡(*
°r
 == '"' && str[1] != '\0')

291 
	`∑nic
("encountered `\"'Émbedded in string constant");

293 i‡(*
°r
 != '\"')

294 *
s
++ = *
°r
;

295 
°r
++;

298 *
s
 = '\0';

299  
i°r
;

300 
	}
}

303 
	$¥öt_°rög
(*
s
, 
FILE
 *
°ªam
)

305 *
s
)

307 
	`¥öt_ch¨
(*
s
, 
°ªam
);

308 
s
++;

310 
	}
}

313 
	#TOKEN_BOGON
 0

	)

315 
	gtokí_id
 = 
TOKEN_BOGON
 + 1;

317 
	#TOKEN_HASH_SIZE
 1024

	)

318 
exo_tokí_t
 *
	gtokí_hash
[
TOKEN_HASH_SIZE
];

322 
	$hash_°r
(*
s
)

324 
h
 = 0;

325 *
s
)

326 
h
 = (h << 1Ë+ *
s
++;

327  (
h
 % 
TOKEN_HASH_SIZE
);

328 
	}
}

331 
exo_tokí_t
 *

332 
	$exo_öã∫
(*
tokí_°r
)

334 
ödex
;

335 
exo_tokí_t
 *
ít
;

337 
ödex
 = 
	`hash_°r
(
tokí_°r
);

339 
ít
=
tokí_hash
[
ödex
];É¡ !
NULL
;É¡Û¡->
√xt
)

341 i‡(!
	`°rcmp
(
tokí_°r
, 
ít
->
°r
))

344  
ít
;

349 
ít
 = (
exo_tokí_t
 *)
	`ˇŒoc
(1, (exo_token_t));

350 i‡(!
ít
)

351 
	`Áèl
("out of virtual memory");

353 
ít
->
°r
 = 
	`my°rdup
(
tokí_°r
);

354 
ít
->
tokí
 = 
tokí_id
++;

355 
ít
->
√xt
 = 
tokí_hash
[
ödex
];

356 
tokí_hash
[
ödex
] = 
ít
;

358  
ít
;

359 
	}
}

362 
exo_tokí_t
 *

363 
	$exo_öã∫_as
(*
tokí_°r
,

364 
tokí
)

366 
exo_tokí_t
 *
ít
;

369 i‡(
tokí_id
 > 
tokí
)

370 
	`Áèl
("token value isálready in use");

373 
ít
 = 
	`exo_öã∫
(
tokí_°r
);

375 
ít
->
tokí
 =Åoken;

378 i‡(
ít
->
tokí
 !=Åoken)

379 
	`Áèl
("symbﬁ `%s' wa†¥eviou¶y i¡î√d", 
tokí_°r
);

382  
ít
;

383 
	}
}

386 
exo_ãrm_t
 *

387 
	$exo_Æloc
(
exo_˛ass_t
 
ec
)

389 
exo_ãrm_t
 *
exo
;

391 
exo
 = (
exo_ãrm_t
 *)
	`ˇŒoc
(1, (exo_term_t));

392 i‡(!
exo
)

393 
	`Áèl
("out of virtual memory");

394 
exo
->
√xt
 = 
NULL
;

395 
exo
->
ec
 =Éc;

397  
exo
;

398 
	}
}

413 
exo_ãrm_t
 *

414 
	$exo_√w
(
exo_˛ass_t
 
ec
, ...)

416 
exo_ãrm_t
 *
exo
;

417 
va_li°
 
v
;

418 
	`va_°¨t
(
v
, 
ec
);

420 
exo
 = 
	`exo_Æloc
(
ec
);

421 
ec
)

423 
ec_öãgî
:

424 
exo
->
as_öãgî
.
vÆ
 = 
	`va_¨g
(
v
, 
exo_öãgî_t
);

427 
ec_addªss
:

428 
exo
->
as_addªss
.
vÆ
 = 
	`va_¨g
(
v
, 
exo_addªss_t
);

431 
ec_Êﬂt
:

432 
exo
->
as_Êﬂt
.
vÆ
 = 
	`va_¨g
(
v
, 
exo_Êﬂt_t
);

435 
ec_ch¨
:

436 
exo
->
as_ch¨
.
vÆ
 = 
	`va_¨g
(
v
, );

439 
ec_°rög
:

441 *
°r
;

443 
°r
 = 
	`va_¨g
(
v
, *);

444 
exo
->
as_°rög
.
°r
 = (*)
	`my°rdup
(str);

448 
ec_li°
:

450 
exo_ãrm_t
 *
ít
;

452 
exo
->
as_li°
.
hód
 = 
NULL
;

454 
ít
 = 
	`va_¨g
(
v
, 
exo_ãrm_t
 *);

455 
exo
->
as_li°
.
hód
 = 
	`exo_chaö
”xo->as_li°.hód, 
ít
);

456 } 
ít
 !
NULL
);

460 
ec_¨øy
:

462 
i
;

463 
exo_ãrm_t
 *
ít
;

465 
exo
->
as_¨øy
.
size
 = 
	`va_¨g
(
v
, );

466 
exo
->
as_¨øy
.
¨øy
 = (
exo_ãrm_t
 **)

467 
	`ˇŒoc
(
exo
->
as_¨øy
.
size
, (
exo_ãrm_t
 *));

468 i‡(!
exo
->
as_¨øy
.
¨øy
)

469 
	`Áèl
("out of virtual memory");

470 
i
 = 0;

472 
ít
 = 
	`va_¨g
(
v
, 
exo_ãrm_t
 *);

473 i‡(
ít
 !
NULL
)

475 i‡(
i
 =
exo
->
as_¨øy
.
size
)

476 
	`Áèl
("array constructor overflow");

477 
	`SET_EXO_ARR
(
exo
, 
i
, 
ít
);

479 
i
++;

480 } 
ít
 !
NULL
);

484 
ec_tokí
:

486 *
°r
;

488 
°r
 = 
	`va_¨g
(
v
, *);

489 
exo
->
as_tokí
.
ít
 = 
	`exo_öã∫
(
°r
);

493 
ec_blob
:

495 
size
;

496 *
d©a
;

498 
size
 = 
	`va_¨g
(
v
, );

499 
d©a
 = 
	`va_¨g
(
v
, *);

501 
exo
->
as_blob
.
size
 = size;

502 
exo
->
as_blob
.
d©a
 = 
	`mÆloc
(
size
);

503 i‡(
d©a
 !
NULL
)

504 
	`mem˝y
(
exo
->
as_blob
.
d©a
, d©a, 
size
);

506 
	`mem£t
(
exo
->
as_blob
.
d©a
, 0, 
size
);

510 
ec_nuŒ
:

514 
	`∑nic
("bogus EXO class");

517 
	`va_íd
(
v
);

518  
exo
;

519 
	}
}

523 
	$exo_dñëe
(
exo_ãrm_t
 *
exo
)

525 
exo
->
√xt
 = 
NULL
;

527 
exo
->
ec
)

529 
ec_öãgî
:

531 
exo
->
as_öãgî
.
vÆ
 = 0;

534 
ec_addªss
:

536 
exo
->
as_addªss
.
vÆ
 = 0;

539 
ec_Êﬂt
:

541 
exo
->
as_Êﬂt
.
vÆ
 = 0.0;

544 
ec_ch¨
:

546 
exo
->
as_ch¨
.
vÆ
 = '\0';

549 
ec_°rög
:

550 
	`‰ì
(
exo
->
as_°rög
.
°r
);

551 
exo
->
as_°rög
.
°r
 = 
NULL
;

554 
ec_li°
:

556 
exo_ãrm_t
 *
ít
, *
√xt_ít
;

558 
ít
=
exo
->
as_li°
.
hód
;É¡ !
NULL
;É¡ = 
√xt_ít
)

560 
√xt_ít
 = 
ít
->
√xt
;

561 
	`exo_dñëe
(
ít
);

563 
exo
->
as_li°
.
hód
 = 
NULL
;

567 
ec_¨øy
:

569 
i
;

571 
i
=0; i < 
exo
->
as_¨øy
.
size
; i++)

573 i‡(
exo
->
as_¨øy
.
¨øy
[
i
] !
NULL
)

574 
	`exo_dñëe
(
exo
->
as_¨øy
.
¨øy
[
i
]);

576 
	`‰ì
(
exo
->
as_¨øy
.
¨øy
);

577 
exo
->
as_¨øy
.
¨øy
 = 
NULL
;

578 
exo
->
as_¨øy
.
size
 = 0;

582 
ec_tokí
:

584 
exo
->
as_tokí
.
ít
 = 
NULL
;

587 
ec_blob
:

589 
	`‰ì
(
exo
->
as_blob
.
d©a
);

590 
exo
->
as_blob
.
d©a
 = 
NULL
;

593 
ec_nuŒ
:

598 
	`∑nic
("bogus EXO class");

600 
exo
->
ec
 = (
exo_˛ass_t
)0;

603 
	`‰ì
(
exo
);

604 
	}
}

607 
exo_ãrm_t
 *

608 
	$exo_chaö
(
exo_ãrm_t
 *
f‹e
, exo_ãrm_à*
a·
)

610 
exo_ãrm_t
 *
exo
, *
¥ev
;

612 i‡(!
f‹e
 && !
a·
)

613  
NULL
;

615 i‡(!
f‹e
)

616  
a·
;

619 
¥ev
=
NULL
,
exo
=
f‹e
;Éxÿ!NULL;ÖªvÛxo,exoÛxo->
√xt
)

621 
	`as£π
(
¥ev
);

624 
¥ev
->
√xt
 = 
a·
;

626  
f‹e
;

627 
	}
}

630 
exo_ãrm_t
 *

631 
	$exo_c›y
(
exo_ãrm_t
 *
exo
)

633 
exo_ãrm_t
 *
√w_exo
;

636 i‡(!
exo
)

637  
NULL
;

639 
√w_exo
 = 
	`exo_Æloc
(
exo
->
ec
);

640 *
√w_exo
 = *
exo
;

643 
√w_exo
->
√xt
 = 
NULL
;

645 
√w_exo
->
ec
)

647 
ec_öãgî
:

648 
ec_addªss
:

649 
ec_Êﬂt
:

650 
ec_ch¨
:

651 
ec_°rög
:

652 
ec_li°
:

653 
ec_tokí
:

657 
ec_¨øy
:

659 
i
;

662 
√w_exo
->
as_¨øy
.
¨øy
 = (
exo_ãrm_t
 **)

663 
	`ˇŒoc
(
√w_exo
->
as_¨øy
.
size
, (
exo_ãrm_t
 *));

665 
i
=0; i<
√w_exo
->
as_¨øy
.
size
; i++)

667 
	`SET_EXO_ARR
(
√w_exo
, 
i
, 
	`EXO_ARR
(
exo
, i));

672 
ec_blob
:

673 
√w_exo
->
as_blob
.
d©a
 = 
	`mÆloc
“ew_exo->
as_¨øy
.
size
);

674 
	`mem˝y
(
√w_exo
->
as_blob
.
d©a
, 
exo
->as_blob.d©a,Çew_exo->
as_¨øy
.
size
);

678 
	`∑nic
("bogus EXO class");

681  
√w_exo
;

682 
	}
}

685 
exo_ãrm_t
 *

686 
	$exo_dìpc›y
(
exo_ãrm_t
 *
exo
)

688 
exo_ãrm_t
 *
√w_exo
;

691 i‡(!
exo
)

692  
NULL
;

694 
√w_exo
 = 
	`exo_c›y
(
exo
);

695 
√w_exo
->
ec
)

697 
ec_öãgî
:

698 
ec_addªss
:

699 
ec_Êﬂt
:

700 
ec_ch¨
:

701 
ec_tokí
:

705 
ec_°rög
:

707 
√w_exo
->
as_°rög
.
°r
 =

708 (*)
	`my°rdup
((*)
exo
->
as_°rög
.
°r
);

711 
ec_li°
:

714 
exo_ãrm_t
 *
ñt
, *
√w_ñt
, *
√w_li°
;

716 
√w_li°
 = 
NULL
;

717 
ñt
=
√w_exo
->
as_li°
.
hód
;É… !
NULL
;É…Û…->
√xt
)

719 
√w_ñt
 = 
	`exo_dìpc›y
(
ñt
);

720 
√w_li°
 = 
	`exo_chaö
“ew_li°, 
√w_ñt
);

722 
√w_exo
->
as_li°
.
hód
 = 
√w_li°
;

726 
ec_¨øy
:

729 
i
;

731 
i
=0; i<
√w_exo
->
as_¨øy
.
size
; i++)

733 
	`SET_EXO_ARR
(
√w_exo
, 
i
, 
	`exo_dìpc›y
(
	`EXO_ARR
(
exo
, i)));

738 
ec_blob
:

739 
√w_exo
->
as_blob
.
d©a
 = 
	`mÆloc
“ew_exo->
as_¨øy
.
size
);

740 
	`mem˝y
(
√w_exo
->
as_blob
.
d©a
, 
exo
->as_blob.d©a,Çew_exo->
as_¨øy
.
size
);

744 
	`∑nic
("bogus EXO class");

747  
√w_exo
;

748 
	}
}

752 
	$exo_¥öt
(
exo_ãrm_t
 *
exo
, 
FILE
 *
°ªam
)

754 i‡(!
°ªam
)

755 
°ªam
 = 
°dîr
;

757 
exo
->
ec
)

759 
ec_öãgî
:

760 i‡((
exo_öãgî_t
) == 4)

761 
	`myÂrötf
(
°ªam
, "%u", 
exo
->
as_öãgî
.
vÆ
);

763 
	`myÂrötf
(
°ªam
, "%lu", 
exo
->
as_öãgî
.
vÆ
);

766 
ec_addªss
:

767 i‡((
exo_addªss_t
) == 4)

768 
	`myÂrötf
(
°ªam
, "0x%x", 
exo
->
as_öãgî
.
vÆ
);

770 
	`myÂrötf
(
°ªam
, "0x%lx", 
exo
->
as_öãgî
.
vÆ
);

773 
ec_Êﬂt
:

774 
	`Ârötf
(
°ªam
, "%f", 
exo
->
as_Êﬂt
.
vÆ
);

777 
ec_ch¨
:

778 
	`Ârötf
(
°ªam
, "'");

779 
	`¥öt_ch¨
(
exo
->
as_ch¨
.
vÆ
, 
°ªam
);

780 
	`Ârötf
(
°ªam
, "'");

783 
ec_°rög
:

784 
	`Ârötf
(
°ªam
, "\"");

785 
	`¥öt_°rög
(
exo
->
as_°rög
.
°r
, 
°ªam
);

786 
	`Ârötf
(
°ªam
, "\"");

789 
ec_li°
:

791 
exo_ãrm_t
 *
ít
;

793 
	`Ârötf
(
°ªam
, "(");

794 
ít
=
exo
->
as_li°
.
hód
;É¡ !
NULL
;É¡Û¡->
√xt
)

796 
	`exo_¥öt
(
ít
, 
°ªam
);

797 i‡(
ít
->
√xt
)

798 
	`Ârötf
(
°ªam
, ", ");

800 
	`Ârötf
(
°ªam
, ")");

804 
ec_¨øy
:

806 
i
, 
œ°
;

809 
œ°
=
exo
->
as_¨øy
.
size
-1;Üast >= 0;Üast--)

811 i‡(
	`EXO_ARR
(
exo
, 
œ°
Ë!
NULL
)

816 
	`Ârötf
(
°ªam
, "{%d}[", 
exo
->
as_¨øy
.
size
);

817 
i
=0; i<
exo
->
as_¨øy
.
size
 && i <
œ°
; i++)

819 i‡(
exo
->
as_¨øy
.
¨øy
[
i
] !
NULL
)

820 
	`exo_¥öt
(
exo
->
as_¨øy
.
¨øy
[
i
], 
°ªam
);

822 
	`Ârötf
(
°ªam
, " ");

823 i‡(
i
 !
exo
->
as_¨øy
.
size
-1 && i !
œ°
)

824 
	`Ârötf
(
°ªam
, ", ");

826 
	`Ârötf
(
°ªam
, "]");

830 
ec_tokí
:

831 
	`Ârötf
(
°ªam
, "%s", 
exo
->
as_tokí
.
ít
->
°r
);

834 
ec_blob
:

836 
i
, 
¸
;

838 
	`Ârötf
(
°ªam
, "{%d}<\n", 
exo
->
as_blob
.
size
);

839 
i
=0; i < 
exo
->
as_blob
.
size
; i++)

841 
¸
 = 
FALSE
;

842 i‡(
i
 != 0 && (i % 38) == 0)

844 
	`Ârötf
(
°ªam
, "\n");

845 
¸
 = 
TRUE
;

847 
	`Ârötf
(
°ªam
, "%02x", 
exo
->
as_blob
.
d©a
[
i
]);

849 i‡(!
¸
)

850 
	`Ârötf
(
°ªam
, "\n");

851 
	`Ârötf
(
°ªam
, ">");

856 
	`∑nic
("bogus EXO class");

858 
	}
}

861 
yyÀx
();

862 
yy_√xtch¨
();

863 *
yyãxt
;

864 
FILE
 *
yyö
;

867 
	$exo_îr
(*
îr
)

869 
löe
;

871 
	`Ârötf
(
°dîr
, "EXOÖ¨£Éº‹:Üöê%d: %s\n", 
löe
, 
îr
);

872 
	`exô
(1);

873 
	}
}

876 
exo_ãrm_t
 *

877 
	$exo_ªad
(
FILE
 *
°ªam
)

879 
tok
;

880 
tok_buf
[1024], *
ídp
;

881 
exo_ãrm_t
 *
ít
 = 
NULL
;

882 
î∫o
;

883 
	`yy_£t°ªam
(
FILE
 *);

886 i‡(!
°ªam
)

887 
°ªam
 = 
°dö
;

888 
	`yy_£t°ªam
(
°ªam
);

891 
tok
 = 
	`yyÀx
();

892 
	`°r˝y
(
tok_buf
, 
yyãxt
);

894 
tok
)

896 
Àx_öãgî
:

898 
exo_öãgî_t
 
öt_vÆ
;

901 
î∫o
 = 0;

902 #ifde‡
HOST_HAS_QWORD


903 
öt_vÆ
 = 
	`my©oq
(
tok_buf
, &
ídp
, 10);

905 
öt_vÆ
 = 
	`°πoul
(
tok_buf
, &
ídp
, 10);

907 i‡(!
î∫o
 && !*
ídp
)

910 
ít
 = 
	`exo_√w
(
ec_öãgî
, 
öt_vÆ
);

913 
	`exo_îr
("cannotÖarse integerÜiteral");

917 
Àx_addªss
:

919 
exo_addªss_t
 
addr_vÆ
;

922 
î∫o
 = 0;

923 #ifde‡
HOST_HAS_QWORD


924 
addr_vÆ
 = 
	`my©oq
(
tok_buf
, &
ídp
, 16);

926 
addr_vÆ
 = 
	`°πoul
(
tok_buf
, &
ídp
, 16);

928 i‡(!
î∫o
 && !*
ídp
)

931 
ít
 = 
	`exo_√w
(
ec_addªss
, 
addr_vÆ
);

934 
	`exo_îr
("cannotÖarseáddressÜiteral");

938 
Àx_Êﬂt
:

940 
exo_Êﬂt_t
 
Êﬂt_vÆ
;

943 
î∫o
 = 0;

944 
Êﬂt_vÆ
 = 
	`°πod
(
tok_buf
, &
ídp
);

945 i‡(!
î∫o
 && !*
ídp
)

948 
ít
 = 
	`exo_√w
(
ec_Êﬂt
, 
Êﬂt_vÆ
);

951 
	`exo_îr
("cannotÖarse floatingÖointÜiteral");

955 
Àx_ch¨
:

957 
c
;

959 
c
 = 
	`öã∫_ch¨
(
tok_buf
, &
ídp
);

960 i‡(!
ídp
)

961 
	`exo_îr
("cannot convert characterÜiteral");

962 
ít
 = 
	`exo_√w
(
ec_ch¨
, 
c
);

966 
Àx_°rög
:

968 *
s
;

970 
s
 = 
	`öã∫_°rög
(
tok_buf
);

971 
ít
 = 
	`exo_√w
(
ec_°rög
, 
s
);

972 
	`‰ì
(
s
);

976 
Àx_tokí
:

977 
ít
 = 
	`exo_√w
(
ec_tokí
, 
tok_buf
);

980 
Àx_byã
:

981 
	`exo_îr
("unexpected blob byteÉncountered");

986 
exo_ãrm_t
 *
ñt
;

988 
ít
 = 
	`exo_√w
(
ec_li°
, 
NULL
);

990 i‡(
	`yy_√xtch¨
() != ')')

994 
ñt
 = 
	`exo_ªad
(
°ªam
);

995 i‡(!
ñt
)

996 
	`exo_îr
("unexpectedÉnd-of-file");

997 
ít
->
as_li°
.
hód
 =

998 
	`exo_chaö
(
ít
->
as_li°
.
hód
, 
ñt
);

1001 i‡(
	`yy_√xtch¨
() == ',')

1002 
	`yyÀx
();

1003 } 
	`yy_√xtch¨
() != ')');

1007 
tok
 = 
	`yyÀx
();

1008 i‡(
tok
 != ')')

1009 
	`exo_îr
("expected ')'");

1014 
	`exo_îr
("unexpected ')'Éncountered");

1018 
	`exo_îr
("unexpected '<'Éncountered");

1022 
	`exo_îr
("unexpected '>'Éncountered");

1027 
˙t
, 
size
;

1028 
exo_ãrm_t
 *
ñt
;

1031 
ñt
 = 
	`exo_ªad
(
°ªam
);

1032 i‡(!
ñt
 ||É…->
ec
 !
ec_öãgî
)

1033 
	`exo_îr
("badly formedárray size");

1036 
size
 = ()
ñt
->
as_öãgî
.
vÆ
;

1039 
	`exo_dñëe
(
ñt
);

1042 
tok
 = 
	`yyÀx
();

1043 i‡(
tok
 != '}')

1044 
	`exo_îr
("expected '}'");

1046 
tok
 = 
	`yyÀx
();

1047 
tok
)

1051 
ít
 = 
	`exo_√w
(
ec_¨øy
, 
size
, 
NULL
);

1054 i‡(
	`yy_√xtch¨
() != ']')

1057 
˙t
 = 0;

1059 i‡(
˙t
 =
ít
->
as_¨øy
.
size
)

1060 
	`exo_îr
("too many initializers forárray");

1063 i‡(
	`yy_√xtch¨
() == ',')

1065 
ñt
 = 
NULL
;

1069 
ñt
 = 
	`exo_ªad
(
°ªam
);

1070 i‡(!
ñt
)

1071 
	`exo_îr
("unexpectedÉnd-of-file");

1073 
	`SET_EXO_ARR
(
ít
, 
˙t
, 
ñt
);

1074 
˙t
++;

1077 i‡(
	`yy_√xtch¨
() == ',')

1078 
	`yyÀx
();

1079 } 
	`yy_√xtch¨
() != ']');

1083 
tok
 = 
	`yyÀx
();

1084 i‡(
tok
 != ']')

1085 
	`exo_îr
("expected ']'");

1090 
ít
 = 
	`exo_√w
(
ec_blob
, 
size
, 
NULL
);

1093 i‡(
	`yy_√xtch¨
() != '>')

1095 
byã_vÆ
;

1098 
˙t
 = 0;

1101 
tok
 = 
	`yyÀx
();

1103 i‡(
tok
 =
Àx_byã
)

1105 i‡(
˙t
 =
ít
->
as_blob
.
size
)

1106 
	`exo_îr
("too many initializers for blob");

1109 
î∫o
 = 0;

1110 
byã_vÆ
 = 
	`°πoul
(
yyãxt
, &
ídp
, 16);

1111 i‡(
î∫o
 !0 || *
ídp
 != '\0')

1112 
	`exo_îr
("cannotÖarse blob byteÜiteral");

1113 i‡(
byã_vÆ
 > 255)

1114 
	`∑nic
("bogus byte value");

1115 
ít
->
as_blob
.
d©a
[
˙t
] = 
byã_vÆ
;

1116 
˙t
++;

1118 i‡(
tok
 == '>')

1121 
	`exo_îr
("unexpected character in blob");

1126 i‡(
˙t
 !
ít
->
as_blob
.
size
)

1127 
	`exo_îr
("notÉnough initializers for blob");

1132 
	`exo_îr
("expected '[' or '<'");

1138 
	`exo_îr
("unexpected '}'Éncountered");

1142 
	`exo_îr
("unexpected ','Éncountered");

1147 
i
, 
˙t
;

1148 
exo_ãrm_t
 *
li°
, *
ñt
, *
√xt_ñt
;

1151 
li°
 = 
NULL
;

1152 i‡(
	`yy_√xtch¨
() == ']')

1153 
	`exo_îr
("unsizedárray hasÇo initializers");

1155 
˙t
 = 0;

1158 i‡(
	`yy_√xtch¨
() == ',')

1160 
ñt
 = 
	`exo_√w
(
ec_nuŒ
);

1164 
ñt
 = 
	`exo_ªad
(
°ªam
);

1165 i‡(!
ñt
)

1166 
	`exo_îr
("unexpectedÉnd-of-file");

1168 
˙t
++;

1169 
li°
 = 
	`exo_chaö
÷i°, 
ñt
);

1172 i‡(
	`yy_√xtch¨
() == ',')

1173 
	`yyÀx
();

1174 } 
	`yy_√xtch¨
() != ']');

1177 
tok
 = 
	`yyÀx
();

1178 i‡(
tok
 != ']')

1179 
	`exo_îr
("expected ']'");

1182 
	`as£π
(
˙t
 > 0);

1183 
ít
 = 
	`exo_√w
(
ec_¨øy
, 
˙t
, 
NULL
);

1186 
i
=0,
ñt
=
li°
; i<
˙t
; i++,ñt=
√xt_ñt
)

1188 
	`as£π
(
ñt
 !
NULL
);

1189 
√xt_ñt
 = 
ñt
->
√xt
;

1190 i‡(
ñt
->
ec
 =
ec_nuŒ
)

1192 
	`SET_EXO_ARR
(
ít
, 
˙t
, 
NULL
);

1193 
	`exo_dñëe
(
ít
);

1197 
	`SET_EXO_ARR
(
ít
, 
˙t
, 
ñt
);

1198 
ñt
->
√xt
 = 
NULL
;

1205 
	`exo_îr
("unexpected ']'Éncountered");

1208 
Àx_eof
:

1210 
ít
 = 
NULL
;

1214 
	`∑nic
("bogusÅoken");

1217  
ít
;

1218 
	}
}

	@libexo/libexo.h

70 #i‚de‡
EXO_H


71 
	#EXO_H


	)

73 
	~"../ho°.h
"

74 
	~"../misc.h
"

75 
	~"../machöe.h
"

78 
	#EXO_FMT_MAJOR
 1

	)

79 
	#EXO_FMT_MINOR
 0

	)

82 
	eexo_˛ass_t
 {

83 
	mec_öãgî
,

84 
	mec_addªss
,

85 
	mec_Êﬂt
,

86 
	mec_ch¨
,

87 
	mec_°rög
,

88 
	mec_li°
,

89 
	mec_¨øy
,

90 
	mec_tokí
,

91 
	mec_blob
,

92 
	mec_nuŒ
,

93 
	mec_NUM


97 *
exo_˛ass_°r
[
ec_NUM
];

100 
	sexo_tokí_t
 {

101 
exo_tokí_t
 *
	m√xt
;

102 *
	m°r
;

103 
	mtokí
;

106 
	sexo_ãrm_t
 {

107 
exo_ãrm_t
 *
	m√xt
;

108 
exo_˛ass_t
 
	mec
;

110 
	sas_öãgî_t
 {

111 
exo_öãgî_t
 
	mvÆ
;

112 } 
	mas_öãgî
;

113 
	sas_addªss_t
 {

114 
exo_addªss_t
 
	mvÆ
;

115 } 
	mas_addªss
;

116 
	sas_Êﬂt_t
 {

117 
exo_Êﬂt_t
 
	mvÆ
;

118 } 
	mas_Êﬂt
;

119 
	sas_ch¨_t
 {

120 
	mvÆ
;

121 } 
	mas_ch¨
;

122 
	sas_°rög_t
 {

123 *
	m°r
;

124 } 
	mas_°rög
;

125 
	sas_li°_t
 {

126 
exo_ãrm_t
 *
	mhód
;

127 } 
	mas_li°
;

128 
	sas_¨øy_t
 {

129 
	msize
;

130 
exo_ãrm_t
 **
	m¨øy
;

131 } 
	mas_¨øy
;

132 
	sas_tokí_t
 {

133 
exo_tokí_t
 *
	mít
;

134 } 
	mas_tokí
;

135 
	sas_blob_t
 {

136 
	msize
;

137 *
	md©a
;

138 } 
	mas_blob
;

139 } 
	mv¨ü¡
;

142 
	#as_öãgî
 
v¨ü¡
.
as_öãgî


	)

143 
	#as_addªss
 
v¨ü¡
.
as_addªss


	)

144 
	#as_Êﬂt
 
v¨ü¡
.
as_Êﬂt


	)

145 
	#as_ch¨
 
v¨ü¡
.
as_ch¨


	)

146 
	#as_°rög
 
v¨ü¡
.
as_°rög


	)

147 
	#as_li°
 
v¨ü¡
.
as_li°


	)

148 
	#as_¨øy
 
v¨ü¡
.
as_¨øy


	)

149 
	#as_tokí
 
v¨ü¡
.
as_tokí


	)

150 
	#as_blob
 
v¨ü¡
.
as_blob


	)

154 
	#EXO_ARR
(
E
,
N
) \

155 ((
E
)->
ec
 !
ec_¨øy
 \

156 ? (
	`Áèl
("nŸá¿¨øy"), *(
exo_ãrm_t
 **)(
NULL
)) \

157 : ((
N
Ë>(
E
)->
as_¨øy
.
size
 \

158 ? (
	`Áèl
("¨øy bound†îr‹"), *(
exo_ãrm_t
 **)(
NULL
)) \

159 : (
E
)->
as_¨øy
.
¨øy
[(
N
)]))

	)

160 
	#SET_EXO_ARR
(
E
,
N
,
V
) \

161 ((
E
)->
ec
 !
ec_¨øy
 \

162 ? ()
	`Áèl
("notánárray") \

163 : ((
N
Ë>(
E
)->
as_¨øy
.
size
 \

164 ? ()
	`Áèl
("array boundsÉrror") \

165 : ()((
E
)->
as_¨øy
.
¨øy
[(
N
)] = (
V
))))

	)

168 
exo_tokí_t
 *

169 
exo_öã∫
(*
tokí_°r
);

172 
exo_tokí_t
 *

173 
exo_öã∫_as
(*
tokí_°r
,

174 
tokí
);

189 
exo_ãrm_t
 *

190 
exo_√w
(
exo_˛ass_t
 
ec
, ...);

194 
exo_dñëe
(
exo_ãrm_t
 *
exo
);

197 
exo_ãrm_t
 *

198 
exo_chaö
(
exo_ãrm_t
 *
f‹e
, exo_ãrm_à*
a·
);

201 
exo_ãrm_t
 *

202 
exo_c›y
(
exo_ãrm_t
 *
exo
);

205 
exo_ãrm_t
 *

206 
exo_dìpc›y
(
exo_ãrm_t
 *
exo
);

210 
exo_¥öt
(
exo_ãrm_t
 *
exo
, 
FILE
 *
°ªam
);

213 
exo_ãrm_t
 *

214 
exo_ªad
(
FILE
 *
°ªam
);

217 
	eÀx_t
 {

218 
	mÀx_öãgî
 = 256,

219 
	mÀx_addªss
,

220 
	mÀx_Êﬂt
,

221 
	mÀx_ch¨
,

222 
	mÀx_°rög
,

223 
	mÀx_tokí
,

224 
	mÀx_byã
,

225 
	mÀx_eof


	@loader.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"ídün.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"sim.h
"

62 
	~"eio.h
"

63 
	~"lﬂdî.h
"

65 #ifde‡
BFD_LOADER


66 
	~<bfd.h
>

68 
	~"èrgë-piß/ecoff.h
"

72 
	#TEXT_TAIL_PADDING
 128

	)

75 
md_addr_t
 
	gld_ãxt_ba£
 = 0;

78 
	gld_ãxt_size
 = 0;

81 
md_addr_t
 
	gld_d©a_ba£
 = 0;

84 
	gld_d©a_size
 = 0;

87 
md_addr_t
 
	gld_brk_poöt
 = 0;

90 
md_addr_t
 
	gld_°ack_ba£
 = 
MD_STACK_BASE
;

93 
	gld_°ack_size
 = 0;

96 
md_addr_t
 
	gld_°ack_mö
 = (md_addr_t)-1;

99 *
	gld_¥og_‚ame
 = 
NULL
;

102 
md_addr_t
 
	gld_¥og_íåy
 = 0;

105 
md_addr_t
 
	gld_ívú⁄_ba£
 = 0;

108 
	gld_èrgë_big_ídün
;

112 
	$ld_ªg_°©s
(
°©_sdb_t
 *
sdb
)

114 
	`°©_ªg_addr
(
sdb
, "ld_text_base",

116 &
ld_ãxt_ba£
,Üd_text_base, " 0x%08p");

117 
	`°©_ªg_uöt
(
sdb
, "ld_text_size",

119 &
ld_ãxt_size
,Üd_ãxt_size, 
NULL
);

120 
	`°©_ªg_addr
(
sdb
, "ld_data_base",

122 &
ld_d©a_ba£
,Üd_data_base, " 0x%08p");

123 
	`°©_ªg_uöt
(
sdb
, "ld_data_size",

125 &
ld_d©a_size
,Üd_d©a_size, 
NULL
);

126 
	`°©_ªg_addr
(
sdb
, "ld_stack_base",

128 &
ld_°ack_ba£
,Üd_stack_base, " 0x%08p");

129 
	`°©_ªg_uöt
(
sdb
, "ld_stack_size",

131 &
ld_°ack_size
,Üd_°ack_size, 
NULL
);

133 
	`°©_ªg_addr
(
sdb
, "ld_stack_min",

135 &
ld_°ack_mö
,Üd_stack_min, " 0x%08p");

137 
	`°©_ªg_addr
(
sdb
, "ld_prog_entry",

139 &
ld_¥og_íåy
,Üd_prog_entry, " 0x%08p");

140 
	`°©_ªg_addr
(
sdb
, "ld_environ_base",

142 &
ld_ívú⁄_ba£
,Üd_environ_base, " 0x%08p");

143 
	`°©_ªg_öt
(
sdb
, "ld_target_big_endian",

145 &
ld_èrgë_big_ídün
,Üd_èrgë_big_ídün, 
NULL
);

146 
	}
}

152 
	$ld_lﬂd_¥og
(*
‚ame
,

153 
¨gc
, **
¨gv
,

154 **
ívp
,

155 
ªgs_t
 *
ªgs
,

156 
mem_t
 *
mem
,

157 
zîo_bss_£gs
)

159 
i
;

160 
w‹d_t
 
ãmp
;

161 
md_addr_t
 
•
, 
d©a_bªak
 = 0, 
nuŒ_±r
 = 0, 
¨gv_addr
, 
ívp_addr
;

163 i‡(
	`eio_vÆid
(
‚ame
))

165 i‡(
¨gc
 != 1)

167 
	`Ârötf
(
°dîr
, "error: EIO file hasárguments\n");

168 
	`exô
(1);

171 
	`Ârötf
(
°dîr
, "sim:Üﬂdög EIO fûe: %s\n", 
‚ame
);

173 
sim_eio_‚ame
 = 
	`my°rdup
(
‚ame
);

176 
sim_eio_fd
 = 
	`eio_›í
(
‚ame
);

179 i‡(
	`eio_ªad_chk±
(
ªgs
, 
mem
, 
sim_eio_fd
) != -1)

180 
	`Áèl
("bad initial checkpoint in EIO file");

183 i‡(
sim_chk±_‚ame
 !
NULL
)

185 
cou¡î_t
 
ª°‹e_i˙t
;

187 
FILE
 *
chk±_fd
;

189 
	`Ârötf
(
°dîr
, "sim:Üoading checkpoint file: %s\n",

190 
sim_chk±_‚ame
);

192 i‡(!
	`eio_vÆid
(
sim_chk±_‚ame
))

193 
	`Áèl
("file `%s' doesÇotáppearÅo beá checkpoint file",

194 
sim_chk±_‚ame
);

197 
chk±_fd
 = 
	`eio_›í
(
sim_chk±_‚ame
);

200 
ª°‹e_i˙t
 = 
	`eio_ªad_chk±
(
ªgs
, 
mem
, 
chk±_fd
);

203 
	`myÂrötf
(
°dîr
, "sim: fast forwardingÅo instruction %n\n",

204 
ª°‹e_i˙t
);

205 
	`eio_Á°_f‹w¨d
(
sim_eio_fd
, 
ª°‹e_i˙t
);

209 
ld_ívú⁄_ba£
 = 
ªgs
->
ªgs_R
[
MD_REG_SP
];

210 
ld_¥og_íåy
 = 
ªgs
->
ªgs_PC
;

215 #ifde‡
MD_CROSS_ENDIAN


218 
	`Áèl
("SimpleScalar/PISA only supports binaryÉxecution on\n"

224 i‡(
sim_chk±_‚ame
 !
NULL
)

225 
	`Áèl
("checkpoints only supported while EIOÅracing");

227 #ifde‡
BFD_LOADER


230 
bfd
 *
abfd
;

231 
a£˘i⁄
 *
£˘
;

235 
ld_°ack_ba£
 = 
MD_STACK_BASE
;

236 
•
 = 
	`ROUND_DOWN
(
MD_STACK_BASE
 - 
MD_MAX_ENVIRON
, (
dÊﬂt_t
));

237 
ld_°ack_size
 = 
ld_°ack_ba£
 - 
•
;

240 
ld_ívú⁄_ba£
 = 
•
;

243 i‡(!(
abfd
 = 
	`bfd_›ír
(
¨gv
[0], "ss-coff-big")))

244 i‡(!(
abfd
 = 
	`bfd_›ír
(
¨gv
[0], "ss-coff-little")))

245 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
¨gv
[0]);

250 i‡(!
	`bfd_check_f‹m©
(
abfd
, 
bfd_obje˘
))

252 
	`bfd_˛o£
(
abfd
);

253 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
¨gv
[0]);

257 
ld_¥og_‚ame
 = 
¨gv
[0];

260 
ld_èrgë_big_ídün
 = 
abfd
->
xvec
->
byã‹dî_big_p
;

262 
	`debug
("processing %d sections in `%s'...",

263 
	`bfd_cou¡_£˘i⁄s
(
abfd
), 
¨gv
[0]);

266 
£˘
=
abfd
->
£˘i⁄s
; se˘; se˘=£˘->
√xt
)

268 *
p
;

270 
	`debug
("processing section `%s', %d bytes @ 0x%08x...",

271 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), 
	`bfd_£˘i⁄_size
(abfd, sect),

272 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
));

275 i‡((
	`bfd_gë_£˘i⁄_Êags
(
abfd
, 
£˘
Ë& 
SEC_ALLOC
)

276 && (
	`bfd_gë_£˘i⁄_Êags
(
abfd
, 
£˘
Ë& 
SEC_LOAD
)

277 && 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
)

278 && 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
))

281 
p
 = 
	`ˇŒoc
(
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
), ());

282 i‡(!
p
)

283 
	`Áèl
("cannotállocate %d bytes for section `%s'",

284 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
),

285 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
));

287 i‡(!
	`bfd_gë_£˘i⁄_c⁄ã¡s
(
abfd
, 
£˘
, 
p
, (
fûe_±r
)0,

288 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
)))

289 
	`Áèl
("couldÇotÑeadÉntire `%s' section fromÉxecutable",

290 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
));

293 
	`mem_bc›y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
),

294 
p
, 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
));

297 
	`‰ì
(
p
);

300 i‡(
zîo_bss_£gs


301 && (
	`bfd_gë_£˘i⁄_Êags
(
abfd
, 
£˘
Ë& 
SEC_LOAD
)

302 && 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
)

303 && 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
))

306 
	`mem_bzîo
(
mem_ac˚ss
, 
mem
,

307 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
),

308 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
));

313 
	`debug
("ignoring section `%s' duringÜoad...",

314 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
));

318 i‡(!
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".text"))

321 
ld_ãxt_size
 =

322 ((
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
Ë+ 
	`bfd_£˘i⁄_size
(abfd, sect))

323 - 
MD_TEXT_BASE
)

324 + 
TEXT_TAIL_PADDING
;

327 
	`mem_bzîo
(
mem_ac˚ss
, 
mem
,

328 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
)

329 + 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
),

330 
TEXT_TAIL_PADDING
);

333 i‡(!
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".rdata")

334 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".data")

335 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".sdata")

336 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".bss")

337 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".sbss"))

340 i‡(
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
Ë+ 
	`bfd_£˘i⁄_size
(abfd, sect) >

341 
d©a_bªak
)

342 
d©a_bªak
 = (
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
) +

343 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
));

348 
	`Áèl
("encountered unknown section `%s', %d bytes @ 0x%08x",

349 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), 
	`bfd_£˘i⁄_size
(abfd, sect),

350 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
));

355 
ld_ãxt_ba£
 = 
MD_TEXT_BASE
;

356 
ld_d©a_ba£
 = 
MD_DATA_BASE
;

357 
ld_¥og_íåy
 = 
	`bfd_gë_°¨t_addªss
(
abfd
);

358 
ld_d©a_size
 = 
d©a_bªak
 - 
ld_d©a_ba£
;

361 i‡(!
	`bfd_˛o£
(
abfd
))

362 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
¨gv
[0]);

368 
FILE
 *
fobj
;

369 
Êoc
;

370 
ecoff_fûehdr
 
fhdr
;

371 
ecoff_aouthdr
 
ahdr
;

372 
ecoff_s˙hdr
 
shdr
;

376 
ld_°ack_ba£
 = 
MD_STACK_BASE
;

377 
•
 = 
	`ROUND_DOWN
(
MD_STACK_BASE
 - 
MD_MAX_ENVIRON
, (
dÊﬂt_t
));

378 
ld_°ack_size
 = 
ld_°ack_ba£
 - 
•
;

381 
ld_ívú⁄_ba£
 = 
•
;

384 
ld_¥og_‚ame
 = 
¨gv
[0];

387 #i‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
_MSC_VER
)

388 
fobj
 = 
	`f›í
(
¨gv
[0], "rb");

390 
fobj
 = 
	`f›í
(
¨gv
[0], "r");

392 i‡(!
fobj
)

393 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
¨gv
[0]);

395 i‡(
	`‰ód
(&
fhdr
, (
ecoff_fûehdr
), 1, 
fobj
) < 1)

396 
	`Áèl
("ˇ¬ŸÑód hódî fromÉxecuèbÀ `%s'", 
¨gv
[0]);

399 i‡(
fhdr
.
f_magic
 =
ECOFF_EB_MAGIC
)

400 
ld_èrgë_big_ídün
 = 
TRUE
;

401 i‡(
fhdr
.
f_magic
 =
ECOFF_EL_MAGIC
)

402 
ld_èrgë_big_ídün
 = 
FALSE
;

403 i‡(
fhdr
.
f_magic
 =
ECOFF_EB_OTHER
 || fhdr.f_magi¯=
ECOFF_EL_OTHER
)

404 
	`Áèl
("PISA bö¨y `%s' ha†wr⁄gÉndü¿f‹m©", 
¨gv
[0]);

405 i‡(
fhdr
.
f_magic
 =
ECOFF_ALPHAMAGIC
)

406 
	`Áèl
("PISA simuœt‹ c™nŸÑu¿AÕh®bö¨y `%s'", 
¨gv
[0]);

408 
	`Áèl
("bad magicÇumber inÉxecutable `%s' (notánÉxecutable?)",

409 
¨gv
[0]);

411 i‡(
	`‰ód
(&
ahdr
, (
ecoff_aouthdr
), 1, 
fobj
) < 1)

412 
	`Áèl
("ˇ¬ŸÑód AOUT hódî fromÉxecuèbÀ `%s'", 
¨gv
[0]);

414 
d©a_bªak
 = 
MD_DATA_BASE
 + 
ahdr
.
dsize
 +áhdr.
bsize
;

417 
D©a_°¨t
 = 
ahdr
.
d©a_°¨t
;

418 
D©a_size
 = 
ahdr
.
dsize
;

419 
Bss_size
 = 
ahdr
.
bsize
;

420 
Bss_°¨t
 = 
ahdr
.
bss_°¨t
;

421 
Gp_vÆue
 = 
ahdr
.
gp_vÆue
;

422 
Text_íåy
 = 
ahdr
.
íåy
;

428 
	`f£ek
(
fobj
, (
ecoff_fûehdr
Ë+ 
fhdr
.
f_›thdr
, 0);

430 
	`debug
("¥o˚ssög %d se˘i⁄†ö `%s'...", 
fhdr
.
f_ns˙s
, 
¨gv
[0]);

433 
Êoc
 = 
	`·ñl
(
fobj
);

434 
i
 = 0; i < 
fhdr
.
f_ns˙s
; i++)

436 *
p
;

438 i‡(
	`f£ek
(
fobj
, 
Êoc
, 0) == -1)

439 
	`Áèl
("couldÇotÑesetÜocation inÉxecutable");

440 i‡(
	`‰ód
(&
shdr
, (
ecoff_s˙hdr
), 1, 
fobj
) < 1)

441 
	`Áèl
("couldÇŸÑód se˘i⁄ %d fromÉxecuèbÀ", 
i
);

442 
Êoc
 = 
	`·ñl
(
fobj
);

444 
shdr
.
s_Êags
)

446 
ECOFF_STYP_TEXT
:

447 
ld_ãxt_size
 = ((
shdr
.
s_vaddr
 + shdr.
s_size
Ë- 
MD_TEXT_BASE
)

448 + 
TEXT_TAIL_PADDING
;

450 
p
 = 
	`ˇŒoc
(
shdr
.
s_size
, ());

451 i‡(!
p
)

452 
	`Áèl
("out of virtual memory");

454 i‡(
	`f£ek
(
fobj
, 
shdr
.
s_s˙±r
, 0) == -1)

455 
	`Áèl
("couldÇŸÑód `.ãxt' fromÉxecuèbÀ", 
i
);

456 i‡(
	`‰ód
(
p
, 
shdr
.
s_size
, 1, 
fobj
) < 1)

457 
	`Áèl
("couldÇotÑeadÅext section fromÉxecutable");

460 
	`mem_bc›y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
shdr
.
s_vaddr
, 
p
, shdr.
s_size
);

463 
	`mem_bzîo
(
mem_ac˚ss
, 
mem
,

464 
shdr
.
s_vaddr
 + shdr.
s_size
, 
TEXT_TAIL_PADDING
);

467 
	`‰ì
(
p
);

470 
Text_£ek
 = 
shdr
.
s_s˙±r
;

471 
Text_°¨t
 = 
shdr
.
s_vaddr
;

472 
Text_size
 = 
shdr
.
s_size
 / 4;

474 
Text_size
 += 10;

475 
Text_íd
 = 
Text_°¨t
 + 
Text_size
 * 4;

480 
ECOFF_STYP_RDATA
:

485 
Rd©a_°¨t
 = 
shdr
.
s_vaddr
;

486 
Rd©a_size
 = 
shdr
.
s_size
;

487 
Rd©a_£ek
 = 
shdr
.
s_s˙±r
;

490 
ECOFF_STYP_DATA
:

492 
D©a_£ek
 = 
shdr
.
s_s˙±r
;

495 
ECOFF_STYP_SDATA
:

497 
Sd©a_£ek
 = 
shdr
.
s_s˙±r
;

500 
p
 = 
	`ˇŒoc
(
shdr
.
s_size
, ());

501 i‡(!
p
)

502 
	`Áèl
("out of virtual memory");

504 i‡(
	`f£ek
(
fobj
, 
shdr
.
s_s˙±r
, 0) == -1)

505 
	`Áèl
("couldÇŸÑód `.ãxt' fromÉxecuèbÀ", 
i
);

506 i‡(
	`‰ód
(
p
, 
shdr
.
s_size
, 1, 
fobj
) < 1)

507 
	`Áèl
("couldÇotÑeadÅext section fromÉxecutable");

510 
	`mem_bc›y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
shdr
.
s_vaddr
, 
p
, shdr.
s_size
);

513 
	`‰ì
(
p
);

517 
ECOFF_STYP_BSS
:

520 
ECOFF_STYP_SBSS
:

526 
ld_ãxt_ba£
 = 
MD_TEXT_BASE
;

527 
ld_d©a_ba£
 = 
MD_DATA_BASE
;

528 
ld_¥og_íåy
 = 
ahdr
.
íåy
;

529 
ld_d©a_size
 = 
d©a_bªak
 - 
ld_d©a_ba£
;

532 i‡(
	`f˛o£
(
fobj
))

533 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
¨gv
[0]);

538 i‡(!
ld_ãxt_ba£
 || !
ld_ãxt_size
)

539 
	`Áèl
("executable is missingá `.text' section");

540 i‡(!
ld_d©a_ba£
 || !
ld_d©a_size
)

541 
	`Áèl
("executable is missingá `.data' section");

542 i‡(!
ld_¥og_íåy
)

543 
	`Áèl
("programÉntryÖointÇot specified");

546 
sim_sw≠_byãs
 = (
	`ídün_ho°_byã_‹dî
(Ë!
	`ídün_èrgë_byã_‹dî
());

547 i‡(
sim_sw≠_byãs
)

552 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping bytesÅo match host...\n");

553 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping may break yourÖrogram!\n");

555 
	`Áèl
("binaryÉndian doesÇot match hostÉndian");

558 
sim_sw≠_w‹ds
 = (
	`ídün_ho°_w‹d_‹dî
(Ë!
	`ídün_èrgë_w‹d_‹dî
());

559 i‡(
sim_sw≠_w‹ds
)

564 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping wordsÅo match host...\n");

565 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping may break yourÖrogram!\n");

567 
	`Áèl
("binaryÉndian doesÇot match hostÉndian");

572 
ãmp
 = 
	`MD_SWAPW
(
¨gc
);

573 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
•
, &
ãmp
, (
w‹d_t
));

574 
•
 +(
w‹d_t
);

577 
¨gv_addr
 = 
•
;

578 
•
 = s∞+ (
¨gc
 + 1Ë* (
md_addr_t
);

581 
ívp_addr
 = 
•
;

582 
i
=0; 
ívp
[i]; i++)

583 
•
 +(
md_addr_t
);

584 
•
 +(
md_addr_t
);

587 
i
=0; i<
¨gc
; i++)

590 
ãmp
 = 
	`MD_SWAPW
(
•
);

591 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
¨gv_addr
 + 
i
*(
md_addr_t
),

592 &
ãmp
, (
md_addr_t
));

594 
	`mem_°r˝y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
•
, 
¨gv
[
i
]);

595 
•
 +
	`°æí
(
¨gv
[
i
]) + 1;

598 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
¨gv_addr
 + 
i
*(
md_addr_t
),

599 &
nuŒ_±r
, (
md_addr_t
));

602 
i
 = 0; 
ívp
[i]; i++)

605 
ãmp
 = 
	`MD_SWAPW
(
•
);

606 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
ívp_addr
 + 
i
*(
md_addr_t
),

607 &
ãmp
, (
md_addr_t
));

609 
	`mem_°r˝y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
•
, 
ívp
[
i
]);

610 
•
 +
	`°æí
(
ívp
[
i
]) + 1;

613 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
ívp_addr
 + 
i
*(
md_addr_t
),

614 &
nuŒ_±r
, (
md_addr_t
));

617 i‡(
•
 > 
ld_°ack_ba£
)

622 
	`Áèl
("environment overflow, increase MD_MAX_ENVIRON in ss.h");

626 
ld_brk_poöt
 = 
	`ROUND_UP
(
ld_d©a_ba£
 + 
ld_d©a_size
, 
MD_PAGE_SIZE
);

629 
ld_°ack_mö
 = 
ªgs
->
ªgs_R
[
MD_REG_SP
];

632 
ªgs
->
ªgs_R
[
MD_REG_SP
] = 
ld_ívú⁄_ba£
;

633 
ªgs
->
ªgs_PC
 = 
ld_¥og_íåy
;

635 
	`debug
("ld_text_base: 0x%08xÜd_text_size: 0x%08x",

636 
ld_ãxt_ba£
, 
ld_ãxt_size
);

637 
	`debug
("ld_data_base: 0x%08xÜd_data_size: 0x%08x",

638 
ld_d©a_ba£
, 
ld_d©a_size
);

639 
	`debug
("ld_stack_base: 0x%08xÜd_stack_size: 0x%08x",

640 
ld_°ack_ba£
, 
ld_°ack_size
);

641 
	`debug
("ld_¥og_íåy: 0x%08x", 
ld_¥og_íåy
);

645 
md_addr_t
 
addr
;

646 
md_ö°_t
 
ö°
;

647 
md_Áu…_ty≥
 
Áu…
;

649 i‡(
OP_MAX
 > 255)

650 
	`Áèl
("cannotÖerform fast decoding,Åoo many opcodes");

652 
	`debug
("sim: decodingÅext segment...");

653 
addr
=
ld_ãxt_ba£
;

654 
addr
 < (
ld_ãxt_ba£
+
ld_ãxt_size
);

655 
addr
 +(
md_ö°_t
))

657 
Áu…
 = 
	`mem_ac˚ss
(
mem
, 
Ród
, 
addr
, &
ö°
, (inst));

658 i‡(
Áu…
 !
md_Áu…_n⁄e
)

659 
	`Áèl
("couldÇotÑead instruction memory");

660 
ö°
.
a
 = (ö°.®& ~0xffË| (
w‹d_t
)
	`MD_OP_ENUM
(
	`MD_OPFIELD
(inst));

661 
Áu…
 = 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
addr
, &
ö°
, (inst));

662 i‡(
Áu…
 !
md_Áu…_n⁄e
)

663 
	`Áèl
("couldÇot write instruction memory");

666 
	}
}

	@loader.h

52 #i‚de‡
LOADER_H


53 
	#LOADER_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"machöe.h
"

60 
	~"ªgs.h
"

61 
	~"mem‹y.h
"

101 
md_addr_t
 
ld_ãxt_ba£
;

104 
ld_ãxt_size
;

107 
md_addr_t
 
ld_d©a_ba£
;

110 
ld_d©a_size
;

113 
md_addr_t
 
ld_brk_poöt
;

116 
md_addr_t
 
ld_°ack_ba£
;

119 
ld_°ack_size
;

122 
md_addr_t
 
ld_°ack_mö
;

125 *
ld_¥og_‚ame
;

128 
md_addr_t
 
ld_¥og_íåy
;

131 
md_addr_t
 
ld_ívú⁄_ba£
;

134 
ld_èrgë_big_ídün
;

138 
ld_ªg_°©s
(
°©_sdb_t
 *
sdb
);

143 
ld_lﬂd_¥og
(*
‚ame
,

144 
¨gc
, **
¨gv
,

145 **
ívp
,

146 
ªgs_t
 *
ªgs
,

147 
mem_t
 *
mem
,

148 
zîo_bss_£gs
);

	@machine.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"evÆ.h
"

59 
	~"ªgs.h
"

62 
md_ö°_t
 
	gMD_NOP_INST
 = { 
NOP
, 0 };

65 
md_›code
 
	gmd_mask2›
[
MD_MAX_MASK
+1];

68 *
	gmd_›2«me
[
OP_MAX
] = {

69 
NULL
,

70 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËNAME,

	)

71 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
ËNAME,

	)

72 
	#CONNECT
(
OP
)

	)

73 
	~"machöe.def
"

77 *
	gmd_›2f‹m©
[
OP_MAX
] = {

78 
NULL
,

79 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËOPFORM,

	)

80 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
Ë
NULL
,

	)

81 
	#CONNECT
(
OP
)

	)

82 
	~"machöe.def
"

86 
md_fu_˛ass
 
	gmd_›2fu
[
OP_MAX
] = {

87 
FUCœss_NA
,

88 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËRES,

	)

89 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
Ë
FUCœss_NA
,

	)

90 
	#CONNECT
(
OP
)

	)

91 
	~"machöe.def
"

95 *
	gmd_fu2«me
[
NUM_FU_CLASSES
] = {

96 
NULL
,

111 
	gmd_›2Êags
[
OP_MAX
] = {

112 
NA
,

113 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËFLAGS,

	)

114 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
Ë
NA
,

	)

115 
	#CONNECT
(
OP
)

	)

116 
	~"machöe.def
"

120 
w‹d_t
 
	gmd_Ã_masks
[] = {

121 #ifde‡
BYTES_BIG_ENDIAN


136 *
	gmd_amode_°r
[
md_amode_NUM
] =

147 
md_ªg_«mes_t
 
	gmd_ªg_«mes
[] =

152 { "$r0", 
π_g¥
, 0 },

153 { "$zîo", 
π_g¥
, 0 },

154 { "$r1", 
π_g¥
, 1 },

155 { "$r2", 
π_g¥
, 2 },

156 { "$r3", 
π_g¥
, 3 },

157 { "$r4", 
π_g¥
, 4 },

158 { "$r5", 
π_g¥
, 5 },

159 { "$r6", 
π_g¥
, 6 },

160 { "$r7", 
π_g¥
, 7 },

161 { "$r8", 
π_g¥
, 8 },

162 { "$r9", 
π_g¥
, 9 },

163 { "$r10", 
π_g¥
, 10 },

164 { "$r11", 
π_g¥
, 11 },

165 { "$r12", 
π_g¥
, 12 },

166 { "$r13", 
π_g¥
, 13 },

167 { "$r14", 
π_g¥
, 14 },

168 { "$r15", 
π_g¥
, 15 },

169 { "$r16", 
π_g¥
, 16 },

170 { "$r17", 
π_g¥
, 17 },

171 { "$r18", 
π_g¥
, 18 },

172 { "$r19", 
π_g¥
, 19 },

173 { "$r20", 
π_g¥
, 20 },

174 { "$r21", 
π_g¥
, 21 },

175 { "$r22", 
π_g¥
, 22 },

176 { "$r23", 
π_g¥
, 23 },

177 { "$r24", 
π_g¥
, 24 },

178 { "$r25", 
π_g¥
, 25 },

179 { "$r26", 
π_g¥
, 26 },

180 { "$r27", 
π_g¥
, 27 },

181 { "$r28", 
π_g¥
, 28 },

182 { "$gp", 
π_g¥
, 28 },

183 { "$r29", 
π_g¥
, 29 },

184 { "$•", 
π_g¥
, 29 },

185 { "$r30", 
π_g¥
, 30 },

186 { "$Â", 
π_g¥
, 30 },

187 { "$r31", 
π_g¥
, 31 },

190 { "$f0", 
π_Âr
, 0 },

191 { "$f1", 
π_Âr
, 1 },

192 { "$f2", 
π_Âr
, 2 },

193 { "$f3", 
π_Âr
, 3 },

194 { "$f4", 
π_Âr
, 4 },

195 { "$f5", 
π_Âr
, 5 },

196 { "$f6", 
π_Âr
, 6 },

197 { "$f7", 
π_Âr
, 7 },

198 { "$f8", 
π_Âr
, 8 },

199 { "$f9", 
π_Âr
, 9 },

200 { "$f10", 
π_Âr
, 10 },

201 { "$f11", 
π_Âr
, 11 },

202 { "$f12", 
π_Âr
, 12 },

203 { "$f13", 
π_Âr
, 13 },

204 { "$f14", 
π_Âr
, 14 },

205 { "$f15", 
π_Âr
, 15 },

206 { "$f16", 
π_Âr
, 16 },

207 { "$f17", 
π_Âr
, 17 },

208 { "$f18", 
π_Âr
, 18 },

209 { "$f19", 
π_Âr
, 19 },

210 { "$f20", 
π_Âr
, 20 },

211 { "$f21", 
π_Âr
, 21 },

212 { "$f22", 
π_Âr
, 22 },

213 { "$f23", 
π_Âr
, 23 },

214 { "$f24", 
π_Âr
, 24 },

215 { "$f25", 
π_Âr
, 25 },

216 { "$f26", 
π_Âr
, 26 },

217 { "$f27", 
π_Âr
, 27 },

218 { "$f28", 
π_Âr
, 28 },

219 { "$f29", 
π_Âr
, 29 },

220 { "$f30", 
π_Âr
, 30 },

221 { "$f31", 
π_Âr
, 31 },

224 { "$d0", 
π_d¥
, 0 },

225 { "$d1", 
π_d¥
, 1 },

226 { "$d2", 
π_d¥
, 2 },

227 { "$d3", 
π_d¥
, 3 },

228 { "$d4", 
π_d¥
, 4 },

229 { "$d5", 
π_d¥
, 5 },

230 { "$d6", 
π_d¥
, 6 },

231 { "$d7", 
π_d¥
, 7 },

232 { "$d8", 
π_d¥
, 8 },

233 { "$d9", 
π_d¥
, 9 },

234 { "$d10", 
π_d¥
, 10 },

235 { "$d11", 
π_d¥
, 11 },

236 { "$d12", 
π_d¥
, 12 },

237 { "$d13", 
π_d¥
, 13 },

238 { "$d14", 
π_d¥
, 14 },

239 { "$d15", 
π_d¥
, 15 },

242 { "$l0", 
π_Õr
, 0 },

243 { "$l1", 
π_Õr
, 1 },

244 { "$l2", 
π_Õr
, 2 },

245 { "$l3", 
π_Õr
, 3 },

246 { "$l4", 
π_Õr
, 4 },

247 { "$l5", 
π_Õr
, 5 },

248 { "$l6", 
π_Õr
, 6 },

249 { "$l7", 
π_Õr
, 7 },

250 { "$l8", 
π_Õr
, 8 },

251 { "$l9", 
π_Õr
, 9 },

252 { "$l10", 
π_Õr
, 10 },

253 { "$l11", 
π_Õr
, 11 },

254 { "$l12", 
π_Õr
, 12 },

255 { "$l13", 
π_Õr
, 13 },

256 { "$l14", 
π_Õr
, 14 },

257 { "$l15", 
π_Õr
, 15 },

258 { "$l16", 
π_Õr
, 16 },

259 { "$l17", 
π_Õr
, 17 },

260 { "$l18", 
π_Õr
, 18 },

261 { "$l19", 
π_Õr
, 19 },

262 { "$l20", 
π_Õr
, 20 },

263 { "$l21", 
π_Õr
, 21 },

264 { "$l22", 
π_Õr
, 22 },

265 { "$l23", 
π_Õr
, 23 },

266 { "$l24", 
π_Õr
, 24 },

267 { "$l25", 
π_Õr
, 25 },

268 { "$l26", 
π_Õr
, 26 },

269 { "$l27", 
π_Õr
, 27 },

270 { "$l28", 
π_Õr
, 28 },

271 { "$l29", 
π_Õr
, 29 },

272 { "$l30", 
π_Õr
, 30 },

273 { "$l31", 
π_Õr
, 31 },

276 { "$hi", 
π_˘æ
, 0 },

277 { "$lo", 
π_˘æ
, 1 },

278 { "$fcc", 
π_˘æ
, 2 },

281 { "$pc", 
π_PC
, 0 },

282 { "$≈c", 
π_NPC
, 0 },

285 { 
NULL
, 
π_g¥
, 0 }

290 
	$md_ªg_«me
(
md_ªg_ty≥
 
π
, 
ªg
)

292 
i
;

294 
i
=0; 
md_ªg_«mes
[i].
°r
 !
NULL
; i++)

296 i‡(
md_ªg_«mes
[
i
].
fûe
 =
π
 && md_ªg_«mes[i].
ªg
 ==Ñeg)

297  
md_ªg_«mes
[
i
].
°r
;

301  
NULL
;

302 
	}
}

305 
	$md_ªg_obj
(
ªgs_t
 *
ªgs
,

306 
is_wrôe
,

307 
md_ªg_ty≥
 
π
,

308 
ªg
,

309 
evÆ_vÆue_t
 *
vÆ
)

311 
π
)

313 
π_g¥
:

314 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_IREGS
)

317 i‡(!
is_wrôe
)

319 
vÆ
->
ty≥
 = 
ë_uöt
;

320 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_R
[
ªg
];

323 
ªgs
->
ªgs_R
[
ªg
] = 
	`evÆ_as_uöt
(*
vÆ
);

326 
π_Õr
:

327 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
)

330 i‡(!
is_wrôe
)

332 
vÆ
->
ty≥
 = 
ë_uöt
;

333 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_F
.
l
[
ªg
];

336 
ªgs
->
ªgs_F
.
l
[
ªg
] = 
	`evÆ_as_uöt
(*
vÆ
);

339 
π_Âr
:

340 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
)

343 i‡(!
is_wrôe
)

345 
vÆ
->
ty≥
 = 
ë_Êﬂt
;

346 
vÆ
->
vÆue
.
as_Êﬂt
 = 
ªgs
->
ªgs_F
.
f
[
ªg
];

349 
ªgs
->
ªgs_F
.
f
[
ªg
] = 
	`evÆ_as_Êﬂt
(*
vÆ
);

352 
π_d¥
:

353 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
/2)

356 i‡(!
is_wrôe
)

358 
vÆ
->
ty≥
 = 
ë_doubÀ
;

359 
vÆ
->
vÆue
.
as_doubÀ
 = 
ªgs
->
ªgs_F
.
d
[
ªg
];

362 
ªgs
->
ªgs_F
.
d
[
ªg
] = 
	`evÆ_as_doubÀ
(*
vÆ
);

365 
π_˘æ
:

366 
ªg
)

369 i‡(!
is_wrôe
)

371 
vÆ
->
ty≥
 = 
ë_uöt
;

372 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_C
.
hi
;

375 
ªgs
->
ªgs_C
.
hi
 = 
	`evÆ_as_uöt
(*
vÆ
);

379 i‡(!
is_wrôe
)

381 
vÆ
->
ty≥
 = 
ë_uöt
;

382 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_C
.
lo
;

385 
ªgs
->
ªgs_C
.
lo
 = 
	`evÆ_as_uöt
(*
vÆ
);

389 i‡(!
is_wrôe
)

391 
vÆ
->
ty≥
 = 
ë_öt
;

392 
vÆ
->
vÆue
.
as_öt
 = 
ªgs
->
ªgs_C
.
fcc
;

395 
ªgs
->
ªgs_C
.
fcc
 = 
	`evÆ_as_uöt
(*
vÆ
);

403 
π_PC
:

404 i‡(!
is_wrôe
)

406 
vÆ
->
ty≥
 = 
ë_addr
;

407 
vÆ
->
vÆue
.
as_addr
 = 
ªgs
->
ªgs_PC
;

410 
ªgs
->
ªgs_PC
 = 
	`evÆ_as_addr
(*
vÆ
);

413 
π_NPC
:

414 i‡(!
is_wrôe
)

416 
vÆ
->
ty≥
 = 
ë_addr
;

417 
vÆ
->
vÆue
.
as_addr
 = 
ªgs
->
ªgs_NPC
;

420 
ªgs
->
ªgs_NPC
 = 
	`evÆ_as_addr
(*
vÆ
);

424 
	`∑nic
("bogusÑegister bank");

428  
NULL
;

429 
	}
}

433 
	$md_¥öt_úeg
(
md_g¥_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
)

435 
	`Ârötf
(
°ªam
, "%4s: %12d/0x%08x",

436 
	`md_ªg_«me
(
π_g¥
, 
ªg
), 
ªgs
[reg],Ñegs[reg]);

437 
	}
}

440 
	$md_¥öt_úegs
(
md_g¥_t
 
ªgs
, 
FILE
 *
°ªam
)

442 
i
;

444 
i
=0; i < 
MD_NUM_IREGS
; i += 2)

446 
	`md_¥öt_úeg
(
ªgs
, 
i
, 
°ªam
);

447 
	`Ârötf
(
°ªam
, " ");

448 
	`md_¥öt_úeg
(
ªgs
, 
i
+1, 
°ªam
);

449 
	`Ârötf
(
°ªam
, "\n");

451 
	}
}

455 
	$md_¥öt_Âªg
(
md_Âr_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
)

457 
	`Ârötf
(
°ªam
, "%4s: %12d/0x%08x/%f",

458 
	`md_ªg_«me
(
π_Âr
, 
ªg
), 
ªgs
.
l
[ªg],Ñegs.l[ªg],Ñegs.
f
[reg]);

459 i‡–!(
ªg
 & 1))

461 
	`Ârötf
(
°ªam
, " (%4sás double: %f)",

462 
	`md_ªg_«me
(
π_d¥
, 
ªg
/2), 
ªgs
.
d
[reg/2]);

464 
	}
}

467 
	$md_¥öt_Âªgs
(
md_Âr_t
 
ªgs
, 
FILE
 *
°ªam
)

469 
i
;

472 
i
=0; i < 
MD_NUM_FREGS
; i += 2)

474 
	`md_¥öt_Âªg
(
ªgs
, 
i
, 
°ªam
);

475 
	`Ârötf
(
°ªam
, "\n");

477 
	`md_¥öt_Âªg
(
ªgs
, 
i
+1, 
°ªam
);

478 
	`Ârötf
(
°ªam
, "\n");

480 
	}
}

483 
	$md_¥öt_¸eg
(
md_˘æ_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
)

486 
ªg
)

489 
	`Ârötf
(
°ªam
, "HI: 0x%08x", 
ªgs
.
hi
);

493 
	`Ârötf
(
°ªam
, "LO: 0x%08x", 
ªgs
.
lo
);

497 
	`Ârötf
(
°ªam
, "FCC: 0x%08x", 
ªgs
.
fcc
);

501 
	`∑nic
("bogus controlÑegister index");

503 
	}
}

506 
	$md_¥öt_¸egs
(
md_˘æ_t
 
ªgs
, 
FILE
 *
°ªam
)

508 
	`md_¥öt_¸eg
(
ªgs
, 0, 
°ªam
);

509 
	`Ârötf
(
°ªam
, " ");

510 
	`md_¥öt_¸eg
(
ªgs
, 1, 
°ªam
);

511 
	`Ârötf
(
°ªam
, " ");

512 
	`md_¥öt_¸eg
(
ªgs
, 2, 
°ªam
);

513 
	`Ârötf
(
°ªam
, "\n");

514 
	}
}

517 
w‹d_t


518 
	$md_¸c_ªgs
(
ªgs_t
 *
ªgs
)

520 
i
;

521 
w‹d_t
 
¸c_accum
 = 0;

523 
i
=0; i < 
MD_NUM_IREGS
; i++)

524 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_R
[
i
]);

526 
i
=0; i < 
MD_NUM_FREGS
; i++)

527 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_F
.
l
[
i
]);

529 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_C
.
hi
);

530 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_C
.
lo
);

531 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_C
.
fcc
);

532 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_PC
);

533 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_NPC
);

535  
¸c_accum
;

536 
	}
}

539 
w‹d_t


540 
	$md_x‹_ªgs
(
ªgs_t
 *
ªgs
)

542 
i
;

543 
w‹d_t
 
checksum
 = 0;

545 
i
=0; i < 
MD_NUM_IREGS
; i++)

546 
checksum
 ^
ªgs
->
ªgs_R
[
i
];

548 
i
=0; i < 
MD_NUM_FREGS
; i++)

549 
checksum
 ^
ªgs
->
ªgs_F
.
l
[
i
];

551 
checksum
 ^
ªgs
->
ªgs_C
.
hi
;

552 
checksum
 ^
ªgs
->
ªgs_C
.
lo
;

553 
checksum
 ^
ªgs
->
ªgs_C
.
fcc
;

554 
checksum
 ^
ªgs
->
ªgs_PC
;

555 
checksum
 ^
ªgs
->
ªgs_NPC
;

557  
checksum
;

558 
	}
}

562 
	$md_öô_decodî
()

565 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

566 i‡(
md_mask2›
[(
MSK
)]Ë
	`Áèl
("doubly defined mask value"); \

567 i‡((
MSK
Ë>
MD_MAX_MASK
Ë
	`Áèl
("mask value isÅooÜarge"); \

568 
md_mask2›
[(
MSK
)]=(
OP
);

	)

570 
	~"machöe.def
"

571 
	}
}

575 
	$md_¥öt_ö¢
(
md_ö°_t
 
ö°
,

576 
md_addr_t
 
pc
,

577 
FILE
 *
°ªam
)

579 
md_›code
 
›
;

582 i‡(!
°ªam
)

583 
°ªam
 = 
°dîr
;

586 
	`MD_SET_OPCODE
(
›
, 
ö°
);

589 i‡(
›
 =
OP_NA
 || o∞>
OP_MAX
)

592 
	`Ârötf
(
°ªam
, "<övÆid in°: 0x%08x:%08x>", 
ö°
.
a
, in°.
b
);

596 *
s
;

598 
	`Ârötf
(
°ªam
, "%-10s", 
	`MD_OP_NAME
(
›
));

600 
s
 = 
	`MD_OP_FORMAT
(
›
);

601 *
s
) {

602 *
s
) {

604 
	`Ârötf
(
°ªam
, "r%d", 
RD
);

607 
	`Ârötf
(
°ªam
, "r%d", 
RS
);

610 
	`Ârötf
(
°ªam
, "r%d", 
RT
);

613 
	`Ârötf
(
°ªam
, "r%d", 
BS
);

616 
	`Ârötf
(
°ªam
, "f%d", 
FD
);

619 
	`Ârötf
(
°ªam
, "f%d", 
FS
);

622 
	`Ârötf
(
°ªam
, "f%d", 
FT
);

625 
	`Ârötf
(
°ªam
, "0x%x", (
pc
 + 8 + (
OFS
 << 2)));

629 
	`Ârötf
(
°ªam
, "%d", 
IMM
);

632 
	`Ârötf
(
°ªam
, "%d", 
SHAMT
);

635 
	`Ârötf
(
°ªam
, "%u", 
UIMM
);

638 
	`Ârötf
(
°ªam
, "0x%x", 
UIMM
);

641 
	`Ârötf
(
°ªam
, "0x%x", ((
pc
 & 036000000000Ë| (
TARG
 << 2)));

644 
	`Ârötf
(
°ªam
, "0x%x", 
BCODE
);

649 i‡(
SS_COMP_OP
 =
SS_COMP_NOP
)

650 
	`Ârötf
(
°ªam
, ")");

651 i‡(
SS_COMP_OP
 =
SS_COMP_POST_INC
)

652 
	`Ârötf
(
°ªam
, ")+");

653 i‡(
SS_COMP_OP
 =
SS_COMP_POST_DEC
)

654 
	`Ârötf
(
°ªam
, ")-");

655 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_INC
)

656 
	`Ârötf
(
°ªam
, ")^+");

657 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_DEC
)

658 
	`Ârötf
(
°ªam
, ")^-");

659 i‡(
SS_COMP_OP
 =
SS_COMP_POST_DBL_INC
)

660 
	`Ârötf
(
°ªam
, ")++");

661 i‡(
SS_COMP_OP
 =
SS_COMP_POST_DBL_DEC
)

662 
	`Ârötf
(
°ªam
, ")--");

663 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_DBL_INC
)

664 
	`Ârötf
(
°ªam
, ")^++");

665 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_DBL_DEC
)

666 
	`Ârötf
(
°ªam
, ")^--");

668 
	`∑nic
("bogus SS_COMP_OP");

673 
	`Âutc
(*
s
, 
°ªam
);

675 
s
++;

678 
	}
}

687 
	#XX
 0x6bababab

	)

690 
	gss_f‹e_èb
[ 8][ 5] = {

694  { 
XX
, XX, XX, XX, XX, },

696  { 
XX
, XX, XX, XX, XX, },

697  { 
XX
, XX, XX, XX, XX, },

698  { 
XX
, XX, XX, XX, XX, },

703 
	gss_a·_èb
[ 8][ 5] = {

707  { 
XX
, XX, XX, XX, XX, },

709  { 
XX
, XX, XX, XX, XX, },

710  { 
XX
, XX, XX, XX, XX, },

711  { 
XX
, XX, XX, XX, XX, },

716 
md_addr_t
 
	gss_Ã_ãmp
;

719 
md_addr_t
 
	gãmp_bs
, 
	gãmp_rd
;

	@machine.h

52 #i‚de‡
PISA_H


53 
	#PISA_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"c⁄fig.h
"

60 
	~"ídün.h
"

68 
	#TARGET_PISA


	)

70 #i‚de‡
TARGET_PISA_BIG


71 #i‚de‡
TARGET_PISA_LITTLE


73 #ifde‡
BYTES_BIG_ENDIAN


74 
	#TARGET_PISA_BIG


	)

76 
	#TARGET_PISA_LITTLE


	)

82 #i‡
deföed
(
BYTES_BIG_ENDIAN
Ë&& deföed(
TARGET_PISA_LITTLE
)

83 
	#MD_CROSS_ENDIAN


	)

85 #i‡
deföed
(
BYTES_LITTLE_ENDIAN
Ë&& deföed(
TARGET_PISA_BIG
)

86 
	#MD_CROSS_ENDIAN


	)

90 
	#NA
 0

	)

97 #unde‡
MD_QWORD_ADDRS


100 
w‹d_t
 
	tmd_addr_t
;

108 
	#MD_PAGE_SIZE
 4096

	)

109 
	#MD_LOG_PAGE_SIZE
 12

	)

116 
	emd_Áu…_ty≥
 {

117 
	mmd_Áu…_n⁄e
 = 0,

118 
	mmd_Áu…_ac˚ss
,

119 
	mmd_Áu…_Æignmít
,

120 
	mmd_Áu…_ovîÊow
,

121 
	mmd_Áu…_div0
,

122 
	mmd_Áu…_bªak
,

123 
	mmd_Áu…_unim∂
,

124 
	mmd_Áu…_öã∫Æ


133 
	#MD_NUM_IREGS
 32

	)

136 
	#MD_NUM_FREGS
 32

	)

139 
	#MD_NUM_CREGS
 3

	)

142 
	#MD_TOTAL_REGS
 \

143 –32 + 32 + 3 + 1 + 1 + 1)

	)

146 
sw‹d_t
 
	tmd_g¥_t
[
MD_NUM_IREGS
];

150 
sw‹d_t
 
	ml
[
MD_NUM_FREGS
];

151 
sÊﬂt_t
 
	mf
[
MD_NUM_FREGS
];

152 
dÊﬂt_t
 
	md
[
MD_NUM_FREGS
/2];

153 } 
	tmd_Âr_t
;

157 
sw‹d_t
 
	mhi
, 
	mlo
;

158 
	mfcc
;

159 } 
	tmd_˘æ_t
;

162 
	emd_ªg_«mes
 {

163 
	mMD_REG_ZERO
 = 0,

164 
	mMD_REG_GP
 = 28,

165 
	mMD_REG_SP
 = 29,

166 
	mMD_REG_FP
 = 30

176 
w‹d_t
 
	ma
;

177 
w‹d_t
 
	mb
;

178 } 
	tmd_ö°_t
;

181 
md_ö°_t
 
MD_NOP_INST
;

184 #ifde‡
MD_CROSS_ENDIAN


186 
	#MD_SWAPH
(
X
Ë
	`SWAP_HALF
(X)

	)

187 
	#MD_SWAPW
(
X
Ë
	`SWAP_WORD
(X)

	)

188 
	#MD_SWAPQ
(
X
Ë
	`SWAP_QWORD
(X)

	)

189 
	#MD_SWAPI
(
X
Ë((X).
a
 = 
	`SWAP_WORD
((X).a), \

190 (
X
).
b
 = 
	`SWAP_WORD
((X).b))

	)

194 
	#MD_SWAPH
(
X
Ë(X)

	)

195 
	#MD_SWAPW
(
X
Ë(X)

	)

196 
	#MD_SWAPQ
(
X
Ë(X)

	)

197 
	#MD_SWAPD
(
X
Ë(X)

	)

198 
	#MD_SWAPI
(
X
Ë(X)

	)

203 
	#MD_FETCH_INST
(
INST
, 
MEM
, 
PC
) \

204 { 
ö°
.
a
 = 
	`MEM_READ_WORD
(
mem
, (
PC
)); \

205 
ö°
.
b
 = 
	`MEM_READ_WORD
(
mem
, (
PC
Ë+ (
w‹d_t
)); }

	)

212 
	#MD_TEXT_BASE
 0x00400000

	)

213 
	#MD_DATA_BASE
 0x10000000

	)

214 
	#MD_STACK_BASE
 0x7fffc000

	)

217 
	#MD_MAX_ENVIRON
 16384

	)

225 
	#MD_OPFIELD
(
INST
Ë(INST.
a
 & 0xff)

	)

226 
	#MD_SET_OPCODE
(
OP
, 
INST
Ë((OPË((INST).
a
 & 0xff))

	)

230 
	#MD_MAX_MASK
 255

	)

233 
	emd_›code
 {

234 
	mOP_NA
 = 0,

235 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËOP,

	)

236 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
ËOP,

	)

237 
	#CONNECT
(
OP
)

	)

238 
	~"machöe.def
"

239 
	mOP_MAX


243 
	#MD_OP_ENUM
(
MSK
Ë(
md_mask2›
[MSK])

	)

244 
md_›code
 
md_mask2›
[];

247 
	#MD_OP_NAME
(
OP
Ë(
md_›2«me
[OP])

	)

248 *
md_›2«me
[];

251 
	#MD_OP_FORMAT
(
OP
Ë(
md_›2f‹m©
[OP])

	)

252 *
md_›2f‹m©
[];

255 
	emd_fu_˛ass
 {

256 
	mFUCœss_NA
 = 0,

257 
	mI¡ALU
,

258 
	mI¡MULT
,

259 
	mI¡DIV
,

260 
	mFlﬂtADD
,

261 
	mFlﬂtCMP
,

262 
	mFlﬂtCVT
,

263 
	mFlﬂtMULT
,

264 
	mFlﬂtDIV
,

265 
	mFlﬂtSQRT
,

266 
	mRdP‹t
,

267 
	mWrP‹t
,

268 
	mNUM_FU_CLASSES


272 
	#MD_OP_FUCLASS
(
OP
Ë(
md_›2fu
[OP])

	)

273 
md_fu_˛ass
 
md_›2fu
[];

276 
	#MD_FU_NAME
(
FU
Ë(
md_fu2«me
[FU])

	)

277 *
md_fu2«me
[];

280 
	#F_ICOMP
 0x00000001

	)

281 
	#F_FCOMP
 0x00000002

	)

282 
	#F_CTRL
 0x00000004

	)

283 
	#F_UNCOND
 0x00000008

	)

284 
	#F_COND
 0x00000010

	)

285 
	#F_MEM
 0x00000020

	)

286 
	#F_LOAD
 0x00000040

	)

287 
	#F_STORE
 0x00000080

	)

288 
	#F_DISP
 0x00000100

	)

289 
	#F_RR
 0x00000200

	)

290 
	#F_DIRECT
 0x00000400

	)

291 
	#F_TRAP
 0x00000800

	)

292 
	#F_LONGLAT
 0x00001000

	)

293 
	#F_DIRJMP
 0x00002000

	)

294 
	#F_INDIRJMP
 0x00004000

	)

295 
	#F_CALL
 0x00008000

	)

296 
	#F_FPCOND
 0x00010000

	)

297 
	#F_IMM
 0x00020000

	)

300 
	#MD_OP_FLAGS
(
OP
Ë(
md_›2Êags
[OP])

	)

301 
md_›2Êags
[];

304 #unde‡
RS


305 
	#RS
 (
ö°
.
b
 >> 24Ë

	)

306 
	#RT
 ((
ö°
.
b
 >> 16Ë& 0xffË

	)

307 
	#RD
 ((
ö°
.
b
 >> 8Ë& 0xffË

	)

310 
	#SHAMT
 (
ö°
.
b
 & 0xff)

	)

313 
	#FS
 
RS


	)

314 
	#FT
 
RT


	)

315 
	#FD
 
RD


	)

318 
	#IMM
 (()(–)(
ö°
.
b
 & 0xffff)))

	)

321 
	#UIMM
 (
ö°
.
b
 & 0xffff)

	)

324 
	#TARG
 (
ö°
.
b
 & 0x3ffffff)

	)

327 
	#BCODE
 (
ö°
.
b
 & 0xfffff)

	)

330 
	#OFS
 
IMM


	)

333 
	#BS
 
RS


	)

336 
	#MAXINT_VAL
 0x7fffffff

	)

339 
	#OVER
(
X
,
Y
) \

340 ((((
X
Ë> 0Ë&& ((
Y
Ë> 0Ë&& (
MAXINT_VAL
 - (X) < (Y))) \

341 || (((
X
Ë< 0Ë&& ((
Y
Ë< 0Ë&& (-
MAXINT_VAL
 - (XË> (Y))))

	)

344 
	#UNDER
(
X
,
Y
) \

345 ((((
X
Ë> 0Ë&& ((
Y
Ë< 0Ë&& (
MAXINT_VAL
 + (Y) < (X))) \

346 || (((
X
Ë< 0Ë&& ((
Y
Ë> 0Ë&& (-
MAXINT_VAL
 + (YË> (X))))

	)

349 #i‚de‡
SET_TPC


350 
	#SET_TPC
(
PC
Ë()0

	)

353 #ifde‡
BYTES_BIG_ENDIAN


355 
	#WL_SIZE
(
ADDR
Ë((ADDRË& 0x03)

	)

356 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

357 
	#WL_PROT_MASK
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

358 
	#WL_PROT_MASK1
(
ADDR
Ë(
md_Ã_masks
[
	`WL_SIZE
(ADDR)])

	)

359 
	#WL_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

362 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

363 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

364 
	#WR_PROT_MASK
(
ADDR
Ë(~(
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

365 
	#WR_PROT_MASK1
(
ADDR
Ë((
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

366 
	#WR_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WR_SIZE
(ADDR)])

	)

369 
	#WL_SIZE
(
ADDR
Ë(4-((ADDRË& 0x03))

	)

370 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

371 
	#WL_PROT_MASK
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

372 
	#WL_PROT_MASK1
(
ADDR
Ë(
md_Ã_masks
[
	`WL_SIZE
(ADDR)])

	)

373 
	#WL_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

376 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

377 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

378 
	#WR_PROT_MASK
(
ADDR
Ë(~(
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

379 
	#WR_PROT_MASK1
(
ADDR
Ë((
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

380 
	#WR_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WR_SIZE
(ADDR)])

	)

384 
w‹d_t
 
md_Ã_masks
[];

388 
	#WL_SIZE
(
ADDR
Ë(4-((ADDRË& 0x03))

	)

389 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

390 
	#WL_PROT_MASK
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

393 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

394 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

395 
	#WR_PROT_MASK
(
ADDR
Ë(~(
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

398 
	#WL_SIZE
(
ADDR
Ë((ADDRË& 0x03)

	)

399 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

400 
	#WL_PROT_MASK1
(
ADDR
Ë(
md_Ã_masks
[
	`WL_SIZE
(ADDR)])

	)

401 
	#WL_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

404 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

405 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

406 
	#WR_PROT_MASK1
(
ADDR
Ë((
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

407 
	#WR_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WR_SIZE
(ADDR)])

	)

416 
	#SS_SYS_exô
 1

	)

417 
	#MD_EXIT_SYSCALL
(
REGS
Ë((REGS)->
ªgs_R
[2] =
SS_SYS_exô
)

	)

420 
	#SS_SYS_wrôe
 4

	)

421 
	#MD_OUTPUT_SYSCALL
(
REGS
) \

422 ((
REGS
)->
ªgs_R
[2] =
SS_SYS_wrôe
 \

423 && ((
REGS
)->
ªgs_R
[4] == 1 \

424 || (
REGS
)->
ªgs_R
[4] = 2))

	)

427 
	#MD_STREAM_FILENO
(
REGS
Ë((REGS)->
ªgs_R
[4])

	)

430 
	#MD_IS_CALL
(
OP
) \

431 ((
	`MD_OP_FLAGS
(
OP
Ë& (
F_CTRL
|
F_CALL
)Ë=(F_CTRL|F_CALL))

	)

434 
	#MD_IS_RETURN
(
OP
Ë((OPË=
JR
 && (
RS
Ë=31)

	)

437 
	#MD_IS_INDIR
(
OP
Ë((OPË=
JR
)

	)

440 
	emd_amode_ty≥
 {

441 
	mmd_amode_imm
,

442 
	mmd_amode_gp
,

443 
	mmd_amode_•
,

444 
	mmd_amode_Â
,

445 
	mmd_amode_di•
,

446 
	mmd_amode_º
,

447 
	mmd_amode_NUM


449 *
md_amode_°r
[
md_amode_NUM
];

452 
	#MD_AMODE_PREPROBE
(
OP
, 
FSM
) \

453 { i‡((
OP
Ë=
LUI
Ë(
FSM
Ë(
RT
); }

	)

456 
	#MD_AMODE_PROBE
(
AM
, 
OP
, 
FSM
) \

458 i‡(
	`MD_OP_FLAGS
(
OP
Ë& 
F_DISP
) \

460 i‡((
BS
Ë=(
FSM
)) \

461 (
AM
Ë
md_amode_imm
; \

462 i‡((
BS
Ë=
MD_REG_GP
) \

463 (
AM
Ë
md_amode_gp
; \

464 i‡((
BS
Ë=
MD_REG_SP
) \

465 (
AM
Ë
md_amode_•
; \

466 i‡((
BS
Ë=
MD_REG_FP
) \

467 (
AM
Ë
md_amode_Â
; \

469 (
AM
Ë
md_amode_di•
; \

471 i‡(
	`MD_OP_FLAGS
(
OP
Ë& 
F_RR
) \

472 (
AM
Ë
md_amode_º
; \

474 
	`∑nic
("cannot decodeáddressing mode"); \

475 }

	)

478 
	#MD_AMODE_POSTPROBE
(
FSM
) \

479 { (
FSM
Ë
MD_REG_ZERO
; }

	)

487 
	#MD_EIO_FILE_FORMAT
 
EIO_PISA_FORMAT


	)

489 
	#MD_MISC_REGS_TO_EXO
(
REGS
) \

490 
	`exo_√w
(
ec_li°
, \

491  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
sim_num_ö¢
), \

492  
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_PC
), \

493  
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_NPC
), \

494  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)(
REGS
)->
ªgs_C
.
hi
), \

495  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)(
REGS
)->
ªgs_C
.
lo
), \

496  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)(
REGS
)->
ªgs_C
.
fcc
),\

497 
NULL
)

	)

499 
	#MD_IREG_TO_EXO
(
REGS
, 
IDX
) \

500 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_R
[
IDX
])

	)

502 
	#MD_FREG_TO_EXO
(
REGS
, 
IDX
) \

503 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_F
.
l
[
IDX
])

	)

505 
	#MD_EXO_TO_MISC_REGS
(
EXO
, 
ICNT
, 
REGS
) \

507 i‡(!
exo
 \

508 || 
exo
->
ec
 !
ec_li°
 \

509 || !
exo
->
as_li°
.
hód
 \

510 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_öãgî
 \

511 || !
exo
->
as_li°
.
hód
->
√xt
 \

512 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_addªss
 \

513 || !
exo
->
as_li°
.
hód
->
√xt
->next \

514 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->
ec
 !
ec_addªss
 \

515 || !
exo
->
as_li°
.
hód
->
√xt
->next->next \

516 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->
ec
 !
ec_öãgî
 \

517 || !
exo
->
as_li°
.
hód
->
√xt
->next->next->next \

518 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->
ec
 !
ec_öãgî
 \

519 || !
exo
->
as_li°
.
hód
->
√xt
->next->next->next->next \

520 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->√xt->
ec
 !
ec_öãgî
\

521 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->√xt->√xà!
NULL
) \

522 
	`Áèl
("couldÇotÑead EIO miscÑegs"); \

523 (
ICNT
Ë(
cou¡î_t
)
exo
->
as_li°
.
hód
->
as_öãgî
.
vÆ
; \

524 (
REGS
)->
ªgs_PC
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
√xt
->
as_addªss
.
vÆ
; \

525 (
REGS
)->
ªgs_NPC
 = \

526 (
md_addr_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->
as_addªss
.
vÆ
; \

527 (
REGS
)->
ªgs_C
.
hi
 = \

528 (
w‹d_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->
as_öãgî
.
vÆ
; \

529 (
REGS
)->
ªgs_C
.
lo
 = \

530 (
w‹d_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->
as_öãgî
.
vÆ
; \

531 (
REGS
)->
ªgs_C
.
fcc
 = \

532 ()
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->√xt->
as_öãgî
.
vÆ
;

	)

534 
	#MD_EXO_TO_IREG
(
EXO
, 
REGS
, 
IDX
) \

535 ((
REGS
)->
ªgs_R
[
IDX
] = (
w‹d_t
)(
EXO
)->
as_öãgî
.
vÆ
)

	)

537 
	#MD_EXO_TO_FREG
(
EXO
, 
REGS
, 
IDX
) \

538 ((
REGS
)->
ªgs_F
.
l
[
IDX
] = (
w‹d_t
)(
EXO
)->
as_öãgî
.
vÆ
)

	)

540 
	#MD_EXO_CMP_IREG
(
EXO
, 
REGS
, 
IDX
) \

541 ((
REGS
)->
ªgs_R
[
IDX
] !(
sw‹d_t
)(
EXO
)->
as_öãgî
.
vÆ
)

	)

543 
	#MD_FIRST_IN_REG
 2

	)

544 
	#MD_LAST_IN_REG
 7

	)

546 
	#MD_FIRST_OUT_REG
 2

	)

547 
	#MD_LAST_OUT_REG
 7

	)

555 
qw‹d_t
 
	texo_addªss_t
;

558 
qw‹d_t
 
	texo_öãgî_t
;

561 
	texo_Êﬂt_t
;

569 #ifde‡
HOST_HAS_QWORD


570 
	#°©_ªg_cou¡î
 
°©_ªg_sqw‹d


	)

571 
	#sc_cou¡î
 
sc_sqw‹d


	)

572 
	#f‹_cou¡î
 
f‹_sqw‹d


	)

574 
	#°©_ªg_cou¡î
 
°©_ªg_doubÀ


	)

575 
	#sc_cou¡î
 
sc_doubÀ


	)

576 
	#f‹_cou¡î
 
f‹_doubÀ


	)

580 
	#°©_ªg_addr
 
°©_ªg_uöt


	)

588 
	emd_ªg_ty≥
 {

589 
	mπ_g¥
,

590 
	mπ_Õr
,

591 
	mπ_Âr
,

592 
	mπ_d¥
,

593 
	mπ_˘æ
,

594 
	mπ_PC
,

595 
	mπ_NPC
,

596 
	mπ_NUM


600 
	smd_ªg_«mes_t
 {

601 *
	m°r
;

602 
md_ªg_ty≥
 
	mfûe
;

603 
	mªg
;

607 
md_ªg_«mes_t
 
md_ªg_«mes
[];

610 *
md_ªg_«me
(
md_ªg_ty≥
 
π
, 
ªg
);

613 
	gevÆ_vÆue_t
;

614 
	gªgs_t
;

616 
md_ªg_obj
(
ªgs_t
 *
ªgs
,

617 
is_wrôe
,

618 
md_ªg_ty≥
 
π
,

619 
ªg
,

620 
evÆ_vÆue_t
 *
vÆ
);

623 
md_¥öt_úeg
(
md_g¥_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
);

624 
md_¥öt_úegs
(
md_g¥_t
 
ªgs
, 
FILE
 *
°ªam
);

627 
md_¥öt_Âªg
(
md_Âr_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
);

628 
md_¥öt_Âªgs
(
md_Âr_t
 
ªgs
, 
FILE
 *
°ªam
);

631 
md_¥öt_¸eg
(
md_˘æ_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
);

632 
md_¥öt_¸egs
(
md_˘æ_t
 
ªgs
, 
FILE
 *
°ªam
);

635 
w‹d_t
 
md_¸c_ªgs
(
ªgs_t
 *
ªgs
);

638 
w‹d_t
 
md_x‹_ªgs
(
ªgs_t
 *
ªgs
);

646 
	#MD_AGEN_OP
 
ADD


	)

649 
	#MD_NOP_OP
 
NOP


	)

653 
	#MD_VALID_ADDR
(
ADDR
) \

654 (((
ADDR
Ë>
ld_ãxt_ba£
 && (ADDRË< (ld_ãxt_ba£ + 
ld_ãxt_size
)) \

655 || ((
ADDR
Ë>
ld_d©a_ba£
 && (ADDRË< 
ld_°ack_ba£
))

	)

664 
	#MD_BR_SHIFT
 3

	)

672 
md_öô_decodî
();

676 
md_¥öt_ö¢
(
md_ö°_t
 
ö°
,

677 
md_addr_t
 
pc
,

678 
FILE
 *
°ªam
);

701 
	#SS_PAGE_SIZE
 4096

	)

704 
	#SS_NUM_REGS
 32

	)

707 
	#SS_TOTAL_REGS
 \

708 (
SS_NUM_REGS
+SS_NUM_REGS+ 1+ 1+ 1+ 1+ \

709  1+ 1)

	)

712 
	#SS_COMP_OP
 ((
ö°
.
a
 & 0xff00Ë>> 8)

	)

715 
	#SS_COMP_NOP
 0x00

	)

716 
	#SS_COMP_POST_INC
 0x01

	)

717 
	#SS_COMP_POST_DEC
 0x02

	)

718 
	#SS_COMP_PRE_INC
 0x03

	)

719 
	#SS_COMP_PRE_DEC
 0x04

	)

720 
	#SS_COMP_POST_DBL_INC
 0x05

	)

721 
	#SS_COMP_POST_DBL_DEC
 0x06

	)

722 
	#SS_COMP_PRE_DBL_INC
 0x07

	)

723 
	#SS_COMP_PRE_DBL_DEC
 0x08

	)

730 
	#INC_DEC
(
EXPR
, 
REG
, 
SIZE
) \

731 (
	`SET_GPR
((
REG
), 
	`GPR
(REGË+ 
ss_f‹e_èb
[(
SIZE
)-1][
SS_COMP_OP
]), \

732 (
EXPR
), \

733 
	`SET_GPR
((
REG
), 
	`GPR
(REGË+ 
ss_a·_èb
[(
SIZE
)-1][
SS_COMP_OP
]))

	)

736 
ss_f‹e_èb
[8][5];

737 
ss_a·_èb
[8][5];

740 
	#Rgp
 28

	)

741 
	#R•
 29

	)

742 
	#RÂ
 30

	)

745 
SS_ADDR_TYPE
 
ss_Ã_ãmp
;

748 
SS_ADDR_TYPE
 
ãmp_bs
, 
ãmp_rd
;

754 #i‚de‡
IFAIL


755 
	#IFAIL
(
S
Ë
	`Áèl
(S)

	)

759 
	#DIV0
(
N
Ë(((NË=0Ë? 
	`IFAIL
("dividêby 0"Ë: ()0)

	)

762 
	#INTALIGN
(
N
) (((N) & 01) \

763 ? 
	`IFAIL
("bad INTÑegi°îálignmít"Ë: ()0)

	)

766 
	#FPALIGN
(
N
) (((N) & 01) \

767 ? 
	`IFAIL
("bad FPÑegi°îálignmít"Ë: ()0)

	)

770 
	#TALIGN
(
TARG
) (((TARG) & 0x7) \

771 ? 
	`IFAIL
("bad jum∞Æignmít"Ë: ()0)

	)

773 
	#OVER
(
X
,
Y
Ë(()0)

	)

774 
	#UNDER
(
X
,
Y
Ë(()0)

	)

775 
	#DIV0
(
N
Ë(()0)

	)

776 
	#INTALIGN
(
N
Ë(()0)

	)

777 
	#FPALIGN
(
N
Ë(()0)

	)

778 
	#TALIGN
(
TARG
Ë(()0)

	)

783 
	#IDIV
(
A
, 
B
Ë((AË/ (B))

	)

784 
	#IMOD
(
A
, 
B
Ë((AË% (B))

	)

785 
	#FDIV
(
A
, 
B
Ë((AË/ (B))

	)

786 
	#FINT
(
A
Ë(()A)

	)

	@main.c

65 
	~<°dio.h
>

66 
	~<°dlib.h
>

67 
	~<°rög.h
>

68 
	~<time.h
>

69 
	~<£tjmp.h
>

70 
	~<sig«l.h
>

71 
	~<sys/ty≥s.h
>

72 #i‚de‡
_MSC_VER


73 
	~<uni°d.h
>

74 
	~<sys/time.h
>

76 #ifde‡
BFD_LOADER


77 
	~<bfd.h
>

80 
	~"ho°.h
"

81 
	~"misc.h
"

82 
	~"machöe.h
"

83 
	~"ídün.h
"

84 
	~"vîsi⁄.h
"

85 
	~"dlôe.h
"

86 
	~"›ti⁄s.h
"

87 
	~"°©s.h
"

88 
	~"lﬂdî.h
"

89 
	~"sim.h
"

90 
	~"symbﬁ.h
"

92 
	~"sh¨edbus.h
"

95 #ifde‡
_DEBUG


96 
FILE
* 
	giÂ
 = 
NULL
;

99 
sched_p
 
	gglobÆ_sched_d©a
 = 
NULL
;

100 
uŒ
 
	gtŸÆ_bus_dñay
 = 0;

101 * 
	gtdma_sched_fûíame
 = "TDMA_bus_sched.db";

103 
	gef„˘_cy˛es
 = 0;

104 
	gef„˘_b¥ed_cou¡
 = 0;

105 
	gef„˘_b¥ed_mis£s
 = 0;

106 
	gef„˘_iˇche_mis£s
 = 0;

107 
md_addr_t
 
	g°¨t_addr
, 
	gíd_addr
;

108 *
	gö°_˙ts
;

112 
	$sig«l_sim_°©s
(
sigty≥
)

114 
sim_dump_°©s
 = 
TRUE
;

115 
	}
}

119 
	$sig«l_exô_now
(
sigty≥
)

121 
sim_exô_now
 = 
TRUE
;

122 
	}
}

125 
cou¡î_t
 
	gsim_num_ö¢
 = 0;

129 
	gsim_mem_ußge
 = 0;

133 
time_t
 
	gsim_°¨t_time
;

134 
time_t
 
	gsim_íd_time
;

135 
	gsim_ñ≠£d_time
;

138 
	gsim_sw≠_byãs
;

139 
	gsim_sw≠_w‹ds
;

142 
	gsim_exô_now
 = 
FALSE
;

145 
jmp_buf
 
	gsim_exô_buf
;

148 
	gsim_dump_°©s
 = 
FALSE
;

151 
›t_odb_t
 *
	gsim_odb
;

154 
°©_sdb_t
 *
	gsim_sdb
;

157 *
	gsim_eio_‚ame
 = 
NULL
;

158 *
	gsim_chk±_‚ame
 = 
NULL
;

159 
FILE
 *
	gsim_eio_fd
 = 
NULL
;

162 *
	gsim_simout
 = 
NULL
;

163 *
	gsim_¥ogout
 = 
NULL
;

164 
FILE
 *
	gsim_¥ogfd
 = 
NULL
;

167 
	gexec_ödex
 = -1;

170 
	ghñp_me
;

173 
	gønd_£ed
;

176 
	göô_quô
;

178 #i‚de‡
_MSC_VER


180 
	gni˚_¥i‹ôy
;

184 
	#NICE_DEFAULT_VALUE
 0

	)

187 
	$‹ph™_‚
(
i
, 
¨gc
, **
¨gv
)

189 
exec_ödex
 = 
i
;

190  
FALSE
;

191 
	}
}

194 
	$b™√r
(
FILE
 *
fd
, 
¨gc
, **
¨gv
)

196 *
s
;

198 
	`Ârötf
(
fd
,

206 ((
s
 = 
	`°ºchr
(
¨gv
[0], '/')) ? s+1 :árgv[0]),

207 
VER_TARGET
, 
VER_MAJOR
, 
VER_MINOR
, 
VER_UPDATE
);

208 
	}
}

211 
	$ußge
(
FILE
 *
fd
, 
¨gc
, **
¨gv
)

213 
	`Ârötf
(
fd
, "Ußge: %†{-›ti⁄s}ÉxecuèbÀ {¨gumíts}\n", 
¨gv
[0]);

214 
	`›t_¥öt_hñp
(
sim_odb
, 
fd
);

215 
	}
}

217 
	gru¬ög
 = 
FALSE
;

221 
	$sim_¥öt_°©s
(
FILE
 *
fd
)

224 
ëext
, *
	`sbrk
();

227 i‡(!
ru¬ög
)

231 
sim_íd_time
 = 
	`time
((
time_t
 *)
NULL
);

232 
sim_ñ≠£d_time
 = 
	`MAX
(
sim_íd_time
 - 
sim_°¨t_time
, 1);

236 
sim_mem_ußge
 = (
	`sbrk
(0Ë- &
ëext
) / 1024;

240 
	`Ârötf
(
fd
, "\nsim: ** simulation statistics **\n");

241 
	`°©_¥öt_°©s
(
sim_sdb
, 
fd
);

242 
	`sim_aux_°©s
(
fd
);

243 
	`Ârötf
(
fd
, "\n");

244 
	}
}

248 
	$exô_now
(
exô_code
)

250 
b™√r_°r
[64];

251 
addr_°r
[64];

252 
b¥ed_cou¡_°r
[64];

253 
cy˛es_°r
[64];

254 
b¥ed_miss_°r
[64];

255 
iˇche_°r
[64];

256 
busdñay_°r
[64];

257 
simbuscy˛e_°r
[64];

260 
	`sim_¥öt_°©s
(
°dîr
);

263 
	`sim_unöô
();

269 
	`•rötf
(
b™√r_°r
, "+--------------------------------------------------------------+");

270 
	`•rötf
(
addr_°r
, "%-30s[%x, %x]", "ef„˘ivêcodêønge:", 
°¨t_addr
, 
íd_addr
 - (
md_ö°_t
));

271 
	`•rötf
(
b¥ed_cou¡_°r
, "%-30s%d", "ef„˘ivêb¥ed cou¡:", 
ef„˘_b¥ed_cou¡
);

272 
	`•rötf
(
cy˛es_°r
, "%-30s%d", "ef„˘ivêsim cy˛es:", 
ef„˘_cy˛es
);

273 
	`•rötf
(
b¥ed_miss_°r
, "%-30s%d", "ef„˘ivêb¥ed mis£s:", 
ef„˘_b¥ed_mis£s
);

274 
	`•rötf
(
iˇche_°r
, "%-30s%d", "ef„˘ivêiˇchêmis£s:", 
ef„˘_iˇche_mis£s
);

276 
	`•rötf
(
busdñay_°r
, "%-30s%d", "tŸÆ bu†ac˚s†dñay:", 
tŸÆ_bus_dñay
);

277 
	`•rötf
(
simbuscy˛e_°r
, "%-30s%d", "sim cy˛e†wôh sh¨ed bus:", 
ef„˘_cy˛es
 + 
tŸÆ_bus_dñay
);

279 
	`¥ötf
("%s\n", 
b™√r_°r
);

280 
	`¥ötf
("| %-60†|\n", 
addr_°r
);

281 
	`¥ötf
("| %-60†|\n", 
b¥ed_cou¡_°r
);

282 
	`¥ötf
("| %-60†|\n", 
cy˛es_°r
);

283 
	`¥ötf
("| %-60†|\n", 
b¥ed_miss_°r
);

284 
	`¥ötf
("| %-60†|\n", 
iˇche_°r
);

285 
	`¥ötf
("| %-60†|\n", 
busdñay_°r
);

286 
	`¥ötf
("| %-60†|\n", 
simbuscy˛e_°r
);

287 
	`¥ötf
("%s\n\n", 
b™√r_°r
);

291 
	`exô
(
exô_code
);

292 
	}
}

295 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

297 *
s
;

298 
i
, 
exô_code
;

300 #i‚de‡
_MSC_VER


302 
	`sig«l
(
SIGUSR1
, 
sig«l_sim_°©s
);

305 
	`sig«l
(
SIGUSR2
, 
sig«l_exô_now
);

309 
	`Áèl_hook
(
sim_¥öt_°©s
);

312 i‡((
exô_code
 = 
	`£tjmp
(
sim_exô_buf
)) != 0)

315 
	`exô_now
(
exô_code
-1);

319 
sim_odb
 = 
	`›t_√w
(
‹ph™_‚
);

320 
	`›t_ªg_Êag
(
sim_odb
, "-h", "print help message",

321 &
hñp_me
, 
FALSE
, FALSE, 
NULL
);

322 
	`›t_ªg_Êag
(
sim_odb
, "-v", "verbose operation",

323 &
vîbo£
, 
FALSE
, FALSE, 
NULL
);

324 #ifde‡
DEBUG


325 
	`›t_ªg_Êag
(
sim_odb
, "-d", "enable debug message",

326 &
debuggög
, 
FALSE
, FALSE, 
NULL
);

328 
	`›t_ªg_Êag
(
sim_odb
, "-i", "start in Dlite debugger",

329 &
dlôe_a˘ive
, 
FALSE
, FALSE, 
NULL
);

330 
	`›t_ªg_öt
(
sim_odb
, "-seed",

332 &
ønd_£ed
, 1, 
TRUE
, 
NULL
);

333 
	`›t_ªg_Êag
(
sim_odb
, "-q", "initializeándÅerminate immediately",

334 &
öô_quô
, 
FALSE
, FALSE, 
NULL
);

335 
	`›t_ªg_°rög
(
sim_odb
, "-chkpt", "restore EIOÅraceÉxecution from <fname>",

336 &
sim_chk±_‚ame
, 
NULL
, 
FALSE
, NULL);

339 
	`›t_ªg_°rög
(
sim_odb
, "-redir:sim",

341 &
sim_simout
,

342  
NULL
, 
FALSE
, NULL);

343 
	`›t_ªg_°rög
(
sim_odb
, "-redir:prog",

345 &
sim_¥ogout
, 
NULL
, 
FALSE
, NULL);

347 #i‚de‡
_MSC_VER


349 
	`›t_ªg_öt
(
sim_odb
, "-nice",

350 "simuœt‹ schedulögÖri‹ôy", &
ni˚_¥i‹ôy
,

351  
NICE_DEFAULT_VALUE
, 
TRUE
, 
NULL
);

357 
	`sim_ªg_›ti⁄s
(
sim_odb
);

360 
exec_ödex
 = -1;

361 
	`›t_¥o˚ss_›ti⁄s
(
sim_odb
, 
¨gc
, 
¨gv
);

364 i‡(
sim_simout
 !
NULL
)

367 
	`fÊush
(
°dîr
);

368 i‡(!
	`‰e›í
(
sim_simout
, "w", 
°dîr
))

369 
	`Áèl
("u«bÀÅÿªdúe˘ simuœt‹ ouçuàtÿfûê`%s'", 
sim_simout
);

372 i‡(
sim_¥ogout
 !
NULL
)

375 
sim_¥ogfd
 = 
	`f›í
(
sim_¥ogout
, "w");

376 i‡(!
sim_¥ogfd
)

377 
	`Áèl
("u«bÀÅÿªdúe˘Örogøm ouçuàtÿfûê`%s'", 
sim_¥ogout
);

381 i‡(
¨gc
 < 2)

383 
	`b™√r
(
°dîr
, 
¨gc
, 
¨gv
);

384 
	`ußge
(
°dîr
, 
¨gc
, 
¨gv
);

385 
	`exô
(1);

389 
	`b™√r
(
°dîr
, 
¨gc
, 
¨gv
);

391 i‡(
hñp_me
)

394 
	`ußge
(
°dîr
, 
¨gc
, 
¨gv
);

395 
	`exô
(1);

399 i‡(
ønd_£ed
 == 0)

402 
	`my§™d
(
	`time
((
time_t
 *)
NULL
));

407 
	`my§™d
(
ønd_£ed
);

411 i‡(
exec_ödex
 == -1)

414 
	`Ârötf
(
°dîr
, "error:ÇoÉxecutable specified\n");

415 
	`ußge
(
°dîr
, 
¨gc
, 
¨gv
);

416 
	`exô
(1);

421 
	`sim_check_›ti⁄s
(
sim_odb
, 
¨gc
, 
¨gv
);

423 #i‚de‡
_MSC_VER


425 i‡(
	`ni˚
(0Ë< 
ni˚_¥i‹ôy
)

427 i‡(
	`ni˚
(
ni˚_¥i‹ôy
 -Çice(0)) < 0)

428 
	`Áèl
("couldÇotÑenice simulatorÖrocess");

433 
sim_num_ö¢
 = 0;

435 #ifde‡
BFD_LOADER


437 
	`bfd_öô
();

441 
	`md_öô_decodî
();

444 
	`sim_öô
();

447 
	`sim_lﬂd_¥og
(
¨gv
[
exec_ödex
], 
¨gc
-exec_ödex,árgv+exec_ödex, 
ívp
);

450 
sim_sdb
 = 
	`°©_√w
();

451 
	`sim_ªg_°©s
(
sim_sdb
);

453 
	`°©_ªg_uöt
(
sim_sdb
, "sim_mem_usage",

455 &
sim_mem_ußge
, sim_mem_usage, "%11dk");

459 
sim_°¨t_time
 = 
	`time
((
time_t
 *)
NULL
);

462 
	`Ârötf
(
°dîr
, "sim: commandÜine: ");

463 
i
=0; i < 
¨gc
; i++)

464 
	`Ârötf
(
°dîr
, "%†", 
¨gv
[
i
]);

465 
	`Ârötf
(
°dîr
, "\n");

468 
s
 = 
	`˘ime
(&
sim_°¨t_time
);

469 i‡(
s
[
	`°æí
(s)-1] == '\n')

470 
s
[
	`°æí
(s)-1] = '\0';

471 
	`Ârötf
(
°dîr
, "\nsim: simuœti⁄ sèπed @ %s, o±i⁄†fﬁlow:\n", 
s
);

472 
	`›t_¥öt_›ti⁄s
(
sim_odb
, 
°dîr
, 
TRUE
, TRUE);

473 
	`sim_aux_c⁄fig
(
°dîr
);

474 
	`Ârötf
(
°dîr
, "\n");

477 
sim_°¨t_time
 = 
	`time
((
time_t
 *)
NULL
);

479 i‡(
öô_quô
)

480 
	`exô_now
(0);

482 
ru¬ög
 = 
TRUE
;

483 
	`sim_maö
();

486 #ifde‡
_DEBUG


487 
	`f˛o£
(
iÂ
);

491 
	`exô_now
(0);

494 
	}
}

	@memory.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"›ti⁄s.h
"

59 
	~"°©s.h
"

60 
	~"mem‹y.h
"

64 
mem_t
 *

65 
	$mem_¸óã
(*
«me
)

67 
mem_t
 *
mem
;

69 
mem
 = 
	`ˇŒoc
(1, (
mem_t
));

70 i‡(!
mem
)

71 
	`Áèl
("out of virtual memory");

73 
mem
->
«me
 = 
	`my°rdup
(name);

74  
mem
;

75 
	}
}

78 
byã_t
 *

79 
	$mem_å™¶©e
(
mem_t
 *
mem
,

80 
md_addr_t
 
addr
)

82 
mem_±e_t
 *
±e
, *
¥ev
;

85 
mem
->
±ab_mis£s
++; mem->
±ab_ac˚s£s
++;

88 
¥ev
=
NULL
, 
±e
=
mem
->
±ab
[
	`MEM_PTAB_SET
(
addr
)];

89 
±e
 !
NULL
;

90 
¥ev
=
±e
,Öãıã->
√xt
)

92 i‡(
±e
->
èg
 =
	`MEM_PTAB_TAG
(
addr
))

95 i‡(
¥ev
)

97 
¥ev
->
√xt
 = 
±e
->next;

98 
±e
->
√xt
 = 
mem
->
±ab
[
	`MEM_PTAB_SET
(
addr
)];

99 
mem
->
±ab
[
	`MEM_PTAB_SET
(
addr
)] = 
±e
;

101  
±e
->
∑ge
;

106  
NULL
;

107 
	}
}

111 
	$mem_√w∑ge
(
mem_t
 *
mem
,

112 
md_addr_t
 
addr
)

114 
byã_t
 *
∑ge
;

115 
mem_±e_t
 *
±e
;

118 
∑ge
 = 
	`gëc‹e
(
MD_PAGE_SIZE
);

119 i‡(!
∑ge
)

120 
	`Áèl
("out of virtual memory");

123 
±e
 = 
	`ˇŒoc
(1, (
mem_±e_t
));

124 i‡(!
±e
)

125 
	`Áèl
("out of virtual memory");

126 
±e
->
èg
 = 
	`MEM_PTAB_TAG
(
addr
);

127 
±e
->
∑ge
 =Öage;

130 
±e
->
√xt
 = 
mem
->
±ab
[
	`MEM_PTAB_SET
(
addr
)];

131 
mem
->
±ab
[
	`MEM_PTAB_SET
(
addr
)] = 
±e
;

134 
mem
->
∑ge_cou¡
++;

135 
	}
}

140 
md_Áu…_ty≥


141 
	$mem_ac˚ss
(
mem_t
 *
mem
,

142 
mem_cmd
 
cmd
,

143 
md_addr_t
 
addr
,

144 *
vp
,

145 
nbyãs
)

147 
byã_t
 *
p
 = 
vp
;

150 i‡–(
nbyãs
 & (nbytes-1)) != 0

151 || 
nbyãs
 > 
MD_PAGE_SIZE
)

152  
md_Áu…_ac˚ss
;

154 i‡–(
addr
 & (
nbyãs
-1)) != 0)

155  
md_Áu…_Æignmít
;

159 i‡(
cmd
 =
Ród
)

161 
nbyãs
-- > 0)

163 *((
byã_t
 *)
p
Ë
	`MEM_READ_BYTE
(
mem
, 
addr
);

164 
p
 +(
byã_t
);

165 
addr
 +(
byã_t
);

170 
nbyãs
-- > 0)

172 
	`MEM_WRITE_BYTE
(
mem
, 
addr
, *((
byã_t
 *)
p
));

173 
p
 +(
byã_t
);

174 
addr
 +(
byã_t
);

180 
nbyãs
)

183 i‡(
cmd
 =
Ród
)

184 *((
byã_t
 *)
p
Ë
	`MEM_READ_BYTE
(
mem
, 
addr
);

186 
	`MEM_WRITE_BYTE
(
mem
, 
addr
, *((
byã_t
 *)
p
));

190 i‡(
cmd
 =
Ród
)

191 *((
hÆf_t
 *)
p
Ë
	`MEM_READ_HALF
(
mem
, 
addr
);

193 
	`MEM_WRITE_HALF
(
mem
, 
addr
, *((
hÆf_t
 *)
p
));

197 i‡(
cmd
 =
Ród
)

198 *((
w‹d_t
 *)
p
Ë
	`MEM_READ_WORD
(
mem
, 
addr
);

200 
	`MEM_WRITE_WORD
(
mem
, 
addr
, *((
w‹d_t
 *)
p
));

203 #ifde‡
HOST_HAS_QWORD


205 i‡(
cmd
 =
Ród
)

206 *((
qw‹d_t
 *)
p
Ë
	`MEM_READ_QWORD
(
mem
, 
addr
);

208 
	`MEM_WRITE_QWORD
(
mem
, 
addr
, *((
qw‹d_t
 *)
p
));

218  
md_Áu…_n⁄e
;

219 
	}
}

223 
	$mem_ªg_°©s
(
mem_t
 *
mem
,

224 
°©_sdb_t
 *
sdb
)

226 
buf
[512], 
buf1
[512];

228 
	`•rötf
(
buf
, "%s.∑ge_cou¡", 
mem
->
«me
);

229 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÇumber ofÖagesállocated",

230 &
mem
->
∑ge_cou¡
, mem->∑ge_cou¡, 
NULL
);

232 
	`•rötf
(
buf
, "%s.∑ge_mem", 
mem
->
«me
);

233 
	`•rötf
(
buf1
, "%s.∑ge_cou¡ * %d / 1024", 
mem
->
«me
, 
MD_PAGE_SIZE
);

234 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "total size of memoryÖagesállocated",

235 
buf1
, "%11.0fk");

237 
	`•rötf
(
buf
, "%s.±ab_mis£s", 
mem
->
«me
);

238 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "total firstÜevelÖageÅable misses",

239 &
mem
->
±ab_mis£s
, mem->±ab_mis£s, 
NULL
);

241 
	`•rötf
(
buf
, "%s.±ab_ac˚s£s", 
mem
->
«me
);

242 
	`°©_ªg_cou¡î
(
sdb
, 
buf
, "totalÖageÅableáccesses",

243 &
mem
->
±ab_ac˚s£s
, mem->±ab_ac˚s£s, 
NULL
);

245 
	`•rötf
(
buf
, "%s.±ab_miss_øã", 
mem
->
«me
);

246 
	`•rötf
(
buf1
, "%s.±ab_mis£†/ %s.±ab_ac˚s£s", 
mem
->
«me
, mem->name);

247 
	`°©_ªg_f‹muœ
(
sdb
, 
buf
, "fú°ÜevñÖagêèbÀ mis†øã", 
buf1
, 
NULL
);

248 
	}
}

252 
	$mem_öô
(
mem_t
 *
mem
)

254 
i
;

257 
i
=0; i < 
MEM_PTAB_SIZE
; i++)

258 
mem
->
±ab
[
i
] = 
NULL
;

260 
mem
->
∑ge_cou¡
 = 0;

261 
mem
->
±ab_mis£s
 = 0;

262 
mem
->
±ab_ac˚s£s
 = 0;

263 
	}
}

266 
md_Áu…_ty≥


267 
	$mem_dump
(
mem_t
 *
mem
,

268 
md_addr_t
 
addr
,

269 
Àn
,

270 
FILE
 *
°ªam
)

272 
d©a
;

273 
md_Áu…_ty≥
 
Áu…
;

275 i‡(!
°ªam
)

276 
°ªam
 = 
°dîr
;

278 
addr
 &~(
w‹d_t
);

279 
Àn
 = (À¿+ ((
w‹d_t
) - 1)) & ~(word_t);

280 
Àn
-- > 0)

282 
Áu…
 = 
	`mem_ac˚ss
(
mem
, 
Ród
, 
addr
, &
d©a
, (
w‹d_t
));

283 i‡(
Áu…
 !
md_Áu…_n⁄e
)

284  
Áu…
;

286 
	`myÂrötf
(
°ªam
, "0x%08p: %08x\n", 
addr
, 
d©a
);

287 
addr
 +(
w‹d_t
);

291  
md_Áu…_n⁄e
;

292 
	}
}

296 
md_Áu…_ty≥


297 
	$mem_°r˝y
(
mem_ac˚ss_‚
 
mem_‚
,

298 
mem_t
 *
mem
,

299 
mem_cmd
 
cmd
,

300 
md_addr_t
 
addr
,

301 *
s
)

303 
n
 = 0;

304 
c
;

305 
md_Áu…_ty≥
 
Áu…
;

307 
cmd
)

309 
Ród
:

312 
Áu…
 = 
	`mem_‚
(
mem
, 
Ród
, 
addr
++, &
c
, 1);

313 i‡(
Áu…
 !
md_Áu…_n⁄e
)

314  
Áu…
;

315 *
s
++ = 
c
;

316 
n
++;

317 } 
c
);

320 
Wrôe
:

323 
c
 = *
s
++;

324 
Áu…
 = 
	`mem_‚
(
mem
, 
Wrôe
, 
addr
++, &
c
, 1);

325 i‡(
Áu…
 !
md_Áu…_n⁄e
)

326  
Áu…
;

327 
n
++;

328 } 
c
);

332  
md_Áu…_öã∫Æ
;

336  
md_Áu…_n⁄e
;

337 
	}
}

340 
md_Áu…_ty≥


341 
	$mem_bc›y
(
mem_ac˚ss_‚
 
mem_‚
,

342 
mem_t
 *
mem
,

343 
mem_cmd
 
cmd
,

344 
md_addr_t
 
addr
,

345 *
vp
,

346 
nbyãs
)

348 
byã_t
 *
p
 = 
vp
;

349 
md_Áu…_ty≥
 
Áu…
;

352 
nbyãs
-- > 0)

354 
Áu…
 = 
	`mem_‚
(
mem
, 
cmd
, 
addr
++, 
p
++, 1);

355 i‡(
Áu…
 !
md_Áu…_n⁄e
)

356  
Áu…
;

360  
md_Áu…_n⁄e
;

361 
	}
}

366 
md_Áu…_ty≥


367 
	$mem_bc›y4
(
mem_ac˚ss_‚
 
mem_‚
,

368 
mem_t
 *
mem
,

369 
mem_cmd
 
cmd
,

370 
md_addr_t
 
addr
,

371 *
vp
,

372 
nbyãs
)

374 
byã_t
 *
p
 = 
vp
;

375 
w‹ds
 = 
nbyãs
 >> 2;

376 
md_Áu…_ty≥
 
Áu…
;

378 
w‹ds
-- > 0)

380 
Áu…
 = 
	`mem_‚
(
mem
, 
cmd
, 
addr
, 
p
, (
w‹d_t
));

381 i‡(
Áu…
 !
md_Áu…_n⁄e
)

382  
Áu…
;

384 
addr
 +(
w‹d_t
);

385 
p
 +(
w‹d_t
);

389  
md_Áu…_n⁄e
;

390 
	}
}

393 
md_Áu…_ty≥


394 
	$mem_bzîo
(
mem_ac˚ss_‚
 
mem_‚
,

395 
mem_t
 *
mem
,

396 
md_addr_t
 
addr
,

397 
nbyãs
)

399 
byã_t
 
c
 = 0;

400 
md_Áu…_ty≥
 
Áu…
;

403 
nbyãs
-- > 0)

405 
Áu…
 = 
	`mem_‚
(
mem
, 
Wrôe
, 
addr
++, &
c
, 1);

406 i‡(
Áu…
 !
md_Áu…_n⁄e
)

407  
Áu…
;

411  
md_Áu…_n⁄e
;

412 
	}
}

478 
SS_ADDR_TYPE
 
mem_brk_poöt
;

481 
SS_ADDR_TYPE
 
mem_°ack_mö
;

488 
	#MEM_TABLE_SIZE
 0x8000

	)

490 #i‚de‡
HIDE_MEM_TABLE_DEF


492 *
mem_èbÀ
[
MEM_TABLE_SIZE
];

496 
	#MEM_BLOCK_SIZE
 0x10000

	)

500 (
	gaddr
 >
ld_ãxt_ba£
 && 
addr
 < (ld_ãxt_ba£+
ld_ãxt_size
)

501 && 
cmd
 =
Ród
)

503 || (
addr
 >
ld_d©a_ba£
 &&ádd∏< 
ld_°ack_ba£
)))

504 
Áèl
("ac˚s†îr‹: segmíèti⁄ viﬁ©i⁄,ádd∏0x%08p", 
addr
);

507 i‡(
	gaddr
 > 
	gmem_brk_poöt
 &&ádd∏< 
	gmem_°ack_mö
)

508 
	gmem_°ack_mö
 = 
addr
;

512 
mem_vÆid
(
mem_t
 *
mem
,

513 
mem_cmd
 
cmd
,

514 
md_addr_t
 
addr
,

515 
nbyãs
,

516 
de˛¨e
);

520 
	$mem_vÆid
(
mem_cmd
 
cmd
,

521 
SS_ADDR_TYPE
 
addr
,

522 
nbyãs
,

523 
de˛¨e
)

525 *
îr_°r
 = 
NULL
;

528 i‡((
nbyãs
 & (nbyãs-1)Ë!0 || (
addr
 & (nbytes-1)) != 0)

530 
îr_°r
 = "bad size orálignment";

534 (
addr
 >
ld_ãxt_ba£
 &&ádd∏< (ld_ãxt_ba£+
ld_ãxt_size
)

535 && 
cmd
 =
Ród
)

537 || (
addr
 >
ld_d©a_ba£
 &&ádd∏< 
ld_°ack_ba£
)))

539 
îr_°r
 = "segmentation violation";

543 i‡(
addr
 > 
mem_brk_poöt
 &&ádd∏< 
mem_°ack_mö
)

544 
mem_°ack_mö
 = 
addr
;

546 i‡(!
de˛¨e
)

547  
îr_°r
;

548 i‡(
îr_°r
 !
NULL
)

549 
	`Áèl
(
îr_°r
);

551  
NULL
;

552 
	}
}

556 
	$mem_öô1
()

560 
mem_brk_poöt
 = 
	`ROUND_UP
(
ld_d©a_ba£
 + 
ld_d©a_size
, 
SS_PAGE_SIZE
);

563 
mem_°ack_mö
 = 
ªgs_R
[
SS_STACK_REGNO
];

564 
	}
}

	@memory.h

52 #i‚de‡
MEMORY_H


53 
	#MEMORY_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"machöe.h
"

60 
	~"›ti⁄s.h
"

61 
	~"°©s.h
"

64 
	#MEM_PTAB_SIZE
 (32*1024)

	)

65 
	#MEM_LOG_PTAB_SIZE
 15

	)

68 
	smem_±e_t
 {

69 
mem_±e_t
 *
	m√xt
;

70 
md_addr_t
 
	mèg
;

71 
byã_t
 *
	m∑ge
;

75 
	smem_t
 {

77 *
	m«me
;

78 
mem_±e_t
 *
	m±ab
[
MEM_PTAB_SIZE
];

81 
cou¡î_t
 
	m∑ge_cou¡
;

82 
cou¡î_t
 
	m±ab_mis£s
;

83 
cou¡î_t
 
	m±ab_ac˚s£s
;

87 
	emem_cmd
 {

88 
	mRód
,

89 
	mWrôe


94 
	gmd_Áu…_ty≥


95 (*
	tmem_ac˚ss_‚
)(
	tmem_t
 *
	tmem
,

96 
	tmem_cmd
 
	tcmd
,

97 
	tmd_addr_t
 
	taddr
,

98 *
	tp
,

99 
	tnbyãs
);

106 
	#MEM_PTAB_SET
(
ADDR
) \

107 (((
ADDR
Ë>> 
MD_LOG_PAGE_SIZE
Ë& (
MEM_PTAB_SIZE
 - 1))

	)

110 
	#MEM_PTAB_TAG
(
ADDR
) \

111 ((
ADDR
Ë>> (
MD_LOG_PAGE_SIZE
 + 
MEM_LOG_PTAB_SIZE
))

	)

114 
	#MEM_PTE_ADDR
(
PTE
, 
IDX
) \

115 (((
PTE
)->
èg
 << (
MD_LOG_PAGE_SIZE
 + 
MEM_LOG_PTAB_SIZE
)) \

116 | ((
IDX
Ë<< 
MD_LOG_PAGE_SIZE
))

	)

119 
	#MEM_PAGE
(
MEM
, 
ADDR
) \

121 ((
MEM
)->
±ab
[
	`MEM_PTAB_SET
(
ADDR
)] \

122 && (
MEM
)->
±ab
[
	`MEM_PTAB_SET
(
ADDR
)]->
èg
 =
	`MEM_PTAB_TAG
(ADDR)) \

124 (
MEM
)->
±ab_ac˚s£s
++, \

125 (
MEM
)->
±ab
[
	`MEM_PTAB_SET
(
ADDR
)]->
∑ge
) \

127 
	`mem_å™¶©e
((
MEM
), (
ADDR
))))

	)

130 
	#MEM_OFFSET
(
ADDR
Ë((ADDRË& (
MD_PAGE_SIZE
 - 1))

	)

133 
	#MEM_TICKLE
(
MEM
, 
ADDR
) \

134 (!
	`MEM_PAGE
(
MEM
, 
ADDR
) \

136 
	`mem_√w∑ge
(
MEM
, 
ADDR
)) \

137 : ( ()0))

	)

140 
	#MEM_FORALL
(
MEM
, 
ITER
, 
PTE
) \

141 (
ITER
)=0; (ITERË< 
MEM_PTAB_SIZE
; (ITER)++) \

142 (
PTE
)=(
MEM
)->
±ab
[
i
]; (PTEË!
NULL
; (PTE)=(PTE)->
√xt
)

	)

151 
	#MEM_READ
(
MEM
, 
ADDR
, 
TYPE
) \

152 (
	`MEM_PAGE
(
MEM
, (
md_addr_t
)(
ADDR
)) \

153 ? *((
TYPE
 *)(
	`MEM_PAGE
(
MEM
, (
md_addr_t
)(
ADDR
)Ë+ 
	`MEM_OFFSET
(ADDR))) \

154 : 0)

	)

157 
	#__UNCHK_MEM_READ
(
MEM
, 
ADDR
, 
TYPE
) \

158 (*((
TYPE
 *)(
	`MEM_PAGE
(
MEM
, (
md_addr_t
)(
ADDR
)Ë+ 
	`MEM_OFFSET
(ADDR))))

	)

162 
	#MEM_WRITE
(
MEM
, 
ADDR
, 
TYPE
, 
VAL
) \

163 (
	`MEM_TICKLE
(
MEM
, (
md_addr_t
)(
ADDR
)), \

164 *((
TYPE
 *)(
	`MEM_PAGE
(
MEM
, (
md_addr_t
)(
ADDR
)Ë+ 
	`MEM_OFFSET
(ADDR))Ë(
VAL
))

	)

167 
	#__UNCHK_MEM_WRITE
(
MEM
, 
ADDR
, 
TYPE
, 
VAL
) \

168 (*((
TYPE
 *)(
	`MEM_PAGE
(
MEM
, (
md_addr_t
)(
ADDR
)Ë+ 
	`MEM_OFFSET
(ADDR))Ë(
VAL
))

	)

172 
	#MEM_READ_BYTE
(
MEM
, 
ADDR
Ë
	`MEM_READ
(MEM, ADDR, 
byã_t
)

	)

173 
	#MEM_READ_SBYTE
(
MEM
, 
ADDR
Ë
	`MEM_READ
(MEM, ADDR, 
sbyã_t
)

	)

174 
	#MEM_READ_HALF
(
MEM
, 
ADDR
Ë
	`MD_SWAPH
(
	`MEM_READ
(MEM, ADDR, 
hÆf_t
))

	)

175 
	#MEM_READ_SHALF
(
MEM
, 
ADDR
Ë
	`MD_SWAPH
(
	`MEM_READ
(MEM, ADDR, 
shÆf_t
))

	)

176 
	#MEM_READ_WORD
(
MEM
, 
ADDR
Ë
	`MD_SWAPW
(
	`MEM_READ
(MEM, ADDR, 
w‹d_t
))

	)

177 
	#MEM_READ_SWORD
(
MEM
, 
ADDR
Ë
	`MD_SWAPW
(
	`MEM_READ
(MEM, ADDR, 
sw‹d_t
))

	)

179 #ifde‡
HOST_HAS_QWORD


180 
	#MEM_READ_QWORD
(
MEM
, 
ADDR
Ë
	`MD_SWAPQ
(
	`MEM_READ
(MEM, ADDR, 
qw‹d_t
))

	)

181 
	#MEM_READ_SQWORD
(
MEM
, 
ADDR
Ë
	`MD_SWAPQ
(
	`MEM_READ
(MEM, ADDR, 
sqw‹d_t
))

	)

184 
	#MEM_WRITE_BYTE
(
MEM
, 
ADDR
, 
VAL
Ë
	`MEM_WRITE
(MEM, ADDR, 
byã_t
, VAL)

	)

185 
	#MEM_WRITE_SBYTE
(
MEM
, 
ADDR
, 
VAL
Ë
	`MEM_WRITE
(MEM, ADDR, 
sbyã_t
, VAL)

	)

186 
	#MEM_WRITE_HALF
(
MEM
, 
ADDR
, 
VAL
) \

187 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
hÆf_t
, 
	`MD_SWAPH
(
VAL
))

	)

188 
	#MEM_WRITE_SHALF
(
MEM
, 
ADDR
, 
VAL
) \

189 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
shÆf_t
, 
	`MD_SWAPH
(
VAL
))

	)

190 
	#MEM_WRITE_WORD
(
MEM
, 
ADDR
, 
VAL
) \

191 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
w‹d_t
, 
	`MD_SWAPW
(
VAL
))

	)

192 
	#MEM_WRITE_SWORD
(
MEM
, 
ADDR
, 
VAL
) \

193 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
sw‹d_t
, 
	`MD_SWAPW
(
VAL
))

	)

194 
	#MEM_WRITE_SFLOAT
(
MEM
, 
ADDR
, 
VAL
) \

195 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
sÊﬂt_t
, 
	`MD_SWAPW
(
VAL
))

	)

196 
	#MEM_WRITE_DFLOAT
(
MEM
, 
ADDR
, 
VAL
) \

197 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
dÊﬂt_t
, 
	`MD_SWAPQ
(
VAL
))

	)

199 #ifde‡
HOST_HAS_QWORD


200 
	#MEM_WRITE_QWORD
(
MEM
, 
ADDR
, 
VAL
) \

201 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
qw‹d_t
, 
	`MD_SWAPQ
(
VAL
))

	)

202 
	#MEM_WRITE_SQWORD
(
MEM
, 
ADDR
, 
VAL
) \

203 
	`MEM_WRITE
(
MEM
, 
ADDR
, 
sqw‹d_t
, 
	`MD_SWAPQ
(
VAL
))

	)

208 
mem_t
 *

209 
mem_¸óã
(*
«me
);

212 
byã_t
 *

213 
mem_å™¶©e
(
mem_t
 *
mem
,

214 
md_addr_t
 
addr
);

218 
mem_√w∑ge
(
mem_t
 *
mem
,

219 
md_addr_t
 
addr
);

224 
md_Áu…_ty≥


225 
mem_ac˚ss
(
mem_t
 *
mem
,

226 
mem_cmd
 
cmd
,

227 
md_addr_t
 
addr
,

228 *
vp
,

229 
nbyãs
);

233 
mem_ªg_°©s
(
mem_t
 *
mem
,

234 
°©_sdb_t
 *
sdb
);

238 
mem_öô
(
mem_t
 *
mem
);

241 
md_Áu…_ty≥


242 
mem_dump
(
mem_t
 *
mem
,

243 
md_addr_t
 
addr
,

244 
Àn
,

245 
FILE
 *
°ªam
);

258 
md_Áu…_ty≥


259 
mem_°r˝y
(
mem_ac˚ss_‚
 
mem_‚
,

260 
mem_t
 *
mem
,

261 
mem_cmd
 
cmd
,

262 
md_addr_t
 
addr
,

263 *
s
);

266 
md_Áu…_ty≥


267 
mem_bc›y
(
mem_ac˚ss_‚
 
mem_‚
,

268 
mem_t
 *
mem
,

269 
mem_cmd
 
cmd
,

270 
md_addr_t
 
addr
,

271 *
vp
,

272 
nbyãs
);

277 
md_Áu…_ty≥


278 
mem_bc›y4
(
mem_ac˚ss_‚
 
mem_‚
,

279 
mem_t
 *
mem
,

280 
mem_cmd
 
cmd
,

281 
md_addr_t
 
addr
,

282 *
vp
,

283 
nbyãs
);

286 
md_Áu…_ty≥


287 
mem_bzîo
(
mem_ac˚ss_‚
 
mem_‚
,

288 
mem_t
 *
mem
,

289 
md_addr_t
 
addr
,

290 
nbyãs
);

	@misc.c

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°d¨g.h
>

64 
	~<°rög.h
>

65 
	~<˘y≥.h
>

66 
	~<î∫o.h
>

68 #i‡
deföed
(
__Æpha
Ë|| deföed(
löux
)

69 
	~<uni°d.h
>

72 
	~"ho°.h
"

73 
	~"misc.h
"

74 
	~"machöe.h
"

77 
	gvîbo£
 = 
FALSE
;

79 #ifde‡
DEBUG


81 
	gdebuggög
 = 
FALSE
;

86 (*
hook_‚
)(
FILE
 *
°ªam
Ë
NULL
;

90 
	`Áèl_hook
((*
‚
)(
FILE
 *
°ªam
))

92 
hook_‚
 = 
‚
;

93 
	}
}

99 
	$_Áèl
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

102 
	$Áèl
(*
fmt
, ...)

105 
va_li°
 
v
;

106 
	`va_°¨t
(
v
, 
fmt
);

108 
	`Ârötf
(
°dîr
, "fatal: ");

109 
	`myvÂrötf
(
°dîr
, 
fmt
, 
v
);

112 i‡(
vîbo£
)

113 
	`Ârötf
(
°dîr
, " [%s:%s,Üöê%d]", 
func
, 
fûe
, 
löe
);

115 
	`Ârötf
(
°dîr
, "\n");

116 i‡(
hook_‚
)

117 (*
hook_‚
)(
°dîr
);

118 
	`exô
(1);

119 
	}
}

125 
	$_∑nic
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

128 
	$∑nic
(*
fmt
, ...)

131 
va_li°
 
v
;

132 
	`va_°¨t
(
v
, 
fmt
);

134 
	`Ârötf
(
°dîr
, "panic: ");

135 
	`myvÂrötf
(
°dîr
, 
fmt
, 
v
);

138 
	`Ârötf
(
°dîr
, " [%s:%s,Üöê%d]", 
func
, 
fûe
, 
löe
);

140 
	`Ârötf
(
°dîr
, "\n");

141 i‡(
hook_‚
)

142 (*
hook_‚
)(
°dîr
);

143 
	`ab‹t
();

144 
	}
}

150 
	$_w¨n
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

153 
	$w¨n
(*
fmt
, ...)

156 
va_li°
 
v
;

157 
	`va_°¨t
(
v
, 
fmt
);

159 
	`Ârötf
(
°dîr
, "warning: ");

160 
	`myvÂrötf
(
°dîr
, 
fmt
, 
v
);

163 i‡(
vîbo£
)

164 
	`Ârötf
(
°dîr
, " [%s:%s,Üöê%d]", 
func
, 
fûe
, 
löe
);

166 
	`Ârötf
(
°dîr
, "\n");

167 
	}
}

173 
	$_öfo
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

176 
	$öfo
(*
fmt
, ...)

179 
va_li°
 
v
;

180 
	`va_°¨t
(
v
, 
fmt
);

182 
	`myvÂrötf
(
°dîr
, 
fmt
, 
v
);

185 i‡(
vîbo£
)

186 
	`Ârötf
(
°dîr
, " [%s:%s,Üöê%d]", 
func
, 
fûe
, 
löe
);

188 
	`Ârötf
(
°dîr
, "\n");

189 
	}
}

191 #ifde‡
DEBUG


196 
	$_debug
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

199 
	$debug
(*
fmt
, ...)

202 
va_li°
 
v
;

203 
	`va_°¨t
(
v
, 
fmt
);

205 i‡(
debuggög
)

207 
	`Ârötf
(
°dîr
, "debug: ");

208 
	`myvÂrötf
(
°dîr
, 
fmt
, 
v
);

211 
	`Ârötf
(
°dîr
, " [%s:%s,Üöê%d]", 
func
, 
fûe
, 
löe
);

213 
	`Ârötf
(
°dîr
, "\n");

215 
	}
}

221 
	$my§™d
(
£ed
)

223 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__svr4__
Ë|| deföed(
_MSC_VER
)

224 
	`§™d
(
£ed
);

226 
	`§™dom
(
£ed
);

228 
	}
}

232 
	$myønd
()

234 #i‡!
	`deföed
(
__Æpha
Ë&& !deföed(
unix
)

235 
	`øndom
();

238 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__svr4__
Ë|| deföed(
_MSC_VER
)

239  
	`ønd
();

241  
	`øndom
();

243 
	}
}

248 
	$my°rdup
(*
s
)

250 *
buf
;

252 i‡(!(
buf
 = (*)
	`mÆloc
(
	`°æí
(
s
)+1)))

253  
NULL
;

254 
	`°r˝y
(
buf
, 
s
);

255  
buf
;

256 
	}
}

260 
	$my°ºchr
(*
s
, 
c
)

262 *
πnvÆ
 = 0;

265 i‡(*
s
 =
c
)

266 
πnvÆ
 = 
s
;

267 } *
s
++);

269  
πnvÆ
;

270 
	}
}

275 
	$my°ricmp
(*
s1
, *
s2
)

277 
u1
, 
u2
;

281 
u1
 = ()*
s1
++; u1 = 
	`tﬁowî
(u1);

282 
u2
 = ()*
s2
++; u2 = 
	`tﬁowî
(u2);

284 i‡(
u1
 !
u2
)

285  
u1
 - 
u2
;

286 i‡(
u1
 == '\0')

289 
	}
}

294 
	$gëc‹e
(
nbyãs
)

296  
	`ˇŒoc
(
nbyãs
, 1);

299 #i‡!
	`deföed
(
PURIFY
Ë&& !deföed(
_MSC_VER
)

300 *
p
 = (*)
	`sbrk
(
nbyãs
);

302 i‡(
p
 == (*)-1)

303  
NULL
;

306 #i‡
	`deföed
(
__svr4__
Ë|| deföed(
_MSC_VER
)

307 
	`mem£t
(
p
, '\0', 
nbyãs
);

309 
	`bzîo
(
p
, 
nbyãs
);

311  
p
;

313  
	`ˇŒoc
(
nbyãs
, 1);

316 
	}
}

320 
	$log_ba£2
(
n
)

322 
powî
 = 0;

324 i‡(
n
 <= 0 || (n & (n-1)) != 0)

325 
	`∑nic
("log2() only works forÖositiveÖower ofÅwo values");

327 
n
 >>= 1)

328 
powî
++;

330  
powî
;

331 
	}
}

335 
	$ñ≠£d_time
(
£c
)

337 
t°r
[256];

338 
ãmp
[256];

340 i‡(
£c
 <= 0)

343 
t°r
[0] = '\0';

346 i‡(
£c
 >= 86400)

348 
	`•rötf
(
ãmp
, "%ldD ", 
£c
/86400);

349 
	`°rˇt
(
t°r
, 
ãmp
);

350 
£c
 = sec % 86400;

353 i‡(
£c
 >= 3600)

355 
	`•rötf
(
ãmp
, "%ldh ", 
£c
/3600);

356 
	`°rˇt
(
t°r
, 
ãmp
);

357 
£c
 = sec % 3600;

360 i‡(
£c
 >= 60)

362 
	`•rötf
(
ãmp
, "%ldm ", 
£c
/60);

363 
	`°rˇt
(
t°r
, 
ãmp
);

364 
£c
 = sec % 60;

367 i‡(
£c
 >= 1)

369 
	`•rötf
(
ãmp
, "%ld†", 
£c
);

370 
	`°rˇt
(
t°r
, 
ãmp
);

372 
t°r
[
	`°æí
(tstr)-1] = '\0';

373  
t°r
;

374 
	}
}

382 
	$exåa˘l
(
w‹d
,

383 
pos
,

384 
num
)

386 (((Ë
w‹d
 >> (
pos
 + 1 - 
num
)) & ~(~0 <<Çum));

387 
	}
}

389 
	#PUT
(
p
, 
n
) \

391 
¬
, 
cc
; \

393 
¬
 = 0;Ç¿< 
n
;Çn++) \

395 
cc
 = *(
p
+
¬
); \

396 *
obuf
++ = 
cc
; \

398 }

	)

400 
	#PAD
(
s
, 
n
) \

402 
¬
, 
cc
; \

404 
cc
 = *
s
; \

405 
¬
 = 
n
;Çn > 0;Çn--) \

406 *
obuf
++ = 
cc
; \

407 }

	)

409 #ifde‡
HOST_HAS_QWORD


410 
	#HIBITL
 
	`LL
(0x8000000000000000)

	)

411 
sqw‹d_t
 
	t¶¨geöt_t
;

412 
qw‹d_t
 
	tœrgeöt_t
;

414 
	#HIBITL
 0x80000000L

	)

415 
sw‹d_t
 
	t¶¨geöt_t
;

416 
w‹d_t
 
	tœrgeöt_t
;

420 
	$_lowdigô
(
¶¨geöt_t
 *
vÆ±r
)

427 
lowbô
 = ()(*
vÆ±r
 & 1);

428 
¶¨geöt_t
 
vÆue
 = (*
vÆ±r
 >> 1Ë& ~
HIBITL
;

430 *
vÆ±r
 = 
vÆue
 / 5;

431  ()(
vÆue
 % 5 * 2 + 
lowbô
 + '0');

432 
	}
}

436 
	$myv•rötf
(*
obuf
, *
f‹m©
, 
va_li°
 
v
)

438 
_bœnks
[] = " ";

439 
_zî€s
[] = "00000000000000000000";

442 
cou¡
 = 0;

445 
fcode
;

448 
width
, 
¥ec
;

451 
lzîo
;

454 
¥efixÀngth
;

457 
ŸhîÀngth
;

460 
	#PADZERO
 0x0001

	)

461 
	#RZERO
 0x0002

	)

462 
	#LZERO
 0x0004

	)

463 
	#DOTSEEN
 0x0008

	)

464 
	#LENGTH
 0x0010

	)

465 
Êagw‹d
;

468 
	#MAXDIGS
 22

	)

471 *
bp
, *
p
;

474 
k
, 
Ãadix
, 
mødix
;

477 *
¥efix
;

480 
buf
[
MAXDIGS
*4], 
buf1
[MAXDIGS*4];

483 *
èb
;

486 
¶¨geöt_t
 
vÆ
;

489 
dÊﬂt_t
 
fvÆ
;

493 
n
;

495 (
fcode
 = *
f‹m©
) != '\0' && fcode != '%')

497 *
obuf
++ = 
fcode
;

498 
f‹m©
++;

499 
cou¡
++;

502 i‡(
fcode
 == '\0')

505 *
obuf
 = '\0';

506  
obuf
;

515 
width
 = 
¥efixÀngth
 = 
ŸhîÀngth
 = 
Êagw‹d
 = 0;

516 
f‹m©
++;

518 
ch¨swôch
:

519 
fcode
 = *
f‹m©
++)

522 
Êagw‹d
 |
PADZERO
;

533 
num
 = 
fcode
 - '0';

534 
	`isdigô
(
fcode
 = *
f‹m©
))

536 
num
 =Çum * 10 + 
fcode
 - '0';

537 
f‹m©
++;

539 i‡(
Êagw‹d
 & 
DOTSEEN
)

540 
¥ec
 = 
num
;

542 
width
 = 
num
;

543 
ch¨swôch
;

547 
Êagw‹d
 |
DOTSEEN
;

548 
ch¨swôch
;

551 
Êagw‹d
 |
LENGTH
;

552 
ch¨swôch
;

555 #ifde‡
HOST_HAS_QWORD


556 
Êagw‹d
 |
LENGTH
;

559 
Êagw‹d
 |
DOTSEEN
;

560 i‡(!
width
)

561 
width
 = 12;

562 
¥ec
 = 0;

563 
¥o˚ss_Êﬂt
;

568 i‡(
Êagw‹d
 & 
LENGTH
)

569 
vÆ
 = 
	`va_¨g
(
v
, 
¶¨geöt_t
);

571 
vÆ
 = (
¶¨geöt_t
)
	`va_¨g
(
v
, 
sw‹d_t
);

574 
p
 = 
bp
 = 
buf
 + 
MAXDIGS
;

577 i‡(
vÆ
 < 0)

579 
¥efix
 = "-";

580 
¥efixÀngth
 = 1;

582 i‡(
vÆ
 !(
¶¨geöt_t
)
HIBITL
)

583 
vÆ
 = -val;

587 *--
bp
 = 
	`_lowdigô
(&
vÆ
);

591 
decimÆ
:

593 
¶¨geöt_t
 
qvÆ
 = 
vÆ
;

595 i‡(
qvÆ
 <= 9)

596 *--
bp
 = ()
qvÆ
 + '0';

600 
n
 = ()
qvÆ
;

601 
qvÆ
 /= 10;

602 *--
bp
 = 
n
 - ()
qvÆ
 * 10 + '0';

604 
qvÆ
 > 9);

605 *--
bp
 = ()
qvÆ
 + '0';

612 i‡(
Êagw‹d
 & 
LENGTH
)

613 
vÆ
 = 
	`va_¨g
(
v
, 
œrgeöt_t
);

615 
vÆ
 = (
œrgeöt_t
)
	`va_¨g
(
v
, 
w‹d_t
);

618 
p
 = 
bp
 = 
buf
 + 
MAXDIGS
;

620 i‡(
vÆ
 & 
HIBITL
)

621 *--
bp
 = 
	`_lowdigô
(&
vÆ
);

622 
decimÆ
;

625 
mødix
 = 7;

626 
Ãadix
 = 2;

627 
fixed
;

630 i‡((
md_addr_t
) > 4)

631 
Êagw‹d
 |
LENGTH
;

636 
mødix
 = 15;

637 
Ãadix
 = 3;

639 
fixed
:

641 i‡(
Êagw‹d
 & 
LENGTH
)

642 
vÆ
 = 
	`va_¨g
(
v
, 
œrgeöt_t
);

644 
vÆ
 = (
œrgeöt_t
)
	`va_¨g
(
v
, 
w‹d_t
);

647 
èb
 = (
fcode
 == 'X') ? "0123456789ABCDEF" : "0123456789abcdef";

650 
p
 = 
bp
 = 
buf
 + 
MAXDIGS
;

653 
¶¨geöt_t
 
qvÆ
 = 
vÆ
;

655 i‡(
qvÆ
 == 0)

657 
ŸhîÀngth
 = 
lzîo
 = 1;

658 
Êagw‹d
 |
LZERO
;

662 *--
bp
 = 
èb
[
qvÆ
 & 
mødix
];

663 
qvÆ
 = ((qvÆ >> 1Ë& ~
HIBITL
Ë>> 
Ãadix
;

664 } 
qvÆ
 != 0);

668 #i‚de‡
HOST_HAS_QWORD


669 
¥o˚ss_Êﬂt
:

673 i‡(
Êagw‹d
 & 
DOTSEEN
)

674 
	`•rötf
(
buf1
, "%%%d.%df", 
width
, 
¥ec
);

675 i‡(
width
)

676 
	`•rötf
(
buf1
, "%%%df", 
width
);

678 
	`•rötf
(
buf1
, "%%f");

681 
fvÆ
 = 
	`va_¨g
(
v
, 
dÊﬂt_t
);

684 
	`•rötf
(
buf
, 
buf1
, 
fvÆ
);

685 
bp
 = 
buf
;

686 
p
 = 
bp
 + 
	`°æí
(bp);

690 
bp
 = 
	`va_¨g
(
v
, *);

691 i‡(
bp
 =
NULL
)

692 
bp
 = "(null)";

693 
p
 = 
bp
 + 
	`°æí
(bp);

697 
buf
[0] = 
fcode
;

698 
c_mîge
;

701 
buf
[0] = 
	`va_¨g
(
v
, );

702 
c_mîge
:

703 
p
 = (
bp
 = &
buf
[0]) + 1;

709 
f‹m©
--;

714 
k
 = (
n
 = 
p
 - 
bp
Ë+ 
¥efixÀngth
 + 
ŸhîÀngth
;

715 i‡(
width
 <
k
)

716 
cou¡
 +
k
;

719 
cou¡
 +
width
;

723 i‡(
Êagw‹d
 & 
PADZERO
)

725 i‡(!(
Êagw‹d
 & 
LZERO
))

727 
Êagw‹d
 |
LZERO
;

728 
lzîo
 = 
width
 - 
k
;

731 
lzîo
 +
width
 - 
k
;

734 
k
 = 
width
;

739 
	`PAD
(
_bœnks
, 
width
 - 
k
);

744 i‡(
¥efixÀngth
 != 0)

746 
	`PUT
(
¥efix
, 
¥efixÀngth
);

750 i‡(
Êagw‹d
 & 
LZERO
)

752 
	`PAD
(
_zî€s
, 
lzîo
);

756 i‡(
n
 > 0)

758 
	`PUT
(
bp
, 
n
);

761 
	}
}

765 
	$my•rötf
(*
obuf
, *
f‹m©
, ...)

768 
va_li°
 
v
;

769 
	`va_°¨t
(
v
, 
f‹m©
);

771  
	`myv•rötf
(
obuf
, 
f‹m©
, 
v
);

772 
	}
}

776 
	$myvÂrötf
(
FILE
 *
°ªam
, *
f‹m©
, 
va_li°
 
v
)

779 
buf
[2048];

781 
	`myv•rötf
(
buf
, 
f‹m©
, 
v
);

782 
	`Âuts
(
buf
, 
°ªam
);

783 
	}
}

787 
	$myÂrötf
(
FILE
 *
°ªam
, *
f‹m©
, ...)

790 
buf
[2048];

793 
va_li°
 
v
;

794 
	`va_°¨t
(
v
, 
f‹m©
);

796 
	`myv•rötf
(
buf
, 
f‹m©
, 
v
);

797 
	`Âuts
(
buf
, 
°ªam
);

798 
	}
}

800 #ifde‡
HOST_HAS_QWORD


802 
	#LL_MAX
 
	`LL
(9223372036854775807)

	)

803 
	#LL_MIN
 (-
LL_MAX
 - 1)

	)

804 
	#ULL_MAX
 (
	`ULL
(9223372036854775807Ë* ULL(2Ë+ 1)

	)

807 
sqw‹d_t


808 
	$my©osq
(*
≈å
, **
ídp
, 
ba£
)

810 *
s
, *
ßve
;

811 
√g©ive
, 
ovîÊow
;

812 
sqw‹d_t
 
cutoff
, 
cuéim
, 
i
;

813 
c
;

814 
î∫o
;

816 i‡(!
≈å
 || !*nptr)

817 
	`∑nic
("strtoll()Öassedá NULL string");

819 
s
 = 
≈å
;

822 
	`is•a˚
(()(*
s
)))

823 ++
s
;

824 i‡(*
s
 == '\0')

825 
noc⁄v
;

827 i‡(
ba£
 == 0)

829 i‡(
s
[0] ='0' && 
	`touµî
(s[1]) == 'X')

830 
ba£
 = 16;

832 
ba£
 = 10;

835 i‡(
ba£
 <= 1 || base > 36)

836 
	`∑nic
("bogu†ba£: %d", 
ba£
);

839 i‡(*
s
 == '-')

841 
√g©ive
 = 1;

842 ++
s
;

844 i‡(*
s
 == '+')

846 
√g©ive
 = 0;

847 ++
s
;

850 
√g©ive
 = 0;

852 i‡(
ba£
 =16 && 
s
[0] ='0' && 
	`touµî
(s[1]) == 'X')

853 
s
 += 2;

856 
ßve
 = 
s
;

858 
cutoff
 = 
LL_MAX
 / (Ë
ba£
;

859 
cuéim
 = 
LL_MAX
 % (Ë
ba£
;

861 
ovîÊow
 = 0;

862 
i
 = 0;

863 
c
 = *
s
; c != '\0'; c = *++s)

865 i‡(
	`isdigô
 (
c
))

866 
c
 -= '0';

867 i‡(
	`ißÕha
 (
c
))

868 
c
 = 
	`touµî
(c) - 'A' + 10;

871 i‡(
c
 >
ba£
)

875 i‡(
i
 > 
cutoff
 || (ò=cutof‡&& 
c
 > 
cuéim
))

876 
ovîÊow
 = 1;

879 
i
 *(Ë
ba£
;

880 
i
 +
c
;

885 i‡(
s
 =
ßve
)

886 
noc⁄v
;

890 i‡(
ídp
 !
NULL
)

891 *
ídp
 = (*Ë
s
;

893 i‡(
ovîÊow
)

895 
î∫o
 = 
ERANGE
;

896  
√g©ive
 ? 
LL_MIN
 : 
LL_MAX
;

900 
î∫o
 = 0;

903  (
√g©ive
 ? -
i
 : i);

906 
noc⁄v
:

908 i‡(
ídp
 !
NULL
)

909 *
ídp
 = (*Ë
≈å
;

911 
	}
}

914 
qw‹d_t


915 
	$my©oq
(*
≈å
, **
ídp
, 
ba£
)

917 *
s
, *
ßve
;

918 
ovîÊow
;

919 
qw‹d_t
 
cutoff
, 
cuéim
, 
i
;

920 
c
;

921 
î∫o
;

923 i‡(!
≈å
 || !*nptr)

924 
	`∑nic
("strtoll()Öassedá NULL string");

926 
s
 = 
≈å
;

929 
	`is•a˚
(()(*
s
)))

930 ++
s
;

931 i‡(*
s
 == '\0')

932 
noc⁄v
;

934 i‡(
ba£
 == 0)

936 i‡(
s
[0] ='0' && 
	`touµî
(s[1]) == 'X')

937 
ba£
 = 16;

939 
ba£
 = 10;

942 i‡(
ba£
 <= 1 || base > 36)

943 
	`∑nic
("bogu†ba£: %d", 
ba£
);

945 i‡(
ba£
 =16 && 
s
[0] ='0' && 
	`touµî
(s[1]) == 'X')

946 
s
 += 2;

949 
ßve
 = 
s
;

951 
cutoff
 = 
ULL_MAX
 / (Ë
ba£
;

952 
cuéim
 = 
ULL_MAX
 % (Ë
ba£
;

954 
ovîÊow
 = 0;

955 
i
 = 0;

956 
c
 = *
s
; c != '\0'; c = *++s)

958 i‡(
	`isdigô
 (
c
))

959 
c
 -= '0';

960 i‡(
	`ißÕha
 (
c
))

961 
c
 = 
	`touµî
(c) - 'A' + 10;

964 i‡(
c
 >
ba£
)

968 i‡(
i
 > 
cutoff
 || (ò=cutof‡&& 
c
 > 
cuéim
))

969 
ovîÊow
 = 1;

972 
i
 *(Ë
ba£
;

973 
i
 +
c
;

978 i‡(
s
 =
ßve
)

979 
noc⁄v
;

983 i‡(
ídp
 !
NULL
)

984 *
ídp
 = (*Ë
s
;

986 i‡(
ovîÊow
)

988 
î∫o
 = 
ERANGE
;

989  
ULL_MAX
;

993 
î∫o
 = 0;

996  
i
;

999 
noc⁄v
:

1001 i‡(
ídp
 !
NULL
)

1002 *
ídp
 = (*Ë
≈å
;

1004 
	}
}

1006 #ifde‡
TESTIT


1008 
	$ã°ô
(*
s
)

1010 
buf
[128];

1011 
qw‹d_t
 
qvÆ
;

1013 
qvÆ
 = 
	`my©oq
(
s
, 
NULL
, 10);

1015 
	`myqtﬂ
(
qvÆ
, "%x", 
buf
, 
NULL
);

1016 
	`Ârötf
(
°dîr
, "x: %s\n", 
buf
);

1017 
	`myqtﬂ
(
qvÆ
, "%16x", 
buf
, 
NULL
);

1018 
	`Ârötf
(
°dîr
, "16x: %s\n", 
buf
);

1019 
	`myqtﬂ
(
qvÆ
, "%016x", 
buf
, 
NULL
);

1020 
	`Ârötf
(
°dîr
, "016x: %s\n", 
buf
);

1021 
	`myqtﬂ
(
qvÆ
, "0x%016x", 
buf
, 
NULL
);

1022 
	`Ârötf
(
°dîr
, "0x016x: %s\n", 
buf
);

1023 
	`myqtﬂ
(
qvÆ
, "0x%08x", 
buf
, 
NULL
);

1024 
	`Ârötf
(
°dîr
, "0x08x: %s\n", 
buf
);

1026 
	`myqtﬂ
(
qvÆ
, "%d", 
buf
, 
NULL
);

1027 
	`Ârötf
(
°dîr
, "d: %s\n", 
buf
);

1028 
	`myqtﬂ
(
qvÆ
, "%22d", 
buf
, 
NULL
);

1029 
	`Ârötf
(
°dîr
, "22d: %s\n", 
buf
);

1030 
	`myqtﬂ
(
qvÆ
, "%022d", 
buf
, 
NULL
);

1031 
	`Ârötf
(
°dîr
, "022d: %s\n", 
buf
);

1033 
	`myqtﬂ
(
qvÆ
, "%u", 
buf
, 
NULL
);

1034 
	`Ârötf
(
°dîr
, "u: %s\n", 
buf
);

1036 
	`myqtﬂ
(
qvÆ
, "%o", 
buf
, 
NULL
);

1037 
	`Ârötf
(
°dîr
, "o: %s\n", 
buf
);

1038 
	}
}

1041 
	$°e°ô
(*
s
)

1043 
buf
[128];

1044 
sqw‹d_t
 
sqvÆ
;

1046 
sqvÆ
 = 
	`my©osq
(
s
, 
NULL
, 10);

1048 
	`myqtﬂ
(
sqvÆ
, "%x", 
buf
, 
NULL
);

1049 
	`Ârötf
(
°dîr
, "x: %s\n", 
buf
);

1051 
	`myqtﬂ
(
sqvÆ
, "%d", 
buf
, 
NULL
);

1052 
	`Ârötf
(
°dîr
, "d: %s\n", 
buf
);

1054 
	`myqtﬂ
(
sqvÆ
, "%u", 
buf
, 
NULL
);

1055 
	`Ârötf
(
°dîr
, "u: %s\n", 
buf
);

1056 
	}
}

1059 
	$xã°ô
(*
s
)

1061 
buf
[128];

1062 
qw‹d_t
 
qvÆ
;

1064 
qvÆ
 = 
	`my©oq
(
s
, 
NULL
, 16);

1066 
	`myqtﬂ
(
qvÆ
, "%x", 
buf
, 
NULL
);

1067 
	`Ârötf
(
°dîr
, "x: %s\n", 
buf
);

1069 
	`myqtﬂ
(
qvÆ
, "%d", 
buf
, 
NULL
);

1070 
	`Ârötf
(
°dîr
, "d: %s\n", 
buf
);

1072 
	`myqtﬂ
(
qvÆ
, "%u", 
buf
, 
NULL
);

1073 
	`Ârötf
(
°dîr
, "u: %s\n", 
buf
);

1074 
	}
}

1079 #ifde‡
GZIP_PATH


1082 *
	mty≥
;

1083 *
	mext
;

1084 *
	mcmd
;

1085 } 
	ggzcmds
[] = {

1097 
FILE
 *

1098 
	$gz›í
(*
‚ame
, *
ty≥
)

1100 
i
;

1101 *
cmd
 = 
NULL
, *
ext
;

1102 
FILE
 *
fd
;

1103 
°r
[2048];

1106 
ext
 = 
	`my°ºchr
(
‚ame
, '.');

1109 i‡(
ext
 !
NULL
 && *ext != '\0')

1111 
i
=0; i < 
	`N_ELT
(
gzcmds
); i++)

1113 i‡(!
	`°rcmp
(
gzcmds
[
i
].
ty≥
,Åy≥Ë&& !°rcmp(gzcmds[i].
ext
,Éxt))

1115 
cmd
 = 
gzcmds
[
i
].cmd;

1121 i‡(!
cmd
)

1124 
fd
 = 
	`f›í
(
‚ame
, 
ty≥
);

1129 
	`•rötf
(
°r
, 
cmd
, 
GZIP_PATH
, 
‚ame
);

1130 
fd
 = 
	`p›í
(
°r
, 
ty≥
);

1133  
fd
;

1134 
	}
}

1138 
	$gz˛o£
(
FILE
 *
fd
)

1141 i‡(
	`p˛o£
(
fd
) == -1)

1142 
	`f˛o£
(
fd
);

1143 
	}
}

1147 
FILE
 *

1148 
	$gz›í
(*
‚ame
, *
ty≥
)

1150  
	`f›í
(
‚ame
, 
ty≥
);

1151 
	}
}

1154 
	$gz˛o£
(
FILE
 *
fd
)

1156 
	`f˛o£
(
fd
);

1157 
	}
}

1163 
	#POLYNOMIAL
 0x04c11db7L

	)

1165 
	g¸c_öô
 = 
FALSE
;

1166 
	g¸c_èbÀ
[256];

1170 
	$¸c_gíèb
()

1172 
i
, 
j
;

1173 
w‹d_t
 
¸c_accum
;

1175 
i
=0; i < 256; i++)

1177 
¸c_accum
 = (()
i
 << 24);

1178 
j
=0; j < 8; j++)

1180 i‡(
¸c_accum
 & 0x80000000L)

1181 
¸c_accum
 = (¸c_accum << 1Ë^ 
POLYNOMIAL
;

1183 
¸c_accum
 = (crc_accum << 1);

1185 
¸c_èbÀ
[
i
] = 
¸c_accum
;

1188 
	}
}

1191 
w‹d_t


1192 
	$¸c
(
w‹d_t
 
¸c_accum
, w‹d_à
d©a
)

1194 
i
, 
j
;

1196 i‡(!
¸c_öô
)

1198 
	`¸c_gíèb
();

1199 
¸c_öô
 = 
TRUE
;

1202 
j
=0; j < (
w‹d_t
); j++)

1204 
i
 = (()(
¸c_accum
 >> 24Ë^ (
d©a
 >> (
j
*8))) & 0xff;

1205 
¸c_accum
 = (¸c_accum << 8Ë^ 
¸c_èbÀ
[
i
];

1207  
¸c_accum
;

1208 
	}
}

	@misc.h

62 #i‚de‡
MISC_H


63 
	#MISC_H


	)

65 
	~<°dio.h
>

66 
	~<°dlib.h
>

67 
	~<°d¨g.h
>

68 
	~<°rög.h
>

69 
	~<sys/ty≥s.h
>

71 
	~"ho°.h
"

74 #i‚de‡
TRUE


75 
	#TRUE
 1

	)

77 #i‚de‡
FALSE


78 
	#FALSE
 0

	)

82 #i‚de‡
MAX


83 
	#MAX
(
a
, 
b
Ë((◊Ë< (b)Ë? (bË: (a))

	)

85 #i‚de‡
MIN


86 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

90 
	#LLHIGH
(
L
Ë(()(((L)>>32Ë& 0xffffffff))

	)

91 
	#LLLOW
(
L
Ë(()((LË& 0xffffffff))

	)

94 
	#N_ELT
(
ARR
Ë((ARR)/((ARR)[0]))

	)

97 
	#ROUND_UP
(
N
,
ALIGN
Ë(((NË+ ((ALIGN)-1)Ë& ~((ALIGN)-1))

	)

98 
	#ROUND_DOWN
(
N
,
ALIGN
Ë((NË& ~((ALIGN)-1))

	)

101 
vîbo£
;

103 #ifde‡
DEBUG


105 
debuggög
;

110 
Áèl_hook
((*
hook_‚
)(
FILE
 *
°ªam
));

116 
	#Áèl
(
fmt
, 
¨gs
...) \

117 
	`_Áèl
(
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
fmt
, ## 
¨gs
)

	)

120 
	$_Áèl
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

121 
	`__©åibuã__
 ((
n‹ëu∫
));

124 
	`Áèl
(*
fmt
, ...);

131 
	#∑nic
(
fmt
, 
¨gs
...) \

132 
	`_∑nic
(
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
fmt
, ## 
¨gs
)

	)

135 
	$_∑nic
(*
fûe
, *
func
, 
löe
, *
fmt
, ...)

136 
	`__©åibuã__
 ((
n‹ëu∫
));

139 
	`∑nic
(*
fmt
, ...);

146 
	#w¨n
(
fmt
, 
¨gs
...) \

147 
	`_w¨n
(
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
fmt
, ## 
¨gs
)

	)

150 
	`_w¨n
(*
fûe
, *
func
, 
löe
, *
fmt
, ...);

153 
	`w¨n
(*
fmt
, ...);

161 
	#öfo
(
fmt
, 
¨gs
...) \

162 
	`_öfo
(
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
fmt
, ## 
¨gs
)

	)

165 
	`_öfo
(*
fûe
, *
func
, 
löe
, *
fmt
, ...);

168 
	`öfo
(*
fmt
, ...);

171 #ifde‡
DEBUG


178 
	#debug
(
fmt
, 
¨gs
...) \

180 i‡(
debuggög
) \

181 
	`_debug
(
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
fmt
, ## 
¨gs
); \

182 
	}
} 0)

	)

185 
_debug
(*
fûe
, *
func
, 
löe
, *
fmt
, ...);

188 
debug
(*
fmt
, ...);

196 
	#debug
(
fmt
, 
¨gs
...)

	)

199 
	$debug
(*
fmt
, ...Ë{
	}
}

206 
my§™d
(
£ed
);

209 
myønd
();

214 
my°rdup
(*
s
);

218 
my°ºchr
(*
s
, 
c
);

223 
my°ricmp
(*
s1
, *
s2
);

227 *
gëc‹e
(
nbyãs
);

230 
log_ba£2
(
n
);

233 *
ñ≠£d_time
(
£c
);

241 
exåa˘l
(
w‹d
,

242 
pos
,

243 
num
);

245 #i‡
deföed
(
•¨c
Ë&& !deföed(
__svr4__
)

246 
	#°πoul
 
°πﬁ


	)

252 *
myv•rötf
(*
obuf
, *
f‹m©
, 
va_li°
 
v
);

255 *
my•rötf
(*
obuf
, *
f‹m©
, ...);

258 
myvÂrötf
(
FILE
 *
°ªam
, *
f‹m©
, 
va_li°
 
v
);

261 
myÂrötf
(
FILE
 *
°ªam
, *
f‹m©
, ...);

263 #ifde‡
HOST_HAS_QWORD


266 
sqw‹d_t
 
my©osq
(*
≈å
, **
ídp
, 
ba£
);

269 
qw‹d_t
 
my©oq
(*
≈å
, **
ídp
, 
ba£
);

275 
FILE
 *
gz›í
(*
‚ame
, *
ty≥
);

278 
gz˛o£
(
FILE
 *
fd
);

281 
w‹d_t
 
¸c
(w‹d_à
¸c_accum
, w‹d_à
d©a
);

	@options.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 #i‚de‡
_MSC_VER


55 
	~<uni°d.h
>

57 
	#chdú
 
_chdú


	)

58 
	#gëcwd
 
_gëcwd


	)

60 
	~<°rög.h
>

61 
	~<˘y≥.h
>

62 
	~<Êﬂt.h
>

64 
	~"ho°.h
"

65 
	~"misc.h
"

66 
	~"›ti⁄s.h
"

69 
›t_odb_t
 *

70 
	$›t_√w
(
‹ph™_‚_t
 
‹ph™_‚
)

72 
›t_odb_t
 *
odb
;

74 
odb
 = (
›t_odb_t
 *)
	`ˇŒoc
(1, (opt_odb_t));

75 i‡(!
odb
)

76 
	`Áèl
("out of virtual memory");

78 
odb
->
›ti⁄s
 = 
NULL
;

79 
odb
->
‹ph™_‚
 = orphan_fn;

80 
odb
->
hódî
 = 
NULL
;

81 
odb
->
nŸes
 = 
NULL
;

83  
odb
;

84 
	}
}

88 
	$›t_dñëe
(
›t_odb_t
 *
odb
)

90 
›t_›t_t
 *
›t
, *
›t_√xt
;

91 
›t_nŸe_t
 *
nŸe
, *
nŸe_√xt
;

94 
›t
=
odb
->
›ti⁄s
; o±; o±=
›t_√xt
)

96 
›t_√xt
 = 
›t
->
√xt
;

97 
›t
->
√xt
 = 
NULL
;

98 
	`‰ì
(
›t
);

102 
nŸe
 = 
odb
->
nŸes
;ÇŸê!
NULL
;ÇŸê
nŸe_√xt
)

104 
nŸe_√xt
 = 
nŸe
->
√xt
;

105 
nŸe
->
√xt
 = 
NULL
;

106 
	`‰ì
(
nŸe
);

108 
odb
->
nŸes
 = 
NULL
;

110 
	`‰ì
(
odb
);

111 
	}
}

115 
	$add_›ti⁄
(
›t_odb_t
 *
odb
,

116 
›t_›t_t
 *
›t
)

118 
›t_›t_t
 *
ñt
, *
¥ev
;

121 i‡(
›t
->
«me
[0] != '-')

122 
	`∑nic
("›ti⁄ `%s' mu° sèπ wôhá `-'", 
›t
->
«me
);

125 
¥ev
=
NULL
, 
ñt
=
odb
->
›ti⁄s
;É… !NULL;ÖªvÛ…,É…Û…->
√xt
)

128 i‡(
ñt
->
«me
[0] =
›t
->«me[0] && !
	`°rcmp
(elt->name, opt->name))

129 
	`∑nic
("›ti⁄ `%s' i†mu…ùly deföed", 
›t
->
«me
);

132 i‡(
¥ev
 !
NULL
)

133 
¥ev
->
√xt
 = 
›t
;

135 
odb
->
›ti⁄s
 = 
›t
;

136 
›t
->
√xt
 = 
NULL
;

137 
	}
}

141 
	$›t_ªg_öt
(
›t_odb_t
 *
odb
,

142 *
«me
,

143 *
desc
,

144 *
v¨
,

145 
def_vÆ
,

146 
¥öt
,

147 *
f‹m©
)

149 
›t_›t_t
 *
›t
;

151 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

152 i‡(!
›t
)

153 
	`Áèl
("out of virtual memory");

155 
›t
->
«me
 =Çame;

156 
›t
->
desc
 = desc;

157 
›t
->
nv¨s
 = 1;

158 
›t
->
√…
 = 
NULL
;

159 
›t
->
f‹m©
 = format ? format : "%12d";

160 
›t
->
oc
 = 
oc_öt
;

161 
›t
->
v¨ü¡
.
f‹_öt
.
v¨
 = var;

162 
›t
->
¥öt
 =Örint;

163 
›t
->
ac¸ue
 = 
FALSE
;

166 
›t
->
√xt
 = 
NULL
;

167 
	`add_›ti⁄
(
odb
, 
›t
);

170 *
v¨
 = 
def_vÆ
;

171 
	}
}

175 
	$›t_ªg_öt_li°
(
›t_odb_t
 *
odb
,

176 *
«me
,

177 *
desc
,

178 *
v¨s
,

179 
nv¨s
,

180 *
√…
,

181 *
def_vÆ
,

182 
¥öt
,

183 *
f‹m©
,

184 
ac¸ue
)

186 
i
;

187 
›t_›t_t
 *
›t
;

189 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

190 i‡(!
›t
)

191 
	`Áèl
("out of virtual memory");

193 
›t
->
«me
 =Çame;

194 
›t
->
desc
 = desc;

195 
›t
->
nv¨s
 =Çvars;

196 
›t
->
√…
 =Çelt;

197 
›t
->
f‹m©
 = format ? format : "%d";

198 
›t
->
oc
 = 
oc_öt
;

199 
›t
->
v¨ü¡
.
f‹_öt
.
v¨
 = 
v¨s
;

200 
›t
->
¥öt
 =Örint;

201 
›t
->
ac¸ue
 =áccrue;

204 
›t
->
√xt
 = 
NULL
;

205 
	`add_›ti⁄
(
odb
, 
›t
);

208 
i
=0; i < *
√…
; i++)

209 
v¨s
[
i
] = 
def_vÆ
[i];

210 
	}
}

214 
	$›t_ªg_uöt
(
›t_odb_t
 *
odb
,

215 *
«me
,

216 *
desc
,

217 *
v¨
,

218 
def_vÆ
,

219 
¥öt
,

220 *
f‹m©
)

222 
›t_›t_t
 *
›t
;

224 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

225 i‡(!
›t
)

226 
	`Áèl
("out of virtual memory");

228 
›t
->
«me
 =Çame;

229 
›t
->
desc
 = desc;

230 
›t
->
nv¨s
 = 1;

231 
›t
->
√…
 = 
NULL
;

232 
›t
->
f‹m©
 = format ? format : "%12u";

233 
›t
->
oc
 = 
oc_uöt
;

234 
›t
->
v¨ü¡
.
f‹_uöt
.
v¨
 = var;

235 
›t
->
¥öt
 =Örint;

236 
›t
->
ac¸ue
 = 
FALSE
;

239 
›t
->
√xt
 = 
NULL
;

240 
	`add_›ti⁄
(
odb
, 
›t
);

243 *
v¨
 = 
def_vÆ
;

244 
	}
}

248 
	$›t_ªg_uöt_li°
(
›t_odb_t
 *
odb
,

249 *
«me
,

250 *
desc
,

251 *
v¨s
,

252 
nv¨s
,

253 *
√…
,

254 *
def_vÆ
,

255 
¥öt
,

256 *
f‹m©
,

257 
ac¸ue
)

259 
i
;

260 
›t_›t_t
 *
›t
;

262 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

263 i‡(!
›t
)

264 
	`Áèl
("out of virtual memory");

266 
›t
->
«me
 =Çame;

267 
›t
->
desc
 = desc;

268 
›t
->
nv¨s
 =Çvars;

269 
›t
->
√…
 =Çelt;

270 
›t
->
f‹m©
 = format ? format : "%u";

271 
›t
->
oc
 = 
oc_uöt
;

272 
›t
->
v¨ü¡
.
f‹_uöt
.
v¨
 = 
v¨s
;

273 
›t
->
¥öt
 =Örint;

274 
›t
->
ac¸ue
 =áccrue;

277 
›t
->
√xt
 = 
NULL
;

278 
	`add_›ti⁄
(
odb
, 
›t
);

281 
i
=0; i < *
√…
; i++)

282 
v¨s
[
i
] = 
def_vÆ
[i];

283 
	}
}

287 
	$›t_ªg_Êﬂt
(
›t_odb_t
 *
odb
,

288 *
«me
,

289 *
desc
,

290 *
v¨
,

291 
def_vÆ
,

292 
¥öt
,

293 *
f‹m©
)

295 
›t_›t_t
 *
›t
;

297 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

298 i‡(!
›t
)

299 
	`Áèl
("out of virtual memory");

301 
›t
->
«me
 =Çame;

302 
›t
->
desc
 = desc;

303 
›t
->
nv¨s
 = 1;

304 
›t
->
√…
 = 
NULL
;

305 
›t
->
f‹m©
 = format ? format : "%12.4f";

306 
›t
->
oc
 = 
oc_Êﬂt
;

307 
›t
->
v¨ü¡
.
f‹_Êﬂt
.
v¨
 = var;

308 
›t
->
¥öt
 =Örint;

309 
›t
->
ac¸ue
 = 
FALSE
;

312 
›t
->
√xt
 = 
NULL
;

313 
	`add_›ti⁄
(
odb
, 
›t
);

316 *
v¨
 = 
def_vÆ
;

317 
	}
}

321 
	$›t_ªg_Êﬂt_li°
(
›t_odb_t
 *
odb
,

322 *
«me
,

323 *
desc
,

324 *
v¨s
,

325 
nv¨s
,

326 *
√…
,

327 *
def_vÆ
,

328 
¥öt
,

329 *
f‹m©
,

330 
ac¸ue
)

332 
i
;

333 
›t_›t_t
 *
›t
;

335 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

336 i‡(!
›t
)

337 
	`Áèl
("out of virtual memory");

339 
›t
->
«me
 =Çame;

340 
›t
->
desc
 = desc;

341 
›t
->
nv¨s
 =Çvars;

342 
›t
->
√…
 =Çelt;

343 
›t
->
f‹m©
 = format ? format : "%.4f";

344 
›t
->
oc
 = 
oc_Êﬂt
;

345 
›t
->
v¨ü¡
.
f‹_Êﬂt
.
v¨
 = 
v¨s
;

346 
›t
->
¥öt
 =Örint;

347 
›t
->
ac¸ue
 =áccrue;

350 
›t
->
√xt
 = 
NULL
;

351 
	`add_›ti⁄
(
odb
, 
›t
);

354 
i
=0; i < *
√…
; i++)

355 
v¨s
[
i
] = 
def_vÆ
[i];

356 
	}
}

360 
	$›t_ªg_doubÀ
(
›t_odb_t
 *
odb
,

361 *
«me
,

362 *
desc
,

363 *
v¨
,

364 
def_vÆ
,

365 
¥öt
,

366 *
f‹m©
)

368 
›t_›t_t
 *
›t
;

370 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

371 i‡(!
›t
)

372 
	`Áèl
("out of virtual memory");

374 
›t
->
«me
 =Çame;

375 
›t
->
desc
 = desc;

376 
›t
->
nv¨s
 = 1;

377 
›t
->
√…
 = 
NULL
;

378 
›t
->
f‹m©
 = format ? format : "%12.4f";

379 
›t
->
oc
 = 
oc_doubÀ
;

380 
›t
->
v¨ü¡
.
f‹_doubÀ
.
v¨
 = var;

381 
›t
->
¥öt
 =Örint;

382 
›t
->
ac¸ue
 = 
FALSE
;

385 
›t
->
√xt
 = 
NULL
;

386 
	`add_›ti⁄
(
odb
, 
›t
);

389 *
v¨
 = 
def_vÆ
;

390 
	}
}

394 
	$›t_ªg_doubÀ_li°
(
›t_odb_t
 *
odb
,

395 *
«me
,

396 *
desc
,

397 *
v¨s
,

398 
nv¨s
,

399 *
√…
,

400 *
def_vÆ
,

401 
¥öt
,

402 *
f‹m©
,

403 
ac¸ue
)

405 
i
;

406 
›t_›t_t
 *
›t
;

408 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

409 i‡(!
›t
)

410 
	`Áèl
("out of virtual memory");

412 
›t
->
«me
 =Çame;

413 
›t
->
desc
 = desc;

414 
›t
->
nv¨s
 =Çvars;

415 
›t
->
√…
 =Çelt;

416 
›t
->
f‹m©
 = format ? format : "%.4f";

417 
›t
->
oc
 = 
oc_doubÀ
;

418 
›t
->
v¨ü¡
.
f‹_doubÀ
.
v¨
 = 
v¨s
;

419 
›t
->
¥öt
 =Örint;

420 
›t
->
ac¸ue
 =áccrue;

423 
›t
->
√xt
 = 
NULL
;

424 
	`add_›ti⁄
(
odb
, 
›t
);

427 
i
=0; i < *
√…
; i++)

428 
v¨s
[
i
] = 
def_vÆ
[i];

429 
	}
}

433 
	$böd_to_íum
(*
°r
,

434 **
em≠
,

435 *
evÆ
,

436 
em≠_sz
,

437 *
ªs
)

439 
i
;

442 
i
=0; i<
em≠_sz
; i++)

444 i‡(!
	`°rcmp
(
°r
, 
em≠
[
i
]))

446 i‡(
evÆ
)

449 *
ªs
 = 
evÆ
[
i
];

454 *
ªs
 = 
i
;

456  
TRUE
;

461 *
ªs
 = -1;

462  
FALSE
;

463 
	}
}

467 
	$böd_to_°r
(
vÆ
,

468 **
em≠
,

469 *
evÆ
,

470 
em≠_sz
)

472 
i
;

474 i‡(
evÆ
)

477 
i
=0; i<
em≠_sz
; i++)

479 i‡(
evÆ
[
i
] =
vÆ
)

482  
em≠
[
i
];

486  
NULL
;

491 i‡(
vÆ
 >
em≠_sz
)

494  
NULL
;

497  
em≠
[
vÆ
];

499 
	}
}

505 
	$›t_ªg_íum
(
›t_odb_t
 *
odb
,

506 *
«me
,

507 *
desc
,

508 *
v¨
,

509 *
def_vÆ
,

510 **
em≠
,

511 *
evÆ
,

512 
em≠_sz
,

513 
¥öt
,

514 *
f‹m©
)

516 
íum_vÆ
;

517 
›t_›t_t
 *
›t
;

519 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

520 i‡(!
›t
)

521 
	`Áèl
("out of virtual memory");

523 
›t
->
«me
 =Çame;

524 
›t
->
desc
 = desc;

525 
›t
->
nv¨s
 = 1;

526 
›t
->
√…
 = 
NULL
;

527 
›t
->
f‹m©
 = format ? format : "%12s";

528 
›t
->
oc
 = 
oc_íum
;

529 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
 = var;

530 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
 =Émap;

531 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
 =Éval;

532 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
 =Émap_sz;

533 i‡(
def_vÆ
)

535 i‡(!
	`böd_to_íum
(
def_vÆ
, 
em≠
, 
evÆ
, 
em≠_sz
, &
íum_vÆ
))

536 
	`Áèl
("couldÇŸ böd deÁu… vÆuêf‹ o±i⁄ `%s'", 
«me
);

539 
íum_vÆ
 = 0;

540 
›t
->
¥öt
 =Örint;

541 
›t
->
ac¸ue
 = 
FALSE
;

544 
›t
->
√xt
 = 
NULL
;

545 
	`add_›ti⁄
(
odb
, 
›t
);

548 *
v¨
 = 
íum_vÆ
;

549 
	}
}

555 
	$›t_ªg_íum_li°
(
›t_odb_t
 *
odb
,

556 *
«me
,

557 *
desc
,

558 *
v¨s
,

559 
nv¨s
,

560 *
√…
,

561 *
def_vÆ
,

562 **
em≠
,

563 *
evÆ
,

564 
em≠_sz
,

565 
¥öt
,

566 *
f‹m©
,

567 
ac¸ue
)

569 
i
, 
íum_vÆ
;

570 
›t_›t_t
 *
›t
;

572 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

573 i‡(!
›t
)

574 
	`Áèl
("out of virtual memory");

576 
›t
->
«me
 =Çame;

577 
›t
->
desc
 = desc;

578 
›t
->
nv¨s
 =Çvars;

579 
›t
->
√…
 =Çelt;

580 
›t
->
f‹m©
 = format ? format : "%s";

581 
›t
->
oc
 = 
oc_íum
;

582 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
 = 
v¨s
;

583 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
 =Émap;

584 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
 =Éval;

585 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
 =Émap_sz;

586 i‡(
def_vÆ
)

588 i‡(!
	`böd_to_íum
(
def_vÆ
, 
em≠
, 
evÆ
, 
em≠_sz
, &
íum_vÆ
))

589 
	`Áèl
("couldÇŸ böd deÁu… vÆuêf‹ o±i⁄ `%s'", 
«me
);

592 
íum_vÆ
 = 0;

593 
›t
->
¥öt
 =Örint;

594 
›t
->
ac¸ue
 =áccrue;

597 
›t
->
√xt
 = 
NULL
;

598 
	`add_›ti⁄
(
odb
, 
›t
);

601 
i
=0; i < *
√…
; i++)

602 
v¨s
[
i
] = 
íum_vÆ
;

603 
	}
}

606 
	#NUM_FLAGS
 28

	)

607 *
	gÊag_em≠
[
NUM_FLAGS
] = {

613 
	gÊag_evÆ
[
NUM_FLAGS
] = {

620 
	$›t_ªg_Êag
(
›t_odb_t
 *
odb
,

621 *
«me
,

622 *
desc
,

623 *
v¨
,

624 
def_vÆ
,

625 
¥öt
,

626 *
f‹m©
)

628 
›t_›t_t
 *
›t
;

630 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

631 i‡(!
›t
)

632 
	`Áèl
("out of virtual memory");

634 
›t
->
«me
 =Çame;

635 
›t
->
desc
 = desc;

636 
›t
->
nv¨s
 = 1;

637 
›t
->
√…
 = 
NULL
;

638 
›t
->
f‹m©
 = format ? format : "%12s";

639 
›t
->
oc
 = 
oc_Êag
;

640 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
 = var;

641 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
 = 
Êag_em≠
;

642 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
 = 
Êag_evÆ
;

643 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
 = 
NUM_FLAGS
;

644 
›t
->
¥öt
 =Örint;

645 
›t
->
ac¸ue
 = 
FALSE
;

648 
›t
->
√xt
 = 
NULL
;

649 
	`add_›ti⁄
(
odb
, 
›t
);

652 *
v¨
 = 
def_vÆ
;

653 
	}
}

657 
	$›t_ªg_Êag_li°
(
›t_odb_t
 *
odb
,

658 *
«me
,

659 *
desc
,

660 *
v¨s
,

661 
nv¨s
,

662 *
√…
,

663 *
def_vÆ
,

664 
¥öt
,

665 *
f‹m©
,

666 
ac¸ue
)

668 
i
;

669 
›t_›t_t
 *
›t
;

671 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

672 i‡(!
›t
)

673 
	`Áèl
("out of virtual memory");

675 
›t
->
«me
 =Çame;

676 
›t
->
desc
 = desc;

677 
›t
->
nv¨s
 =Çvars;

678 
›t
->
√…
 =Çelt;

679 
›t
->
f‹m©
 = format ? format : "%s";

680 
›t
->
oc
 = 
oc_Êag
;

681 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
 = 
v¨s
;

682 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
 = 
Êag_em≠
;

683 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
 = 
Êag_evÆ
;

684 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
 = 
NUM_FLAGS
;

685 
›t
->
¥öt
 =Örint;

686 
›t
->
ac¸ue
 =áccrue;

689 
›t
->
√xt
 = 
NULL
;

690 
	`add_›ti⁄
(
odb
, 
›t
);

693 
i
=0; i < *
√…
; i++)

694 
v¨s
[
i
] = 
def_vÆ
[i];

695 
	}
}

699 
	$›t_ªg_°rög
(
›t_odb_t
 *
odb
,

700 *
«me
,

701 *
desc
,

702 **
v¨
,

703 *
def_vÆ
,

704 
¥öt
,

705 *
f‹m©
)

707 
›t_›t_t
 *
›t
;

709 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

710 i‡(!
›t
)

711 
	`Áèl
("out of virtual memory");

713 
›t
->
«me
 =Çame;

714 
›t
->
desc
 = desc;

715 
›t
->
nv¨s
 = 1;

716 
›t
->
√…
 = 
NULL
;

717 
›t
->
f‹m©
 = format ? format : "%12s";

718 
›t
->
oc
 = 
oc_°rög
;

719 
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
 = var;

720 
›t
->
¥öt
 =Örint;

721 
›t
->
ac¸ue
 = 
FALSE
;

724 
›t
->
√xt
 = 
NULL
;

725 
	`add_›ti⁄
(
odb
, 
›t
);

728 *
v¨
 = 
def_vÆ
;

729 
	}
}

733 
	$›t_ªg_°rög_li°
(
›t_odb_t
 *
odb
,

734 *
«me
,

735 *
desc
,

736 **
v¨s
,

737 
nv¨s
,

738 *
√…
,

739 **
def_vÆ
,

740 
¥öt
,

741 *
f‹m©
,

742 
ac¸ue
)

744 
i
;

745 
›t_›t_t
 *
›t
;

747 
›t
 = (
›t_›t_t
 *)
	`ˇŒoc
(1, (opt_opt_t));

748 i‡(!
›t
)

749 
	`Áèl
("out of virtual memory");

751 
›t
->
«me
 =Çame;

752 
›t
->
desc
 = desc;

753 
›t
->
nv¨s
 =Çvars;

754 
›t
->
√…
 =Çelt;

755 
›t
->
f‹m©
 = format ? format : "%s";

756 
›t
->
oc
 = 
oc_°rög
;

757 
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
 = 
v¨s
;

758 
›t
->
¥öt
 =Örint;

759 
›t
->
ac¸ue
 =áccrue;

762 
›t
->
√xt
 = 
NULL
;

763 
	`add_›ti⁄
(
odb
, 
›t
);

766 
i
=0; i < *
√…
; i++)

767 
v¨s
[
i
] = 
def_vÆ
[i];

768 
	}
}

772 
	$¥o˚ss_›ti⁄
(
›t_odb_t
 *
odb
,

773 
ödex
,

774 
¨gc
,

775 **
¨gv
)

777 
˙t
, 
ít
, 
nv¨s
;

778 *
ídp
;

779 
tmp
;

780 
›t_›t_t
 *
›t
;

783 
›t
=
odb
->
›ti⁄s
; o± !
NULL
; o±=›t->
√xt
)

785 i‡(!
	`°rcmp
(
›t
->
«me
, 
¨gv
[
ödex
]))

788 i‡(!
›t
)

791 
	`Áèl
("›ti⁄ `%s' i†undeföed", 
¨gv
[
ödex
]);

793 
ödex
++;

796 
›t
->
oc
)

798 
oc_öt
:

800 i‡(
ödex
 >
¨gc


801 || (
¨gv
[
ödex
][0] ='-' && !
	`isdigô
(()argv[index][1])))

804 
	`Áèl
("›ti⁄ `%s'Ñequúe†™árgumít", 
›t
->
«me
);

806 
˙t
 = 0;

807 i‡(
›t
->
ac¸ue
)

809 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

810 
nv¨s
 = 1;

811 i‡(
ít
 >
›t
->
nv¨s
)

812 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

816 
ít
 = 0;

817 i‡(
›t
->
√…
)

818 *
›t
->
√…
 = 0;

819 
nv¨s
 = 
›t
->nvars;

822 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 &&

823 (
¨gv
[
ödex
][0] !'-' || 
	`isdigô
(()argv[index][1])))

825 
›t
->
v¨ü¡
.
f‹_öt
.
v¨
[
ít
] = 
	`°πﬁ
(
¨gv
[
ödex
], &
ídp
, 0);

826 i‡(*
ídp
)

829 
	`Áèl
("couldÇotÖarseárgument `%s' of option `%s'",

830 
¨gv
[
ödex
], 
›t
->
«me
);

833 i‡(
›t
->
√…
)

834 (*
›t
->
√…
)++;

835 
˙t
++; 
ödex
++; 
ít
++;

838 
oc_uöt
:

840 i‡(
ödex
 >
¨gc
 || 
¨gv
[index][0] == '-')

843 
	`Áèl
("›ti⁄ `%s'Ñequúe†™árgumít", 
›t
->
«me
);

845 
˙t
 = 0;

846 i‡(
›t
->
ac¸ue
)

848 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

849 
nv¨s
 = 1;

850 i‡(
ít
 >
›t
->
nv¨s
)

851 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

855 
ít
 = 0;

856 i‡(
›t
->
√…
)

857 *
›t
->
√…
 = 0;

858 
nv¨s
 = 
›t
->nvars;

861 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 && 
¨gv
[index][0] != '-')

863 
›t
->
v¨ü¡
.
f‹_uöt
.
v¨
[
ít
] = 
	`°πoul
(
¨gv
[
ödex
], &
ídp
, 0);

864 i‡(*
ídp
)

867 
	`Áèl
("couldÇotÖarseárgument `%s' of option `%s'",

868 
¨gv
[
ödex
], 
›t
->
«me
);

871 i‡(
›t
->
√…
)

872 (*
›t
->
√…
)++;

873 
˙t
++; 
ödex
++; 
ít
++;

876 
oc_Êﬂt
:

878 i‡(
ödex
 >
¨gc


879 || (
¨gv
[
ödex
][0] ='-' && !
	`isdigô
(()argv[index][1])))

882 
	`Áèl
("›ti⁄ `%s'Ñequúe†™árgumít", 
›t
->
«me
);

884 
˙t
 = 0;

885 i‡(
›t
->
ac¸ue
)

887 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

888 
nv¨s
 = 1;

889 i‡(
ít
 >
›t
->
nv¨s
)

890 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

894 
ít
 = 0;

895 i‡(
›t
->
√…
)

896 *
›t
->
√…
 = 0;

897 
nv¨s
 = 
›t
->nvars;

900 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 &&

901 (
¨gv
[
ödex
][0] !'-' || 
	`isdigô
(()argv[index][1])))

903 
tmp
 = 
	`°πod
(
¨gv
[
ödex
], &
ídp
);

904 i‡(*
ídp
)

907 
	`Áèl
("couldÇotÖarseárgument `%s' of option `%s'",

908 
¨gv
[
ödex
], 
›t
->
«me
);

910 i‡(
tmp
 < 
FLT_MIN
 ||Åm∞> 
FLT_MAX
)

913 
	`Áèl
("FP over/underflow forárgument `%s' of option `%s'",

914 
¨gv
[
ödex
], 
›t
->
«me
);

917 
›t
->
v¨ü¡
.
f‹_Êﬂt
.
v¨
[
ít
] = ()
tmp
;

918 i‡(
›t
->
√…
)

919 (*
›t
->
√…
)++;

920 
˙t
++; 
ödex
++; 
ít
++;

923 
oc_doubÀ
:

925 i‡(
ödex
 >
¨gc


926 || (
¨gv
[
ödex
][0] ='-' && !
	`isdigô
(()argv[index][1])))

929 
	`Áèl
("›ti⁄ `%s'Ñequúe†™árgumít", 
›t
->
«me
);

931 
˙t
 = 0;

932 i‡(
›t
->
ac¸ue
)

934 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

935 
nv¨s
 = 1;

936 i‡(
ít
 >
›t
->
nv¨s
)

937 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

941 
ít
 = 0;

942 i‡(
›t
->
√…
)

943 *
›t
->
√…
 = 0;

944 
nv¨s
 = 
›t
->nvars;

947 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 &&

948 (
¨gv
[
ödex
][0] !'-' || 
	`isdigô
(()argv[index][1])))

950 
›t
->
v¨ü¡
.
f‹_doubÀ
.
v¨
[
ít
] = 
	`°πod
(
¨gv
[
ödex
], &
ídp
);

951 i‡(*
ídp
)

954 
	`Áèl
("couldÇotÖarseárgument `%s' of option `%s'",

955 
¨gv
[
ödex
], 
›t
->
«me
);

958 i‡(
›t
->
√…
)

959 (*
›t
->
√…
)++;

960 
˙t
++; 
ödex
++; 
ít
++;

963 
oc_íum
:

965 i‡(
ödex
 >
¨gc
 || 
¨gv
[index][0] == '-')

968 
	`Áèl
("›ti⁄ `%s'Ñequúe†™árgumít", 
›t
->
«me
);

970 
˙t
 = 0;

971 i‡(
›t
->
ac¸ue
)

973 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

974 
nv¨s
 = 1;

975 i‡(
ít
 >
›t
->
nv¨s
)

976 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

980 
ít
 = 0;

981 i‡(
›t
->
√…
)

982 *
›t
->
√…
 = 0;

983 
nv¨s
 = 
›t
->nvars;

986 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 && 
¨gv
[index][0] != '-')

988 i‡(!
	`böd_to_íum
(
¨gv
[
ödex
],

989 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
,

990 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
,

991 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
,

992 &
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
ít
]))

995 
	`Áèl
("couldÇotÖarseárgument `%s' of option `%s'",

996 
¨gv
[
ödex
], 
›t
->
«me
);

999 i‡(
›t
->
√…
)

1000 (*
›t
->
√…
)++;

1001 
˙t
++; 
ödex
++; 
ít
++;

1004 
oc_Êag
:

1006 i‡(
ödex
 >
¨gc
 || 
¨gv
[index][0] == '-')

1009 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[0] = 
TRUE
;

1013 
˙t
 = 0;

1014 i‡(
›t
->
ac¸ue
)

1016 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

1017 
nv¨s
 = 1;

1018 i‡(
ít
 >
›t
->
nv¨s
)

1019 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

1023 
ít
 = 0;

1024 i‡(
›t
->
√…
)

1025 *
›t
->
√…
 = 0;

1026 
nv¨s
 = 
›t
->nvars;

1028 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 && 
¨gv
[index][0] != '-')

1030 i‡(!
	`böd_to_íum
(
¨gv
[
ödex
],

1031 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
,

1032 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
,

1033 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
,

1034 &
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
ít
]))

1037 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
ít
] = 
TRUE
;

1043 i‡(
›t
->
√…
)

1044 (*
›t
->
√…
)++;

1045 
˙t
++; 
ödex
++; 
ít
++;

1049 
oc_°rög
:

1051 i‡(
ödex
 >
¨gc
 || 
¨gv
[index][0] == '-')

1054 
	`Áèl
("›ti⁄ `%s'Ñequúe†™árgumít", 
›t
->
«me
);

1056 
˙t
 = 0;

1057 i‡(
›t
->
ac¸ue
)

1059 
ít
 = 
›t
->
√…
 ? *opt->nelt : 0;

1060 
nv¨s
 = 1;

1061 i‡(
ít
 >
›t
->
nv¨s
)

1062 
	`Áèl
("toÿm™y invoˇti⁄†o‡›ti⁄ `%s'", 
›t
->
«me
);

1066 
ít
 = 0;

1067 i‡(
›t
->
√…
)

1068 *
›t
->
√…
 = 0;

1069 
nv¨s
 = 
›t
->nvars;

1072 
ödex
 < 
¨gc
 && 
˙t
 < 
nv¨s
 && 
¨gv
[index][0] != '-')

1074 
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
[
ít
] = 
¨gv
[
ödex
];

1075 i‡(
›t
->
√…
)

1076 (*
›t
->
√…
)++;

1077 
˙t
++; 
ödex
++; 
ít
++;

1081 
	`∑nic
("bogus option class");

1084  
ödex
;

1085 
	}
}

1088 
¥o˚ss_fûe
(
›t_odb_t
 *
odb
, *
‚ame
, 
dïth
);

1089 
dump_c⁄fig
(
›t_odb_t
 *
odb
, *
‚ame
);

1093 
	$__›t_¥o˚ss_›ti⁄s
(
›t_odb_t
 *
odb
,

1094 
¨gc
,

1095 **
¨gv
,

1096 
dïth
)

1098 
ödex
, 
do_dumpc⁄fig
;

1099 *
dumpc⁄fig_«me
;

1101 
ödex
 = 0;

1102 
do_dumpc⁄fig
 = 
FALSE
;

1103 
dumpc⁄fig_«me
 = 
NULL
;

1105 
ödex
 < 
¨gc
)

1108 
ödex
 < 
¨gc
 && 
¨gv
[index][0] != '-')

1110 i‡(
dïth
 > 0)

1113 
	`Áèl
("orphan `%s'Éncountered during config fileÖrocessing",

1114 
¨gv
[
ödex
]);

1117 i‡(
odb
->
‹ph™_‚
)

1119 i‡(!
odb
->
	`‹ph™_‚
(
ödex
+1, 
¨gc
, 
¨gv
))

1122 
d⁄e_¥o˚ssög
;

1128 
	`Áèl
("‹ph™árgumíà`%s' wa†un˛aimed", 
¨gv
[
ödex
]);

1134 i‡(
ödex
 =
¨gc
)

1137 
d⁄e_¥o˚ssög
;

1142 i‡(!
	`°rcmp
(
¨gv
[
ödex
], "-config"))

1145 
ödex
++;

1146 i‡(
ödex
 >
¨gc
 || 
¨gv
[index][0] == '-')

1149 
	`Áèl
("option `-config'Ñequiresánárgument");

1151 
	`¥o˚ss_fûe
(
odb
, 
¨gv
[
ödex
], 
dïth
);

1152 
ödex
++;

1154 i‡(!
	`°rcmp
(
¨gv
[
ödex
], "-dumpconfig"))

1157 
do_dumpc⁄fig
 = 
TRUE
;

1159 
ödex
++;

1160 i‡(
ödex
 >
¨gc


1161 || (
¨gv
[
ödex
][0] == '-' &&árgv[index][1] != '\0'))

1164 
	`Áèl
("option `-dumpconfig'Ñequiresánárgument");

1166 
dumpc⁄fig_«me
 = 
¨gv
[
ödex
];

1167 
ödex
++;

1172 
ödex
 = 
	`¥o˚ss_›ti⁄
(
odb
, index, 
¨gc
, 
¨gv
);

1175 
d⁄e_¥o˚ssög
:

1177 i‡(
do_dumpc⁄fig
)

1178 
	`dump_c⁄fig
(
odb
, 
dumpc⁄fig_«me
);

1179 
	}
}

1183 
	$›t_¥o˚ss_›ti⁄s
(
›t_odb_t
 *
odb
,

1184 
¨gc
,

1185 **
¨gv
)

1188 i‡(
¨gc
 < 2)

1192 
	`__›t_¥o˚ss_›ti⁄s
(
odb
, 
¨gc
-1, 
¨gv
+1, 0);

1193 
	}
}

1196 
	#MAX_LINE_ARGS
 256

	)

1197 
	#MAX_FILENAME_LEN
 1024

	)

1199 
	$¥o˚ss_fûe
(
›t_odb_t
 *
odb
, *
‚ame
, 
dïth
)

1201 
œrgc
;

1202 *
œrgv
[
MAX_LINE_ARGS
];

1203 
löe
[1024], *
p
, *
q
;

1204 
cwd
[
MAX_FILENAME_LEN
];

1205 *
hódî
;

1206 
FILE
 *
fd
;

1208 
fd
 = 
	`f›í
(
‚ame
, "r");

1209 i‡(!
fd
)

1210 
	`Áèl
("couldÇŸ o≥¿c⁄figuøti⁄ fûê`%s'", 
‚ame
);

1212 i‡(!
	`gëcwd
(
cwd
, 
MAX_FILENAME_LEN
))

1213 
	`Áèl
("can't get cwd");

1215 
hódî
 = 
	`°ºchr
(
‚ame
, '/');

1216 i‡(
hódî
 !
NULL
)

1219 *
hódî
 = '\0';

1220 i‡(
	`chdú
(
‚ame
) == -1)

1221 
	`Áèl
("ˇn'àchdúÅÿ%s\n", 
‚ame
);

1222 *
hódî
 = '/';

1225 !
	`„of
(
fd
))

1228 
	`Ârötf
(
°dîr
, "!feof(fd): %d, strlen(line): %d,Üine: %s\n",

1229 !
	`„of
(
fd
), 
	`°æí
(
löe
),Üine);

1232 
löe
[0] = '\n';

1234 
	`fgës
(
löe
, 1024, 
fd
);

1235 i‡(
löe
[0] == '\0' ||Üine[0] == '\n')

1237 i‡(
löe
[
	`°æí
(line)-1] == '\n')

1238 
löe
[
	`°æí
(line)-1] = '\0';

1241 
œrgc
 = 0; 
p
 = 
löe
;

1242 *
p
)

1245 *
p
 != '\0' && (*p == ' ' || *p == '\t'))

1246 
p
++;

1249 i‡(*
p
 == '\0' || *p == '#')

1253 
q
 = 
p
;

1254 *
q
 != '\0' && *q != ' ' && *q != '\t')

1255 
q
++;

1256 i‡(*
q
)

1258 *
q
 = '\0';

1259 
q
++;

1263 
œrgv
[
œrgc
++] = 
	`my°rdup
(
p
);

1265 i‡(
œrgc
 =
MAX_LINE_ARGS
)

1267 i‡(
	`chdú
(
cwd
) == -1)

1268 
	`Áèl
("ˇn'àchdú backÅÿ%s\n", 
cwd
);

1269 
	`Áèl
("›ti⁄Üöêtoÿcom∂ex i¿fûê`%s'", 
‚ame
);

1273 
p
 = 
q
;

1277 i‡(
œrgc
 > 0)

1278 
	`__›t_¥o˚ss_›ti⁄s
(
odb
, 
œrgc
, 
œrgv
, 
dïth
+1);

1282 
	`f˛o£
(
fd
);

1284 i‡(
	`chdú
(
cwd
) == -1)

1285 
	`Áèl
("ˇn'àchdú backÅÿ%s\n", 
cwd
);

1286 
	}
}

1290 
	$›t_¥öt_›ti⁄
(
›t_›t_t
 *
›t
,

1291 
FILE
 *
fd
)

1293 
i
, 
√…
;

1295 
›t
->
oc
)

1297 
oc_öt
:

1298 i‡(
›t
->
√…
)

1299 
√…
 = *(
›t
->nelt);

1301 
√…
 = 1;

1302 
i
=0; i<
√…
; i++)

1304 
	`Ârötf
(
fd
, 
›t
->
f‹m©
, o±->
v¨ü¡
.
f‹_öt
.
v¨
[
i
]);

1305 
	`Ârötf
(
fd
, " ");

1308 
oc_uöt
:

1309 i‡(
›t
->
√…
)

1310 
√…
 = *(
›t
->nelt);

1312 
√…
 = 1;

1313 
i
=0; i<
√…
; i++)

1315 
	`Ârötf
(
fd
, 
›t
->
f‹m©
, o±->
v¨ü¡
.
f‹_uöt
.
v¨
[
i
]);

1316 
	`Ârötf
(
fd
, " ");

1319 
oc_Êﬂt
:

1320 i‡(
›t
->
√…
)

1321 
√…
 = *(
›t
->nelt);

1323 
√…
 = 1;

1324 
i
=0; i<
√…
; i++)

1326 
	`Ârötf
(
fd
, 
›t
->
f‹m©
, ()›t->
v¨ü¡
.
f‹_Êﬂt
.
v¨
[
i
]);

1327 
	`Ârötf
(
fd
, " ");

1330 
oc_doubÀ
:

1331 i‡(
›t
->
√…
)

1332 
√…
 = *(
›t
->nelt);

1334 
√…
 = 1;

1335 
i
=0; i<
√…
; i++)

1337 
	`Ârötf
(
fd
, 
›t
->
f‹m©
, o±->
v¨ü¡
.
f‹_doubÀ
.
v¨
[
i
]);

1338 
	`Ârötf
(
fd
, " ");

1341 
oc_íum
:

1342 i‡(
›t
->
√…
)

1343 
√…
 = *(
›t
->nelt);

1345 
√…
 = 1;

1346 
i
=0; i<
√…
; i++)

1348 *
e°r
 = 
	`böd_to_°r
(
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
i
],

1349 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
,

1350 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
,

1351 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
);

1352 i‡(!
e°r
)

1353 
	`∑nic
("couldÇot bindÉnum `%d' for option `%s'",

1354 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
i
], o±->
«me
);

1356 
	`Ârötf
(
fd
, 
›t
->
f‹m©
, 
e°r
);

1357 
	`Ârötf
(
fd
, " ");

1360 
oc_Êag
:

1361 i‡(
›t
->
√…
)

1362 
√…
 = *(
›t
->nelt);

1364 
√…
 = 1;

1365 
i
=0; i<
√…
; i++)

1367 *
e°r
 = 
	`böd_to_°r
(
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
i
],

1368 
›t
->
v¨ü¡
.
f‹_íum
.
em≠
,

1369 
›t
->
v¨ü¡
.
f‹_íum
.
evÆ
,

1370 
›t
->
v¨ü¡
.
f‹_íum
.
em≠_sz
);

1371 i‡(!
e°r
)

1372 
	`∑nic
("couldÇot bind boolean `%d' for option `%s'",

1373 
›t
->
v¨ü¡
.
f‹_íum
.
v¨
[
i
], o±->
«me
);

1375 
	`Ârötf
(
fd
, 
›t
->
f‹m©
, 
e°r
);

1376 
	`Ârötf
(
fd
, " ");

1379 
oc_°rög
:

1380 i‡(!
›t
->
nv¨s
)

1382 
	`Ârötf
(
fd
, "%12s ", "<null>");

1385 i‡(
›t
->
√…
)

1386 
√…
 = *(
›t
->nelt);

1388 
√…
 = 1;

1389 i‡(
√…
 == 0)

1391 
	`Ârötf
(
fd
, "%12s ", "<null>");

1396 
i
=0; i<
√…
; i++)

1398 
	`Ârötf
(
fd
, 
›t
->
f‹m©
,

1399 (
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
[
i
]

1400 ? 
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
[
i
]

1402 
	`Ârötf
(
fd
, " ");

1407 
	`∑nic
("bogus option class");

1409 
	}
}

1413 
	$¥öt_›ti⁄_hódî
(
›t_odb_t
 *
odb
,

1414 
FILE
 *
fd
)

1416 i‡(!
odb
->
hódî
)

1419 
	`Ârötf
(
fd
, "\n%s\n", 
odb
->
hódî
);

1420 
	}
}

1424 
	$¥öt_›ti⁄_nŸes
(
›t_odb_t
 *
odb
,

1425 
FILE
 *
fd
)

1427 
›t_nŸe_t
 *
nŸe
;

1429 i‡(!
odb
->
nŸes
)

1432 
	`Ârötf
(
fd
, "\n");

1433 
nŸe
=
odb
->
nŸes
;ÇŸê!
NULL
;ÇŸeÚŸe->
√xt
)

1434 
	`Ârötf
(
fd
, "%s\n", 
nŸe
->note);

1435 
	`Ârötf
(
fd
, "\n");

1436 
	}
}

1439 
›t_›t_t
 
	gdumpc⁄fig_›t
 =

1440 { 
NULL
, "-dumpconfig", "dump configurationÅoá file",

1441 0, 
NULL
, NULL, 
FALSE
, FALSE, 
oc_°rög
 };

1442 
›t_›t_t
 
	gc⁄fig_›t
 =

1443 { &
dumpc⁄fig_›t
, "-config", "load configuration fromá file",

1444 0, 
NULL
, NULL, 
FALSE
, FALSE, 
oc_°rög
 };

1445 
›t_›t_t
 *
	gbuûtö_›ti⁄s
 = &
c⁄fig_›t
;

1449 
	$›t_nuŒ_°rög
(
›t_›t_t
 *
›t
)

1451  (
›t
 !
NULL


1452 && 
›t
->
oc
 =
oc_°rög


1453 && (
›t
->
nv¨s
 == 0

1454 || (
›t
->
√…
 !
NULL
 && *opt->nelt == 0)

1455 || (
›t
->
√…
 =
NULL


1456 && (
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
 =
NULL


1457 || 
›t
->
v¨ü¡
.
f‹_°rög
.
v¨
[0] =
NULL
))));

1458 
	}
}

1462 
	$›t_¥öt_›ti⁄s
(
›t_odb_t
 *
odb
,

1463 
FILE
 *
fd
,

1464 
ãr£
,

1465 
nŸes
)

1467 
›t_›t_t
 *
›t
;

1469 i‡(!
odb
)

1476 i‡(
nŸes
)

1477 
	`¥öt_›ti⁄_hódî
(
odb
, 
fd
);

1480 
›t
=
buûtö_›ti⁄s
; o± !
NULL
; o±=›t->
√xt
)

1482 i‡(
ãr£
)

1483 
	`Ârötf
(
fd
, "# %-27†# %s\n", 
›t
->
«me
, o±->
desc
);

1486 
	`Ârötf
(
fd
, "# %s\n", 
›t
->
desc
);

1487 
	`Ârötf
(
fd
, "# %-22s\n\n", 
›t
->
«me
);

1492 
›t
=
odb
->
›ti⁄s
; o± !
NULL
; o±=›t->
√xt
)

1494 i‡(
ãr£
)

1496 i‡(!
›t
->
¥öt
 || 
	`›t_nuŒ_°rög
(opt))

1497 
	`Ârötf
(
fd
, "# %-14†", 
›t
->
«me
);

1499 
	`Ârötf
(
fd
, "%-16†", 
›t
->
«me
);

1500 
	`›t_¥öt_›ti⁄
(
›t
, 
fd
);

1501 i‡(
›t
->
desc
)

1502 
	`Ârötf
(
fd
, "# %-22s", 
›t
->
desc
);

1503 
	`Ârötf
(
fd
, "\n");

1507 i‡(
›t
->
desc
)

1508 
	`Ârötf
(
fd
, "# %s\n", 
›t
->
desc
);

1509 i‡(!
›t
->
¥öt
 || 
	`›t_nuŒ_°rög
(opt))

1510 
	`Ârötf
(
fd
, "# %-20†", 
›t
->
«me
);

1512 
	`Ârötf
(
fd
, "%-22†", 
›t
->
«me
);

1513 
	`›t_¥öt_›ti⁄
(
›t
, 
fd
);

1514 
	`Ârötf
(
fd
, "\n\n");

1519 i‡(
nŸes
)

1520 
	`¥öt_›ti⁄_nŸes
(
odb
, 
fd
);

1521 
	}
}

1525 
	$¥öt_hñp
(
›t_›t_t
 *
›t
,

1526 
FILE
 *
fd
)

1528 *
s
 = 
NULL
;

1530 
	`Ârötf
(
fd
, "%-16†", 
›t
->
«me
);

1531 
›t
->
oc
)

1533 
oc_öt
:

1534 i‡(
›t
->
nv¨s
 == 1)

1535 
s
 = "<int>";

1537 
s
 = "<intÜist...>";

1539 
oc_uöt
:

1540 i‡(
›t
->
nv¨s
 == 1)

1541 
s
 = "<uint>";

1543 
s
 = "<uintÜist...>";

1545 
oc_Êﬂt
:

1546 i‡(
›t
->
nv¨s
 == 1)

1547 
s
 = "<float>";

1549 
s
 = "<floatÜist...>";

1551 
oc_doubÀ
:

1552 i‡(
›t
->
nv¨s
 == 1)

1553 
s
 = "<double>";

1555 
s
 = "<doubleÜist...>";

1557 
oc_íum
:

1558 i‡(
›t
->
nv¨s
 == 1)

1559 
s
 = "<enum>";

1561 
s
 = "<enumÜist...>";

1563 
oc_Êag
:

1564 i‡(
›t
->
nv¨s
 == 1)

1565 
s
 = "<true|false>";

1567 
s
 = "<true|falseÜist...>";

1569 
oc_°rög
:

1570 i‡(
›t
->
nv¨s
 == 0 || opt->nvars == 1)

1571 
s
 = "<string>";

1573 
s
 = "<stringÜist...>";

1576 
	`∑nic
("bogus option class");

1578 
	`Ârötf
(
fd
, "%-16†# ", 
s
);

1579 
	`›t_¥öt_›ti⁄
(
›t
, 
fd
);

1580 
	`Ârötf
(
fd
, "# %-22s\n", 
›t
->
desc
);

1581 
	}
}

1585 
	$›t_¥öt_hñp
(
›t_odb_t
 *
odb
,

1586 
FILE
 *
fd
)

1588 
›t_›t_t
 *
›t
;

1591 
	`¥öt_›ti⁄_hódî
(
odb
, 
fd
);

1593 
	`Ârötf
(
fd
, "#\n");

1594 
	`Ârötf
(
fd
, "%-16s %-16s # %12s # %-22s\n",

1596 
	`Ârötf
(
fd
, "#\n");

1599 
›t
=
buûtö_›ti⁄s
; o± !
NULL
; o±=›t->
√xt
)

1600 
	`¥öt_hñp
(
›t
, 
fd
);

1603 
›t
=
odb
->
›ti⁄s
; o± !
NULL
; o±=›t->
√xt
)

1604 
	`¥öt_hñp
(
›t
, 
fd
);

1607 
	`¥öt_›ti⁄_nŸes
(
odb
, 
fd
);

1608 
	}
}

1612 
	$dump_c⁄fig
(
›t_odb_t
 *
odb
,

1613 *
‚ame
)

1615 
FILE
 *
fd
;

1618 i‡(!
	`°rcmp
(
‚ame
, "-"))

1619 
fd
 = 
°dîr
;

1622 
fd
 = 
	`f›í
(
‚ame
, "w");

1623 i‡(!
fd
)

1624 
	`Áèl
("couldÇŸ o≥¿fûê`%s'", 
‚ame
);

1628 
	`›t_¥öt_›ti⁄s
(
odb
, 
fd
, 
FALSE
, FALSE);

1631 i‡(
fd
 !
°dout
 && fd !
°dîr
)

1632 
	`f˛o£
(
fd
);

1633 
	}
}

1636 
›t_›t_t
 *

1637 
	$›t_föd_›ti⁄
(
›t_odb_t
 *
odb
,

1638 *
›t_«me
)

1640 
›t_›t_t
 *
›t
;

1643 
›t
 = 
buûtö_›ti⁄s
; o± !
NULL
; o± = o±->
√xt
)

1645 i‡(!
	`°rcmp
(
›t
->
«me
, 
›t_«me
))

1648  
›t
;

1653 
›t
 = 
odb
->
›ti⁄s
; o± !
NULL
; o± = o±->
√xt
)

1655 i‡(!
	`°rcmp
(
›t
->
«me
, 
›t_«me
))

1658  
›t
;

1662  
NULL
;

1663 
	}
}

1667 
	$›t_ªg_hódî
(
›t_odb_t
 *
odb
,

1668 *
hódî
)

1670 
odb
->
hódî
 = header;

1671 
	}
}

1675 
	$›t_ªg_nŸe
(
›t_odb_t
 *
odb
,

1676 *
nŸe_°r
)

1678 
›t_nŸe_t
 *
nŸe
, *
ñt
, *
¥ev
;

1680 
nŸe
 = (
›t_nŸe_t
 *)
	`ˇŒoc
(1, (opt_note_t));

1681 i‡(!
nŸe
)

1682 
	`Áèl
("out of virtual memory");

1685 
nŸe
->
√xt
 = 
NULL
;

1686 
nŸe
->nŸê
nŸe_°r
;

1689 
¥ev
=
NULL
, 
ñt
=
odb
->
nŸes
;É… !NULL;ÖªvÛ…,É…Û…->
√xt
)

1692 i‡(
¥ev
 !
NULL
)

1693 
¥ev
->
√xt
 = 
nŸe
;

1695 
odb
->
nŸes
 = 
nŸe
;

1696 
nŸe
->
√xt
 = 
NULL
;

1697 
	}
}

1700 #ifde‡
TEST


1703 
	$f_‹ph™_‚
(
i
, 
¨gc
, **
¨gv
)

1705 
	`Ârötf
(
°dout
, "‹ph™†dëe˘edáàödex %d,árg = `%s'...\n", 
i
, 
¨gv
[i]);

1708  
FALSE
;

1709 
	}
}

1711 
	#MAX_VARS
 4

	)

1713 
	$maö
(
¨gc
, **
¨gv
)

1715 
›t_odb_t
 *
odb
;

1717 
n_öt_v¨s
, 
n_uöt_v¨s
, 
n_Êﬂt_v¨s
, 
n_doubÀ_v¨s
;

1718 
n_íum_v¨s
, 
n_íum_evÆ_v¨s
, 
n_Êag_v¨s
, 
n_°rög_v¨s
;

1719 
öt_v¨
, 
öt_v¨s
[
MAX_VARS
];

1720 
uöt_v¨
, 
uöt_v¨s
[
MAX_VARS
];

1721 
Êﬂt_v¨
, 
Êﬂt_v¨s
[
MAX_VARS
];

1722 
doubÀ_v¨
, 
doubÀ_v¨s
[
MAX_VARS
];

1723 
Êag_v¨
, 
Êag_v¨s
[
MAX_VARS
];

1724 *
°rög_v¨
, *
°rög_v¨s
[
MAX_VARS
];

1726 
	eëe°_t
 { 
íum_a
, 
íum_b
, 
íum_c
, 
íum_d
, 
íum_NUM
 };

1727 *
íum_em≠
[
íum_NUM
] =

1729 
íum_evÆ
[
íum_NUM
] =

1730 { 
íum_d
, 
íum_c
, 
íum_b
, 
íum_a
 };

1731 
íum_v¨
, 
íum_v¨s
[
MAX_VARS
];

1732 
íum_evÆ_v¨
, 
íum_evÆ_v¨s
[
MAX_VARS
];

1735 
odb
 = 
	`›t_√w
(
f_‹ph™_‚
);

1738 
	`›t_ªg_öt
(
odb
, "-opt:int", "This isán integer option.",

1739 &
öt_v¨
, 1, 
TRUE
, 
NULL
);

1740 
	`›t_ªg_öt_li°
(
odb
, "-opt:int:list", "This isán integerÜist option.",

1741 
öt_v¨s
, 
MAX_VARS
, &
n_öt_v¨s
, 2,

1742  
TRUE
, 
NULL
);

1743 
	`›t_ªg_uöt
(
odb
, "-opt:uint", "This isán unsigned integer option.",

1744 &
uöt_v¨
, 3, 
TRUE
, 
NULL
);

1745 
	`›t_ªg_uöt_li°
(
odb
, "-opt:uint:list",

1747 
uöt_v¨s
, 
MAX_VARS
, &
n_uöt_v¨s
, 4,

1748  
TRUE
, 
NULL
);

1749 
	`›t_ªg_Êﬂt
(
odb
, "-opt:float", "This isá float option.",

1750 &
Êﬂt_v¨
, 5.0, 
TRUE
, 
NULL
);

1751 
	`›t_ªg_Êﬂt_li°
(
odb
, "-opt:float:list", "This isá floatÜist option.",

1752 
Êﬂt_v¨s
, 
MAX_VARS
, &
n_Êﬂt_v¨s
, 6.0,

1753  
TRUE
, 
NULL
);

1754 
	`›t_ªg_doubÀ
(
odb
, "-opt:double", "This isá double option.",

1755 &
doubÀ_v¨
, 7.0, 
TRUE
, 
NULL
);

1756 
	`›t_ªg_doubÀ_li°
(
odb
, "-opt:double:list", "This isá doubleÜist option.",

1757 
doubÀ_v¨s
, 
MAX_VARS
, &
n_doubÀ_v¨s
, 8.0,

1758  
TRUE
, 
NULL
);

1759 
	`›t_ªg_íum
(
odb
, "-opt:enum", "This isánÉnumeration option.",

1760 &
íum_v¨
, "íum_a", 
íum_em≠
, 
NULL
, 
íum_NUM
,

1761  
TRUE
, 
NULL
);

1762 
	`›t_ªg_íum_li°
(
odb
, "-opt:enum:list", "This isáÉnumÜist option.",

1763 
íum_v¨s
, 
MAX_VARS
, &
n_íum_v¨s
, "enum_b",

1764 
íum_em≠
, 
NULL
, 
íum_NUM
,

1765  
TRUE
, 
NULL
);

1766 
	`›t_ªg_íum
(
odb
, "-opt:enum:eval", "This isánÉnumeration option w/eval.",

1767 &
íum_evÆ_v¨
, "íum_b", 
íum_em≠
, 
íum_evÆ
, 
íum_NUM
,

1768  
TRUE
, 
NULL
);

1769 
	`›t_ªg_íum_li°
(
odb
, "-opt:enum:eval:list",

1771 
íum_evÆ_v¨s
, 
MAX_VARS
, &
n_íum_evÆ_v¨s
, "enum_a",

1772 
íum_em≠
, 
íum_evÆ
, 
íum_NUM
,

1773  
TRUE
, 
NULL
);

1774 
	`›t_ªg_Êag
(
odb
, "-opt:flag", "This isá boolean flag option.",

1775 &
Êag_v¨
, 
FALSE
, 
TRUE
, 
NULL
);

1776 
	`›t_ªg_Êag_li°
(
odb
, "-opt:flag:list",

1778 
Êag_v¨s
, 
MAX_VARS
, &
n_Êag_v¨s
, 
TRUE
,

1779  
TRUE
, 
NULL
);

1780 
	`›t_ªg_°rög
(
odb
, "-opt:string", "This isá string option.",

1781 &
°rög_v¨
, "a:string",

1782  
TRUE
, 
NULL
);

1783 
	`›t_ªg_°rög_li°
(
odb
, "-opt:string:list", "This isá stringÜist option.",

1784 
°rög_v¨s
, 
MAX_VARS
, &
n_°rög_v¨s
, "another:string",

1785  
TRUE
, 
NULL
);

1788 
	`›t_¥o˚ss_›ti⁄s
(
odb
, 
¨gc
, 
¨gv
);

1791 
	`Ârötf
(
°dout
, "## Current Option Values ##\n");

1792 
	`›t_¥öt_›ti⁄s
(
odb
, 
°dout
, 
FALSE
, 
TRUE
);

1795 
	`›t_dñëe
(
odb
);

1796 
	`exô
(0);

1797 
	}
}

	@options.h

52 #i‚de‡
OPTIONS_H


53 
	#OPTIONS_H


	)

67 
	e›t_˛ass_t
 {

68 
	moc_öt
 = 0,

69 
	moc_uöt
,

70 
	moc_Êﬂt
,

71 
	moc_doubÀ
,

72 
	moc_íum
,

73 
	moc_Êag
,

74 
	moc_°rög
,

75 
	moc_NUM


79 
	s›t_›t_t
 {

80 
›t_›t_t
 *
	m√xt
;

81 *
	m«me
;

82 *
	mdesc
;

83 
	mnv¨s
;

84 *
	m√…
;

85 *
	mf‹m©
;

86 
	m¥öt
;

87 
	mac¸ue
;

88 
›t_˛ass_t
 
	moc
;

89 
	u›t_v¨ü¡_t
 {

91 
	s›t_f‹_öt_t
 {

92 *
	mv¨
;

93 } 
	mf‹_öt
;

95 
	s›t_f‹_uöt_t
 {

96 *
	mv¨
;

97 } 
	mf‹_uöt
;

99 
	s›t_f‹_Êﬂt_t
 {

100 *
	mv¨
;

101 } 
	mf‹_Êﬂt
;

103 
	s›t_f‹_doubÀ_t
 {

104 *
	mv¨
;

105 } 
	mf‹_doubÀ
;

107 
	s›t_f‹_íum_t
 {

108 *
	mv¨
;

109 **
	mem≠
;

110 *
	mevÆ
;

111 
	mem≠_sz
;

112 } 
	mf‹_íum
;

114 
	s›t_f‹_°rög_t
 {

115 **
	mv¨
;

116 } 
	mf‹_°rög
;

117 } 
	mv¨ü¡
;

123 (*
	t‹ph™_‚_t
)(
	ti
,

124 
	t¨gc
,

125 **
	t¨gv
);

129 
	s›t_nŸe_t
 {

130 
›t_nŸe_t
 *
	m√xt
;

131 *
	mnŸe
;

135 
	s›t_odb_t
 {

136 
›t_›t_t
 *
	m›ti⁄s
;

137 
‹ph™_‚_t
 
	m‹ph™_‚
;

138 *
	mhódî
;

139 
›t_nŸe_t
 *
	mnŸes
;

143 
›t_odb_t
 *

144 
›t_√w
(
‹ph™_‚_t
 
‹ph™_‚
);

148 
›t_dñëe
(
›t_odb_t
 *
odb
);

152 
›t_ªg_öt
(
›t_odb_t
 *
odb
,

153 *
«me
,

154 *
desc
,

155 *
v¨
,

156 
def_vÆ
,

157 
¥öt
,

158 *
f‹m©
);

162 
›t_ªg_öt_li°
(
›t_odb_t
 *
odb
,

163 *
«me
,

164 *
desc
,

165 *
v¨s
,

166 
nv¨s
,

167 *
√…
,

168 *
def_vÆ
,

169 
¥öt
,

170 *
f‹m©
,

171 
ac¸ue
);

175 
›t_ªg_uöt
(
›t_odb_t
 *
odb
,

176 *
«me
,

177 *
desc
,

178 *
v¨
,

179 
def_vÆ
,

180 
¥öt
,

181 *
f‹m©
);

185 
›t_ªg_uöt_li°
(
›t_odb_t
 *
odb
,

186 *
«me
,

187 *
desc
,

188 *
v¨s
,

189 
nv¨s
,

190 *
√…
,

191 *
def_vÆ
,

192 
¥öt
,

193 *
f‹m©
,

194 
ac¸ue
);

198 
›t_ªg_Êﬂt
(
›t_odb_t
 *
odb
,

199 *
«me
,

200 *
desc
,

201 *
v¨
,

202 
def_vÆ
,

203 
¥öt
,

204 *
f‹m©
);

208 
›t_ªg_Êﬂt_li°
(
›t_odb_t
 *
odb
,

209 *
«me
,

210 *
desc
,

211 *
v¨s
,

212 
nv¨s
,

213 *
√…
,

214 *
def_vÆ
,

215 
¥öt
,

216 *
f‹m©
,

217 
ac¸ue
);

221 
›t_ªg_doubÀ
(
›t_odb_t
 *
odb
,

222 *
«me
,

223 *
desc
,

224 *
v¨
,

225 
def_vÆ
,

226 
¥öt
,

227 *
f‹m©
);

231 
›t_ªg_doubÀ_li°
(
›t_odb_t
 *
odb
,

232 *
«me
,

233 *
desc
,

234 *
v¨s
,

235 
nv¨s
,

236 *
√…
,

237 *
def_vÆ
,

238 
¥öt
,

239 *
f‹m©
,

240 
ac¸ue
);

246 
›t_ªg_íum
(
›t_odb_t
 *
odb
,

247 *
«me
,

248 *
desc
,

249 *
v¨
,

250 *
def_vÆ
,

251 **
em≠
,

252 *
evÆ
,

253 
em≠_sz
,

254 
¥öt
,

255 *
f‹m©
);

261 
›t_ªg_íum_li°
(
›t_odb_t
 *
odb
,

262 *
«me
,

263 *
desc
,

264 *
v¨s
,

265 
nv¨s
,

266 *
√…
,

267 *
def_vÆ
,

268 **
em≠
,

269 *
evÆ
,

270 
em≠_sz
,

271 
¥öt
,

272 *
f‹m©
,

273 
ac¸ue
);

277 
›t_ªg_Êag
(
›t_odb_t
 *
odb
,

278 *
«me
,

279 *
desc
,

280 *
v¨
,

281 
def_vÆ
,

282 
¥öt
,

283 *
f‹m©
);

287 
›t_ªg_Êag_li°
(
›t_odb_t
 *
odb
,

288 *
«me
,

289 *
desc
,

290 *
v¨s
,

291 
nv¨s
,

292 *
√…
,

293 *
def_vÆ
,

294 
¥öt
,

295 *
f‹m©
,

296 
ac¸ue
);

300 
›t_ªg_°rög
(
›t_odb_t
 *
odb
,

301 *
«me
,

302 *
desc
,

303 **
v¨
,

304 *
def_vÆ
,

305 
¥öt
,

306 *
f‹m©
);

310 
›t_ªg_°rög_li°
(
›t_odb_t
 *
odb
,

311 *
«me
,

312 *
desc
,

313 **
v¨s
,

314 
nv¨s
,

315 *
√…
,

316 **
def_vÆ
,

317 
¥öt
,

318 *
f‹m©
,

319 
ac¸ue
);

323 
›t_¥o˚ss_›ti⁄s
(
›t_odb_t
 *
odb
,

324 
¨gc
,

325 **
¨gv
);

329 
›t_¥öt_›ti⁄
(
›t_›t_t
 *
›t
,

330 
FILE
 *
fd
);

334 
›t_¥öt_›ti⁄s
(
›t_odb_t
 *
odb
,

335 
FILE
 *
fd
,

336 
ãr£
,

337 
nŸes
);

341 
›t_¥öt_hñp
(
›t_odb_t
 *
odb
,

342 
FILE
 *
fd
);

345 
›t_›t_t
 *

346 
›t_föd_›ti⁄
(
›t_odb_t
 *
odb
,

347 *
›t_«me
);

351 
›t_ªg_hódî
(
›t_odb_t
 *
odb
,

352 *
hódî
);

356 
›t_ªg_nŸe
(
›t_odb_t
 *
odb
,

357 *
nŸe
);

	@ptrace.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"ønge.h
"

59 
	~"±ø˚.h
"

62 
FILE
 *
	g±ø˚_outfd
 = 
NULL
;

65 
	g±ø˚_a˘ive
 = 
FALSE
;

68 
ønge_ønge_t
 
	g±ø˚_ønge
;

71 
	g±ø˚_⁄eshŸ
 = 
FALSE
;

75 
	$±ø˚_›í
(*
‚ame
,

76 *
ønge
)

78 *
îr°r
;

81 i‡(!
ønge
)

84 
îr°r
 = 
	`ønge_∑r£_ønge
(":", &
±ø˚_ønge
);

85 i‡(
îr°r
)

86 
	`∑nic
("cannotÖarseÖipetraceÑange, use: {<start>}:{<end>}");

87 
±ø˚_a˘ive
 = 
TRUE
;

91 
îr°r
 = 
	`ønge_∑r£_ønge
(
ønge
, &
±ø˚_ønge
);

92 i‡(
îr°r
)

93 
	`Áèl
("cannotÖarseÖipetraceÑange, use: {<start>}:{<end>}");

94 
±ø˚_a˘ive
 = 
FALSE
;

97 i‡(
±ø˚_ønge
.
°¨t
.
±y≥
 !±ø˚_ønge.
íd
.ptype)

98 
	`Áèl
("rangeÉndpointsáreÇot ofÅhe sameÅype");

101 i‡(!
‚ame
 || !
	`°rcmp
(fname, "-") || !strcmp(fname, "stderr"))

102 
±ø˚_outfd
 = 
°dîr
;

103 i‡(!
	`°rcmp
(
‚ame
, "stdout"))

104 
±ø˚_outfd
 = 
°dout
;

107 
±ø˚_outfd
 = 
	`f›í
(
‚ame
, "w");

108 i‡(!
±ø˚_outfd
)

109 
	`Áèl
("ˇ¬Ÿ o≥¿pùëø˚ ouçuàfûê`%s'", 
‚ame
);

111 
	}
}

115 
	$±ø˚_˛o£
()

117 i‡(
±ø˚_outfd
 !
NULL
 &&Öåa˚_outfd !
°dîr
 &&Öåa˚_outfd !
°dout
)

118 
	`f˛o£
(
±ø˚_outfd
);

119 
	}
}

123 
	$__±ø˚_√wö°
(
i£q
,

124 
md_ö°_t
 
ö°
,

125 
md_addr_t
 
pc
,

126 
md_addr_t
 
addr
)

128 
	`myÂrötf
(
±ø˚_outfd
, "+ %u 0x%08∞0x%08∞", 
i£q
, 
pc
, 
addr
);

129 
	`md_¥öt_ö¢
(
ö°
, 
addr
, 
±ø˚_outfd
);

130 
	`Ârötf
(
±ø˚_outfd
, "\n");

132 i‡(
±ø˚_outfd
 =
°dîr
 ||Öåa˚_outfd =
°dout
)

133 
	`fÊush
(
±ø˚_outfd
);

134 
	}
}

138 
	$__±ø˚_√wu›
(
i£q
,

139 *
u›_desc
,

140 
md_addr_t
 
pc
,

141 
md_addr_t
 
addr
)

143 
	`myÂrötf
(
±ø˚_outfd
,

144 "+ %u 0x%08∞0x%08∞[%s]\n", 
i£q
, 
pc
, 
addr
, 
u›_desc
);

146 i‡(
±ø˚_outfd
 =
°dîr
 ||Öåa˚_outfd =
°dout
)

147 
	`fÊush
(
±ø˚_outfd
);

148 
	}
}

152 
	$__±ø˚_ídö°
(
i£q
)

154 
	`Ârötf
(
±ø˚_outfd
, "- %u\n", 
i£q
);

156 i‡(
±ø˚_outfd
 =
°dîr
 ||Öåa˚_outfd =
°dout
)

157 
	`fÊush
(
±ø˚_outfd
);

158 
	}
}

162 
	$__±ø˚_√wcy˛e
(
tick_t
 
cy˛e
)

164 
	`Ârötf
(
±ø˚_outfd
, "@ %.0f\n", ()
cy˛e
);

166 i‡(
±ø˚_outfd
 =
°dîr
 ||Öåa˚_outfd =
°dout
)

167 
	`fÊush
(
±ø˚_outfd
);

168 
	}
}

172 
	$__±ø˚_√w°age
(
i£q
,

173 *
p°age
,

174 
≥víts
)

176 
	`Ârötf
(
±ø˚_outfd
, "* %u %†0x%08x\n", 
i£q
, 
p°age
, 
≥víts
);

178 i‡(
±ø˚_outfd
 =
°dîr
 ||Öåa˚_outfd =
°dout
)

179 
	`fÊush
(
±ø˚_outfd
);

180 
	}
}

	@ptrace.h

52 #i‚de‡
PTRACE_H


53 
	#PTRACE_H


	)

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"ønge.h
"

78 
	#PST_IFETCH
 "IF"

	)

79 
	#PST_DISPATCH
 "DA"

	)

80 
	#PST_EXECUTE
 "EX"

	)

81 
	#PST_WRITEBACK
 "WB"

	)

82 
	#PST_COMMIT
 "CT"

	)

85 
	#PEV_CACHEMISS
 0x00000001

	)

86 
	#PEV_TLBMISS
 0x00000002

	)

87 
	#PEV_MPOCCURED
 0x00000004

	)

88 
	#PEV_MPDETECT
 0x00000008

	)

89 
	#PEV_AGEN
 0x00000010

	)

92 
FILE
 *
±ø˚_outfd
;

95 
±ø˚_a˘ive
;

98 
ønge_ønge_t
 
±ø˚_ønge
;

101 
±ø˚_⁄eshŸ
;

105 
±ø˚_›í
(*
ønge
,

106 *
‚ame
);

110 
±ø˚_˛o£
();

114 
	#±ø˚_check_a˘ive
(
PC
, 
ICNT
, 
CYCLE
) \

115 ((
±ø˚_outfd
 !
NULL
 \

116 && !
	`ønge_cmp_ønge1
(&
±ø˚_ønge
, (
PC
), (
ICNT
), (
CYCLE
))) \

117 ? (!
±ø˚_⁄eshŸ
 ? (
±ø˚_a˘ive
 =Öåa˚_⁄eshŸ = 
TRUE
Ë: 
FALSE
)\

118 : (
±ø˚_a˘ive
 = 
FALSE
))

	)

121 
	#±ø˚_√wö°
(
A
,
B
,
C
,
D
) \

122 i‡(
±ø˚_a˘ive
Ë
	`__±ø˚_√wö°
((
A
),(
B
),(
C
),(
D
))

	)

123 
	#±ø˚_√wu›
(
A
,
B
,
C
,
D
) \

124 i‡(
±ø˚_a˘ive
Ë
	`__±ø˚_√wu›
((
A
),(
B
),(
C
),(
D
))

	)

125 
	#±ø˚_ídö°
(
A
) \

126 i‡(
±ø˚_a˘ive
Ë
	`__±ø˚_ídö°
((
A
))

	)

127 
	#±ø˚_√wcy˛e
(
A
) \

128 i‡(
±ø˚_a˘ive
Ë
	`__±ø˚_√wcy˛e
((
A
))

	)

129 
	#±ø˚_√w°age
(
A
,
B
,
C
) \

130 i‡(
±ø˚_a˘ive
Ë
	`__±ø˚_√w°age
((
A
),(
B
),(
C
))

	)

132 
	#±ø˚_a˘ive
(
A
,
I
,
C
) \

133 (
±ø˚_outfd
 !
NULL
 && !
	`ønge_cmp_ønge
(&
±ø˚_ønge
, (
A
), (
I
), (
C
)))

	)

137 
__±ø˚_√wö°
(
i£q
,

138 
md_ö°_t
 
ö°
,

139 
md_addr_t
 
pc
,

140 
md_addr_t
 
addr
);

144 
__±ø˚_√wu›
(
i£q
,

145 *
u›_desc
,

146 
md_addr_t
 
pc
,

147 
md_addr_t
 
addr
);

151 
__±ø˚_ídö°
(
i£q
);

155 
__±ø˚_√wcy˛e
(
tick_t
 
cy˛e
);

159 
__±ø˚_√w°age
(
i£q
,

160 *
p°age
,

161 
≥víts
);

	@range.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<î∫o.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"machöe.h
"

60 
	~"symbﬁ.h
"

61 
	~"lﬂdî.h
"

62 
	~"ønge.h
"

66 
	$ønge_∑r£_pos
(*
p°r
,

67 
ønge_pos_t
 *
pos
)

69 *
s
, *
ídp
;

70 
sym_sym_t
 *
sym
;

73 i‡(
p°r
[0] == '@')

76 
pos
->
±y≥
 = 
±_addr
;

77 
s
 = 
p°r
 + 1;

79 i‡(
p°r
[0] == '#')

82 
pos
->
±y≥
 = 
±_cy˛e
;

83 
s
 = 
p°r
 + 1;

88 
pos
->
±y≥
 = 
±_ö°
;

89 
s
 = 
p°r
;

93 
î∫o
 = 0;

94 
pos
->po†(
cou¡î_t
)
	`°πoul
(
s
, &
ídp
, 0);

95 i‡(!
î∫o
 && !*
ídp
)

98  
NULL
;

102 
î∫o
 = 0;

103 
pos
->po†(
cou¡î_t
)
	`°πod
(
s
, &
ídp
);

104 i‡(!
î∫o
 && !*
ídp
)

108  
NULL
;

112 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
FALSE
);

113 
sym
 = 
	`sym_böd_«me
(
s
, 
NULL
, 
sdb_™y
);

114 i‡(
sym
 !
NULL
)

116 
pos
->po†(
cou¡î_t
)
sym
->
addr
;

117  
NULL
;

122 
	}
}

126 
	$ønge_¥öt_pos
(
ønge_pos_t
 *
pos
,

127 
FILE
 *
°ªam
)

129 
pos
->
±y≥
)

131 
±_addr
:

132 
	`myÂrötf
(
°ªam
, "@0x%08p", (
md_addr_t
)
pos
->pos);

134 
±_ö°
:

135 
	`Ârötf
(
°ªam
, "%.0f", ()
pos
->pos);

137 
±_cy˛e
:

138 
	`Ârötf
(
°ªam
, "#%.0f", ()
pos
->pos);

141 
	`∑nic
("bogusÉxecutionÖositionÅype");

143 
	}
}

147 
	$ønge_∑r£_ønge
(*
r°r
,

148 
ønge_ønge_t
 *
ønge
)

150 *
pos1
, *
pos2
, *
p
, 
buf
[512], *
îr°r
;

153 
	`°r˝y
(
buf
, 
r°r
);

154 
pos1
 = 
buf
;

157 
p
 = 
buf
;

158 *
p
 != ':' && *p != '\0')

160 
p
++;

162 i‡(*
p
 != ':')

164 *
p
 = '\0';

167 
pos2
 = 
p
 + 1;

170 i‡(*
pos1
 && *pos1 != ':')

172 
îr°r
 = 
	`ønge_∑r£_pos
(
pos1
, &
ønge
->
°¨t
);

173 i‡(
îr°r
)

174  
îr°r
;

179 
ønge
->
°¨t
.
±y≥
 = 
±_ö°
;

180 
ønge
->
°¨t
.
pos
 = 0;

184 i‡(*
pos2
)

186 i‡(*
pos2
 == '+')

188 
dñè
;

189 *
ídp
;

192 
î∫o
 = 0;

193 
dñè
 = 
	`°πﬁ
(
pos2
 + 1, &
ídp
, 0);

194 i‡(!
î∫o
 && !*
ídp
)

197 
ønge
->
íd
.
±y≥
 =Ñ™ge->
°¨t
.ptype;

198 
ønge
->
íd
.
pos
 =Ñ™ge->
°¨t
.po†+ 
dñè
;

208 
îr°r
 = 
	`ønge_∑r£_pos
(
pos2
, &
ønge
->
íd
);

209 i‡(
îr°r
)

210  
îr°r
;

216 
ønge
->
íd
.
±y≥
 =Ñ™ge->
°¨t
.ptype;

217 #ifde‡
HOST_HAS_QWORD


218 
ønge
->
íd
.
pos
 = 
	`ULL
(0x7fffffffffffffff);

220 
ønge
->
íd
.
pos
 = 281474976645120.0;

225  
NULL
;

226 
	}
}

230 
	$ønge_¥öt_ønge
(
ønge_ønge_t
 *
ønge
,

231 
FILE
 *
°ªam
)

233 
	`ønge_¥öt_pos
(&
ønge
->
°¨t
, 
°ªam
);

234 
	`Ârötf
(
°ªam
, ":");

235 
	`ønge_¥öt_pos
(&
ønge
->
íd
, 
°ªam
);

236 
	}
}

240 
	$ønge_cmp_pos
(
ønge_pos_t
 *
pos
,

241 
cou¡î_t
 
vÆ
)

243 i‡(
vÆ
 < 
pos
->pos)

245 i‡(
vÆ
 =
pos
->pos)

249 
	}
}

253 
	$ønge_cmp_ønge
(
ønge_ønge_t
 *
ønge
,

254 
cou¡î_t
 
vÆ
)

256 i‡(
ønge
->
°¨t
.
±y≥
 !ønge->
íd
.ptype)

257 
	`∑nic
("invalidÑange");

259 i‡(
vÆ
 < 
ønge
->
°¨t
.
pos
)

261 i‡(
ønge
->
°¨t
.
pos
 <
vÆ
 && vÆ <ønge->
íd
.pos)

265 
	}
}

269 
	$ønge_cmp_ønge1
(
ønge_ønge_t
 *
ønge
,

270 
md_addr_t
 
addr
,

271 
cou¡î_t
 
icou¡
,

272 
cou¡î_t
 
cy˛e
)

274 i‡(
ønge
->
°¨t
.
±y≥
 !ønge->
íd
.ptype)

275 
	`∑nic
("invalidÑange");

277 
ønge
->
°¨t
.
±y≥
)

279 
±_addr
:

280 i‡(
addr
 < (
md_addr_t
)
ønge
->
°¨t
.
pos
)

282 i‡((
md_addr_t
)
ønge
->
°¨t
.
pos
 <
addr
 &&ádd∏<(md_addr_tÏ™ge->
íd
.pos)

287 
±_ö°
:

288 i‡(
icou¡
 < 
ønge
->
°¨t
.
pos
)

290 i‡(
ønge
->
°¨t
.
pos
 <
icou¡
 && icou¡ <ønge->
íd
.pos)

295 
±_cy˛e
:

296 i‡(
cy˛e
 < 
ønge
->
°¨t
.
pos
)

298 i‡(
ønge
->
°¨t
.
pos
 <
cy˛e
 && cy˛ê<ønge->
íd
.pos)

304 
	`∑nic
("bogusÑangeÅype");

306 
	}
}

	@range.h

52 #i‚de‡
RANGE_H


53 
	#RANGE_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"machöe.h
"

61 
	eønge_±y≥_t
 {

62 
	m±_addr
 = 0,

63 
	m±_ö°
,

64 
	m±_cy˛e
,

65 
	m±_NUM


76 
	sønge_pos_t
 {

77 
ønge_±y≥_t
 
	m±y≥
;

78 
cou¡î_t
 
	mpos
;

82 
	sønge_ønge_t
 {

83 
ønge_pos_t
 
	m°¨t
;

84 
ønge_pos_t
 
	míd
;

89 
ønge_∑r£_pos
(*
p°r
,

90 
ønge_pos_t
 *
pos
);

94 
ønge_¥öt_pos
(
ønge_pos_t
 *
pos
,

95 
FILE
 *
°ªam
);

99 
ønge_∑r£_ønge
(*
r°r
,

100 
ønge_ønge_t
 *
ønge
);

104 
ønge_¥öt_ønge
(
ønge_ønge_t
 *
ønge
,

105 
FILE
 *
°ªam
);

109 
ønge_cmp_pos
(
ønge_pos_t
 *
pos
,

110 
cou¡î_t
 
vÆ
);

114 
ønge_cmp_ønge
(
ønge_ønge_t
 *
ønge
,

115 
cou¡î_t
 
vÆ
);

120 
ønge_cmp_ønge1
(
ønge_ønge_t
 *
ønge
,

121 
md_addr_t
 
addr
,

122 
cou¡î_t
 
icou¡
,

123 
cou¡î_t
 
cy˛e
);

	@regs.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"lﬂdî.h
"

60 
	~"ªgs.h
"

64 
ªgs_t
 *

65 
	$ªgs_¸óã
()

67 
ªgs_t
 *
ªgs
;

69 
ªgs
 = 
	`ˇŒoc
(1, (
ªgs_t
));

70 i‡(!
ªgs
)

71 
	`Áèl
("out of virtual memory");

73  
ªgs
;

74 
	}
}

78 
	$ªgs_öô
(
ªgs_t
 *
ªgs
)

81 
	`mem£t
(
ªgs
, 0, (*regs));

84 
	}
}

92 
	uªgs_FP_t
 {

93 
md_g¥_t
 
	ml
[
MD_NUM_FREGS
];

94 
md_SS_FLOAT_TYPE
 
	mf
[
SS_NUM_REGS
];

95 
SS_DOUBLE_TYPE
 
	md
[
SS_NUM_REGS
/2];

99 
md_ªgs_FP_t
 
ªgs_F
;

102 
SS_WORD_TYPE
 
ªgs_HI
;

105 
SS_WORD_TYPE
 
ªgs_LO
;

108 
ªgs_FCC
;

111 
SS_ADDR_TYPE
 
ªgs_PC
;

115 
	$ªgs_dump
(
FILE
 *
°ªam
)

117 
i
;

120 i‡(!
°ªam
)

121 
°ªam
 = 
°dîr
;

124 
	`Ârötf
(
°ªam
, "Processor state:\n");

125 
	`Ârötf
(
°ªam
, " PC: 0x%08x\n", 
ªgs_PC
);

126 
i
=0; i<
SS_NUM_REGS
; i += 2)

128 
	`Ârötf
(
°ªam
, " R[%2d]: %12d/0x%08x",

129 
i
, 
ªgs_R
[i],Ñegs_R[i]);

130 
	`Ârötf
(
°ªam
, " R[%2d]: %12d/0x%08x\n",

131 
i
+1, 
ªgs_R
[i+1],Ñegs_R[i+1]);

133 
	`Ârötf
(
°ªam
, " HI: %10d/0x%08x LO: %10d/0x%08x\n",

134 
ªgs_HI
,Ñegs_HI, 
ªgs_LO
,Ñegs_LO);

135 
i
=0; i<
SS_NUM_REGS
; i += 2)

137 
	`Ârötf
(
°ªam
, " F[%2d]: %12d/0x%08x",

138 
i
, 
ªgs_F
.
l
[i],Ñegs_F.l[i]);

139 
	`Ârötf
(
°ªam
, " F[%2d]: %12d/0x%08x\n",

140 
i
+1, 
ªgs_F
.
l
[i+1],Ñegs_F.l[i+1]);

142 
	`Ârötf
(
°ªam
, " FCC: 0x%08x\n", 
ªgs_FCC
);

143 
	}
}

146 
SS_WORD_TYPE
 
	gªgs_R
[
SS_NUM_REGS
];

149 
ªgs_FP
 
	gªgs_F
;

152 
SS_WORD_TYPE
 
	gªgs_HI
;

154 
SS_WORD_TYPE
 
	gªgs_LO
;

157 
	gªgs_FCC
;

160 
SS_ADDR_TYPE
 
	gªgs_PC
;

	@regs.h

52 #i‚de‡
REGS_H


53 
	#REGS_H


	)

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

100 
	sªgs_t
 {

101 
md_g¥_t
 
	mªgs_R
;

102 
md_Âr_t
 
	mªgs_F
;

103 
md_˘æ_t
 
	mªgs_C
;

104 
md_addr_t
 
	mªgs_PC
;

105 
md_addr_t
 
	mªgs_NPC
;

109 
ªgs_t
 *
ªgs_¸óã
();

113 
ªgs_öô
(
ªgs_t
 *
ªgs
);

117 
ªgs_dump
(
ªgs_t
 *
ªgs
,

118 
FILE
 *
°ªam
);

122 
ªgs_de°roy
(
ªgs_t
 *
ªgs
);

	@resource.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<as£π.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"ªsour˚.h
"

61 
ªs_poﬁ
 *

62 
	$ªs_¸óã_poﬁ
(*
«me
, 
ªs_desc
 *
poﬁ
, 
ndesc
)

64 
i
, 
j
, 
k
, 
ödex
, 
nö°s
;

65 
ªs_desc
 *
ö°_poﬁ
;

66 
ªs_poﬁ
 *
ªs
;

69 
nö°s
=0,
i
=0; i<
ndesc
; i++)

71 i‡(
poﬁ
[
i
].
qu™tôy
 > 
MAX_INSTS_PER_CLASS
)

72 
	`Áèl
("too many functional units, increase MAX_INSTS_PER_CLASS");

73 
nö°s
 +
poﬁ
[
i
].
qu™tôy
;

77 
ö°_poﬁ
 = (
ªs_desc
 *)
	`ˇŒoc
(
nö°s
, (res_desc));

78 i‡(!
ö°_poﬁ
)

79 
	`Áèl
("out of virtual memory");

82 
ödex
=0,
i
=0; i<
ndesc
; i++)

84 
j
=0; j<
poﬁ
[
i
].
qu™tôy
; j++)

86 
ö°_poﬁ
[
ödex
] = 
poﬁ
[
i
];

87 
ö°_poﬁ
[
ödex
].
qu™tôy
 = 1;

88 
ö°_poﬁ
[
ödex
].
busy
 = 
FALSE
;

89 
k
=0; k<
MAX_RES_CLASSES
 && 
ö°_poﬁ
[
ödex
].
x
[k].
˛ass
; k++)

90 
ö°_poﬁ
[
ödex
].
x
[
k
].
ma°î
 = &inst_pool[index];

91 
ödex
++;

94 
	`as£π
(
ödex
 =
nö°s
);

97 
ªs
 = (
ªs_poﬁ
 *)
	`ˇŒoc
(1, (res_pool));

98 i‡(!
ªs
)

99 
	`Áèl
("out of virtual memory");

100 
ªs
->
«me
 =Çame;

101 
ªs
->
num_ªsour˚s
 = 
nö°s
;

102 
ªs
->
ªsour˚s
 = 
ö°_poﬁ
;

105 
i
=0; i<
nö°s
; i++)

107 
ªs_ãm∂©e
 *
∂©e
;

108 
j
=0; j<
MAX_RES_CLASSES
; j++)

110 
∂©e
 = &
ªs
->
ªsour˚s
[
i
].
x
[
j
];

111 i‡(
∂©e
->
˛ass
)

113 
	`as£π
(
∂©e
->
˛ass
 < 
MAX_RES_CLASSES
);

114 
ªs
->
èbÀ
[
∂©e
->
˛ass
][ªs->
√¡s
[plate->class]++] =Ölate;

122  
ªs
;

123 
	}
}

131 
ªs_ãm∂©e
 *

132 
	$ªs_gë
(
ªs_poﬁ
 *
poﬁ
, 
˛ass
)

134 
i
;

137 
	`as£π
(
˛ass
 < 
MAX_RES_CLASSES
);

140 
	`as£π
(
poﬁ
->
èbÀ
[
˛ass
][0]);

142 
i
=0; i<
MAX_INSTS_PER_CLASS
; i++)

144 i‡(
poﬁ
->
èbÀ
[
˛ass
][
i
])

146 i‡(!
poﬁ
->
èbÀ
[
˛ass
][
i
]->
ma°î
->
busy
)

147  
poﬁ
->
èbÀ
[
˛ass
][
i
];

153  
NULL
;

154 
	}
}

158 
	$ªs_dump
(
ªs_poﬁ
 *
poﬁ
, 
FILE
 *
°ªam
)

160 
i
, 
j
;

162 i‡(!
°ªam
)

163 
°ªam
 = 
°dîr
;

165 
	`Ârötf
(
°ªam
, "Resour˚Öoﬁ: %s:\n", 
poﬁ
->
«me
);

166 
	`Ârötf
(
°ªam
, "\tc⁄èö†%dÑesour˚ in°™˚s\n", 
poﬁ
->
num_ªsour˚s
);

167 
i
=0; i<
MAX_RES_CLASSES
; i++)

169 
	`Ârötf
(
°ªam
, "\tclass: %d: %d matching instances\n",

170 
i
, 
poﬁ
->
√¡s
[i]);

171 
	`Ârötf
(
°ªam
, "\tmatching: ");

172 
j
=0; j<
MAX_INSTS_PER_CLASS
; j++)

174 i‡(!
poﬁ
->
èbÀ
[
i
][
j
])

176 
	`Ârötf
(
°ªam
, "\t%s (busy for %d cycles) ",

177 
poﬁ
->
èbÀ
[
i
][
j
]->
ma°î
->
«me
,

178 
poﬁ
->
èbÀ
[
i
][
j
]->
ma°î
->
busy
);

180 
	`as£π
(
j
 =
poﬁ
->
√¡s
[
i
]);

181 
	`Ârötf
(
°ªam
, "\n");

183 
	}
}

	@resource.h

52 #i‚de‡
RESOURCE_H


53 
	#RESOURCE_H


	)

55 
	~<°dio.h
>

58 
	#MAX_RES_CLASSES
 16

	)

61 
	#MAX_INSTS_PER_CLASS
 8

	)

64 
	sªs_desc
 {

65 *
	m«me
;

66 
	mqu™tôy
;

67 
	mbusy
;

68 
	sªs_ãm∂©e
 {

69 
	m˛ass
;

72 
	m›œt
;

74 
	missuñ©
;

77 
ªs_desc
 *
	mma°î
;

78 } 
	mx
[
MAX_RES_CLASSES
];

82 
	sªs_poﬁ
 {

83 *
	m«me
;

84 
	mnum_ªsour˚s
;

85 
ªs_desc
 *
	mªsour˚s
;

87 
	m√¡s
[
MAX_RES_CLASSES
];

88 
ªs_ãm∂©e
 *
	mèbÀ
[
MAX_RES_CLASSES
][
MAX_INSTS_PER_CLASS
];

92 
ªs_poﬁ
 *
ªs_¸óã_poﬁ
(*
«me
, 
ªs_desc
 *
poﬁ
, 
ndesc
);

100 
ªs_ãm∂©e
 *
ªs_gë
(
ªs_poﬁ
 *
poﬁ
, 
˛ass
);

103 
ªs_dump
(
ªs_poﬁ
 *
poﬁ
, 
FILE
 *
°ªam
);

	@sim-bpred.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"lﬂdî.h
"

62 
	~"sysˇŒ.h
"

63 
	~"dlôe.h
"

64 
	~"›ti⁄s.h
"

65 
	~"°©s.h
"

66 
	~"b¥ed.h
"

67 
	~"sim.h
"

74 
ªgs_t
 
	gªgs
;

77 
mem_t
 *
	gmem
 = 
NULL
;

80 
	gmax_ö°s
;

83 *
	g¥ed_ty≥
;

86 
	gbimod_√…
 = 1;

87 
	gbimod_c⁄fig
[1] =

91 
	gtwﬁev_√…
 = 4;

92 
	gtwﬁev_c⁄fig
[4] =

93 { 1, 1024, 8, 
FALSE
};

96 
	gcomb_√…
 = 1;

97 
	gcomb_c⁄fig
[1] =

101 
	gøs_size
 = 8;

104 
	gbtb_√…
 = 2;

105 
	gbtb_c⁄fig
[2] =

109 
b¥ed_t
 *
	g¥ed
;

112 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

115 
cou¡î_t
 
	gsim_num_bønches
 = 0;

120 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

122 
	`›t_ªg_hódî
(
odb
,

127 
	`›t_ªg_nŸe
(
odb
,

144 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

145 &
max_ö°s
, 0,

146  
TRUE
, 
NULL
);

148 
	`›t_ªg_°rög
(
odb
, "-bpred",

150 &
¥ed_ty≥
, "bimod",

151  
TRUE
, 
NULL
);

153 
	`›t_ªg_öt_li°
(
odb
, "-bpred:bimod",

155 
bimod_c⁄fig
, 
bimod_√…
, &bimod_nelt,

156  
bimod_c⁄fig
,

157  
TRUE
, 
NULL
, 
FALSE
);

159 
	`›t_ªg_öt_li°
(
odb
, "-bpred:2lev",

162 
twﬁev_c⁄fig
, 
twﬁev_√…
, &twolev_nelt,

163  
twﬁev_c⁄fig
,

164  
TRUE
, 
NULL
, 
FALSE
);

166 
	`›t_ªg_öt_li°
(
odb
, "-bpred:comb",

168 
comb_c⁄fig
, 
comb_√…
, &comb_nelt,

169  
comb_c⁄fig
,

170  
TRUE
, 
NULL
, 
FALSE
);

172 
	`›t_ªg_öt
(
odb
, "-bpred:ras",

174 &
øs_size
,Ñas_size,

175  
TRUE
, 
NULL
);

177 
	`›t_ªg_öt_li°
(
odb
, "-bpred:btb",

179 
btb_c⁄fig
, 
btb_√…
, &btb_nelt,

180  
btb_c⁄fig
,

181  
TRUE
, 
NULL
, 
FALSE
);

182 
	}
}

186 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

188 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "taken"))

191 
¥ed
 = 
	`b¥ed_¸óã
(
BPªdTakí
, 0, 0, 0, 0, 0, 0, 0, 0, 0);

193 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "nottaken"))

196 
¥ed
 = 
	`b¥ed_¸óã
(
BPªdNŸTakí
, 0, 0, 0, 0, 0, 0, 0, 0, 0);

198 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "bimod"))

200 i‡(
bimod_√…
 != 1)

201 
	`Áèl
("bad bimodÖredictor config (<table_size>)");

202 i‡(
btb_√…
 != 2)

203 
	`Áèl
("bad btb config (<num_sets> <associativity>)");

206 
¥ed
 = 
	`b¥ed_¸óã
(
BPªd2bô
,

207  
bimod_c⁄fig
[0],

213  
btb_c⁄fig
[0],

214  
btb_c⁄fig
[1],

215  
øs_size
);

217 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "2lev"))

220 i‡(
twﬁev_√…
 != 4)

221 
	`Áèl
("bad 2-levelÖred config (<l1size> <l2size> <hist_size> <xor>)");

222 i‡(
btb_√…
 != 2)

223 
	`Áèl
("bad btb config (<num_sets> <associativity>)");

225 
¥ed
 = 
	`b¥ed_¸óã
(
BPªd2Levñ
,

227  
twﬁev_c⁄fig
[0],

228  
twﬁev_c⁄fig
[1],

230  
twﬁev_c⁄fig
[2],

231  
twﬁev_c⁄fig
[3],

232  
btb_c⁄fig
[0],

233  
btb_c⁄fig
[1],

234  
øs_size
);

236 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "comb"))

239 i‡(
twﬁev_√…
 != 4)

240 
	`Áèl
("bad 2-levelÖred config (<l1size> <l2size> <hist_size> <xor>)");

241 i‡(
bimod_√…
 != 1)

242 
	`Áèl
("bad bimodÖredictor config (<table_size>)");

243 i‡(
comb_√…
 != 1)

244 
	`Áèl
("bad combiningÖredictor config (<meta_table_size>)");

245 i‡(
btb_√…
 != 2)

246 
	`Áèl
("bad btb config (<num_sets> <associativity>)");

248 
¥ed
 = 
	`b¥ed_¸óã
(
BPªdComb
,

249  
bimod_c⁄fig
[0],

250  
twﬁev_c⁄fig
[0],

251  
twﬁev_c⁄fig
[1],

252  
comb_c⁄fig
[0],

253  
twﬁev_c⁄fig
[2],

254  
twﬁev_c⁄fig
[3],

255  
btb_c⁄fig
[0],

256  
btb_c⁄fig
[1],

257  
øs_size
);

260 
	`Áèl
("ˇ¬ŸÖ¨£Öªdi˘‹Åy≥ `%s'", 
¥ed_ty≥
);

261 
	}
}

265 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

267 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

269 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

270 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

272 &
sim_num_ªfs
, 0, 
NULL
);

273 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

275 &
sim_ñ≠£d_time
, 0, 
NULL
);

276 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

278 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

280 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_branches",

282 &
sim_num_bønches
, 0, 
NULL
);

283 
	`°©_ªg_f‹muœ
(
sdb
, "sim_IPB",

285 "sim_num_ö¢ / sim_num_bønches", 
NULL
);

288 i‡(
¥ed
)

289 
	`b¥ed_ªg_°©s
(
¥ed
, 
sdb
);

290 
	}
}

294 
	$sim_öô
()

296 
sim_num_ªfs
 = 0;

299 
	`ªgs_öô
(&
ªgs
);

302 
mem
 = 
	`mem_¸óã
("mem");

303 
	`mem_öô
(
mem
);

304 
	}
}

308 
	$b¥ed_m°©e_obj
(
FILE
 *
°ªam
,

309 *
cmd
,

310 
ªgs_t
 *
ªgs
,

311 
mem_t
 *
mem
)

314 
	`sim_¥öt_°©s
(
°ªam
);

317  
NULL
;

318 
	}
}

322 
	$sim_lﬂd_¥og
(*
‚ame
,

323 
¨gc
, **
¨gv
,

324 **
ívp
)

327 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

330 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
b¥ed_m°©e_obj
);

331 
	}
}

335 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

338 
	}
}

342 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

345 
	}
}

349 
	$sim_unöô
()

352 
	}
}

364 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

367 #unde‡
SET_TPC


368 
	#SET_TPC
(
EXPR
Ë(
èrgë_PC
 = (EXPR))

	)

371 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

374 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

375 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

377 #i‡
deföed
(
TARGET_PISA
)

380 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

381 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

382 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

383 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

384 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

385 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

388 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

389 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

390 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

391 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

392 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

393 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

395 #ñi‡
deföed
(
TARGET_ALPHA
)

398 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

399 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

400 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[N])

	)

401 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[N] = (EXPR))

	)

404 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

405 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

406 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

407 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

410 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

414 
	#READ_BYTE
(
SRC
, 
FAULT
) \

415 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

416 
	#READ_HALF
(
SRC
, 
FAULT
) \

417 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

418 
	#READ_WORD
(
SRC
, 
FAULT
) \

419 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

420 #ifde‡
HOST_HAS_QWORD


421 
	#READ_QWORD
(
SRC
, 
FAULT
) \

422 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

425 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

426 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

427 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

428 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

429 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

430 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

431 #ifde‡
HOST_HAS_QWORD


432 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

433 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

437 
	#SYSCALL
(
INST
Ë
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, INST, 
TRUE
)

	)

441 
	$sim_maö
()

443 
md_ö°_t
 
ö°
;

444 
md_addr_t
 
addr
, 
èrgë_PC
 = 0;

445 
md_›code
 
›
;

446 
is_wrôe
;

447 
°ack_idx
;

448 
md_Áu…_ty≥
 
Áu…
;

450 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation w/Öredictors **\n");

453 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

456 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

457 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),Ñegs.regs_PC,

458 
sim_num_ö¢
, &
ªgs
, 
mem
);

460 
TRUE
)

463 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

464 #ifde‡
TARGET_ALPHA


465 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

469 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

472 
sim_num_ö¢
++;

475 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

478 
Áu…
 = 
md_Áu…_n⁄e
;

481 
	`MD_SET_OPCODE
(
›
, 
ö°
);

484 
›
)

486 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

487 
OP
: \

488 
	`SYMCAT
(
OP
,
_IMPL
); \

489 ;

	)

490 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

491 
OP
: \

492 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

493 
	#CONNECT
(
OP
)

	)

494 
	#DECLARE_FAULT
(
FAULT
) \

495 { 
Áu…
 = (
FAULT
); ; }

	)

496 
	~"machöe.def
"

498 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

501 i‡(
Áu…
 !
md_Áu…_n⁄e
)

502 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

504 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

506 
sim_num_ªfs
++;

507 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

508 
is_wrôe
 = 
TRUE
;

511 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
)

513 
md_addr_t
 
¥ed_PC
;

514 
b¥ed_upd©e_t
 
upd©e_ªc
;

516 
sim_num_bønches
++;

518 i‡(
¥ed
)

521 
¥ed_PC
 = 
	`b¥ed_lookup
(
¥ed
,

522  
ªgs
.
ªgs_PC
,

523  
èrgë_PC
,

524  
›
,

525  
	`MD_IS_CALL
(
›
),

526  
	`MD_IS_RETURN
(
›
),

527  &
upd©e_ªc
,

528  &
°ack_idx
);

531 i‡(!
¥ed_PC
)

534 
¥ed_PC
 = 
ªgs
.
ªgs_PC
 + (
md_ö°_t
);

537 
	`b¥ed_upd©e
(
¥ed
,

538  
ªgs
.
ªgs_PC
,

539  
ªgs
.
ªgs_NPC
,

540  
ªgs
.
ªgs_NPC
 !‘egs.
ªgs_PC
 +

541 (
md_ö°_t
)),

542  
¥ed_PC
 !(
ªgs
.
ªgs_PC
 +

543 (
md_ö°_t
)),

544  
¥ed_PC
 =
ªgs
.
ªgs_NPC
,

545  
›
,

546  &
upd©e_ªc
);

551 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

552 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

553 
addr
, 
sim_num_ö¢
, sim_num_insn))

554 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

557 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

558 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

561 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

564 
	}
}

	@sim-cache.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<m©h.h
>

56 
	~<as£π.h
>

58 
	~"ho°.h
"

59 
	~"misc.h
"

60 
	~"machöe.h
"

61 
	~"ªgs.h
"

62 
	~"mem‹y.h
"

63 
	~"ˇche.h
"

64 
	~"lﬂdî.h
"

65 
	~"sysˇŒ.h
"

66 
	~"dlôe.h
"

67 
	~"sim.h
"

78 
ªgs_t
 
	gªgs
;

81 
mem_t
 *
	gmem
 = 
NULL
;

84 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

87 
	gmax_ö°s
;

90 
ˇche_t
 *
	gˇche_û1
 = 
NULL
;

93 
ˇche_t
 *
	gˇche_û2
 = 
NULL
;

96 
ˇche_t
 *
	gˇche_dl1
 = 
NULL
;

99 
ˇche_t
 *
	gˇche_dl2
 = 
NULL
;

102 
ˇche_t
 *
	gôlb
 = 
NULL
;

105 
ˇche_t
 *
	gdéb
 = 
NULL
;

108 
	#MAX_PCSTAT_VARS
 8

	)

109 
°©_°©_t
 *
	gpc°©_°©s
[
MAX_PCSTAT_VARS
];

110 
cou¡î_t
 
	gpc°©_œ°vÆs
[
MAX_PCSTAT_VARS
];

111 
°©_°©_t
 *
	gpc°©_sdi°s
[
MAX_PCSTAT_VARS
];

114 
	#STATVAL
(
STAT
) \

115 ((
STAT
)->
sc
 =
sc_öt
 \

116 ? (
cou¡î_t
)*((
STAT
)->
v¨ü¡
.
f‹_öt
.
v¨
) \

117 : ((
STAT
)->
sc
 =
sc_uöt
 \

118 ? (
cou¡î_t
)*((
STAT
)->
v¨ü¡
.
f‹_uöt
.
v¨
) \

119 : ((
STAT
)->
sc
 =
sc_cou¡î
 \

120 ? *((
STAT
)->
v¨ü¡
.
f‹_cou¡î
.
v¨
) \

121 : (
	`∑nic
("bad sèà˛ass"), 0))))

	)

125 
	$dl1_ac˚ss_‚
(
mem_cmd
 
cmd
,

126 
md_addr_t
 
baddr
,

127 
bsize
,

128 
ˇche_blk_t
 *
blk
,

129 
tick_t
 
now
)

131 i‡(
ˇche_dl2
)

134  
	`ˇche_ac˚ss
(
ˇche_dl2
, 
cmd
, 
baddr
, 
NULL
, 
bsize
,

135  
now
, 
NULL
, NULL);

142 
	}
}

146 
	$dl2_ac˚ss_‚
(
mem_cmd
 
cmd
,

147 
md_addr_t
 
baddr
,

148 
bsize
,

149 
ˇche_blk_t
 *
blk
,

150 
tick_t
 
now
)

155 
	}
}

159 
	$û1_ac˚ss_‚
(
mem_cmd
 
cmd
,

160 
md_addr_t
 
baddr
,

161 
bsize
,

162 
ˇche_blk_t
 *
blk
,

163 
tick_t
 
now
)

165 i‡(
ˇche_û2
)

168  
	`ˇche_ac˚ss
(
ˇche_û2
, 
cmd
, 
baddr
, 
NULL
, 
bsize
,

169  
now
, 
NULL
, NULL);

176 
	}
}

180 
	$û2_ac˚ss_‚
(
mem_cmd
 
cmd
,

181 
md_addr_t
 
baddr
,

182 
bsize
,

183 
ˇche_blk_t
 *
blk
,

184 
tick_t
 
now
)

189 
	}
}

193 
	$ôlb_ac˚ss_‚
(
mem_cmd
 
cmd
,

194 
md_addr_t
 
baddr
,

195 
bsize
,

196 
ˇche_blk_t
 *
blk
,

197 
tick_t
 
now
)

199 
md_addr_t
 *
phy_∑ge_±r
 = (md_addr_à*)
blk
->
u£r_d©a
;

202 
	`as£π
(
phy_∑ge_±r
);

205 *
phy_∑ge_±r
 = 0;

208 
	}
}

212 
	$déb_ac˚ss_‚
(
mem_cmd
 
cmd
,

213 
md_addr_t
 
baddr
,

214 
bsize
,

215 
ˇche_blk_t
 *
blk
,

216 
tick_t
 
now
)

218 
md_addr_t
 *
phy_∑ge_±r
 = (md_addr_à*)
blk
->
u£r_d©a
;

221 
	`as£π
(
phy_∑ge_±r
);

224 *
phy_∑ge_±r
 = 0;

227 
	}
}

230 *
	gˇche_dl1_›t
 ;

231 *
	gˇche_dl2_›t
 ;

232 *
	gˇche_û1_›t
 ;

233 *
	gˇche_û2_›t
 ;

234 *
	gôlb_›t
 ;

235 *
	gdéb_›t
 ;

236 
	gÊush_⁄_sysˇŒs
 ;

237 
	gcom¥ess_iˇche_addrs
 ;

240 
	gpc°©_√…
 = 0;

241 *
	gpc°©_v¨s
[
MAX_PCSTAT_VARS
];

244 #ifde‡
TARGET_PISA


245 
	#IACOMPRESS
(
A
) \

246 (
com¥ess_iˇche_addrs
 ? ((((
A
Ë- 
ld_ãxt_ba£
Ë>> 1Ë+Üd_ãxt_ba£Ë: (A))

	)

247 
	#ISCOMPRESS
(
SZ
) \

248 (
com¥ess_iˇche_addrs
 ? ((
SZ
Ë>> 1Ë: (SZ))

	)

250 
	#IACOMPRESS
(
A
Ë(A)

	)

251 
	#ISCOMPRESS
(
SZ
Ë(SZ)

	)

256 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

258 
	`›t_ªg_hódî
(
odb
,

267 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

268 &
max_ö°s
, 0,

269  
TRUE
, 
NULL
);

271 
	`›t_ªg_°rög
(
odb
, "-cache:dl1",

273 &
ˇche_dl1_›t
, "dl1:256:32:1:l", 
TRUE
, 
NULL
);

274 
	`›t_ªg_nŸe
(
odb
,

288 
	`›t_ªg_°rög
(
odb
, "-cache:dl2",

290 &
ˇche_dl2_›t
, "ul2:1024:64:4:l", 
TRUE
, 
NULL
);

291 
	`›t_ªg_°rög
(
odb
, "-cache:il1",

293 &
ˇche_û1_›t
, "û1:256:32:1:l", 
TRUE
, 
NULL
);

294 
	`›t_ªg_nŸe
(
odb
,

307 
	`›t_ªg_°rög
(
odb
, "-cache:il2",

309 &
ˇche_û2_›t
, "dl2", 
TRUE
, 
NULL
);

310 
	`›t_ªg_°rög
(
odb
, "-tlb:itlb",

312 &
ôlb_›t
, "ôlb:16:4096:4:l", 
TRUE
, 
NULL
);

313 
	`›t_ªg_°rög
(
odb
, "-tlb:dtlb",

315 &
déb_›t
, "déb:32:4096:4:l", 
TRUE
, 
NULL
);

316 
	`›t_ªg_Êag
(
odb
, "-flush", "flush caches on system calls",

317 &
Êush_⁄_sysˇŒs
, 
FALSE
, 
TRUE
, 
NULL
);

318 
	`›t_ªg_Êag
(
odb
, "-cache:icompress",

320 &
com¥ess_iˇche_addrs
, 
FALSE
,

321  
TRUE
, 
NULL
);

323 
	`›t_ªg_°rög_li°
(
odb
, "-pcstat",

325 
pc°©_v¨s
, 
MAX_PCSTAT_VARS
, &
pc°©_√…
, 
NULL
,

326  
FALSE
, 
NULL
, 
TRUE
);

328 
	}
}

332 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
,

333 
¨gc
, **
¨gv
)

335 
«me
[128], 
c
;

336 
n£ts
, 
bsize
, 
assoc
;

339 i‡(!
	`my°ricmp
(
ˇche_dl1_›t
, "none"))

341 
ˇche_dl1
 = 
NULL
;

344 i‡(
	`°rcmp
(
ˇche_dl2_›t
, "none"))

345 
	`Áèl
("theÜ1 data cache must defined ifÅheÜ2 cache is defined");

346 
ˇche_dl2
 = 
NULL
;

350 i‡(
	`ssˇnf
(
ˇche_dl1_›t
, "%[^:]:%d:%d:%d:%c",

351 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

352 
	`Áèl
("badÜ1 D-cacheÖarms: <name>:<nsets>:<bsize>:<assoc>:<repl>");

353 
ˇche_dl1
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

354  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

355 
dl1_ac˚ss_‚
, 1);

358 i‡(!
	`my°ricmp
(
ˇche_dl2_›t
, "none"))

359 
ˇche_dl2
 = 
NULL
;

362 i‡(
	`ssˇnf
(
ˇche_dl2_›t
, "%[^:]:%d:%d:%d:%c",

363 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

364 
	`Áèl
("badÜ2 D-cacheÖarms: "

366 
ˇche_dl2
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

367  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

368 
dl2_ac˚ss_‚
, 1);

373 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "none"))

375 
ˇche_û1
 = 
NULL
;

378 i‡(
	`°rcmp
(
ˇche_û2_›t
, "none"))

379 
	`Áèl
("theÜ1 inst cache must defined ifÅheÜ2 cache is defined");

380 
ˇche_û2
 = 
NULL
;

382 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "dl1"))

384 i‡(!
ˇche_dl1
)

385 
	`Áèl
("I-cacheÜ1 cannotáccess D-cacheÜ1ás it's undefined");

386 
ˇche_û1
 = 
ˇche_dl1
;

389 i‡(
	`°rcmp
(
ˇche_û2_›t
, "none"))

390 
	`Áèl
("theÜ1 inst cache must defined ifÅheÜ2 cache is defined");

391 
ˇche_û2
 = 
NULL
;

393 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "dl2"))

395 i‡(!
ˇche_dl2
)

396 
	`Áèl
("I-cacheÜ1 cannotáccess D-cacheÜ2ás it's undefined");

397 
ˇche_û1
 = 
ˇche_dl2
;

400 i‡(
	`°rcmp
(
ˇche_û2_›t
, "none"))

401 
	`Áèl
("theÜ1 inst cache must defined ifÅheÜ2 cache is defined");

402 
ˇche_û2
 = 
NULL
;

406 i‡(
	`ssˇnf
(
ˇche_û1_›t
, "%[^:]:%d:%d:%d:%c",

407 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

408 
	`Áèl
("badÜ1 I-cacheÖarms: <name>:<nsets>:<bsize>:<assoc>:<repl>");

409 
ˇche_û1
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

410  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

411 
û1_ac˚ss_‚
, 1);

414 i‡(!
	`my°ricmp
(
ˇche_û2_›t
, "none"))

415 
ˇche_û2
 = 
NULL
;

416 i‡(!
	`my°ricmp
(
ˇche_û2_›t
, "dl2"))

418 i‡(!
ˇche_dl2
)

419 
	`Áèl
("I-cacheÜ2 cannotáccess D-cacheÜ2ás it's undefined");

420 
ˇche_û2
 = 
ˇche_dl2
;

424 i‡(
	`ssˇnf
(
ˇche_û2_›t
, "%[^:]:%d:%d:%d:%c",

425 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

426 
	`Áèl
("badÜ2 I-cacheÖarms: "

428 
ˇche_û2
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

429  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

430 
û2_ac˚ss_‚
, 1);

435 i‡(!
	`my°ricmp
(
ôlb_›t
, "none"))

436 
ôlb
 = 
NULL
;

439 i‡(
	`ssˇnf
(
ôlb_›t
, "%[^:]:%d:%d:%d:%c",

440 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

441 
	`Áèl
("bad TLBÖarms: <name>:<nsets>:<page_size>:<assoc>:<repl>");

442 
ôlb
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

443  (
md_addr_t
), 
assoc
,

444 
	`ˇche_ch¨2pﬁicy
(
c
), 
ôlb_ac˚ss_‚
,

449 i‡(!
	`my°ricmp
(
déb_›t
, "none"))

450 
déb
 = 
NULL
;

453 i‡(
	`ssˇnf
(
déb_›t
, "%[^:]:%d:%d:%d:%c",

454 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

455 
	`Áèl
("bad TLBÖarms: <name>:<nsets>:<page_size>:<assoc>:<repl>");

456 
déb
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

457  (
md_addr_t
), 
assoc
,

458 
	`ˇche_ch¨2pﬁicy
(
c
), 
déb_ac˚ss_‚
,

461 
	}
}

465 
	$sim_öô
()

467 
sim_num_ªfs
 = 0;

470 
	`ªgs_öô
(&
ªgs
);

473 
mem
 = 
	`mem_¸óã
("mem");

474 
	`mem_öô
(
mem
);

475 
	}
}

479 
	$ˇche_m°©e_obj
(
FILE
 *
°ªam
,

480 *
cmd
,

481 
ªgs_t
 *
ªgs
,

482 
mem_t
 *
mem
)

485 
	`sim_¥öt_°©s
(
°ªam
);

488  
NULL
;

489 
	}
}

493 
	$sim_lﬂd_¥og
(*
‚ame
,

494 
¨gc
, **
¨gv
,

495 **
ívp
)

498 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

501 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
ˇche_m°©e_obj
);

502 
	}
}

506 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

509 
	}
}

513 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

515 
i
;

518 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

520 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

521 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

523 &
sim_num_ªfs
, 0, 
NULL
);

524 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

526 &
sim_ñ≠£d_time
, 0, 
NULL
);

527 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

529 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

532 i‡(
ˇche_û1


533 && (
ˇche_û1
 !
ˇche_dl1
 && cache_û1 !
ˇche_dl2
))

534 
	`ˇche_ªg_°©s
(
ˇche_û1
, 
sdb
);

535 i‡(
ˇche_û2


536 && (
ˇche_û2
 !
ˇche_dl1
 && cache_û2 !
ˇche_dl2
))

537 
	`ˇche_ªg_°©s
(
ˇche_û2
, 
sdb
);

538 i‡(
ˇche_dl1
)

539 
	`ˇche_ªg_°©s
(
ˇche_dl1
, 
sdb
);

540 i‡(
ˇche_dl2
)

541 
	`ˇche_ªg_°©s
(
ˇche_dl2
, 
sdb
);

542 i‡(
ôlb
)

543 
	`ˇche_ªg_°©s
(
ôlb
, 
sdb
);

544 i‡(
déb
)

545 
	`ˇche_ªg_°©s
(
déb
, 
sdb
);

547 
i
=0; i<
pc°©_√…
; i++)

549 
buf
[512], 
buf1
[512];

550 
°©_°©_t
 *
°©
;

555 
°©
 = 
	`°©_föd_°©
(
sdb
, 
pc°©_v¨s
[
i
]);

556 i‡(!
°©
)

557 
	`Áèl
("ˇ¬ŸÜoˇãány sèti°i¯«med `%s'", 
pc°©_v¨s
[
i
]);

560 i‡(
°©
->
sc
 !
sc_öt
 && sèt->s¯!
sc_uöt
 && sèt->s¯!
sc_cou¡î
)

561 
	`Áèl
("`-pcstat' statistical variable `%s' isÇotán integralÅype",

562 
°©
->
«me
);

565 
pc°©_°©s
[
i
] = 
°©
;

566 
pc°©_œ°vÆs
[
i
] = 
	`STATVAL
(
°©
);

569 
	`•rötf
(
buf
, "%s_by_pc", 
°©
->
«me
);

570 
	`•rötf
(
buf1
, "%†(byÅexàaddªss)", 
°©
->
desc
);

571 
pc°©_sdi°s
[
i
] = 
	`°©_ªg_sdi°
(
sdb
, 
buf
, 
buf1
,

573  (
PF_COUNT
|
PF_PDF
),

575  
NULL
);

577 
	`ld_ªg_°©s
(
sdb
);

578 
	`mem_ªg_°©s
(
mem
, 
sdb
);

579 
	}
}

583 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

586 
	}
}

590 
	$sim_unöô
()

593 
	}
}

604 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

607 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

610 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

611 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

613 #i‡
deföed
(
TARGET_PISA
)

616 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

617 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

618 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

619 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

620 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

621 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

624 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

625 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

626 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

627 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

628 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

629 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

631 #ñi‡
deföed
(
TARGET_ALPHA
)

634 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

635 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

636 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[N])

	)

637 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[N] = (EXPR))

	)

640 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

641 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

642 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

643 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

646 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

650 
	#__READ_CACHE
(
addr
, 
SRC_T
) \

651 ((
déb
 \

652 ? 
	`ˇche_ac˚ss
(
déb
, 
Ród
, (
addr
), 
NULL
, \

653 (
SRC_T
), 0, 
NULL
, NULL) \

655 (
ˇche_dl1
 \

656 ? 
	`ˇche_ac˚ss
(
ˇche_dl1
, 
Ród
, (
addr
), 
NULL
, \

657 (
SRC_T
), 0, 
NULL
, NULL) \

658 : 0))

	)

660 
	#READ_BYTE
(
SRC
, 
FAULT
) \

661 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), \

662 
	`__READ_CACHE
(
addr
, 
byã_t
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

663 
	#READ_HALF
(
SRC
, 
FAULT
) \

664 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), \

665 
	`__READ_CACHE
(
addr
, 
hÆf_t
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

666 
	#READ_WORD
(
SRC
, 
FAULT
) \

667 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), \

668 
	`__READ_CACHE
(
addr
, 
w‹d_t
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

669 #ifde‡
HOST_HAS_QWORD


670 
	#READ_QWORD
(
SRC
, 
FAULT
) \

671 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), \

672 
	`__READ_CACHE
(
addr
, 
qw‹d_t
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

675 
	#__WRITE_CACHE
(
addr
, 
DST_T
) \

676 ((
déb
 \

677 ? 
	`ˇche_ac˚ss
(
déb
, 
Wrôe
, (
addr
), 
NULL
, \

678 (
DST_T
), 0, 
NULL
, NULL) \

680 (
ˇche_dl1
 \

681 ? 
	`ˇche_ac˚ss
(
ˇche_dl1
, 
Wrôe
, (
addr
), 
NULL
, \

682 (
DST_T
), 0, 
NULL
, NULL) \

683 : 0))

	)

685 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

686 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), \

687 
	`__WRITE_CACHE
(
addr
, 
byã_t
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

688 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

689 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), \

690 
	`__WRITE_CACHE
(
addr
, 
hÆf_t
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

691 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

692 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), \

693 
	`__WRITE_CACHE
(
addr
, 
w‹d_t
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

694 #ifde‡
HOST_HAS_QWORD


695 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

696 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), \

697 
	`__WRITE_CACHE
(
addr
, 
qw‹d_t
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

701 
md_Áu…_ty≥


702 
	$dˇche_ac˚ss_‚
(
mem_t
 *
mem
,

703 
mem_cmd
 
cmd
,

704 
md_addr_t
 
addr
,

705 *
p
,

706 
nbyãs
)

708 i‡(
déb
)

709 
	`ˇche_ac˚ss
(
déb
, 
cmd
, 
addr
, 
NULL
, 
nbyãs
, 0, NULL, NULL);

710 i‡(
ˇche_dl1
)

711 
	`ˇche_ac˚ss
(
ˇche_dl1
, 
cmd
, 
addr
, 
NULL
, 
nbyãs
, 0, NULL, NULL);

712  
	`mem_ac˚ss
(
mem
, 
cmd
, 
addr
, 
p
, 
nbyãs
);

713 
	}
}

716 
	#SYSCALL
(
INST
) \

717 (
Êush_⁄_sysˇŒs
 \

718 ? ((
déb
 ? 
	`ˇche_Êush
(dtlb, 0) : 0), \

719 (
ˇche_dl1
 ? 
	`ˇche_Êush
(cache_dl1, 0) : 0), \

720 (
ˇche_dl2
 ? 
	`ˇche_Êush
(cache_dl2, 0) : 0), \

721 
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, 
INST
, 
TRUE
)) \

722 : 
	`sys_sysˇŒ
(&
ªgs
, 
dˇche_ac˚ss_‚
, 
mem
, 
INST
, 
TRUE
))

	)

726 
	$sim_maö
()

728 
i
;

729 
md_ö°_t
 
ö°
;

730 
md_addr_t
 
addr
;

731 
md_›code
 
›
;

732 
is_wrôe
;

733 
md_Áu…_ty≥
 
Áu…
;

735 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation w/ caches **\n");

738 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

741 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

742 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),Ñegs.regs_PC,

743 
sim_num_ö¢
, &
ªgs
, 
mem
);

745 
TRUE
)

748 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

749 #ifde‡
TARGET_ALPHA


750 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

754 i‡(
ôlb
)

755 
	`ˇche_ac˚ss
(
ôlb
, 
Ród
, 
	`IACOMPRESS
(
ªgs
.
ªgs_PC
),

756 
NULL
, 
	`ISCOMPRESS
((
md_ö°_t
)), 0, NULL, NULL);

757 i‡(
ˇche_û1
)

758 
	`ˇche_ac˚ss
(
ˇche_û1
, 
Ród
, 
	`IACOMPRESS
(
ªgs
.
ªgs_PC
),

759 
NULL
, 
	`ISCOMPRESS
((
md_ö°_t
)), 0, NULL, NULL);

760 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

763 
sim_num_ö¢
++;

766 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

769 
Áu…
 = 
md_Áu…_n⁄e
;

772 
	`MD_SET_OPCODE
(
›
, 
ö°
);

775 
›
)

777 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

778 
OP
: \

779 
	`SYMCAT
(
OP
,
_IMPL
); \

780 ;

	)

781 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

782 
OP
: \

783 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

784 
	#CONNECT
(
OP
)

	)

785 
	#DECLARE_FAULT
(
FAULT
) \

786 { 
Áu…
 = (
FAULT
); ; }

	)

787 
	~"machöe.def
"

789 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

792 i‡(
Áu…
 !
md_Áu…_n⁄e
)

793 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

795 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

797 
sim_num_ªfs
++;

798 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

799 
is_wrôe
 = 
TRUE
;

803 
i
=0; i < 
pc°©_√…
; i++)

805 
cou¡î_t
 
√wvÆ
;

806 
dñè
;

809 
√wvÆ
 = 
	`STATVAL
(
pc°©_°©s
[
i
]);

810 
dñè
 = 
√wvÆ
 - 
pc°©_œ°vÆs
[
i
];

811 i‡(
dñè
 != 0)

813 
	`°©_add_ßm∂es
(
pc°©_sdi°s
[
i
], 
ªgs
.
ªgs_PC
, 
dñè
);

814 
pc°©_œ°vÆs
[
i
] = 
√wvÆ
;

820 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

821 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

822 
addr
, 
sim_num_ö¢
, sim_num_insn))

823 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

826 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

827 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

830 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

833 
	}
}

	@sim-eio.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"lﬂdî.h
"

62 
	~"sysˇŒ.h
"

63 
	~"dlôe.h
"

64 
	~"›ti⁄s.h
"

65 
	~"°©s.h
"

66 
	~"eio.h
"

67 
	~"ønge.h
"

68 
	~"sim.h
"

78 
ªgs_t
 
	gªgs
;

81 
mem_t
 *
	gmem
 = 
NULL
;

84 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

87 
	gmax_ö°s
;

90 
	gÁ°fwd_cou¡
;

93 
	gÁ°fwdög
 = 
FALSE
;

96 *
	gåa˚_‚ame
;

97 
FILE
 *
	gåa˚_fd
 = 
NULL
;

100 íum { 
	mno_chk±
, 
	m⁄e_shŸ_chk±
, 
	m≥riodic_chk±
 } 
	gchk±_köd
 = 
no_chk±
;

101 *
	gchk±_‚ame
;

102 
FILE
 *
	gchk±_fd
 = 
NULL
;

103 
ønge_ønge_t
 
	gchk±_ønge
;

106 
cou¡î_t
 
	g≥r_chk±_öãrvÆ
;

107 
cou¡î_t
 
	g√xt_chk±_cy˛e
;

108 
	gchk±_num
;

111 
	gchk±_√…
 = 0;

112 *
	gchk±_›ts
[2];

115 
	g≥r_chk±_√…
 = 0;

116 *
	g≥r_chk±_›ts
[2];

121 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

123 
	`›t_ªg_hódî
(
odb
,

136 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

137 &
max_ö°s
, 0,

138  
TRUE
, 
NULL
);

140 
	`›t_ªg_öt
(
odb
, "-fastfwd", "number of insts skipped beforeÅracing starts",

141 &
Á°fwd_cou¡
, 0,

142  
TRUE
, 
NULL
);

144 
	`›t_ªg_°rög
(
odb
, "-trace", "EIOÅrace file output fileÇame",

145 &
åa˚_‚ame
, 
NULL
,

146  
TRUE
, 
NULL
);

148 
	`›t_ªg_°rög_li°
(
odb
, "-perdump",

151 
≥r_chk±_›ts
, 2, &
≥r_chk±_√…
,

152  
NULL
,

153  
FALSE
, 
NULL
, FALSE);

155 
	`›t_ªg_°rög_li°
(
odb
, "-dump",

157 
chk±_›ts
, 2, &
chk±_√…
, 
NULL
,

158  
FALSE
, 
NULL
, FALSE);

160 
	`›t_ªg_nŸe
(
odb
,

177 
	}
}

181 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

183 i‡(
Á°fwd_cou¡
 < 0 || fastfwd_count >= 2147483647)

184 
	`Áèl
("bad fa° f‹w¨d cou¡: %d", 
Á°fwd_cou¡
);

185 
	}
}

189 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

191 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

193 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

194 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

196 &
sim_num_ªfs
, 0, 
NULL
);

197 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

199 &
sim_ñ≠£d_time
, 0, 
NULL
);

200 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

202 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

203 
	`ld_ªg_°©s
(
sdb
);

204 
	`mem_ªg_°©s
(
mem
, 
sdb
);

205 
	}
}

209 
	$sim_öô
()

211 
sim_num_ªfs
 = 0;

214 
	`ªgs_öô
(&
ªgs
);

217 
mem
 = 
	`mem_¸óã
("mem");

218 
	`mem_öô
(
mem
);

219 
	}
}

223 
	$sim_lﬂd_¥og
(*
‚ame
,

224 
¨gc
, **
¨gv
,

225 **
ívp
)

228 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

230 i‡(
chk±_√…
 == 2)

232 *
îr°r
;

235 i‡(!
sim_eio_fd
)

236 
	`Áèl
("checkpoints can only be generated whileÑunningán EIOÅrace");

239 i‡(
≥r_chk±_√…
 != 0)

240 
	`Áèl
("can't do bothÑegularándÖeriodic checkpoints");

243 i‡(
åa˚_‚ame
 !
NULL
)

244 
	`Áèl
("checkpoints cannot be generated with generatingán EIOÅrace");

248 
îr°r
 = 
	`ønge_∑r£_ønge
(
chk±_›ts
[1], &
chk±_ønge
);

249 i‡(
îr°r
)

250 
	`Áèl
("cannotÖarseÖipetraceÑange, use: {<start>}:{<end>}");

253 
chk±_‚ame
 = 
chk±_›ts
[0];

254 
chk±_fd
 = 
	`eio_¸óã
(
chk±_‚ame
);

257 
chk±_köd
 = 
⁄e_shŸ_chk±
;

260 i‡(
≥r_chk±_√…
 == 2)

262 
chk±_‚ame
 = 
≥r_chk±_›ts
[0];

263 i‡(
	`°rchr
(
chk±_‚ame
, '%'Ë=
NULL
)

264 
	`Áèl
("periodic checkpoint filename must beÖrintf-style format");

266 i‡(
	`ssˇnf
(
≥r_chk±_›ts
[1], "%Ld", &
≥r_chk±_öãrvÆ
) != 1)

267 
	`Áèl
("can'tÖarseÖeriodic checkpoint interval '%s'",

268 
≥r_chk±_›ts
[1]);

271 
chk±_köd
 = 
≥riodic_chk±
;

272 
chk±_num
 = 1;

273 
√xt_chk±_cy˛e
 = 
≥r_chk±_öãrvÆ
;

276 i‡(
åa˚_‚ame
 !
NULL
)

278 
	`Ârötf
(
°dîr
, "sim:ÅracingÉxecutionÅo EIO file `%s'...\n",

279 
åa˚_‚ame
);

282 
åa˚_fd
 = 
	`eio_¸óã
(
åa˚_‚ame
);

286 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
dlôe_m°©e_obj
);

287 
	}
}

292 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

295 
	}
}

299 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

302 
	}
}

306 
	$sim_unöô
()

308 i‡(
åa˚_fd
 !
NULL
)

309 
	`eio_˛o£
(
åa˚_fd
);

310 
	}
}

322 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

325 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

328 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

329 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

331 #i‡
deföed
(
TARGET_PISA
)

334 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

335 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

336 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

337 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

338 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

339 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

342 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

343 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

344 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

345 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

346 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

347 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

349 #ñi‡
deföed
(
TARGET_ALPHA
)

352 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

353 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

354 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[N])

	)

355 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[N] = (EXPR))

	)

358 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

359 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

360 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

361 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

364 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

368 
	#READ_BYTE
(
SRC
, 
FAULT
) \

369 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

370 
	#READ_HALF
(
SRC
, 
FAULT
) \

371 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

372 
	#READ_WORD
(
SRC
, 
FAULT
) \

373 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

374 #ifde‡
HOST_HAS_QWORD


375 
	#READ_QWORD
(
SRC
, 
FAULT
) \

376 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

379 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

380 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

381 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

382 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

383 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

384 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

385 #ifde‡
HOST_HAS_QWORD


386 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

387 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

391 
	#SYSCALL
(
INST
) \

392 ((
åa˚_fd
 !
NULL
 && !
Á°fwdög
) \

393 ? 
	`eio_wrôe_åa˚
(
åa˚_fd
, 
sim_num_ö¢
, \

394 &
ªgs
, 
mem_ac˚ss
, 
mem
, 
INST
) \

395 : 
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, 
INST
, 
TRUE
))

	)

399 
	$sim_maö
()

401 
md_ö°_t
 
ö°
;

402 
md_addr_t
 
addr
;

403 
md_›code
 
›
;

404 
boﬁ_t
 
is_wrôe
;

405 
md_Áu…_ty≥
 
Áu…
;

408 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

411 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

412 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),Ñegs.regs_PC,

413 
sim_num_ö¢
, &
ªgs
, 
mem
);

417 i‡(
Á°fwd_cou¡
 > 0)

419 
icou¡
;

421 
	`Ârötf
(
°dîr
, "sim: ** fa° f‹w¨dög %d in°†**\n", 
Á°fwd_cou¡
);

423 
Á°fwdög
 = 
TRUE
;

424 
icou¡
=0; icou¡ < 
Á°fwd_cou¡
; icount++)

427 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

428 #ifde‡
TARGET_ALPHA


429 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

433 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

436 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

439 
Áu…
 = 
md_Áu…_n⁄e
;

442 
	`MD_SET_OPCODE
(
›
, 
ö°
);

445 
›
)

447 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

448 
OP
: \

449 
	`SYMCAT
(
OP
,
_IMPL
); \

450 ;

	)

451 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

452 
OP
: \

453 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

454 
	#CONNECT
(
OP
)

	)

455 #unde‡
DECLARE_FAULT


456 
	#DECLARE_FAULT
(
FAULT
) \

457 { 
Áu…
 = (
FAULT
); ; }

	)

458 
	~"machöe.def
"

460 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

463 i‡(
Áu…
 !
md_Áu…_n⁄e
)

464 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

467 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

469 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

470 
is_wrôe
 = 
TRUE
;

474 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

475 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

476 
addr
, 
sim_num_ö¢
, sim_num_insn))

477 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

480 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

481 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

484 
Á°fwdög
 = 
FALSE
;

486 i‡(
åa˚_fd
 !
NULL
)

488 
	`Ârötf
(
°dîr
, "sim: writing EIO file initial checkpoint...\n");

489 i‡(
	`eio_wrôe_chk±
(&
ªgs
, 
mem
, 
åa˚_fd
) != -1)

490 
	`∑nic
("checkpoint code is broken");

493 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation **\n");

496 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

498 
TRUE
)

501 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

502 #ifde‡
TARGET_ALPHA


503 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

507 i‡(
chk±_köd
 =
⁄e_shŸ_chk±


508 && !
	`ønge_cmp_ønge1
(&
chk±_ønge
, 
ªgs
.
ªgs_NPC
,

509 
sim_num_ö¢
, sim_num_insn))

511 
	`myÂrötf
(
°dîr
, "sim: writing checkpoint file `%s' @ inst %n...\n",

512 
chk±_‚ame
, 
sim_num_ö¢
);

515 
	`eio_wrôe_chk±
(&
ªgs
, 
mem
, 
chk±_fd
);

518 
	`eio_˛o£
(
chk±_fd
);

521 
	`l⁄gjmp
(
sim_exô_buf
, 0+1);

523 i‡(
chk±_köd
 =
≥riodic_chk±


524 && 
sim_num_ö¢
 =
√xt_chk±_cy˛e
)

526 
this_chk±_‚ame
[256];

529 
	`•rötf
(
this_chk±_‚ame
, 
chk±_‚ame
, 
chk±_num
);

530 
chk±_fd
 = 
	`eio_¸óã
(
this_chk±_‚ame
);

532 
	`myÂrötf
(
°dîr
, "sim: writing checkpoint file `%s' @ inst %n...\n",

533 
this_chk±_‚ame
, 
sim_num_ö¢
);

536 
	`eio_wrôe_chk±
(&
ªgs
, 
mem
, 
chk±_fd
);

539 
	`eio_˛o£
(
chk±_fd
);

541 
chk±_num
++;

542 
√xt_chk±_cy˛e
 +
≥r_chk±_öãrvÆ
;

546 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

549 
sim_num_ö¢
++;

552 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

555 
Áu…
 = 
md_Áu…_n⁄e
;

558 
	`MD_SET_OPCODE
(
›
, 
ö°
);

561 
›
)

563 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

564 
OP
: \

565 
	`SYMCAT
(
OP
,
_IMPL
); \

566 ;

	)

567 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

568 
OP
: \

569 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

570 
	#CONNECT
(
OP
)

	)

571 
	#DECLARE_FAULT
(
FAULT
) \

572 { 
Áu…
 = (
FAULT
); ; }

	)

573 
	~"machöe.def
"

575 
	`∑nic
("bogus opcode");

578 i‡(
Áu…
 !
md_Áu…_n⁄e
)

579 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

581 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

583 
sim_num_ªfs
++;

584 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

585 
is_wrôe
 = 
TRUE
;

589 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

590 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

591 
addr
, 
sim_num_ö¢
, sim_num_insn))

592 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

595 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

596 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

599 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

602 
	}
}

	@sim-fast.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

70 #unde‡
NO_INSN_COUNT


72 #ifde‡
__GNUC__


79 
	~"ho°.h
"

80 
	~"misc.h
"

81 
	~"machöe.h
"

82 
	~"ªgs.h
"

83 
	~"mem‹y.h
"

84 
	~"lﬂdî.h
"

85 
	~"sysˇŒ.h
"

86 
	~"dlôe.h
"

87 
	~"sim.h
"

90 
ªgs_t
 
	gªgs
;

93 
mem_t
 *
	gmem
 = 
NULL
;

95 #ifde‡
TARGET_ALPHA


97 
mem_t
 *
	gdec
 = 
NULL
;

102 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

104 
	`›t_ªg_hódî
(
odb
,

113 
	}
}

117 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

119 i‡(
dlôe_a˘ive
)

120 
	`Áèl
("sim-fast doesÇot support DLite debugging");

121 
	}
}

125 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

127 #i‚de‡
NO_INSN_COUNT


128 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

130 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

132 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

134 &
sim_ñ≠£d_time
, 0, 
NULL
);

135 #i‚de‡
NO_INSN_COUNT


136 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

138 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

140 
	`ld_ªg_°©s
(
sdb
);

141 
	`mem_ªg_°©s
(
mem
, 
sdb
);

142 #ifde‡
TARGET_ALPHA


143 
	`mem_ªg_°©s
(
dec
, 
sdb
);

145 
	}
}

149 
	$sim_öô
()

152 
	`ªgs_öô
(&
ªgs
);

155 
mem
 = 
	`mem_¸óã
("mem");

156 
	`mem_öô
(
mem
);

157 
	}
}

161 
	$sim_lﬂd_¥og
(*
‚ame
,

162 
¨gc
, **
¨gv
,

163 **
ívp
)

166 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

168 #ifde‡
TARGET_ALPHA


171 
i
, 
num_ö¢
 = (
ld_ãxt_size
 + 3) / 4;

173 
	`Ârötf
(
°dîr
, "**Öª-decodög %u in°s...", 
num_ö¢
);

176 
dec
 = 
	`mem_¸óã
("dec");

178 
i
=0; i < 
num_ö¢
; i++)

180 
md_›code
 
›
;

181 
md_ö°_t
 
ö°
;

182 
md_addr_t
 
PC
;

185 
PC
 = 
ld_ãxt_ba£
 + 
i
 * (
md_ö°_t
);

188 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
PC
);

191 
	`MD_SET_OPCODE
(
›
, 
ö°
);

194 
	`MEM_WRITE_WORD
(
dec
, 
PC
 << 1, (
w‹d_t
)
›
);

195 
	`MEM_WRITE_WORD
(
dec
, (
PC
 << 1)+(
w‹d_t
), 
ö°
);

197 
	`Ârötf
(
°dîr
, "done\n");

200 
	}
}

204 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

207 
	}
}

211 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

214 
	}
}

218 
	$sim_unöô
()

221 
	}
}

228 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

231 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

234 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

235 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

237 #i‡
deföed
(
TARGET_PISA
)

240 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

241 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

242 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

243 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

244 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

245 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

248 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

249 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

250 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

251 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

252 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

253 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

255 #ñi‡
deföed
(
TARGET_ALPHA
)

258 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

259 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

260 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[N])

	)

261 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[N] = (EXPR))

	)

264 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

265 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

266 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

267 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

270 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

274 
	#READ_BYTE
(
SRC
, 
FAULT
) \

275 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_READ_BYTE
(
mem
, (
SRC
)))

	)

276 
	#READ_HALF
(
SRC
, 
FAULT
) \

277 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_READ_HALF
(
mem
, (
SRC
)))

	)

278 
	#READ_WORD
(
SRC
, 
FAULT
) \

279 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_READ_WORD
(
mem
, (
SRC
)))

	)

280 #ifde‡
HOST_HAS_QWORD


281 
	#READ_QWORD
(
SRC
, 
FAULT
) \

282 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_READ_QWORD
(
mem
, (
SRC
)))

	)

285 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

286 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_WRITE_BYTE
(
mem
, (
DST
), (
SRC
)))

	)

287 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

288 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_WRITE_HALF
(
mem
, (
DST
), (
SRC
)))

	)

289 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

290 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_WRITE_WORD
(
mem
, (
DST
), (
SRC
)))

	)

291 #ifde‡
HOST_HAS_QWORD


292 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

293 ((
FAULT
Ë
md_Áu…_n⁄e
, 
	`MEM_WRITE_QWORD
(
mem
, (
DST
), (
SRC
)))

	)

297 
	#SYSCALL
(
INST
Ë
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, INST, 
TRUE
)

	)

299 #i‚de‡
NO_INSN_COUNT


300 
	#INC_INSN_CTR
(Ë
sim_num_ö¢
++

	)

302 
	#INC_INSN_CTR
(Ë

	)

305 #ifde‡
TARGET_ALPHA


306 
	#ZERO_FP_REG
(Ë
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0

	)

308 
	#ZERO_FP_REG
(Ë

	)

313 
	$sim_maö
()

315 #ifde‡
USE_JUMP_TABLE


325 *
›_jump
[ ] = {

326 &&
›code_NA
,

327 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

328 &&
›code_
##
OP
,

	)

329 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

330 &&
›code_
##
OP
,

	)

331 
	#CONNECT
(
OP
)

	)

332 
	~"machöe.def
"

337 
md_ö°_t
 
ö°
;

340 
md_›code
 
›
;

342 
	`Ârötf
(
°dîr
, "sim: ** starting *fast* functional simulation **\n");

345 i‡(
sim_sw≠_byãs
 || 
sim_sw≠_w‹ds
)

346 
	`Áèl
("sim: *fast* functional simulation cannot swap bytes or words");

348 #ifde‡
USE_JUMP_TABLE


350 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
;

353 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_NPC
);

356 
	`MD_SET_OPCODE
(
›
, 
ö°
);

357 *
›_jump
[
›
];

359 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

360 
›code_
##
OP
: \

362 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0; \

363 
	`ZERO_FP_REG
(); \

366 
	`INC_INSN_CTR
(); \

369 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
; \

372 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
); \

375 
	`SYMCAT
(
OP
,
_IMPL
); \

378 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_NPC
); \

381 
	`MD_SET_OPCODE
(
›
, 
ö°
); \

382 *
›_jump
[
›
];

	)

384 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

385 
›code_
##
OP
: \

386 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

387 
	#CONNECT
(
OP
)

	)

388 
	#DECLARE_FAULT
(
FAULT
) \

389 { ; }

	)

390 
	~"machöe.def
"

392 
›code_NA
:

393 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

396 
	`∑nic
("exited sim-fast mainÜoop");

401 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

403 
TRUE
)

406 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

407 #ifde‡
TARGET_ALPHA


408 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

412 #i‚de‡
NO_INSN_COUNT


413 
sim_num_ö¢
++;

416 #ifde‡
TARGET_ALPHA


418 
›
 = (
md_›code
)
	`__UNCHK_MEM_READ
(
dec
, 
ªgs
.
ªgs_PC
 << 1, 
w‹d_t
);

419 
ö°
 =

420 
	`__UNCHK_MEM_READ
(
dec
, (
ªgs
.
ªgs_PC
 << 1)+(
w‹d_t
), 
md_ö°_t
);

423 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

426 
	`MD_SET_OPCODE
(
›
, 
ö°
);

430 
›
)

432 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

433 
OP
: \

434 
	`SYMCAT
(
OP
,
_IMPL
); \

435 ;

	)

436 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

437 
OP
: \

438 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

439 
	#CONNECT
(
OP
)

	)

440 
	#DECLARE_FAULT
(
FAULT
) \

441 { ; }

	)

442 
	~"machöe.def
"

444 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

448 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

449 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

453 
	}
}

	@sim-outorder.c

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<m©h.h
>

65 
	~<as£π.h
>

66 
	~<sig«l.h
>

68 
	~"ho°.h
"

69 
	~"misc.h
"

70 
	~"machöe.h
"

71 
	~"ªgs.h
"

72 
	~"mem‹y.h
"

73 
	~"ˇche.h
"

74 
	~"lﬂdî.h
"

75 
	~"sysˇŒ.h
"

76 
	~"b¥ed.h
"

77 
	~"ªsour˚.h
"

78 
	~"bôm≠.h
"

79 
	~"›ti⁄s.h
"

80 
	~"evÆ.h
"

81 
	~"°©s.h
"

82 
	~"±ø˚.h
"

83 
	~"dlôe.h
"

84 
	~"sim.h
"

86 
	~"sh¨edbus.h
"

88 #ifde‡
_DEBUG


89 
FILE
* 
	giÂ
;

93 * 
tdma_sched_fûíame
;

94 
sched_p
 
globÆ_sched_d©a
;

100 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

102 
ef„˘_cy˛es
;

104 
ef„˘_iˇche_mis£s
;

111 
	gef„˘_„tch
 = 0, 
	gef„˘_commô
 = 0;

121 
ªgs_t
 
	gªgs
;

124 
mem_t
 *
	gmem
 = 
NULL
;

132 
	gmax_ö°s
;

135 
	gÁ°fwd_cou¡
;

138 
	g±ø˚_√…
 = 0;

139 *
	g±ø˚_›ts
[2];

142 
	gruu_ifq_size
;

145 
	gruu_bønch_≥«…y
;

148 
	g„tch_•ìd
;

151 *
	g¥ed_ty≥
;

154 
	gbimod_√…
 = 1;

155 
	gbimod_c⁄fig
[1] =

159 
	gtwﬁev_√…
 = 4;

160 
	gtwﬁev_c⁄fig
[4] =

161 { 1, 4, 2, 
FALSE
};

164 
	gcomb_√…
 = 1;

165 
	gcomb_c⁄fig
[1] =

169 
	gøs_size
 = 8;

172 
	gbtb_√…
 = 2;

173 
	gbtb_c⁄fig
[2] =

177 
	gruu_decode_width
;

180 
	gruu_issue_width
;

183 
	gruu_ö‹dî_issue
;

186 
	gruu_ö˛ude_•ec
 = 
TRUE
;

189 
	gruu_commô_width
;

192 
	gRUU_size
 = 8;

195 
	gLSQ_size
 = 4;

198 *
	gˇche_dl1_›t
;

201 
	gˇche_dl1_œt
;

204 *
	gˇche_dl2_›t
;

207 
	gˇche_dl2_œt
;

210 *
	gˇche_û1_›t
;

213 
	gˇche_û1_œt
;

216 *
	gˇche_û2_›t
;

219 
	gˇche_û2_œt
;

222 
	gÊush_⁄_sysˇŒs
;

225 
	gcom¥ess_iˇche_addrs
;

228 
	gmem_√…
 = 2;

229 
	gmem_œt
[2] =

233 
	gmem_bus_width
;

236 *
	gôlb_›t
;

239 *
	gdéb_›t
;

242 
	géb_miss_œt
;

245 
	gªs_ülu
;

248 
	gªs_imu…
;

251 
	gªs_memp‹t
;

254 
	gªs_ÂÆu
;

257 
	gªs_Âmu…
;

260 
	#MAX_PCSTAT_VARS
 8

	)

261 
	gpc°©_√…
 = 0;

262 *
	gpc°©_v¨s
[
MAX_PCSTAT_VARS
];

265 #ifde‡
TARGET_PISA


266 
	#IACOMPRESS
(
A
) \

267 (
com¥ess_iˇche_addrs
 ? ((((
A
Ë- 
ld_ãxt_ba£
Ë>> 1Ë+Üd_ãxt_ba£Ë: (A))

	)

268 
	#ISCOMPRESS
(
SZ
) \

269 (
com¥ess_iˇche_addrs
 ? ((
SZ
Ë>> 1Ë: (SZ))

	)

271 
	#IACOMPRESS
(
A
Ë(A)

	)

272 
	#ISCOMPRESS
(
SZ
Ë(SZ)

	)

276 
	gbugcom∑t_mode
;

283 
	#FU_IALU_INDEX
 0

	)

284 
	#FU_IMULT_INDEX
 1

	)

285 
	#FU_MEMPORT_INDEX
 2

	)

286 
	#FU_FPALU_INDEX
 3

	)

287 
	#FU_FPMULT_INDEX
 4

	)

294 
ªs_desc
 
	gfu_c⁄fig
[] = {

300 { 
I¡ALU
, 1, 1 }

308 { 
I¡MULT
, 4, 4 },

309 { 
I¡DIV
, 4, 4 }

317 { 
RdP‹t
, 1, 1 },

318 { 
WrP‹t
, 1, 1 }

326 { 
FlﬂtADD
, 2, 2 },

327 { 
FlﬂtCMP
, 2, 2 },

328 { 
FlﬂtCVT
, 2, 2 }

336 { 
FlﬂtMULT
, 12, 12 },

337 { 
FlﬂtDIV
, 12, 12 },

338 { 
FlﬂtSQRT
, 12, 12 }

349 
cou¡î_t
 
	gsim_¶ù
 = 0;

352 
cou¡î_t
 
	gsim_tŸÆ_ö¢
 = 0;

355 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

358 
cou¡î_t
 
	gsim_tŸÆ_ªfs
 = 0;

361 
cou¡î_t
 
	gsim_num_lﬂds
 = 0;

364 
cou¡î_t
 
	gsim_tŸÆ_lﬂds
 = 0;

367 
cou¡î_t
 
	gsim_num_bønches
 = 0;

370 
cou¡î_t
 
	gsim_tŸÆ_bønches
 = 0;

373 
tick_t
 
	gsim_cy˛e
 = 0;

376 
cou¡î_t
 
	gIFQ_cou¡
;

377 
cou¡î_t
 
	gIFQ_fcou¡
;

378 
cou¡î_t
 
	gRUU_cou¡
;

379 
cou¡î_t
 
	gRUU_fcou¡
;

380 
cou¡î_t
 
	gLSQ_cou¡
;

381 
cou¡î_t
 
	gLSQ_fcou¡
;

384 
cou¡î_t
 
	gsim_övÆid_addrs
;

391 
	gö°_£q
 = 0;

394 
	g±ø˚_£q
 = 0;

400 
	g•ec_mode
 = 
FALSE
;

403 
	gruu_„tch_issue_dñay
 = 0;

406 
	g¥ed_≥r„˘
 = 
FALSE
;

409 *
	gb¥ed_•ec_›t
;

410 íum { 
	m•ec_ID
, 
	m•ec_WB
, 
	m•ec_CT
 } 
	gb¥ed_•ec_upd©e
;

413 
ˇche_t
 *
	gˇche_û1
;

416 
ˇche_t
 *
	gˇche_û2
;

419 
ˇche_t
 *
	gˇche_dl1
;

422 
ˇche_t
 *
	gˇche_dl2
;

425 
ˇche_t
 *
	gôlb
;

428 
ˇche_t
 *
	gdéb
;

431 
b¥ed_t
 *
	g¥ed
;

434 
ªs_poﬁ
 *
	gfu_poﬁ
 = 
NULL
;

437 
°©_°©_t
 *
	gpc°©_°©s
[
MAX_PCSTAT_VARS
];

438 
cou¡î_t
 
	gpc°©_œ°vÆs
[
MAX_PCSTAT_VARS
];

439 
°©_°©_t
 *
	gpc°©_sdi°s
[
MAX_PCSTAT_VARS
];

443 
	gmy_œ°_ö°_mis£d
 = 
FALSE
;

447 
	$dump_b¥ed
()

449 
i
, 
size
, 
shi·ªg
;

450 *
l2èbÀ
;

452 i‡(
¥ed
 =
NULL
)

455 
size
 = 
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
l2size
;

456 
shi·ªg
 = *
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
shi·ªgs
;

457 
l2èbÀ
 = 
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.l2table;

458 
	`¥ötf
("BHR[%d]:", 
shi·ªg
);

459 
i
 = 0; i < 
size
; i++)

460 
	`¥ötf
(" %d", 
l2èbÀ
[
i
]);

461 
	`¥ötf
("\n");

462 
	}
}

465 
	#STATVAL
(
STAT
) \

466 ((
STAT
)->
sc
 =
sc_öt
 \

467 ? (
cou¡î_t
)*((
STAT
)->
v¨ü¡
.
f‹_öt
.
v¨
) \

468 : ((
STAT
)->
sc
 =
sc_uöt
 \

469 ? (
cou¡î_t
)*((
STAT
)->
v¨ü¡
.
f‹_uöt
.
v¨
) \

470 : ((
STAT
)->
sc
 =
sc_cou¡î
 \

471 ? *((
STAT
)->
v¨ü¡
.
f‹_cou¡î
.
v¨
) \

472 : (
	`∑nic
("bad sèà˛ass"), 0))))

	)

477 
	$mem_ac˚ss_œãncy
(
blk_sz
)

479 
chunks
 = (
blk_sz
 + (
mem_bus_width
 - 1)) / mem_bus_width;

481 
	`as£π
(
chunks
 > 0);

483  ( 
mem_œt
[0] +

484 –
mem_œt
[1] * (
chunks
 - 1)));

485 
	}
}

494 
	$dl1_ac˚ss_‚
(
mem_cmd
 
cmd
,

495 
md_addr_t
 
baddr
,

496 
bsize
,

497 
ˇche_blk_t
 *
blk
,

498 
tick_t
 
now
)

500 
œt
;

502 i‡(
ˇche_dl2
)

505 
œt
 = 
	`ˇche_ac˚ss
(
ˇche_dl2
, 
cmd
, 
baddr
, 
NULL
, 
bsize
,

506  
now
, 
NULL
, NULL);

507 i‡(
cmd
 =
Ród
)

508  
œt
;

518 i‡(
cmd
 =
Ród
)

519  
	`mem_ac˚ss_œãncy
(
bsize
);

526 
	}
}

530 
	$dl2_ac˚ss_‚
(
mem_cmd
 
cmd
,

531 
md_addr_t
 
baddr
,

532 
bsize
,

533 
ˇche_blk_t
 *
blk
,

534 
tick_t
 
now
)

537 i‡(
cmd
 =
Ród
)

538  
	`mem_ac˚ss_œãncy
(
bsize
);

544 
	}
}

548 
	$û1_ac˚ss_‚
(
mem_cmd
 
cmd
,

549 
md_addr_t
 
baddr
,

550 
bsize
,

551 
ˇche_blk_t
 *
blk
,

552 
tick_t
 
now
)

554 
œt
;

556 i‡(
ˇche_û2
)

559 
œt
 = 
	`ˇche_ac˚ss
(
ˇche_û2
, 
cmd
, 
baddr
, 
NULL
, 
bsize
,

560  
now
, 
NULL
, NULL);

561 i‡(
cmd
 =
Ród
)

562  
œt
;

564 
	`∑nic
("writesÅo instruction memoryÇot supported");

569 i‡(
cmd
 =
Ród
)

570  
	`mem_ac˚ss_œãncy
(
bsize
);

572 
	`∑nic
("writesÅo instruction memoryÇot supported");

574 
	}
}

578 
	$û2_ac˚ss_‚
(
mem_cmd
 
cmd
,

579 
md_addr_t
 
baddr
,

580 
bsize
,

581 
ˇche_blk_t
 *
blk
,

582 
tick_t
 
now
)

585 i‡(
cmd
 =
Ród
)

586  
	`mem_ac˚ss_œãncy
(
bsize
);

588 
	`∑nic
("writesÅo instruction memoryÇot supported");

589 
	}
}

598 
	$ôlb_ac˚ss_‚
(
mem_cmd
 
cmd
,

599 
md_addr_t
 
baddr
,

600 
bsize
,

601 
ˇche_blk_t
 *
blk
,

602 
tick_t
 
now
)

604 
md_addr_t
 *
phy_∑ge_±r
 = (md_addr_à*)
blk
->
u£r_d©a
;

607 
	`as£π
(
phy_∑ge_±r
);

610 *
phy_∑ge_±r
 = 0;

613  
éb_miss_œt
;

614 
	}
}

618 
	$déb_ac˚ss_‚
(
mem_cmd
 
cmd
,

619 
md_addr_t
 
baddr
,

620 
bsize
,

621 
ˇche_blk_t
 *
blk
,

622 
tick_t
 
now
)

624 
md_addr_t
 *
phy_∑ge_±r
 = (md_addr_à*)
blk
->
u£r_d©a
;

627 
	`as£π
(
phy_∑ge_±r
);

630 *
phy_∑ge_±r
 = 0;

633  
éb_miss_œt
;

634 
	}
}

639 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

641 
	`›t_ªg_hódî
(
odb
,

650 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

651 &
max_ö°s
, 0,

652  
TRUE
, 
NULL
);

656 
	`›t_ªg_öt
(
odb
, "-fastfwd", "number of insts skipped beforeÅiming starts",

657 &
Á°fwd_cou¡
, 0,

658  
TRUE
, 
NULL
);

659 
	`›t_ªg_°rög_li°
(
odb
, "-ptrace",

661 
±ø˚_›ts
, 2, &
±ø˚_√…
, 
NULL
,

662  
FALSE
, 
NULL
, FALSE);

664 
	`›t_ªg_nŸe
(
odb
,

686 
	`›t_ªg_öt
(
odb
, "-fetch:ifqsize", "instruction fetch queue size (in insts)",

687 &
ruu_ifq_size
, 4,

688  
TRUE
, 
NULL
);

690 
	`›t_ªg_öt
(
odb
, "-fetch:mplat", "extra branch mis-predictionÜatency",

691 &
ruu_bønch_≥«…y
, 0,

692  
TRUE
, 
NULL
);

694 
	`›t_ªg_öt
(
odb
, "-fetch:speed",

696 &
„tch_•ìd
, 1,

697  
TRUE
, 
NULL
);

701 
	`›t_ªg_nŸe
(
odb
,

717 
	`›t_ªg_°rög
(
odb
, "-bpred",

719 &
¥ed_ty≥
, "2lev",

720  
TRUE
, 
NULL
);

722 
	`›t_ªg_öt_li°
(
odb
, "-bpred:bimod",

724 
bimod_c⁄fig
, 
bimod_√…
, &bimod_nelt,

725  
bimod_c⁄fig
,

726  
TRUE
, 
NULL
, 
FALSE
);

728 
	`›t_ªg_öt_li°
(
odb
, "-bpred:2lev",

731 
twﬁev_c⁄fig
, 
twﬁev_√…
, &twolev_nelt,

732  
twﬁev_c⁄fig
,

733  
TRUE
, 
NULL
, 
FALSE
);

735 
	`›t_ªg_öt_li°
(
odb
, "-bpred:comb",

737 
comb_c⁄fig
, 
comb_√…
, &comb_nelt,

738  
comb_c⁄fig
,

739  
TRUE
, 
NULL
, 
FALSE
);

741 
	`›t_ªg_öt
(
odb
, "-bpred:ras",

743 &
øs_size
,Ñas_size,

744  
TRUE
, 
NULL
);

746 
	`›t_ªg_öt_li°
(
odb
, "-bpred:btb",

748 
btb_c⁄fig
, 
btb_√…
, &btb_nelt,

749  
btb_c⁄fig
,

750  
TRUE
, 
NULL
, 
FALSE
);

752 
	`›t_ªg_°rög
(
odb
, "-bpred:spec_update",

754 &
b¥ed_•ec_›t
, 
NULL
,

755  
TRUE
, 
NULL
);

759 
	`›t_ªg_öt
(
odb
, "-decode:width",

761 &
ruu_decode_width
, 1,

762  
TRUE
, 
NULL
);

766 
	`›t_ªg_öt
(
odb
, "-issue:width",

768 &
ruu_issue_width
, 1,

769  
TRUE
, 
NULL
);

771 
	`›t_ªg_Êag
(
odb
, "-issue:inorder", "runÖipeline with in-order issue",

772 &
ruu_ö‹dî_issue
, 
FALSE
,

773  
TRUE
, 
NULL
);

775 
	`›t_ªg_Êag
(
odb
, "-issue:wrongpath",

777 &
ruu_ö˛ude_•ec
, 
TRUE
,

778  
TRUE
, 
NULL
);

782 
	`›t_ªg_öt
(
odb
, "-commit:width",

784 &
ruu_commô_width
, 1,

785  
TRUE
, 
NULL
);

789 
	`›t_ªg_öt
(
odb
, "-ruu:size",

791 &
RUU_size
, 8,

792  
TRUE
, 
NULL
);

796 
	`›t_ªg_öt
(
odb
, "-lsq:size",

798 &
LSQ_size
, 8,

799  
TRUE
, 
NULL
);

803 
	`›t_ªg_°rög
(
odb
, "-cache:dl1",

805 &
ˇche_dl1_›t
, "none",

806  
TRUE
, 
NULL
);

808 
	`›t_ªg_nŸe
(
odb
,

823 
	`›t_ªg_öt
(
odb
, "-cache:dl1lat",

825 &
ˇche_dl1_œt
, 1,

826  
TRUE
, 
NULL
);

828 
	`›t_ªg_°rög
(
odb
, "-cache:dl2",

830 &
ˇche_dl2_›t
, "none",

831  
TRUE
, 
NULL
);

833 
	`›t_ªg_öt
(
odb
, "-cache:dl2lat",

835 &
ˇche_dl2_œt
, 6,

836  
TRUE
, 
NULL
);

838 
	`›t_ªg_°rög
(
odb
, "-cache:il1",

840 &
ˇche_û1_›t
, "il1:16:64:1:l",

841  
TRUE
, 
NULL
);

843 
	`›t_ªg_nŸe
(
odb
,

857 
	`›t_ªg_öt
(
odb
, "-cache:il1lat",

859 &
ˇche_û1_œt
, 1,

860  
TRUE
, 
NULL
);

862 
	`›t_ªg_°rög
(
odb
, "-cache:il2",

864 &
ˇche_û2_›t
, "none",

865  
TRUE
, 
NULL
);

867 
	`›t_ªg_öt
(
odb
, "-cache:il2lat",

869 &
ˇche_û2_œt
, 6,

870  
TRUE
, 
NULL
);

872 
	`›t_ªg_Êag
(
odb
, "-cache:flush", "flush caches on system calls",

873 &
Êush_⁄_sysˇŒs
, 
FALSE
, 
TRUE
, 
NULL
);

875 
	`›t_ªg_Êag
(
odb
, "-cache:icompress",

877 &
com¥ess_iˇche_addrs
, 
FALSE
,

878  
TRUE
, 
NULL
);

881 
	`›t_ªg_öt_li°
(
odb
, "-mem:lat",

883 
mem_œt
, 
mem_√…
, &mem_nelt, mem_lat,

884  
TRUE
, 
NULL
, 
FALSE
);

886 
	`›t_ªg_öt
(
odb
, "-mem:width", "memoryáccess bus width (in bytes)",

887 &
mem_bus_width
, 64,

888  
TRUE
, 
NULL
);

892 
	`›t_ªg_°rög
(
odb
, "-tlb:itlb",

894 &
ôlb_›t
, "n⁄e", 
TRUE
, 
NULL
);

896 
	`›t_ªg_°rög
(
odb
, "-tlb:dtlb",

898 &
déb_›t
, "n⁄e", 
TRUE
, 
NULL
);

900 
	`›t_ªg_öt
(
odb
, "-tlb:lat",

902 &
éb_miss_œt
, 30,

903  
TRUE
, 
NULL
);

907 
	`›t_ªg_öt
(
odb
, "-res:ialu",

909 &
ªs_ülu
, 
fu_c⁄fig
[
FU_IALU_INDEX
].
qu™tôy
,

910  
TRUE
, 
NULL
);

912 
	`›t_ªg_öt
(
odb
, "-res:imult",

914 &
ªs_imu…
, 
fu_c⁄fig
[
FU_IMULT_INDEX
].
qu™tôy
,

915  
TRUE
, 
NULL
);

917 
	`›t_ªg_öt
(
odb
, "-res:memport",

919 &
ªs_memp‹t
, 
fu_c⁄fig
[
FU_MEMPORT_INDEX
].
qu™tôy
,

920  
TRUE
, 
NULL
);

922 
	`›t_ªg_öt
(
odb
, "-res:fpalu",

924 &
ªs_ÂÆu
, 
fu_c⁄fig
[
FU_FPALU_INDEX
].
qu™tôy
,

925  
TRUE
, 
NULL
);

927 
	`›t_ªg_öt
(
odb
, "-res:fpmult",

929 &
ªs_Âmu…
, 
fu_c⁄fig
[
FU_FPMULT_INDEX
].
qu™tôy
,

930  
TRUE
, 
NULL
);

932 
	`›t_ªg_°rög_li°
(
odb
, "-pcstat",

934 
pc°©_v¨s
, 
MAX_PCSTAT_VARS
, &
pc°©_√…
, 
NULL
,

935  
FALSE
, 
NULL
, 
TRUE
);

937 
	`›t_ªg_Êag
(
odb
, "-bugcompat",

939 &
bugcom∑t_mode
, 
FALSE
, 
TRUE
, 
NULL
);

940 
	}
}

944 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
,

945 
¨gc
, **
¨gv
)

947 
«me
[128], 
c
;

948 
n£ts
, 
bsize
, 
assoc
;

950 i‡(
Á°fwd_cou¡
 < 0 || fastfwd_count >= 2147483647)

951 
	`Áèl
("bad fa° f‹w¨d cou¡: %d", 
Á°fwd_cou¡
);

953 i‡(
ruu_ifq_size
 < 1 || (ruu_ifq_size & (ruu_ifq_size - 1)) != 0)

954 
	`Áèl
("inst fetch queue size must beÖositive > 0ándáÖower ofÅwo");

961 i‡(
„tch_•ìd
 < 1)

962 
	`Áèl
("front-end speed must beÖositiveándÇon-zero");

964 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "perfect"))

967 
¥ed
 = 
NULL
;

968 
¥ed_≥r„˘
 = 
TRUE
;

970 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "taken"))

973 
¥ed
 = 
	`b¥ed_¸óã
(
BPªdTakí
, 0, 0, 0, 0, 0, 0, 0, 0, 0);

975 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "nottaken"))

978 
¥ed
 = 
	`b¥ed_¸óã
(
BPªdNŸTakí
, 0, 0, 0, 0, 0, 0, 0, 0, 0);

980 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "bimod"))

983 i‡(
bimod_√…
 != 1)

984 
	`Áèl
("bad bimodÖredictor config (<table_size>)");

985 i‡(
btb_√…
 != 2)

986 
	`Áèl
("bad btb config (<num_sets> <associativity>)");

989 
¥ed
 = 
	`b¥ed_¸óã
(
BPªd2bô
,

990  
bimod_c⁄fig
[0],

996  
btb_c⁄fig
[0],

997  
btb_c⁄fig
[1],

998  
øs_size
);

1000 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "2lev"))

1003 i‡(
twﬁev_√…
 != 4)

1004 
	`Áèl
("bad 2-levelÖred config (<l1size> <l2size> <hist_size> <xor>)");

1005 i‡(
btb_√…
 != 2)

1006 
	`Áèl
("bad btb config (<num_sets> <associativity>)");

1008 
¥ed
 = 
	`b¥ed_¸óã
(
BPªd2Levñ
,

1010  
twﬁev_c⁄fig
[0],

1011  
twﬁev_c⁄fig
[1],

1013  
twﬁev_c⁄fig
[2],

1014  
twﬁev_c⁄fig
[3],

1015  
btb_c⁄fig
[0],

1016  
btb_c⁄fig
[1],

1017  
øs_size
);

1019 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "comb"))

1022 i‡(
twﬁev_√…
 != 4)

1023 
	`Áèl
("bad 2-levelÖred config (<l1size> <l2size> <hist_size> <xor>)");

1024 i‡(
bimod_√…
 != 1)

1025 
	`Áèl
("bad bimodÖredictor config (<table_size>)");

1026 i‡(
comb_√…
 != 1)

1027 
	`Áèl
("bad combiningÖredictor config (<meta_table_size>)");

1028 i‡(
btb_√…
 != 2)

1029 
	`Áèl
("bad btb config (<num_sets> <associativity>)");

1031 
¥ed
 = 
	`b¥ed_¸óã
(
BPªdComb
,

1032  
bimod_c⁄fig
[0],

1033  
twﬁev_c⁄fig
[0],

1034  
twﬁev_c⁄fig
[1],

1035  
comb_c⁄fig
[0],

1036  
twﬁev_c⁄fig
[2],

1037  
twﬁev_c⁄fig
[3],

1038  
btb_c⁄fig
[0],

1039  
btb_c⁄fig
[1],

1040  
øs_size
);

1043 
	`Áèl
("ˇ¬ŸÖ¨£Öªdi˘‹Åy≥ `%s'", 
¥ed_ty≥
);

1045 i‡(!
b¥ed_•ec_›t
)

1046 
b¥ed_•ec_upd©e
 = 
•ec_ID
;

1047 i‡(!
	`my°ricmp
(
b¥ed_•ec_›t
, "ID"))

1048 
b¥ed_•ec_upd©e
 = 
•ec_ID
;

1049 i‡(!
	`my°ricmp
(
b¥ed_•ec_›t
, "WB"))

1050 
b¥ed_•ec_upd©e
 = 
•ec_WB
;

1051 i‡(!
	`my°ricmp
(
b¥ed_•ec_›t
, "CM"))

1052 
b¥ed_•ec_upd©e
 = 
•ec_CT
;

1054 
	`Áèl
("bad speculative update stage specifier, use {ID|WB}");

1057 i‡(
ruu_decode_width
 < 1)

1058 
	`Áèl
("issue width must beÖositiveÇon-zero");

1061 i‡(
ruu_issue_width
 < 1)

1062 
	`Áèl
("issue width must beÖositiveÇon-zero");

1064 i‡(
ruu_commô_width
 < 1)

1065 
	`Áèl
("commit width must beÖositiveÇon-zero");

1068 i‡(
RUU_size
 < 2)

1069 
	`Áèl
("RUU size must beáÖositiveÇumber > 1");

1072 i‡(
LSQ_size
 < 2)

1073 
	`Áèl
("LSQ size must beáÖositiveÇumber > 1");

1076 i‡(!
	`my°ricmp
(
ˇche_dl1_›t
, "none"))

1078 
ˇche_dl1
 = 
NULL
;

1081 i‡(
	`°rcmp
(
ˇche_dl2_›t
, "none"))

1082 
	`Áèl
("theÜ1 data cache must defined ifÅheÜ2 cache is defined");

1083 
ˇche_dl2
 = 
NULL
;

1087 i‡(
	`ssˇnf
(
ˇche_dl1_›t
, "%[^:]:%d:%d:%d:%c",

1088 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

1089 
	`Áèl
("badÜ1 D-cacheÖarms: <name>:<nsets>:<bsize>:<assoc>:<repl>");

1090 
ˇche_dl1
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

1091  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

1092 
dl1_ac˚ss_‚
, 
ˇche_dl1_œt
);

1095 i‡(!
	`my°ricmp
(
ˇche_dl2_›t
, "none"))

1096 
ˇche_dl2
 = 
NULL
;

1099 i‡(
	`ssˇnf
(
ˇche_dl2_›t
, "%[^:]:%d:%d:%d:%c",

1100 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

1101 
	`Áèl
("badÜ2 D-cacheÖarms: "

1103 
ˇche_dl2
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

1104  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

1105 
dl2_ac˚ss_‚
, 
ˇche_dl2_œt
);

1110 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "none"))

1112 
ˇche_û1
 = 
NULL
;

1115 i‡(
	`°rcmp
(
ˇche_û2_›t
, "none"))

1116 
	`Áèl
("theÜ1 inst cache must defined ifÅheÜ2 cache is defined");

1117 
ˇche_û2
 = 
NULL
;

1119 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "dl1"))

1121 i‡(!
ˇche_dl1
)

1122 
	`Áèl
("I-cacheÜ1 cannotáccess D-cacheÜ1ás it's undefined");

1123 
ˇche_û1
 = 
ˇche_dl1
;

1126 i‡(
	`°rcmp
(
ˇche_û2_›t
, "none"))

1127 
	`Áèl
("theÜ1 inst cache must defined ifÅheÜ2 cache is defined");

1128 
ˇche_û2
 = 
NULL
;

1130 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "dl2"))

1132 i‡(!
ˇche_dl2
)

1133 
	`Áèl
("I-cacheÜ1 cannotáccess D-cacheÜ2ás it's undefined");

1134 
ˇche_û1
 = 
ˇche_dl2
;

1137 i‡(
	`°rcmp
(
ˇche_û2_›t
, "none"))

1138 
	`Áèl
("theÜ1 inst cache must defined ifÅheÜ2 cache is defined");

1139 
ˇche_û2
 = 
NULL
;

1143 i‡(
	`ssˇnf
(
ˇche_û1_›t
, "%[^:]:%d:%d:%d:%c",

1144 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

1145 
	`Áèl
("badÜ1 I-cacheÖarms: <name>:<nsets>:<bsize>:<assoc>:<repl>");

1146 
ˇche_û1
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

1147  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

1148 
û1_ac˚ss_‚
, 
ˇche_û1_œt
);

1151 i‡(!
	`my°ricmp
(
ˇche_û2_›t
, "none"))

1152 
ˇche_û2
 = 
NULL
;

1153 i‡(!
	`my°ricmp
(
ˇche_û2_›t
, "dl2"))

1155 i‡(!
ˇche_dl2
)

1156 
	`Áèl
("I-cacheÜ2 cannotáccess D-cacheÜ2ás it's undefined");

1157 
ˇche_û2
 = 
ˇche_dl2
;

1161 i‡(
	`ssˇnf
(
ˇche_û2_›t
, "%[^:]:%d:%d:%d:%c",

1162 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

1163 
	`Áèl
("badÜ2 I-cacheÖarms: "

1165 
ˇche_û2
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

1166  0, 
assoc
, 
	`ˇche_ch¨2pﬁicy
(
c
),

1167 
û2_ac˚ss_‚
, 
ˇche_û2_œt
);

1172 i‡(!
	`my°ricmp
(
ôlb_›t
, "none"))

1173 
ôlb
 = 
NULL
;

1176 i‡(
	`ssˇnf
(
ôlb_›t
, "%[^:]:%d:%d:%d:%c",

1177 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

1178 
	`Áèl
("bad TLBÖarms: <name>:<nsets>:<page_size>:<assoc>:<repl>");

1179 
ôlb
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

1180  (
md_addr_t
), 
assoc
,

1181 
	`ˇche_ch¨2pﬁicy
(
c
), 
ôlb_ac˚ss_‚
,

1186 i‡(!
	`my°ricmp
(
déb_›t
, "none"))

1187 
déb
 = 
NULL
;

1190 i‡(
	`ssˇnf
(
déb_›t
, "%[^:]:%d:%d:%d:%c",

1191 
«me
, &
n£ts
, &
bsize
, &
assoc
, &
c
) != 5)

1192 
	`Áèl
("bad TLBÖarms: <name>:<nsets>:<page_size>:<assoc>:<repl>");

1193 
déb
 = 
	`ˇche_¸óã
(
«me
, 
n£ts
, 
bsize
, 
FALSE
,

1194  (
md_addr_t
), 
assoc
,

1195 
	`ˇche_ch¨2pﬁicy
(
c
), 
déb_ac˚ss_‚
,

1199 i‡(
ˇche_dl1_œt
 < 1)

1200 
	`Áèl
("l1 data cacheÜatency must be greaterÅhan zero");

1202 i‡(
ˇche_dl2_œt
 < 1)

1203 
	`Áèl
("l2 data cacheÜatency must be greaterÅhan zero");

1205 i‡(
ˇche_û1_œt
 < 1)

1206 
	`Áèl
("l1 instruction cacheÜatency must be greaterÅhan zero");

1208 i‡(
ˇche_û2_œt
 < 1)

1209 
	`Áèl
("l2 instruction cacheÜatency must be greaterÅhan zero");

1211 i‡(
mem_√…
 != 2)

1212 
	`Áèl
("bad memoryáccessÜatency (<first_chunk> <inter_chunk>)");

1214 i‡(
mem_œt
[0] < 1 || mem_lat[1] < 1)

1215 
	`Áèl
("all memoryáccessÜatencies must be greaterÅhan zero");

1217 i‡(
mem_bus_width
 < 1 || (mem_bus_width & (mem_bus_width-1)) != 0)

1218 
	`Áèl
("memory bus width must beÖositiveÇon-zeroándáÖower ofÅwo");

1220 i‡(
éb_miss_œt
 < 1)

1221 
	`Áèl
("TLB missÜatency must be greaterÅhan zero");

1223 i‡(
ªs_ülu
 < 1)

1224 
	`Áèl
("number of integer ALU's must be greaterÅhan zero");

1225 i‡(
ªs_ülu
 > 
MAX_INSTS_PER_CLASS
)

1226 
	`Áèl
("number of integer ALU's must be <= MAX_INSTS_PER_CLASS");

1227 
fu_c⁄fig
[
FU_IALU_INDEX
].
qu™tôy
 = 
ªs_ülu
;

1229 i‡(
ªs_imu…
 < 1)

1230 
	`Áèl
("number of integer multiplier/dividers must be greaterÅhan zero");

1231 i‡(
ªs_imu…
 > 
MAX_INSTS_PER_CLASS
)

1232 
	`Áèl
("number of integer mult/div's must be <= MAX_INSTS_PER_CLASS");

1233 
fu_c⁄fig
[
FU_IMULT_INDEX
].
qu™tôy
 = 
ªs_imu…
;

1235 i‡(
ªs_memp‹t
 < 1)

1236 
	`Áèl
("number of memory systemÖorts must be greaterÅhan zero");

1237 i‡(
ªs_memp‹t
 > 
MAX_INSTS_PER_CLASS
)

1238 
	`Áèl
("number of memory systemÖorts must be <= MAX_INSTS_PER_CLASS");

1239 
fu_c⁄fig
[
FU_MEMPORT_INDEX
].
qu™tôy
 = 
ªs_memp‹t
;

1241 i‡(
ªs_ÂÆu
 < 1)

1242 
	`Áèl
("number of floatingÖoint ALU's must be greaterÅhan zero");

1243 i‡(
ªs_ÂÆu
 > 
MAX_INSTS_PER_CLASS
)

1244 
	`Áèl
("number of floatingÖoint ALU's must be <= MAX_INSTS_PER_CLASS");

1245 
fu_c⁄fig
[
FU_FPALU_INDEX
].
qu™tôy
 = 
ªs_ÂÆu
;

1247 i‡(
ªs_Âmu…
 < 1)

1248 
	`Áèl
("number of floatingÖoint multiplier/dividers must be > zero");

1249 i‡(
ªs_Âmu…
 > 
MAX_INSTS_PER_CLASS
)

1250 
	`Áèl
("number of FP mult/div's must be <= MAX_INSTS_PER_CLASS");

1251 
fu_c⁄fig
[
FU_FPMULT_INDEX
].
qu™tôy
 = 
ªs_Âmu…
;

1252 
	}
}

1256 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

1259 
	}
}

1263 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

1265 
i
;

1266 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

1268 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

1269 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

1271 &
sim_num_ªfs
, 0, 
NULL
);

1272 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_loads",

1274 &
sim_num_lﬂds
, 0, 
NULL
);

1275 
	`°©_ªg_f‹muœ
(
sdb
, "sim_num_stores",

1277 "sim_num_ªf†- sim_num_lﬂds", 
NULL
);

1278 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_branches",

1280 &
sim_num_bønches
, 0, 
NULL
);

1281 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

1283 &
sim_ñ≠£d_time
, 0, 
NULL
);

1284 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

1286 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

1288 
	`°©_ªg_cou¡î
(
sdb
, "sim_total_insn",

1290 &
sim_tŸÆ_ö¢
, 0, 
NULL
);

1291 
	`°©_ªg_cou¡î
(
sdb
, "sim_total_refs",

1293 &
sim_tŸÆ_ªfs
, 0, 
NULL
);

1294 
	`°©_ªg_cou¡î
(
sdb
, "sim_total_loads",

1296 &
sim_tŸÆ_lﬂds
, 0, 
NULL
);

1297 
	`°©_ªg_f‹muœ
(
sdb
, "sim_total_stores",

1299 "sim_tŸÆ_ªf†- sim_tŸÆ_lﬂds", 
NULL
);

1300 
	`°©_ªg_cou¡î
(
sdb
, "sim_total_branches",

1302 &
sim_tŸÆ_bønches
, 0, 
NULL
);

1305 
	`°©_ªg_cou¡î
(
sdb
, "sim_cycle",

1307 &
sim_cy˛e
, 0, 
NULL
);

1308 
	`°©_ªg_f‹muœ
(
sdb
, "sim_IPC",

1310 "sim_num_ö¢ / sim_cy˛e", 
NULL
);

1311 
	`°©_ªg_f‹muœ
(
sdb
, "sim_CPI",

1313 "sim_cy˛ê/ sim_num_ö¢", 
NULL
);

1314 
	`°©_ªg_f‹muœ
(
sdb
, "sim_exec_BW",

1316 "sim_tŸÆ_ö¢ / sim_cy˛e", 
NULL
);

1317 
	`°©_ªg_f‹muœ
(
sdb
, "sim_IPB",

1319 "sim_num_ö¢ / sim_num_bønches", 
NULL
);

1322 
	`°©_ªg_cou¡î
(
sdb
, "IFQ_count", "cumulative IFQ occupancy",

1323 &
IFQ_cou¡
, 0, 
NULL
);

1324 
	`°©_ªg_cou¡î
(
sdb
, "IFQ_fcount", "cumulative IFQ full count",

1325 &
IFQ_fcou¡
, 0, 
NULL
);

1326 
	`°©_ªg_f‹muœ
(
sdb
, "ifq_occupancy", "avg IFQ occupancy (insn's)",

1327 "IFQ_cou¡ / sim_cy˛e", 
NULL
);

1328 
	`°©_ªg_f‹muœ
(
sdb
, "ifq_rate", "avg IFQ dispatchÑate (insn/cycle)",

1329 "sim_tŸÆ_ö¢ / sim_cy˛e", 
NULL
);

1330 
	`°©_ªg_f‹muœ
(
sdb
, "ifq_latency", "avg IFQ occupantÜatency (cycle's)",

1331 "ifq_occu∑ncy / ifq_øã", 
NULL
);

1332 
	`°©_ªg_f‹muœ
(
sdb
, "ifq_full", "fraction ofÅime (cycle's) IFQ was full",

1333 "IFQ_fcou¡ / sim_cy˛e", 
NULL
);

1335 
	`°©_ªg_cou¡î
(
sdb
, "RUU_count", "cumulative RUU occupancy",

1336 &
RUU_cou¡
, 0, 
NULL
);

1337 
	`°©_ªg_cou¡î
(
sdb
, "RUU_fcount", "cumulative RUU full count",

1338 &
RUU_fcou¡
, 0, 
NULL
);

1339 
	`°©_ªg_f‹muœ
(
sdb
, "ruu_occupancy", "avg RUU occupancy (insn's)",

1340 "RUU_cou¡ / sim_cy˛e", 
NULL
);

1341 
	`°©_ªg_f‹muœ
(
sdb
, "ruu_rate", "avg RUU dispatchÑate (insn/cycle)",

1342 "sim_tŸÆ_ö¢ / sim_cy˛e", 
NULL
);

1343 
	`°©_ªg_f‹muœ
(
sdb
, "ruu_latency", "avg RUU occupantÜatency (cycle's)",

1344 "ruu_occu∑ncy /Ñuu_øã", 
NULL
);

1345 
	`°©_ªg_f‹muœ
(
sdb
, "ruu_full", "fraction ofÅime (cycle's) RUU was full",

1346 "RUU_fcou¡ / sim_cy˛e", 
NULL
);

1348 
	`°©_ªg_cou¡î
(
sdb
, "LSQ_count", "cumulative LSQ occupancy",

1349 &
LSQ_cou¡
, 0, 
NULL
);

1350 
	`°©_ªg_cou¡î
(
sdb
, "LSQ_fcount", "cumulative LSQ full count",

1351 &
LSQ_fcou¡
, 0, 
NULL
);

1352 
	`°©_ªg_f‹muœ
(
sdb
, "lsq_occupancy", "avg LSQ occupancy (insn's)",

1353 "LSQ_cou¡ / sim_cy˛e", 
NULL
);

1354 
	`°©_ªg_f‹muœ
(
sdb
, "lsq_rate", "avg LSQ dispatchÑate (insn/cycle)",

1355 "sim_tŸÆ_ö¢ / sim_cy˛e", 
NULL
);

1356 
	`°©_ªg_f‹muœ
(
sdb
, "lsq_latency", "avg LSQ occupantÜatency (cycle's)",

1357 "lsq_occu∑ncy /Üsq_øã", 
NULL
);

1358 
	`°©_ªg_f‹muœ
(
sdb
, "lsq_full", "fraction ofÅime (cycle's) LSQ was full",

1359 "LSQ_fcou¡ / sim_cy˛e", 
NULL
);

1361 
	`°©_ªg_cou¡î
(
sdb
, "sim_slip",

1363 &
sim_¶ù
, 0, 
NULL
);

1365 
	`°©_ªg_f‹muœ
(
sdb
, "avg_sim_slip",

1367 "sim_¶ù / sim_num_ö¢", 
NULL
);

1370 i‡(
¥ed
)

1371 
	`b¥ed_ªg_°©s
(
¥ed
, 
sdb
);

1374 i‡(
ˇche_û1


1375 && (
ˇche_û1
 !
ˇche_dl1
 && cache_û1 !
ˇche_dl2
))

1376 
	`ˇche_ªg_°©s
(
ˇche_û1
, 
sdb
);

1377 i‡(
ˇche_û2


1378 && (
ˇche_û2
 !
ˇche_dl1
 && cache_û2 !
ˇche_dl2
))

1379 
	`ˇche_ªg_°©s
(
ˇche_û2
, 
sdb
);

1380 i‡(
ˇche_dl1
)

1381 
	`ˇche_ªg_°©s
(
ˇche_dl1
, 
sdb
);

1382 i‡(
ˇche_dl2
)

1383 
	`ˇche_ªg_°©s
(
ˇche_dl2
, 
sdb
);

1384 i‡(
ôlb
)

1385 
	`ˇche_ªg_°©s
(
ôlb
, 
sdb
);

1386 i‡(
déb
)

1387 
	`ˇche_ªg_°©s
(
déb
, 
sdb
);

1390 
	`°©_ªg_cou¡î
(
sdb
, "sim_invalid_addrs",

1392 &
sim_övÆid_addrs
, 0, 
NULL
);

1394 
i
=0; i<
pc°©_√…
; i++)

1396 
buf
[512], 
buf1
[512];

1397 
°©_°©_t
 *
°©
;

1402 
°©
 = 
	`°©_föd_°©
(
sdb
, 
pc°©_v¨s
[
i
]);

1403 i‡(!
°©
)

1404 
	`Áèl
("ˇ¬ŸÜoˇãány sèti°i¯«med `%s'", 
pc°©_v¨s
[
i
]);

1407 i‡(
°©
->
sc
 !
sc_öt
 && sèt->s¯!
sc_uöt
 && sèt->s¯!
sc_cou¡î
)

1408 
	`Áèl
("`-pcstat' statistical variable `%s' isÇotán integralÅype",

1409 
°©
->
«me
);

1412 
pc°©_°©s
[
i
] = 
°©
;

1413 
pc°©_œ°vÆs
[
i
] = 
	`STATVAL
(
°©
);

1416 
	`•rötf
(
buf
, "%s_by_pc", 
°©
->
«me
);

1417 
	`•rötf
(
buf1
, "%†(byÅexàaddªss)", 
°©
->
desc
);

1418 
pc°©_sdi°s
[
i
] = 
	`°©_ªg_sdi°
(
sdb
, 
buf
, 
buf1
,

1420  (
PF_COUNT
|
PF_PDF
),

1422  
NULL
);

1424 
	`ld_ªg_°©s
(
sdb
);

1425 
	`mem_ªg_°©s
(
mem
, 
sdb
);

1426 
	}
}

1429 
ruu_öô
();

1430 
lsq_öô
();

1431 
r¶ök_öô
(
∆öks
);

1432 
evítq_öô
();

1433 
ªadyq_öô
();

1434 
cv_öô
();

1435 
åa˚r_öô
();

1436 
„tch_öô
();

1440 
	$sim_öô
()

1442 
sim_num_ªfs
 = 0;

1445 
	`ªgs_öô
(&
ªgs
);

1448 
mem
 = 
	`mem_¸óã
("mem");

1449 
	`mem_öô
(
mem
);

1450 
	}
}

1454 
simoo_ªg_obj
(
ªgs_t
 *
ªgs
,

1455 
is_wrôe
,

1456 
md_ªg_ty≥
 
π
,

1457 
ªg
,

1458 
evÆ_vÆue_t
 *
vÆ
);

1462 
simoo_mem_obj
(
mem_t
 *
mem
,

1463 
is_wrôe
,

1464 
md_addr_t
 
addr
,

1465 *
p
,

1466 
nbyãs
);

1470 
simoo_m°©e_obj
(
FILE
 *
°ªam
,

1471 *
cmd
,

1472 
ªgs_t
 *
ªgs
,

1473 
mem_t
 *
mem
);

1476 
	#MAX_RS_LINKS
 4096

	)

1480 
	$sim_lﬂd_¥og
(*
‚ame
,

1481 
¨gc
, **
¨gv
,

1482 **
ívp
)

1485 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

1488 i‡(
±ø˚_√…
 == 2)

1491 
	`±ø˚_›í
–
±ø˚_›ts
[0],Ötrace_opts[1]);

1493 i‡(
±ø˚_√…
 == 0)

1498 
	`Áèl
("badÖipetraceárgs, use: <fname|stdout|stderr> <range>");

1501 
fu_poﬁ
 = 
	`ªs_¸óã_poﬁ
("fu-poﬁ", 
fu_c⁄fig
, 
	`N_ELT
(fu_config));

1502 
	`r¶ök_öô
(
MAX_RS_LINKS
);

1503 
	`åa˚r_öô
();

1504 
	`„tch_öô
();

1505 
	`cv_öô
();

1506 
	`evítq_öô
();

1507 
	`ªadyq_öô
();

1508 
	`ruu_öô
();

1509 
	`lsq_öô
();

1512 
	`dlôe_öô
(
simoo_ªg_obj
, 
simoo_mem_obj
, 
simoo_m°©e_obj
);

1513 
	}
}

1517 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

1520 
	}
}

1524 
	$sim_unöô
()

1526 i‡(
±ø˚_√…
 > 0)

1527 
	`±ø˚_˛o£
();

1528 
	}
}

1536 
	tINST_TAG_TYPE
;

1541 
	tINST_SEQ_TYPE
;

1545 
	#MAX_IDEPS
 3

	)

1548 
	#MAX_ODEPS
 2

	)

1563 
	sRUU_°©i⁄
 {

1565 
md_ö°_t
 
	mIR
;

1566 
md_›code
 
	m›
;

1567 
md_addr_t
 
	mPC
, 
	m√xt_PC
, 
	m¥ed_PC
;

1568 
	mö_LSQ
;

1569 
	mó_comp
;

1570 
	mªcovî_ö°
;

1571 
	m°ack_ªcovî_idx
;

1572 
b¥ed_upd©e_t
 
	mdú_upd©e
;

1573 
	m•ec_mode
;

1574 
md_addr_t
 
	maddr
;

1575 
INST_TAG_TYPE
 
	mèg
;

1577 
INST_SEQ_TYPE
 
	m£q
;

1579 
	m±ø˚_£q
;

1580 
	m¶ù
;

1582 
	miˇche_miss
;

1583 
	mqueued
;

1584 
	missued
;

1585 
	mcom∂ëed
;

1589 
	m⁄ames
[
MAX_ODEPS
];

1590 
RS_lök
 *
	modï_li°
[
MAX_ODEPS
];

1598 
	midï_ªady
[
MAX_IDEPS
];

1602 
	#OPERANDS_READY
(
RS
) \

1603 ((
RS
)->
idï_ªady
[0] && (RS)->idï_ªady[1] && (RS)->idï_ªady[2])

	)

1607 
RUU_°©i⁄
 *
	gRUU
;

1608 
	gRUU_hód
, 
	gRUU_èû
;

1609 
	gRUU_num
;

1613 
	$ruu_öô
()

1615 
RUU
 = 
	`ˇŒoc
(
RUU_size
, (
RUU_°©i⁄
));

1616 i‡(!
RUU
)

1617 
	`Áèl
("out of virtual memory");

1619 
RUU_num
 = 0;

1620 
RUU_hód
 = 
RUU_èû
 = 0;

1621 
RUU_cou¡
 = 0;

1622 
RUU_fcou¡
 = 0;

1623 
	}
}

1628 
	$my_ruu_dum≥¡
(
RUU_°©i⁄
 *
rs
,

1629 
ödex
,

1630 
FILE
 *
°ªam
,

1631 
hódî
)

1633 i‡(!
°ªam
)

1634 
°ªam
 = 
°dîr
;

1636 
	`Ârötf
(
°ªam
, "%2d: %x: ", 
ödex
, 
rs
->
PC
);

1637 
	`md_¥öt_ö¢
(
rs
->
IR
,Ñs->
PC
, 
°ªam
);

1638 
	`Ârötf
(
°ªam
, "'\n");

1639 
	`Ârötf
(
°ªam
, "Ñeady: %s, queued: %s, issued: %s, completed: %s, ic_miss: %s\n",

1640 
	`OPERANDS_READY
(
rs
) ? "t" : "f",

1641 
rs
->
queued
 ? "t" : "f",

1642 
rs
->
issued
 ? "t" : "f",

1643 
rs
->
com∂ëed
 ? "t" : "f",

1644 
rs
->
iˇche_miss
 ? "t" : "f");

1645 
	}
}

1651 
	$ruu_dum≥¡
(
RUU_°©i⁄
 *
rs
,

1652 
ödex
,

1653 
FILE
 *
°ªam
,

1654 
hódî
)

1656 i‡(!
°ªam
)

1657 
°ªam
 = 
°dîr
;

1659 i‡(
hódî
)

1660 
	`Ârötf
(
°ªam
, "idx: %2d: opcode: %s, inst: `",

1661 
ödex
, 
	`MD_OP_NAME
(
rs
->
›
));

1663 
	`Ârötf
(
°ªam
, " opcode: %s, inst: `",

1664 
	`MD_OP_NAME
(
rs
->
›
));

1665 
	`md_¥öt_ö¢
(
rs
->
IR
,Ñs->
PC
, 
°ªam
);

1666 
	`Ârötf
(
°ªam
, "'\n");

1667 
	`myÂrötf
(
°ªam
, " PC: 0x%08p, NPC: 0x%08p (pred_PC: 0x%08p)\n",

1668 
rs
->
PC
,Ñs->
√xt_PC
,Ñs->
¥ed_PC
);

1669 
	`Ârötf
(
°ªam
, " in_LSQ: %s,Éa_comp: %s,Ñecover_inst: %s\n",

1670 
rs
->
ö_LSQ
 ? "t" : "f",

1671 
rs
->
ó_comp
 ? "t" : "f",

1672 
rs
->
ªcovî_ö°
 ? "t" : "f");

1673 
	`myÂrötf
(
°ªam
, " spec_mode: %s,áddr: 0x%08p,Åag: 0x%08x\n",

1674 
rs
->
•ec_mode
 ? "t" : "f",Ñs->
addr
,Ñs->
èg
);

1675 
	`Ârötf
(
°ªam
, " seq: 0x%08x,Ötrace_seq: 0x%08x\n",

1676 
rs
->
£q
,Ñs->
±ø˚_£q
);

1677 
	`Ârötf
(
°ªam
, " queued: %s, issued: %s, completed: %s\n",

1678 
rs
->
queued
 ? "t" : "f",

1679 
rs
->
issued
 ? "t" : "f",

1680 
rs
->
com∂ëed
 ? "t" : "f");

1681 
	`Ârötf
(
°ªam
, " operandsÑeady: %s\n",

1682 
	`OPERANDS_READY
(
rs
) ? "t" : "f");

1683 
	}
}

1687 
	$my_ruu_dump
(
FILE
 *
°ªam
)

1689 
num
, 
hód
;

1690 
RUU_°©i⁄
 *
rs
;

1692 i‡(!
°ªam
)

1693 
°ªam
 = 
°dîr
;

1695 
	`Ârötf
(
°ªam
, "RUU_hód: %d, RUU_èû: %d, ", 
RUU_hód
, 
RUU_èû
);

1696 
	`Ârötf
(
°ªam
, "RUU_num: %d\n", 
RUU_num
);

1698 
num
 = 
RUU_num
;

1699 
hód
 = 
RUU_hód
;

1700 
num
)

1702 
rs
 = &
RUU
[
hód
];

1703 
	`my_ruu_dum≥¡
(
rs
,Ñ†- 
RUU
, 
°ªam
, 
TRUE
);

1704 
hód
 = (hód + 1Ë% 
RUU_size
;

1705 
num
--;

1707 
	}
}

1711 
	$ruu_dump
(
FILE
 *
°ªam
)

1713 
num
, 
hód
;

1714 
RUU_°©i⁄
 *
rs
;

1716 i‡(!
°ªam
)

1717 
°ªam
 = 
°dîr
;

1719 
	`Ârötf
(
°ªam
, "** RUU state **\n");

1720 
	`Ârötf
(
°ªam
, "RUU_hód: %d, RUU_èû: %d\n", 
RUU_hód
, 
RUU_èû
);

1721 
	`Ârötf
(
°ªam
, "RUU_num: %d\n", 
RUU_num
);

1723 
num
 = 
RUU_num
;

1724 
hód
 = 
RUU_hód
;

1725 
num
)

1727 
rs
 = &
RUU
[
hód
];

1728 
	`ruu_dum≥¡
(
rs
,Ñ†- 
RUU
, 
°ªam
, 
TRUE
);

1729 
hód
 = (hód + 1Ë% 
RUU_size
;

1730 
num
--;

1732 
	}
}

1762 
RUU_°©i⁄
 *
	gLSQ
;

1763 
	gLSQ_hód
, 
	gLSQ_èû
;

1764 
	gLSQ_num
;

1771 
	#STORE_OP_INDEX
 0

	)

1772 
	#STORE_ADDR_INDEX
 1

	)

1774 
	#STORE_OP_READY
(
RS
Ë((RS)->
idï_ªady
[
STORE_OP_INDEX
])

	)

1775 
	#STORE_ADDR_READY
(
RS
Ë((RS)->
idï_ªady
[
STORE_ADDR_INDEX
])

	)

1779 
	$lsq_öô
()

1781 
LSQ
 = 
	`ˇŒoc
(
LSQ_size
, (
RUU_°©i⁄
));

1782 i‡(!
LSQ
)

1783 
	`Áèl
("out of virtual memory");

1785 
LSQ_num
 = 0;

1786 
LSQ_hód
 = 
LSQ_èû
 = 0;

1787 
LSQ_cou¡
 = 0;

1788 
LSQ_fcou¡
 = 0;

1789 
	}
}

1793 
	$lsq_dump
(
FILE
 *
°ªam
)

1795 
num
, 
hód
;

1796 
RUU_°©i⁄
 *
rs
;

1798 i‡(!
°ªam
)

1799 
°ªam
 = 
°dîr
;

1801 
	`Ârötf
(
°ªam
, "** LSQ state **\n");

1802 
	`Ârötf
(
°ªam
, "LSQ_hód: %d, LSQ_èû: %d\n", 
LSQ_hód
, 
LSQ_èû
);

1803 
	`Ârötf
(
°ªam
, "LSQ_num: %d\n", 
LSQ_num
);

1805 
num
 = 
LSQ_num
;

1806 
hód
 = 
LSQ_hód
;

1807 
num
)

1809 
rs
 = &
LSQ
[
hód
];

1810 
	`ruu_dum≥¡
(
rs
,Ñ†- 
LSQ
, 
°ªam
, 
TRUE
);

1811 
hód
 = (hód + 1Ë% 
LSQ_size
;

1812 
num
--;

1814 
	}
}

1829 
	sRS_lök
 {

1830 
RS_lök
 *
	m√xt
;

1831 
RUU_°©i⁄
 *
	mrs
;

1832 
INST_TAG_TYPE
 
	mèg
;

1834 
tick_t
 
	mwhí
;

1835 
INST_SEQ_TYPE
 
	m£q
;

1836 
	m›num
;

1837 } 
	mx
;

1841 
RS_lök
 *
	gr¶ök_‰ì_li°
;

1844 
	#RSLINK_NULL_DATA
 { 
NULL
, NULL, 0 }

	)

1845 
RS_lök
 
	gRSLINK_NULL
 = 
RSLINK_NULL_DATA
;

1848 
	#RSLINK_INIT
(
RSL
, 
RS
) \

1849 ((
RSL
).
√xt
 = 
NULL
, (RSL).
rs
 = (
RS
), (RSL).
èg
 = (RS)->èg)

	)

1852 
	#RSLINK_IS_NULL
(
LINK
Ë((LINK)->
rs
 =
NULL
)

	)

1855 
	#RSLINK_VALID
(
LINK
Ë((LINK)->
èg
 =(LINK)->
rs
->èg)

	)

1858 
	#RSLINK_RS
(
LINK
Ë((LINK)->
rs
)

	)

1861 
	#RSLINK_NEW
(
DST
, 
RS
) \

1862 { 
RS_lök
 *
n_lök
; \

1863 i‡(!
r¶ök_‰ì_li°
) \

1864 
	`∑nic
("out ofÑsÜinks"); \

1865 
n_lök
 = 
r¶ök_‰ì_li°
; \

1866 
r¶ök_‰ì_li°
 =Ñ¶ök_‰ì_li°->
√xt
; \

1867 
n_lök
->
√xt
 = 
NULL
; \

1868 
n_lök
->
rs
 = (
RS
);Ç_lök->
èg
 =Ç_link->rs->tag; \

1869 (
DST
Ë
n_lök
; \

1870 }

	)

1873 
	#RSLINK_FREE
(
LINK
) \

1874 { 
RS_lök
 *
f_lök
 = (
LINK
); \

1875 
f_lök
->
rs
 = 
NULL
; f_lök->
èg
 = 0; \

1876 
f_lök
->
√xt
 = 
r¶ök_‰ì_li°
; \

1877 
r¶ök_‰ì_li°
 = 
f_lök
; \

1878 }

	)

1882 
	#RSLINK_FREE_LIST
(
LINK
) \

1883 { 
RS_lök
 *
Ê_lök
, *
Ê_lök_√xt
; \

1884 
Ê_lök
=(
LINK
); fl_lök; fl_lök=
Ê_lök_√xt
) \

1886 
Ê_lök_√xt
 = 
Ê_lök
->
√xt
; \

1887 
	`RSLINK_FREE
(
Ê_lök
); \

1889 }

	)

1893 
	$r¶ök_öô
(
∆öks
)

1895 
i
;

1896 
RS_lök
 *
lök
;

1898 
r¶ök_‰ì_li°
 = 
NULL
;

1899 
i
=0; i<
∆öks
; i++)

1901 
lök
 = 
	`ˇŒoc
(1, (
RS_lök
));

1902 i‡(!
lök
)

1903 
	`Áèl
("out of virtual memory");

1904 
lök
->
√xt
 = 
r¶ök_‰ì_li°
;

1905 
r¶ök_‰ì_li°
 = 
lök
;

1907 
	}
}

1914 
	$ruu_ªÀa£_fu
()

1916 
i
;

1919 
i
=0; i<
fu_poﬁ
->
num_ªsour˚s
; i++)

1922 i‡(
fu_poﬁ
->
ªsour˚s
[
i
].
busy
 > 0)

1923 
fu_poﬁ
->
ªsour˚s
[
i
].
busy
--;

1925 
	}
}

1937 
RS_lök
 *
	gevít_queue
;

1941 
	$evítq_öô
()

1943 
evít_queue
 = 
NULL
;

1944 
	}
}

1948 
	$evítq_dump
(
FILE
 *
°ªam
)

1950 
RS_lök
 *
ev
;

1952 i‡(!
°ªam
)

1953 
°ªam
 = 
°dîr
;

1955 
	`Ârötf
(
°ªam
, "**Évent queue state **\n");

1957 
ev
 = 
evít_queue
;Év !
NULL
;Év =Év->
√xt
)

1960 i‡(
	`RSLINK_VALID
(
ev
))

1962 
RUU_°©i⁄
 *
rs
 = 
	`RSLINK_RS
(
ev
);

1964 
	`Ârötf
(
°ªam
, "idx: %2d: @ %.0f\n",

1965 ()(
rs
 - (rs->
ö_LSQ
 ? 
LSQ
 : 
RUU
)), ()
ev
->
x
.
whí
);

1966 
	`ruu_dum≥¡
(
rs
,Ñ†- (rs->
ö_LSQ
 ? 
LSQ
 : 
RUU
),

1967 
°ªam
, 
FALSE
);

1970 
	}
}

1976 
	$evítq_queue_evít
(
RUU_°©i⁄
 *
rs
, 
tick_t
 
whí
)

1978 
RS_lök
 *
¥ev
, *
ev
, *
√w_ev
;

1980 i‡(
rs
->
com∂ëed
)

1981 
	`∑nic
("event completed");

1983 i‡(
whí
 <
sim_cy˛e
)

1984 
	`∑nic
("event occurred inÅheÖast");

1987 
	`RSLINK_NEW
(
√w_ev
, 
rs
);

1988 
√w_ev
->
x
.
whí
 = when;

1991 
¥ev
=
NULL
, 
ev
=
evít_queue
;

1992 
ev
 &&Év->
x
.
whí
 < when;

1993 
¥ev
=
ev
,ÉvÛv->
√xt
);

1995 i‡(
¥ev
)

1998 
√w_ev
->
√xt
 = 
¥ev
->next;

1999 
¥ev
->
√xt
 = 
√w_ev
;

2004 
√w_ev
->
√xt
 = 
evít_queue
;

2005 
evít_queue
 = 
√w_ev
;

2007 
	}
}

2011 
RUU_°©i⁄
 *

2012 
	$evítq_√xt_evít
()

2014 
RS_lök
 *
ev
;

2016 i‡(
evít_queue
 &&Évít_queue->
x
.
whí
 <
sim_cy˛e
)

2019 
ev
 = 
evít_queue
;

2020 
evít_queue
 =Évít_queue->
√xt
;

2023 i‡(
	`RSLINK_VALID
(
ev
))

2025 
RUU_°©i⁄
 *
rs
 = 
	`RSLINK_RS
(
ev
);

2028 
	`RSLINK_FREE
(
ev
);

2031  
rs
;

2036 
	`RSLINK_FREE
(
ev
);

2039  
	`evítq_√xt_evít
();

2045  
NULL
;

2047 
	}
}

2063 
RS_lök
 *
	gªady_queue
;

2067 
	$ªadyq_öô
()

2069 
ªady_queue
 = 
NULL
;

2070 
	}
}

2074 
	$ªadyq_dump
(
FILE
 *
°ªam
)

2076 
RS_lök
 *
lök
;

2078 i‡(!
°ªam
)

2079 
°ªam
 = 
°dîr
;

2081 
	`Ârötf
(
°ªam
, "**Ñeady queue state **\n");

2083 
lök
 = 
ªady_queue
;Üök !
NULL
;Üök =Üök->
√xt
)

2086 i‡(
	`RSLINK_VALID
(
lök
))

2088 
RUU_°©i⁄
 *
rs
 = 
	`RSLINK_RS
(
lök
);

2090 
	`ruu_dum≥¡
(
rs
,Ñ†- (rs->
ö_LSQ
 ? 
LSQ
 : 
RUU
),

2091 
°ªam
, 
TRUE
);

2094 
	}
}

2111 
	$ªadyq_íqueue
(
RUU_°©i⁄
 *
rs
)

2113 
RS_lök
 *
¥ev
, *
node
, *
√w_node
;

2116 i‡(
rs
->
queued
)

2117 
	`∑nic
("node isálready queued");

2118 
rs
->
queued
 = 
TRUE
;

2121 
	`RSLINK_NEW
(
√w_node
, 
rs
);

2122 
√w_node
->
x
.
£q
 = 
rs
->seq;

2127 i‡(
rs
->
ö_LSQ
 || 
	`MD_OP_FLAGS
‘s->
›
Ë& (
F_LONGLAT
|
F_CTRL
))

2130 
¥ev
 = 
NULL
;

2131 
node
 = 
ªady_queue
;

2137 
¥ev
=
NULL
, 
node
=
ªady_queue
;

2138 
node
 &&Çode->
x
.
£q
 < 
rs
->seq;

2139 
¥ev
=
node
,ÇodeÚode->
√xt
);

2142 i‡(
¥ev
)

2145 
√w_node
->
√xt
 = 
¥ev
->next;

2146 
¥ev
->
√xt
 = 
√w_node
;

2151 
√w_node
->
√xt
 = 
ªady_queue
;

2152 
ªady_queue
 = 
√w_node
;

2154 
	}
}

2164 
	sCV_lök
 {

2165 
RUU_°©i⁄
 *
	mrs
;

2166 
	modï_num
;

2170 
CV_lök
 
	gCVLINK_NULL
 = { 
NULL
, 0 };

2173 
	#CVLINK_INIT
(
CV
, 
RS
,
ONUM
Ë((CV).
rs
 = (RS), (CV).
odï_num
 = (ONUM))

	)

2176 
	#CV_BMAP_SZ
 (
	`BITMAP_SIZE
(
MD_TOTAL_REGS
))

	)

2181 
BITMAP_TYPE
(
MD_TOTAL_REGS
, 
u£_•ec_cv
);

2182 
CV_lök
 
	g¸óã_ve˘‹
[
MD_TOTAL_REGS
];

2183 
CV_lök
 
	g•ec_¸óã_ve˘‹
[
MD_TOTAL_REGS
];

2187 
tick_t
 
	g¸óã_ve˘‹_π
[
MD_TOTAL_REGS
];

2188 
tick_t
 
	g•ec_¸óã_ve˘‹_π
[
MD_TOTAL_REGS
];

2191 
	#CREATE_VECTOR
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_cv
, 
CV_BMAP_SZ
, (N))\

2192 ? 
•ec_¸óã_ve˘‹
[
N
] \

2193 : 
¸óã_ve˘‹
[
N
])

	)

2196 
	#CREATE_VECTOR_RT
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_cv
, 
CV_BMAP_SZ
, (N))\

2197 ? 
•ec_¸óã_ve˘‹_π
[
N
] \

2198 : 
¸óã_ve˘‹_π
[
N
])

	)

2201 
	#SET_CREATE_VECTOR
(
N
, 
L
Ë(
•ec_mode
 \

2202 ? (
	`BITMAP_SET
(
u£_•ec_cv
, 
CV_BMAP_SZ
, (
N
)),\

2203 
•ec_¸óã_ve˘‹
[
N
] = (
L
)) \

2204 : (
¸óã_ve˘‹
[
N
] = (
L
)))

	)

2208 
	$cv_öô
()

2210 
i
;

2214 
i
=0; i < 
MD_TOTAL_REGS
; i++)

2216 
¸óã_ve˘‹
[
i
] = 
CVLINK_NULL
;

2217 
¸óã_ve˘‹_π
[
i
] = 0;

2218 
•ec_¸óã_ve˘‹
[
i
] = 
CVLINK_NULL
;

2219 
•ec_¸óã_ve˘‹_π
[
i
] = 0;

2223 
	`BITMAP_CLEAR_MAP
(
u£_•ec_cv
, 
CV_BMAP_SZ
);

2224 
	}
}

2228 
	$cv_dump
(
FILE
 *
°ªam
)

2230 
i
;

2231 
CV_lök
 
ít
;

2233 i‡(!
°ªam
)

2234 
°ªam
 = 
°dîr
;

2236 
	`Ârötf
(
°ªam
, "** create vector state **\n");

2238 
i
=0; i < 
MD_TOTAL_REGS
; i++)

2240 
ít
 = 
	`CREATE_VECTOR
(
i
);

2241 i‡(!
ít
.
rs
)

2242 
	`Ârötf
(
°ªam
, "[cv%02d]: fromárchôe˘edÑeg fûe\n", 
i
);

2244 
	`Ârötf
(
°ªam
, "[cv%02d]: from %s, idx: %d\n",

2245 
i
, (
ít
.
rs
->
ö_LSQ
 ? "LSQ" : "RUU"),

2246 ()(
ít
.
rs
 - (ít.rs->
ö_LSQ
 ? 
LSQ
 : 
RUU
)));

2248 
	}
}

2258 
	$ruu_commô
()

2260 
i
, 
œt
, 
evíts
, 
commôãd
 = 0;

2261 
cou¡î_t
 
sim_ªt_ö¢
 = 0;

2264 
RUU_num
 > 0 && 
commôãd
 < 
ruu_commô_width
)

2266 
RUU_°©i⁄
 *
rs
 = &(
RUU
[
RUU_hód
]);

2268 i‡(!
rs
->
com∂ëed
)

2275 
evíts
 = 0;

2278 i‡(
RUU
[
RUU_hód
].
ó_comp
)

2281 i‡(
LSQ_num
 <0 || !
LSQ
[
LSQ_hód
].
ö_LSQ
)

2282 
	`∑nic
("RUU out of sync with LSQ");

2285 i‡(!
LSQ
[
LSQ_hód
].
com∂ëed
)

2291 i‡((
	`MD_OP_FLAGS
(
LSQ
[
LSQ_hód
].
›
Ë& (
F_MEM
|
F_STORE
))

2292 =(
F_MEM
|
F_STORE
))

2294 
ªs_ãm∂©e
 *
fu
;

2299 
fu
 = 
	`ªs_gë
(
fu_poﬁ
, 
	`MD_OP_FUCLASS
(
LSQ
[
LSQ_hód
].
›
));

2300 i‡(
fu
)

2303 i‡(
fu
->
ma°î
->
busy
)

2304 
	`∑nic
("functional unitálready in use");

2307 
fu
->
ma°î
->
busy
 = fu->
issuñ©
;

2310 i‡(
ˇche_dl1
)

2313 
œt
 =

2314 
	`ˇche_ac˚ss
(
ˇche_dl1
, 
Wrôe
, (
LSQ
[
LSQ_hód
].
addr
&~3),

2315 
NULL
, 4, 
sim_cy˛e
, NULL, NULL);

2316 i‡(
œt
 > 
ˇche_dl1_œt
)

2317 
evíts
 |
PEV_CACHEMISS
;

2321 i‡(
déb
)

2324 
œt
 =

2325 
	`ˇche_ac˚ss
(
déb
, 
Ród
, (
LSQ
[
LSQ_hód
].
addr
 & ~3),

2326 
NULL
, 4, 
sim_cy˛e
, NULL, NULL);

2327 i‡(
œt
 > 1)

2328 
evíts
 |
PEV_TLBMISS
;

2340 
LSQ
[
LSQ_hód
].
èg
++;

2341 
sim_¶ù
 +(
sim_cy˛e
 - 
LSQ
[
LSQ_hód
].
¶ù
);

2344 
	`±ø˚_√w°age
(
LSQ
[
LSQ_hód
].
±ø˚_£q
, 
PST_COMMIT
, 
evíts
);

2345 
	`±ø˚_ídö°
(
LSQ
[
LSQ_hód
].
±ø˚_£q
);

2348 
LSQ_hód
 = (LSQ_hód + 1Ë% 
LSQ_size
;

2349 
LSQ_num
--;

2359 i‡(
¥ed


2360 && (
b¥ed_•ec_upd©e
 =
•ec_CT
)

2361 && ((
	`MD_OP_FLAGS
(
rs
->
›
Ë& (
F_CTRL
|
F_COND
)) == (F_CTRL|F_COND)))

2367 i‡(
¥ed
->
˛ass
 =
BPªd2Levñ
) {

2368 
my_shi·ªg
 = *
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
shi·ªgs
;

2369 
rs
->
dú_upd©e
.
pdú1


2370 &
¥ed
->
dú¥ed
.
twﬁev
->
c⁄fig
.
two
.
l2èbÀ
[
my_shi·ªg
];

2372 
	`b¥ed_upd©e
(
¥ed
,

2373  
rs
->
PC
,

2374  
rs
->
√xt_PC
,

2375  
rs
->
√xt_PC
 !‘s->
PC
 +

2376 (
md_ö°_t
)),

2377  
rs
->
¥ed_PC
 !‘s->
PC
 +

2378 (
md_ö°_t
)),

2379  
rs
->
¥ed_PC
 =rs->
√xt_PC
,

2380  
rs
->
›
,

2381  &
rs
->
dú_upd©e
);

2385 
RUU
[
RUU_hód
].
èg
++;

2386 
sim_¶ù
 +(
sim_cy˛e
 - 
RUU
[
RUU_hód
].
¶ù
);

2388 i‡(
vîbo£
)

2390 
sim_ªt_ö¢
++;

2391 
	`myÂrötf
(
°dîr
, "%10¿@ 0x%08p: ", 
sim_ªt_ö¢
, 
RUU
[
RUU_hód
].
PC
);

2392 
	`md_¥öt_ö¢
(
RUU
[
RUU_hód
].
IR
, RUU[RUU_hód].
PC
, 
°dîr
);

2393 i‡(
	`MD_OP_FLAGS
(
RUU
[
RUU_hód
].
›
Ë& 
F_MEM
)

2394 
	`myÂrötf
(
°dîr
, " mem: 0x%08p", 
RUU
[
RUU_hód
].
addr
);

2395 
	`Ârötf
(
°dîr
, "\n");

2400 
	`±ø˚_√w°age
(
RUU
[
RUU_hód
].
±ø˚_£q
, 
PST_COMMIT
, 
evíts
);

2401 
	`±ø˚_ídö°
(
RUU
[
RUU_hód
].
±ø˚_£q
);

2404 i‡((
rs
->
PC
 >
°¨t_addr
Ë&& (rs->PC < 
íd_addr
)) {

2405 
ef„˘_commô
 = 1;

2406 i‡(
rs
->
iˇche_miss
 =
TRUE
)

2407 
ef„˘_iˇche_mis£s
++;

2409 
ef„˘_commô
 = 0;

2412 
RUU_hód
 = (RUU_hód + 1Ë% 
RUU_size
;

2413 
RUU_num
--;

2416 
commôãd
++;

2418 
i
=0; i<
MAX_ODEPS
; i++)

2420 i‡(
rs
->
odï_li°
[
i
])

2421 
	`∑nic
 ("retired instruction has odeps\n");

2424 
	}
}

2434 
	$ruu_ªcovî
(
bønch_ödex
)

2436 
i
, 
RUU_ödex
 = 
RUU_èû
, 
LSQ_ödex
 = 
LSQ_èû
;

2437 
RUU_¥ev_èû
 = 
RUU_èû
, 
LSQ_¥ev_èû
 = 
LSQ_èû
;

2444 
RUU_ödex
 = (RUU_ödex + (
RUU_size
-1)) % RUU_size;

2445 
LSQ_ödex
 = (LSQ_ödex + (
LSQ_size
-1)) % LSQ_size;

2448 
RUU_ödex
 !
bønch_ödex
)

2451 i‡(!
RUU_num
)

2452 
	`∑nic
("empty RUU");

2455 i‡(
RUU_ödex
 =
RUU_hód
)

2456 
	`∑nic
("RUU headándÅail broken");

2459 i‡(
RUU
[
RUU_ödex
].
ó_comp
)

2462 i‡(!
LSQ_num
)

2463 
	`∑nic
("RUUánd LSQ out of sync");

2466 
i
=0; i<
MAX_ODEPS
; i++)

2468 
	`RSLINK_FREE_LIST
(
LSQ
[
LSQ_ödex
].
odï_li°
[
i
]);

2470 
LSQ
[
LSQ_ödex
].
odï_li°
[
i
] = 
NULL
;

2474 
LSQ
[
LSQ_ödex
].
èg
++;

2477 
	`±ø˚_ídö°
(
LSQ
[
LSQ_ödex
].
±ø˚_£q
);

2480 
LSQ_¥ev_èû
 = 
LSQ_ödex
;

2481 
LSQ_ödex
 = (LSQ_ödex + (
LSQ_size
-1)) % LSQ_size;

2482 
LSQ_num
--;

2486 
i
=0; i<
MAX_ODEPS
; i++)

2488 
	`RSLINK_FREE_LIST
(
RUU
[
RUU_ödex
].
odï_li°
[
i
]);

2490 
RUU
[
RUU_ödex
].
odï_li°
[
i
] = 
NULL
;

2494 
RUU
[
RUU_ödex
].
èg
++;

2497 
	`±ø˚_ídö°
(
RUU
[
RUU_ödex
].
±ø˚_£q
);

2500 
RUU_¥ev_èû
 = 
RUU_ödex
;

2501 
RUU_ödex
 = (RUU_ödex + (
RUU_size
-1)) % RUU_size;

2502 
RUU_num
--;

2506 
RUU_èû
 = 
RUU_¥ev_èû
;

2507 
LSQ_èû
 = 
LSQ_¥ev_èû
;

2512 
	`BITMAP_CLEAR_MAP
(
u£_•ec_cv
, 
CV_BMAP_SZ
);

2515 
	}
}

2523 
åa˚r_ªcovî
();

2531 
	$ruu_wrôeback
()

2533 
i
;

2534 
RUU_°©i⁄
 *
rs
;

2537 (
rs
 = 
	`evítq_√xt_evít
()))

2540 i‡(!
	`OPERANDS_READY
(
rs
Ë||Ñs->
queued
 || !rs->
issued
 ||Ñs->
com∂ëed
)

2541 
	`∑nic
("inst completedánd !ready, !issued, or completed");

2544 
rs
->
com∂ëed
 = 
TRUE
;

2547 i‡(
rs
->
ªcovî_ö°
)

2549 i‡(
rs
->
ö_LSQ
)

2550 
	`∑nic
("mis-predictedÜoad or store?!?!?");

2553 
	`ruu_ªcovî
(
rs
 - 
RUU
);

2554 
	`åa˚r_ªcovî
();

2555 
	`b¥ed_ªcovî
(
¥ed
, 
rs
->
PC
,Ñs->
°ack_ªcovî_idx
);

2558 
ruu_„tch_issue_dñay
 = 
ruu_bønch_≥«…y
;

2564 i‡(
¥ed


2565 && 
b¥ed_•ec_upd©e
 =
•ec_WB


2566 && !
rs
->
ö_LSQ


2567 && (
	`MD_OP_FLAGS
(
rs
->
›
Ë& 
F_CTRL
))

2569 
	`b¥ed_upd©e
(
¥ed
,

2570  
rs
->
PC
,

2571  
rs
->
√xt_PC
,

2572  
rs
->
√xt_PC
 !‘s->
PC
 +

2573 (
md_ö°_t
)),

2574  
rs
->
¥ed_PC
 !‘s->
PC
 +

2575 (
md_ö°_t
)),

2576  
rs
->
¥ed_PC
 =rs->
√xt_PC
,

2577  
rs
->
›
,

2578  &
rs
->
dú_upd©e
);

2582 
	`±ø˚_√w°age
(
rs
->
±ø˚_£q
, 
PST_WRITEBACK
,

2583 
rs
->
ªcovî_ö°
 ? 
PEV_MPDETECT
 : 0);

2588 
i
=0; i<
MAX_ODEPS
; i++)

2590 i‡(
rs
->
⁄ames
[
i
] !
NA
)

2592 
CV_lök
 
lök
;

2593 
RS_lök
 *
ﬁök
, *
ﬁök_√xt
;

2595 i‡(
rs
->
•ec_mode
)

2599 
lök
 = 
•ec_¸óã_ve˘‹
[
rs
->
⁄ames
[
i
]];

2600 i‡–
lök
.
rs


2601 && (
lök
.
rs
 =r†&&Üök.
odï_num
 =
i
))

2605 
•ec_¸óã_ve˘‹
[
rs
->
⁄ames
[
i
]] = 
CVLINK_NULL
;

2606 
•ec_¸óã_ve˘‹_π
[
rs
->
⁄ames
[
i
]] = 
sim_cy˛e
;

2615 
lök
 = 
¸óã_ve˘‹
[
rs
->
⁄ames
[
i
]];

2616 i‡–
lök
.
rs


2617 && (
lök
.
rs
 =r†&&Üök.
odï_num
 =
i
))

2621 
¸óã_ve˘‹
[
rs
->
⁄ames
[
i
]] = 
CVLINK_NULL
;

2622 
¸óã_ve˘‹_π
[
rs
->
⁄ames
[
i
]] = 
sim_cy˛e
;

2628 
ﬁök
=
rs
->
odï_li°
[
i
]; olök; olök=
ﬁök_√xt
)

2630 i‡(
	`RSLINK_VALID
(
ﬁök
))

2632 i‡(
ﬁök
->
rs
->
idï_ªady
[ﬁök->
x
.
›num
])

2633 
	`∑nic
("output dependenceálready satisfied");

2636 
ﬁök
->
rs
->
idï_ªady
[ﬁök->
x
.
›num
] = 
TRUE
;

2639 i‡(
	`OPERANDS_READY
(
ﬁök
->
rs
))

2644 i‡(!
ﬁök
->
rs
->
ö_LSQ


2645 || ((
	`MD_OP_FLAGS
(
ﬁök
->
rs
->
›
)&(
F_MEM
|
F_STORE
))

2646 =(
F_MEM
|
F_STORE
)))

2647 
	`ªadyq_íqueue
(
ﬁök
->
rs
);

2653 
ﬁök_√xt
 = 
ﬁök
->
√xt
;

2656 
	`RSLINK_FREE
(
ﬁök
);

2659 
rs
->
odï_li°
[
i
] = 
NULL
;

2667 
	}
}

2678 
	#MAX_STD_UNKNOWNS
 64

	)

2680 
	$lsq_ª‰esh
()

2682 
i
, 
j
, 
ödex
, 
n_°d_unknowns
;

2683 
md_addr_t
 
°d_unknowns
[
MAX_STD_UNKNOWNS
];

2688 
i
=0, 
ödex
=
LSQ_hód
, 
n_°d_unknowns
=0;

2689 
i
 < 
LSQ_num
;

2690 
i
++, 
ödex
=(ödex + 1Ë% 
LSQ_size
)

2695 (
	`MD_OP_FLAGS
(
LSQ
[
ödex
].
›
Ë& (
F_MEM
|
F_STORE
)) == (F_MEM|F_STORE))

2697 i‡(!
	`STORE_ADDR_READY
(&
LSQ
[
ödex
]))

2703 i‡(!
	`OPERANDS_READY
(&
LSQ
[
ödex
]))

2709 i‡(
n_°d_unknowns
 =
MAX_STD_UNKNOWNS
)

2710 
	`Áèl
("STD unknownárray overflow, increase MAX_STD_UNKNOWNS");

2711 
°d_unknowns
[
n_°d_unknowns
++] = 
LSQ
[
ödex
].
addr
;

2716 
j
=0; j<
n_°d_unknowns
; j++)

2718 i‡(
°d_unknowns
[
j
] = 
LSQ
[
ödex
].
addr
)

2719 
°d_unknowns
[
j
] = 0;

2725 ((
	`MD_OP_FLAGS
(
LSQ
[
ödex
].
›
Ë& (
F_MEM
|
F_LOAD
)) == (F_MEM|F_LOAD))

2726 && !
LSQ
[
ödex
].
queued


2727 && !
LSQ
[
ödex
].
issued


2728 && !
LSQ
[
ödex
].
com∂ëed


2729 && 
	`OPERANDS_READY
(&
LSQ
[
ödex
]))

2733 
j
=0; j<
n_°d_unknowns
; j++)

2736 i‡(
°d_unknowns
[
j
] =
LSQ
[
ödex
].
addr
)

2739 i‡(
j
 =
n_°d_unknowns
)

2742 
	`ªadyq_íqueue
(&
LSQ
[
ödex
]);

2746 
	}
}

2761 
	$ruu_issue
()

2763 
i
, 
lﬂd_œt
, 
éb_œt
, 
n_issued
;

2764 
RS_lök
 *
node
, *
√xt_node
;

2765 
ªs_ãm∂©e
 *
fu
;

2774 
node
 = 
ªady_queue
;

2775 
ªady_queue
 = 
NULL
;

2780 
n_issued
=0;

2781 
node
 && 
n_issued
 < 
ruu_issue_width
;

2782 
node
 = 
√xt_node
)

2784 
√xt_node
 = 
node
->
√xt
;

2787 i‡(
	`RSLINK_VALID
(
node
))

2789 
RUU_°©i⁄
 *
rs
 = 
	`RSLINK_RS
(
node
);

2792 i‡(!
	`OPERANDS_READY
(
rs
Ë|| !rs->
queued


2793 || 
rs
->
issued
 ||Ñs->
com∂ëed
)

2794 
	`∑nic
("issued inst !ready, issued, or completed");

2797 
rs
->
queued
 = 
FALSE
;

2799 i‡(
rs
->
ö_LSQ


2800 && ((
	`MD_OP_FLAGS
(
rs
->
›
Ë& (
F_MEM
|
F_STORE
)) == (F_MEM|F_STORE)))

2806 
rs
->
issued
 = 
TRUE
;

2807 
rs
->
com∂ëed
 = 
TRUE
;

2808 i‡(
rs
->
⁄ames
[0] ||Ñs->onames[1])

2809 
	`∑nic
("store createsÑesult");

2811 i‡(
rs
->
ªcovî_ö°
)

2812 
	`∑nic
("mis-predicted store");

2815 
	`±ø˚_√w°age
(
rs
->
±ø˚_£q
, 
PST_WRITEBACK
, 0);

2818 
n_issued
++;

2823 i‡(
	`MD_OP_FUCLASS
(
rs
->
›
Ë!
NA
)

2825 
fu
 = 
	`ªs_gë
(
fu_poﬁ
, 
	`MD_OP_FUCLASS
(
rs
->
›
));

2826 i‡(
fu
)

2829 
rs
->
issued
 = 
TRUE
;

2831 i‡(
fu
->
ma°î
->
busy
)

2832 
	`∑nic
("functional unitálready in use");

2835 
fu
->
ma°î
->
busy
 = fu->
issuñ©
;

2838 i‡(
rs
->
ö_LSQ


2839 && ((
	`MD_OP_FLAGS
(
rs
->
›
Ë& (
F_MEM
|
F_LOAD
))

2840 =(
F_MEM
|
F_LOAD
)))

2842 
evíts
 = 0;

2847 
lﬂd_œt
 = 0;

2848 
i
 = (
rs
 - 
LSQ
);

2849 i‡(
i
 !
LSQ_hód
)

2854 
i
 = (ò+ (
LSQ_size
-1)) % LSQ_size;

2857 i‡((
	`MD_OP_FLAGS
(
LSQ
[
i
].
›
Ë& 
F_STORE
)

2858 && (
LSQ
[
i
].
addr
 =
rs
->addr))

2861 
lﬂd_œt
 = 1;

2866 i‡(
i
 =
LSQ_hód
)

2872 i‡(!
lﬂd_œt
)

2874 
vÆid_addr
 = 
	`MD_VALID_ADDR
(
rs
->
addr
);

2876 i‡(!
•ec_mode
 && !
vÆid_addr
)

2877 
sim_övÆid_addrs
++;

2880 i‡(
ˇche_dl1
 && 
vÆid_addr
)

2883 
lﬂd_œt
 =

2884 
	`ˇche_ac˚ss
(
ˇche_dl1
, 
Ród
,

2885 (
rs
->
addr
 & ~3), 
NULL
, 4,

2886 
sim_cy˛e
, 
NULL
, NULL);

2887 i‡(
lﬂd_œt
 > 
ˇche_dl1_œt
)

2888 
evíts
 |
PEV_CACHEMISS
;

2893 
lﬂd_œt
 = 
fu
->
›œt
;

2898 i‡(
déb
 && 
	`MD_VALID_ADDR
(
rs
->
addr
))

2902 
éb_œt
 =

2903 
	`ˇche_ac˚ss
(
déb
, 
Ród
, (
rs
->
addr
 & ~3),

2904 
NULL
, 4, 
sim_cy˛e
, NULL, NULL);

2905 i‡(
éb_œt
 > 1)

2906 
evíts
 |
PEV_TLBMISS
;

2909 
lﬂd_œt
 = 
	`MAX
(
éb_œt
,Üoad_lat);

2913 
	`evítq_queue_evít
(
rs
, 
sim_cy˛e
 + 
lﬂd_œt
);

2916 
	`±ø˚_√w°age
(
rs
->
±ø˚_£q
, 
PST_EXECUTE
,

2917 ((
rs
->
ó_comp
 ? 
PEV_AGEN
 : 0)

2918 | 
evíts
));

2923 
	`evítq_queue_evít
(
rs
, 
sim_cy˛e
 + 
fu
->
›œt
);

2926 
	`±ø˚_√w°age
(
rs
->
±ø˚_£q
, 
PST_EXECUTE
,

2927 
rs
->
ó_comp
 ? 
PEV_AGEN
 : 0);

2931 
n_issued
++;

2938 
	`ªadyq_íqueue
(
rs
);

2945 
rs
->
issued
 = 
TRUE
;

2948 
	`evítq_queue_evít
(
rs
, 
sim_cy˛e
 + 1);

2951 
	`±ø˚_√w°age
(
rs
->
±ø˚_£q
, 
PST_EXECUTE
,

2952 
rs
->
ó_comp
 ? 
PEV_AGEN
 : 0);

2955 
n_issued
++;

2966 
	`RSLINK_FREE
(
node
);

2971 ; 
node
;Çodê
√xt_node
)

2973 
√xt_node
 = 
node
->
√xt
;

2976 i‡(
	`RSLINK_VALID
(
node
))

2978 
RUU_°©i⁄
 *
rs
 = 
	`RSLINK_RS
(
node
);

2981 
rs
->
queued
 = 
FALSE
;

2985 
	`ªadyq_íqueue
(
rs
);

2993 
	`RSLINK_FREE
(
node
);

2995 
	}
}

3004 
	#R_BMAP_SZ
 (
	`BITMAP_SIZE
(
MD_NUM_IREGS
))

	)

3005 
BITMAP_TYPE
(
MD_NUM_IREGS
, 
u£_•ec_R
);

3006 
md_g¥_t
 
	g•ec_ªgs_R
;

3009 
	#F_BMAP_SZ
 (
	`BITMAP_SIZE
(
MD_NUM_FREGS
))

	)

3010 
BITMAP_TYPE
(
MD_NUM_FREGS
, 
u£_•ec_F
);

3011 
md_Âr_t
 
	g•ec_ªgs_F
;

3014 
	#C_BMAP_SZ
 (
	`BITMAP_SIZE
(
MD_NUM_CREGS
))

	)

3015 
BITMAP_TYPE
(
MD_NUM_FREGS
, 
u£_•ec_C
);

3016 
md_˘æ_t
 
	g•ec_ªgs_C
;

3020 
	$r•ec_dump
(
FILE
 *
°ªam
)

3022 
i
;

3024 i‡(!
°ªam
)

3025 
°ªam
 = 
°dîr
;

3027 
	`Ârötf
(
°ªam
, "** speculativeÑegister contents **\n");

3029 
	`Ârötf
(
°ªam
, "•ec_mode: %s\n", 
•ec_mode
 ? "t" : "f");

3032 
i
=0; i < 
MD_NUM_IREGS
; i++)

3034 i‡(
	`BITMAP_SET_P
(
u£_•ec_R
, 
R_BMAP_SZ
, 
i
))

3036 
	`md_¥öt_úeg
(
•ec_ªgs_R
, 
i
, 
°ªam
);

3037 
	`Ârötf
(
°ªam
, "\n");

3042 
i
=0; i < 
MD_NUM_FREGS
; i++)

3044 i‡(
	`BITMAP_SET_P
(
u£_•ec_F
, 
F_BMAP_SZ
, 
i
))

3046 
	`md_¥öt_Âªg
(
•ec_ªgs_F
, 
i
, 
°ªam
);

3047 
	`Ârötf
(
°ªam
, "\n");

3052 
i
=0; i < 
MD_NUM_CREGS
; i++)

3054 i‡(
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 
i
))

3056 
	`md_¥öt_¸eg
(
•ec_ªgs_C
, 
i
, 
°ªam
);

3057 
	`Ârötf
(
°ªam
, "\n");

3060 
	}
}

3064 
	#STORE_HASH_SIZE
 32

	)

3069 
	s•ec_mem_ít
 {

3070 
•ec_mem_ít
 *
	m√xt
;

3071 
md_addr_t
 
	maddr
;

3072 
	md©a
[2];

3076 
•ec_mem_ít
 *
	g°‹e_hèbÀ
[
STORE_HASH_SIZE
];

3079 
•ec_mem_ít
 *
	gbuckë_‰ì_li°
 = 
NULL
;

3083 
md_addr_t
 
	g¥ed_PC
;

3084 
md_addr_t
 
	gªcovî_PC
;

3087 
md_addr_t
 
	g„tch_ªgs_PC
;

3088 
md_addr_t
 
	g„tch_¥ed_PC
;

3091 
	s„tch_ªc
 {

3092 
md_ö°_t
 
	mIR
;

3093 
md_addr_t
 
	mªgs_PC
, 
	m¥ed_PC
;

3094 
b¥ed_upd©e_t
 
	mdú_upd©e
;

3095 
	m°ack_ªcovî_idx
;

3096 
	m±ø˚_£q
;

3097 
	miˇche_miss
;

3099 
„tch_ªc
 *
	g„tch_d©a
;

3100 
	g„tch_num
;

3101 
	g„tch_èû
, 
	g„tch_hód
;

3108 
	$åa˚r_ªcovî
()

3110 
i
;

3111 
•ec_mem_ít
 *
ít
, *
ít_√xt
;

3114 i‡(!
•ec_mode
)

3115 
	`∑nic
("cannotÑecover unless in speculative mode");

3118 
•ec_mode
 = 
FALSE
;

3121 
	`BITMAP_CLEAR_MAP
(
u£_•ec_R
, 
R_BMAP_SZ
);

3122 
	`BITMAP_CLEAR_MAP
(
u£_•ec_F
, 
F_BMAP_SZ
);

3123 
	`BITMAP_CLEAR_MAP
(
u£_•ec_C
, 
C_BMAP_SZ
);

3127 
i
=0; i<
STORE_HASH_SIZE
; i++)

3130 
ít
=
°‹e_hèbÀ
[
i
];É¡;É¡=
ít_√xt
)

3132 
ít_√xt
 = 
ít
->
√xt
;

3133 
ít
->
√xt
 = 
buckë_‰ì_li°
;

3134 
buckë_‰ì_li°
 = 
ít
;

3136 
°‹e_hèbÀ
[
i
] = 
NULL
;

3140 i‡(
±ø˚_a˘ive
)

3142 
„tch_num
 != 0)

3145 
	`±ø˚_ídö°
(
„tch_d©a
[
„tch_hód
].
±ø˚_£q
);

3148 
„tch_hód
 = („tch_hód+1Ë& (
ruu_ifq_size
 - 1);

3149 
„tch_num
--;

3154 
„tch_num
 = 0;

3155 
„tch_èû
 = 
„tch_hód
 = 0;

3156 
„tch_¥ed_PC
 = 
„tch_ªgs_PC
 = 
ªcovî_PC
;

3157 
	}
}

3161 
	$åa˚r_öô
()

3163 
i
;

3166 
•ec_mode
 = 
FALSE
;

3169 
	`BITMAP_CLEAR_MAP
(
u£_•ec_R
, 
R_BMAP_SZ
);

3170 
	`BITMAP_CLEAR_MAP
(
u£_•ec_F
, 
F_BMAP_SZ
);

3171 
	`BITMAP_CLEAR_MAP
(
u£_•ec_C
, 
C_BMAP_SZ
);

3174 
i
=0; i<
STORE_HASH_SIZE
; i++)

3175 
°‹e_hèbÀ
[
i
] = 
NULL
;

3176 
	}
}

3180 
	#HASH_ADDR
(
ADDR
) \

3181 ((((
ADDR
Ë>> 24)^((ADDRË>> 16)^((ADDRË>> 8)^(ADDR)Ë& (
STORE_HASH_SIZE
-1))

	)

3192 
md_Áu…_ty≥


3193 
	$•ec_mem_ac˚ss
(
mem_t
 *
mem
,

3194 
mem_cmd
 
cmd
,

3195 
md_addr_t
 
addr
,

3196 *
p
,

3197 
nbyãs
)

3199 
i
, 
ödex
;

3200 
•ec_mem_ít
 *
ít
, *
¥ev
;

3206 i‡((
nbyãs
 & (nbyãs-1)Ë!0 || (
addr
 & (nbytes-1)) != 0)

3209 
i
=0; i < 
nbyãs
; i++)

3210 ((*)
p
)[
i
] = 0;

3212  
md_Áu…_n⁄e
;

3216 i‡(!((
addr
 >
ld_ãxt_ba£
 &&ádd∏< (ld_ãxt_ba£+
ld_ãxt_size
)

3217 && 
cmd
 =
Ród
)

3218 || 
	`MD_VALID_ADDR
(
addr
)))

3221 
i
=0; i < 
nbyãs
; i++)

3222 ((*)
p
)[
i
] = 0;

3224  
md_Áu…_n⁄e
;

3228 
ödex
 = 
	`HASH_ADDR
(
addr
);

3229 
¥ev
=
NULL
,
ít
=
°‹e_hèbÀ
[
ödex
];É¡;ÖªvÛ¡,ítÛ¡->
√xt
)

3231 i‡(
ít
->
addr
 ==áddr)

3234 i‡(
¥ev
 !
NULL
)

3237 
¥ev
->
√xt
 = 
ít
->next;

3238 
ít
->
√xt
 = 
°‹e_hèbÀ
[
ödex
];

3239 
°‹e_hèbÀ
[
ödex
] = 
ít
;

3246 i‡(!
ít
 && 
cmd
 =
Wrôe
)

3249 i‡(!
buckë_‰ì_li°
)

3252 
buckë_‰ì_li°
 = 
	`ˇŒoc
(1, (
•ec_mem_ít
));

3253 i‡(!
buckë_‰ì_li°
)

3254 
	`Áèl
("out of virtual memory");

3256 
ít
 = 
buckë_‰ì_li°
;

3257 
buckë_‰ì_li°
 = buckë_‰ì_li°->
√xt
;

3259 i‡(!
bugcom∑t_mode
)

3262 
ít
->
√xt
 = 
°‹e_hèbÀ
[
ödex
];

3263 
°‹e_hèbÀ
[
ödex
] = 
ít
;

3264 
ít
->
addr
 =áddr;

3265 
ít
->
d©a
[0] = 0;Ént->data[1] = 0;

3270 
nbyãs
)

3273 i‡(
cmd
 =
Ród
)

3275 i‡(
ít
)

3278 *((
byã_t
 *)
p
Ë*((byã_à*)(&
ít
->
d©a
[0]));

3284 *((
byã_t
 *)
p
Ë
	`MEM_READ_BYTE
(
mem
, 
addr
);

3290 *((
byã_t
 *)(&
ít
->
d©a
[0])Ë*((byã_à*)
p
);

3294 i‡(
cmd
 =
Ród
)

3296 i‡(
ít
)

3299 *((
hÆf_t
 *)
p
Ë*((hÆf_à*)(&
ít
->
d©a
[0]));

3305 *((
hÆf_t
 *)
p
Ë
	`MEM_READ_HALF
(
mem
, 
addr
);

3311 *((
hÆf_t
 *)&
ít
->
d©a
[0]Ë*((hÆf_à*)
p
);

3315 i‡(
cmd
 =
Ród
)

3317 i‡(
ít
)

3320 *((
w‹d_t
 *)
p
Ë*((w‹d_à*)&
ít
->
d©a
[0]);

3326 *((
w‹d_t
 *)
p
Ë
	`MEM_READ_WORD
(
mem
, 
addr
);

3332 *((
w‹d_t
 *)&
ít
->
d©a
[0]Ë*((w‹d_à*)
p
);

3336 i‡(
cmd
 =
Ród
)

3338 i‡(
ít
)

3341 *((
w‹d_t
 *)
p
Ë*((w‹d_à*)&
ít
->
d©a
[0]);

3342 *(((
w‹d_t
 *)
p
)+1Ë*((w‹d_à*)&
ít
->
d©a
[1]);

3348 *((
w‹d_t
 *)
p
Ë
	`MEM_READ_WORD
(
mem
, 
addr
);

3349 *(((
w‹d_t
 *)
p
)+1) =

3350 
	`MEM_READ_WORD
(
mem
, 
addr
 + (
w‹d_t
));

3356 *((
w‹d_t
 *)&
ít
->
d©a
[0]Ë*((w‹d_à*)
p
);

3357 *((
w‹d_t
 *)&
ít
->
d©a
[1]Ë*(((w‹d_à*)
p
)+1);

3361 
	`∑nic
("access sizeÇot supported in mis-speculative mode");

3364  
md_Áu…_n⁄e
;

3365 
	}
}

3369 
	$m•ec_dump
(
FILE
 *
°ªam
)

3371 
i
;

3372 
•ec_mem_ít
 *
ít
;

3374 i‡(!
°ªam
)

3375 
°ªam
 = 
°dîr
;

3377 
	`Ârötf
(
°ªam
, "** speculative memory contents **\n");

3379 
	`Ârötf
(
°ªam
, "•ec_mode: %s\n", 
•ec_mode
 ? "t" : "f");

3381 
i
=0; i<
STORE_HASH_SIZE
; i++)

3384 
ít
=
°‹e_hèbÀ
[
i
];É¡;É¡Û¡->
√xt
)

3386 
	`myÂrötf
(
°ªam
, "[0x%08p]: %12.0f/0x%08x:%08x\n",

3387 
ít
->
addr
, ()(*((*Î¡->
d©a
)),

3388 *((*)&
ít
->
d©a
[0]),

3389 *(((*)&
ít
->
d©a
[0]) + 1));

3392 
	}
}

3396 
	$simoo_mem_obj
(
mem_t
 *
mem
,

3397 
is_wrôe
,

3398 
md_addr_t
 
addr
,

3399 *
p
,

3400 
nbyãs
)

3402 
mem_cmd
 
cmd
;

3404 i‡(!
is_wrôe
)

3405 
cmd
 = 
Ród
;

3407 
cmd
 = 
Wrôe
;

3410 *
îr°r
;

3412 
îr°r
 = 
	`mem_vÆid
(
cmd
, 
addr
, 
nbyãs
, 
FALSE
);

3413 i‡(
îr°r
)

3414  
îr°r
;

3418 i‡(
•ec_mode
)

3419 
	`•ec_mem_ac˚ss
(
mem
, 
cmd
, 
addr
, 
p
, 
nbyãs
);

3421 
	`mem_ac˚ss
(
mem
, 
cmd
, 
addr
, 
p
, 
nbyãs
);

3424  
NULL
;

3425 
	}
}

3434 
INLINE
 

3435 
	$ruu_lök_idï
(
RUU_°©i⁄
 *
rs
,

3436 
idï_num
,

3437 
idï_«me
)

3439 
CV_lök
 
hód
;

3440 
RS_lök
 *
lök
;

3443 i‡(
idï_«me
 =
NA
)

3446 
rs
->
idï_ªady
[
idï_num
] = 
TRUE
;

3451 
hód
 = 
	`CREATE_VECTOR
(
idï_«me
);

3454 i‡(!
hód
.
rs
)

3458 
rs
->
idï_ªady
[
idï_num
] = 
TRUE
;

3465 
rs
->
idï_ªady
[
idï_num
] = 
FALSE
;

3468 
	`RSLINK_NEW
(
lök
, 
rs
);Üök->
x
.
›num
 = 
idï_num
;

3469 
lök
->
√xt
 = 
hód
.
rs
->
odï_li°
[hód.
odï_num
];

3470 
hód
.
rs
->
odï_li°
[hód.
odï_num
] = 
lök
;

3471 
	}
}

3474 
INLINE
 

3475 
	$ruu_ö°Æl_odï
(
RUU_°©i⁄
 *
rs
,

3476 
odï_num
,

3477 
odï_«me
)

3479 
CV_lök
 
cv
;

3482 i‡(
odï_«me
 =
NA
)

3485 
rs
->
⁄ames
[
odï_num
] = 
NA
;

3491 
rs
->
⁄ames
[
odï_num
] = 
odï_«me
;

3494 
rs
->
odï_li°
[
odï_num
] = 
NULL
;

3497 
	`CVLINK_INIT
(
cv
, 
rs
, 
odï_num
);

3498 
	`SET_CREATE_VECTOR
(
odï_«me
, 
cv
);

3499 
	}
}

3502 
	~"decode_cfg.h
"

3510 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

3513 #unde‡
SET_TPC


3514 
	#SET_TPC
(
EXPR
Ë(
èrgë_PC
 = (EXPR))

	)

3517 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

3518 
	#SET_CPC
(
EXPR
Ë(
ªgs
.
ªgs_PC
 = (EXPR))

	)

3523 
	#GPR
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_R
, 
R_BMAP_SZ
, (N))\

3524 ? 
•ec_ªgs_R
[
N
] \

3525 : 
ªgs
.
ªgs_R
[
N
])

	)

3526 
	#SET_GPR
(
N
,
EXPR
Ë(
•ec_mode
 \

3527 ? ((
•ec_ªgs_R
[
N
] = (
EXPR
)), \

3528 
	`BITMAP_SET
(
u£_•ec_R
, 
R_BMAP_SZ
, (
N
)),\

3529 
•ec_ªgs_R
[
N
]) \

3530 : (
ªgs
.
ªgs_R
[
N
] = (
EXPR
)))

	)

3532 #i‡
deföed
(
TARGET_PISA
)

3537 
	#FPR_L
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_F
, 
F_BMAP_SZ
, ((N)&~1))\

3538 ? 
•ec_ªgs_F
.
l
[(
N
)] \

3539 : 
ªgs
.
ªgs_F
.
l
[(
N
)])

	)

3540 
	#SET_FPR_L
(
N
,
EXPR
Ë(
•ec_mode
 \

3541 ? ((
•ec_ªgs_F
.
l
[(
N
)] = (
EXPR
)), \

3542 
	`BITMAP_SET
(
u£_•ec_F
,
F_BMAP_SZ
,((
N
)&~1)),\

3543 
•ec_ªgs_F
.
l
[(
N
)]) \

3544 : (
ªgs
.
ªgs_F
.
l
[(
N
)] = (
EXPR
)))

	)

3545 
	#FPR_F
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_F
, 
F_BMAP_SZ
, ((N)&~1))\

3546 ? 
•ec_ªgs_F
.
f
[(
N
)] \

3547 : 
ªgs
.
ªgs_F
.
f
[(
N
)])

	)

3548 
	#SET_FPR_F
(
N
,
EXPR
Ë(
•ec_mode
 \

3549 ? ((
•ec_ªgs_F
.
f
[(
N
)] = (
EXPR
)), \

3550 
	`BITMAP_SET
(
u£_•ec_F
,
F_BMAP_SZ
,((
N
)&~1)),\

3551 
•ec_ªgs_F
.
f
[(
N
)]) \

3552 : (
ªgs
.
ªgs_F
.
f
[(
N
)] = (
EXPR
)))

	)

3553 
	#FPR_D
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_F
, 
F_BMAP_SZ
, ((N)&~1))\

3554 ? 
•ec_ªgs_F
.
d
[(
N
) >> 1] \

3555 : 
ªgs
.
ªgs_F
.
d
[(
N
Ë>> 1])

	)

3556 
	#SET_FPR_D
(
N
,
EXPR
Ë(
•ec_mode
 \

3557 ? ((
•ec_ªgs_F
.
d
[(
N
Ë>> 1] = (
EXPR
)), \

3558 
	`BITMAP_SET
(
u£_•ec_F
,
F_BMAP_SZ
,((
N
)&~1)),\

3559 
•ec_ªgs_F
.
d
[(
N
) >> 1]) \

3560 : (
ªgs
.
ªgs_F
.
d
[(
N
Ë>> 1] = (
EXPR
)))

	)

3565 
	#HI
 (
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 0)\

3566 ? 
•ec_ªgs_C
.
hi
 \

3567 : 
ªgs
.
ªgs_C
.
hi
)

	)

3568 
	#SET_HI
(
EXPR
Ë(
•ec_mode
 \

3569 ? ((
•ec_ªgs_C
.
hi
 = (
EXPR
)), \

3570 
	`BITMAP_SET
(
u£_•ec_C
, 
C_BMAP_SZ
, 0),\

3571 
•ec_ªgs_C
.
hi
) \

3572 : (
ªgs
.
ªgs_C
.
hi
 = (
EXPR
)))

	)

3573 
	#LO
 (
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 1)\

3574 ? 
•ec_ªgs_C
.
lo
 \

3575 : 
ªgs
.
ªgs_C
.
lo
)

	)

3576 
	#SET_LO
(
EXPR
Ë(
•ec_mode
 \

3577 ? ((
•ec_ªgs_C
.
lo
 = (
EXPR
)), \

3578 
	`BITMAP_SET
(
u£_•ec_C
, 
C_BMAP_SZ
, 1),\

3579 
•ec_ªgs_C
.
lo
) \

3580 : (
ªgs
.
ªgs_C
.
lo
 = (
EXPR
)))

	)

3581 
	#FCC
 (
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 2)\

3582 ? 
•ec_ªgs_C
.
fcc
 \

3583 : 
ªgs
.
ªgs_C
.
fcc
)

	)

3584 
	#SET_FCC
(
EXPR
Ë(
•ec_mode
 \

3585 ? ((
•ec_ªgs_C
.
fcc
 = (
EXPR
)), \

3586 
	`BITMAP_SET
(
u£_•ec_C
,
C_BMAP_SZ
, 2),\

3587 
•ec_ªgs_C
.
fcc
) \

3588 : (
ªgs
.
ªgs_C
.
fcc
 = (
EXPR
)))

	)

3590 #ñi‡
deföed
(
TARGET_ALPHA
)

3595 
	#FPR_Q
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_F
, 
F_BMAP_SZ
, (N))\

3596 ? 
•ec_ªgs_F
.
q
[(
N
)] \

3597 : 
ªgs
.
ªgs_F
.
q
[(
N
)])

	)

3598 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
•ec_mode
 \

3599 ? ((
•ec_ªgs_F
.
q
[(
N
)] = (
EXPR
)), \

3600 
	`BITMAP_SET
(
u£_•ec_F
,
F_BMAP_SZ
, (
N
)),\

3601 
•ec_ªgs_F
.
q
[(
N
)]) \

3602 : (
ªgs
.
ªgs_F
.
q
[(
N
)] = (
EXPR
)))

	)

3603 
	#FPR
(
N
Ë(
	`BITMAP_SET_P
(
u£_•ec_F
, 
F_BMAP_SZ
, (N))\

3604 ? 
•ec_ªgs_F
.
d
[(
N
)] \

3605 : 
ªgs
.
ªgs_F
.
d
[(
N
)])

	)

3606 
	#SET_FPR
(
N
,
EXPR
Ë(
•ec_mode
 \

3607 ? ((
•ec_ªgs_F
.
d
[(
N
)] = (
EXPR
)), \

3608 
	`BITMAP_SET
(
u£_•ec_F
,
F_BMAP_SZ
, (
N
)),\

3609 
•ec_ªgs_F
.
d
[(
N
)]) \

3610 : (
ªgs
.
ªgs_F
.
d
[(
N
)] = (
EXPR
)))

	)

3615 
	#FPCR
 (
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 0)\

3616 ? 
•ec_ªgs_C
.
Â¸
 \

3617 : 
ªgs
.
ªgs_C
.
Â¸
)

	)

3618 
	#SET_FPCR
(
EXPR
Ë(
•ec_mode
 \

3619 ? ((
•ec_ªgs_C
.
Â¸
 = (
EXPR
)), \

3620 
	`BITMAP_SET
(
u£_•ec_C
,
C_BMAP_SZ
, 0),\

3621 
•ec_ªgs_C
.
Â¸
) \

3622 : (
ªgs
.
ªgs_C
.
Â¸
 = (
EXPR
)))

	)

3623 
	#UNIQ
 (
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 1)\

3624 ? 
•ec_ªgs_C
.
uniq
 \

3625 : 
ªgs
.
ªgs_C
.
uniq
)

	)

3626 
	#SET_UNIQ
(
EXPR
Ë(
•ec_mode
 \

3627 ? ((
•ec_ªgs_C
.
uniq
 = (
EXPR
)), \

3628 
	`BITMAP_SET
(
u£_•ec_C
,
C_BMAP_SZ
, 1),\

3629 
•ec_ªgs_C
.
uniq
) \

3630 : (
ªgs
.
ªgs_C
.
uniq
 = (
EXPR
)))

	)

3631 
	#FCC
 (
	`BITMAP_SET_P
(
u£_•ec_C
, 
C_BMAP_SZ
, 2)\

3632 ? 
•ec_ªgs_C
.
fcc
 \

3633 : 
ªgs
.
ªgs_C
.
fcc
)

	)

3634 
	#SET_FCC
(
EXPR
Ë(
•ec_mode
 \

3635 ? ((
•ec_ªgs_C
.
fcc
 = (
EXPR
)), \

3636 
	`BITMAP_SET
(
u£_•ec_C
,
C_BMAP_SZ
, 1),\

3637 
•ec_ªgs_C
.
fcc
) \

3638 : (
ªgs
.
ªgs_C
.
fcc
 = (
EXPR
)))

	)

3641 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

3647 
	#__READ_SPECMEM
(
SRC
, 
SRC_V
, 
FAULT
) \

3648 (
addr
 = (
SRC
), \

3649 (
•ec_mode
 \

3650 ? ((
FAULT
Ë
	`•ec_mem_ac˚ss
(
mem
, 
Ród
, 
addr
, &
SRC_V
, (SRC_V)))\

3651 : ((
FAULT
Ë
	`mem_ac˚ss
(
mem
, 
Ród
, 
addr
, &
SRC_V
, (SRC_V)))), \

3652 
SRC_V
)

	)

3654 
	#READ_BYTE
(
SRC
, 
FAULT
) \

3655 
	`__READ_SPECMEM
((
SRC
), 
ãmp_byã
, (
FAULT
))

	)

3656 
	#READ_HALF
(
SRC
, 
FAULT
) \

3657 
	`MD_SWAPH
(
	`__READ_SPECMEM
((
SRC
), 
ãmp_hÆf
, (
FAULT
)))

	)

3658 
	#READ_WORD
(
SRC
, 
FAULT
) \

3659 
	`MD_SWAPW
(
	`__READ_SPECMEM
((
SRC
), 
ãmp_w‹d
, (
FAULT
)))

	)

3660 #ifde‡
HOST_HAS_QWORD


3661 
	#READ_QWORD
(
SRC
, 
FAULT
) \

3662 
	`MD_SWAPQ
(
	`__READ_SPECMEM
((
SRC
), 
ãmp_qw‹d
, (
FAULT
)))

	)

3666 
	#__WRITE_SPECMEM
(
SRC
, 
DST
, 
DST_V
, 
FAULT
) \

3667 (
DST_V
 = (
SRC
), 
addr
 = (
DST
), \

3668 (
•ec_mode
 \

3669 ? ((
FAULT
Ë
	`•ec_mem_ac˚ss
(
mem
, 
Wrôe
, 
addr
, &
DST_V
, (DST_V)))\

3670 : ((
FAULT
Ë
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
addr
, &
DST_V
, (DST_V)))))

	)

3672 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

3673 
	`__WRITE_SPECMEM
((
SRC
), (
DST
), 
ãmp_byã
, (
FAULT
))

	)

3674 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

3675 
	`__WRITE_SPECMEM
(
	`MD_SWAPH
(
SRC
), (
DST
), 
ãmp_hÆf
, (
FAULT
))

	)

3676 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

3677 
	`__WRITE_SPECMEM
(
	`MD_SWAPW
(
SRC
), (
DST
), 
ãmp_w‹d
, (
FAULT
))

	)

3678 #ifde‡
HOST_HAS_QWORD


3679 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

3680 
	`__WRITE_SPECMEM
(
	`MD_SWAPQ
(
SRC
), (
DST
), 
ãmp_qw‹d
, (
FAULT
))

	)

3684 
	#SYSCALL
(
INST
) \

3686 (
•ec_mode
 ? 
	`∑nic
("speculative syscall") : () 0), \

3687 
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, 
INST
, 
TRUE
))

	)

3691 
	$simoo_ªg_obj
(
ªgs_t
 *
xªgs
,

3692 
is_wrôe
,

3693 
md_ªg_ty≥
 
π
,

3694 
ªg
,

3695 
evÆ_vÆue_t
 *
vÆ
)

3697 
π
)

3699 
π_g¥
:

3700 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_IREGS
)

3703 i‡(!
is_wrôe
)

3705 
vÆ
->
ty≥
 = 
ë_uöt
;

3706 
vÆ
->
vÆue
.
as_uöt
 = 
	`GPR
(
ªg
);

3709 
	`SET_GPR
(
ªg
, 
	`evÆ_as_uöt
(*
vÆ
));

3712 
π_Õr
:

3713 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
)

3717 
	`ab‹t
();

3719 i‡(!
is_wrôe
)

3721 
vÆ
->
ty≥
 = 
ë_uöt
;

3722 
vÆ
->
vÆue
.
as_uöt
 = 
	`FPR_L
(
ªg
);

3725 
	`SET_FPR_L
(
ªg
, 
	`evÆ_as_uöt
(*
vÆ
));

3729 
π_Âr
:

3731 
	`ab‹t
();

3733 i‡(!
is_wrôe
)

3734 
vÆ
->
vÆue
.
as_Êﬂt
 = 
	`FPR_F
(
ªg
);

3736 
	`SET_FPR_F
(
ªg
, 
vÆ
->
vÆue
.
as_Êﬂt
);

3740 
π_d¥
:

3742 
	`ab‹t
();

3745 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_REGS
/2)

3748 i‡(
©
 =
©_ªad
)

3749 
vÆ
->
as_doubÀ
 = 
	`FPR_D
(
ªg
 * 2);

3751 
	`SET_FPR_D
(
ªg
 * 2, 
vÆ
->
as_doubÀ
);

3757 
	`ab‹t
();

3758 
π_hi
:

3759 i‡(
©
 =
©_ªad
)

3760 
vÆ
->
as_w‹d
 = 
HI
;

3762 
	`SET_HI
(
vÆ
->
as_w‹d
);

3764 
π_lo
:

3765 i‡(
©
 =
©_ªad
)

3766 
vÆ
->
as_w‹d
 = 
LO
;

3768 
	`SET_LO
(
vÆ
->
as_w‹d
);

3770 
π_FCC
:

3771 i‡(
©
 =
©_ªad
)

3772 
vÆ
->
as_c⁄dôi⁄
 = 
FCC
;

3774 
	`SET_FCC
(
vÆ
->
as_c⁄dôi⁄
);

3778 
π_PC
:

3779 i‡(!
is_wrôe
)

3781 
vÆ
->
ty≥
 = 
ë_addr
;

3782 
vÆ
->
vÆue
.
as_addr
 = 
ªgs
.
ªgs_PC
;

3785 
ªgs
.
ªgs_PC
 = 
	`evÆ_as_addr
(*
vÆ
);

3788 
π_NPC
:

3789 i‡(!
is_wrôe
)

3791 
vÆ
->
ty≥
 = 
ë_addr
;

3792 
vÆ
->
vÆue
.
as_addr
 = 
ªgs
.
ªgs_NPC
;

3795 
ªgs
.
ªgs_NPC
 = 
	`evÆ_as_addr
(*
vÆ
);

3799 
	`∑nic
("bogusÑegister bank");

3803  
NULL
;

3804 
	}
}

3808 
RS_lök
 
	gœ°_›
 = 
RSLINK_NULL_DATA
;

3814 
	$ruu_di•©ch
()

3816 
i
;

3817 
n_di•©ched
;

3818 
md_ö°_t
 
ö°
;

3819 
md_›code
 
›
;

3820 
out1
, 
out2
, 
ö1
, 
ö2
, 
ö3
;

3821 
md_addr_t
 
èrgë_PC
;

3822 
md_addr_t
 
addr
;

3823 
RUU_°©i⁄
 *
rs
;

3824 
RUU_°©i⁄
 *
lsq
;

3825 
b¥ed_upd©e_t
 *
dú_upd©e_±r
;

3826 
°ack_ªcovî_idx
;

3827 
p£q
;

3828 
is_wrôe
;

3829 
made_check
;

3830 
br_èkí
, 
br_¥ed_èkí
;

3831 
„tch_ªdúe˘ed
 = 
FALSE
;

3832 
byã_t
 
ãmp_byã
 = 0;

3833 
hÆf_t
 
ãmp_hÆf
 = 0;

3834 
w‹d_t
 
ãmp_w‹d
 = 0;

3835 #ifde‡
HOST_HAS_QWORD


3836 
qw‹d_t
 
ãmp_qw‹d
 = 0;

3838 
md_Áu…_ty≥
 
Áu…
;

3839 
iˇche_miss
;

3841 
made_check
 = 
FALSE
;

3842 
n_di•©ched
 = 0;

3844 
n_di•©ched
 < (
ruu_decode_width
 * 
„tch_•ìd
)

3846 && 
RUU_num
 < 
RUU_size
 && 
LSQ_num
 < 
LSQ_size


3848 && 
„tch_num
 != 0

3850 && (
ruu_ö˛ude_•ec
 || !
•ec_mode
))

3853 i‡(
ruu_ö‹dî_issue


3854 && (
œ°_›
.
rs
 && 
	`RSLINK_VALID
(&last_op)

3855 && !
	`OPERANDS_READY
(
œ°_›
.
rs
)))

3862 
ö°
 = 
„tch_d©a
[
„tch_hód
].
IR
;

3865 
	`MD_SET_OPCODE
(
›
, 
ö°
);

3871 i‡(
•ec_mode


3872 && !
¥ed_≥r„˘


3873 && ((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
 | 
F_COND
)) == (F_CTRL | F_COND))) {

3877 
ªgs
.
ªgs_PC
 = 
„tch_d©a
[
„tch_hód
].regs_PC;

3878 
¥ed_PC
 = 
„tch_d©a
[
„tch_hód
].pred_PC;

3879 
dú_upd©e_±r
 = &(
„tch_d©a
[
„tch_hód
].
dú_upd©e
);

3880 
°ack_ªcovî_idx
 = 
„tch_d©a
[
„tch_hód
].stack_recover_idx;

3881 
p£q
 = 
„tch_d©a
[
„tch_hód
].
±ø˚_£q
;

3882 
iˇche_miss
 = 
„tch_d©a
[
„tch_hód
].icache_miss;

3885 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

3888 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_TRAP
)

3890 i‡(
RUU_num
 != 0)

3895 i‡(
•ec_mode
)

3896 
	`∑nic
("drainedánd speculative");

3900 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0; 
•ec_ªgs_R
[MD_REG_ZERO] = 0;

3901 #ifde‡
TARGET_ALPHA


3902 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0; 
•ec_ªgs_F
.d[MD_REG_ZERO] = 0.0;

3905 i‡(!
•ec_mode
)

3908 
sim_num_ö¢
++;

3912 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

3915 
Áu…
 = 
md_Áu…_n⁄e
;

3918 
›
)

3920 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
CLASS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

3921 
OP
: \

3923 
out1
 = 
O1
; 
out2
 = 
O2
; \

3924 
ö1
 = 
I1
; 
ö2
 = 
I2
; 
ö3
 = 
I3
; \

3926 
	`SYMCAT
(
OP
,
_IMPL
); \

3927 ;

	)

3928 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

3929 
OP
: \

3931 
›
 = 
MD_NOP_OP
; \

3933 
out1
 = 
NA
; 
out2
 = NA; \

3934 
ö1
 = 
NA
; 
ö2
 = NA; 
ö3
 = NA; \

3936 ;

	)

3937 
	#CONNECT
(
OP
Ë

	)

3943 
	#DECLARE_FAULT
(
FAULT
) \

3945 i‡(!
•ec_mode
) \

3946 
Áu…
 = (
FAULT
); \

3949 }

	)

3950 
	~"machöe.def
"

3953 
›
 = 
MD_NOP_OP
;

3955 
out1
 = 
NA
; 
out2
 = NA;

3956 
ö1
 = 
NA
; 
ö2
 = NA; 
ö3
 = NA;

3962 i‡(!
•ec_mode
 && 
vîbo£
)

3964 
	`myÂrötf
(
°dîr
, "++ %10n [xor: 0x%08x] {%d} @ 0x%08p: ",

3965 
sim_num_ö¢
, 
	`md_x‹_ªgs
(&
ªgs
),

3966 
ö°_£q
+1, 
ªgs
.
ªgs_PC
);

3967 
	`md_¥öt_ö¢
(
ö°
, 
ªgs
.
ªgs_PC
, 
°dîr
);

3968 
	`Ârötf
(
°dîr
, "\n");

3972 i‡(
Áu…
 !
md_Áu…_n⁄e
)

3973 
	`Áèl
("non-speculative fault (%d) detected @ 0x%08p",

3974 
Áu…
, 
ªgs
.
ªgs_PC
);

3977 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

3979 
sim_tŸÆ_ªfs
++;

3980 i‡(!
•ec_mode
)

3981 
sim_num_ªfs
++;

3983 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

3984 
is_wrôe
 = 
TRUE
;

3987 
sim_tŸÆ_lﬂds
++;

3988 i‡(!
•ec_mode
)

3989 
sim_num_lﬂds
++;

3993 
br_èkí
 = (
ªgs
.
ªgs_NPC
 !‘egs.
ªgs_PC
 + (
md_ö°_t
)));

3994 
br_¥ed_èkí
 = (
¥ed_PC
 !(
ªgs
.
ªgs_PC
 + (
md_ö°_t
)));

3996 i‡((
¥ed_PC
 !
ªgs
.
ªgs_NPC
 && 
¥ed_≥r„˘
)

3997 || ((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_DIRJMP
)) == (F_CTRL|F_DIRJMP)

3998 && 
èrgë_PC
 !
¥ed_PC
 && 
br_¥ed_èkí
))

4008 
„tch_¥ed_PC
 = 
„tch_ªgs_PC
 = 
ªgs
.
ªgs_NPC
;

4012 i‡(
¥ed_≥r„˘


4013 || ((
	`MD_OP_FLAGS
(
›
Ë& (
F_CTRL
|
F_UNCOND
)) == (F_CTRL|F_UNCOND))) {

4014 
¥ed_PC
 = 
ªgs
.
ªgs_NPC
;

4015 
ruu_„tch_issue_dñay
 = 0;

4017 
ruu_„tch_issue_dñay
 = 
ruu_bønch_≥«…y
;

4020 
„tch_hód
 = (
ruu_ifq_size
-1);

4021 
„tch_num
 = 1;

4022 
„tch_èû
 = 0;

4024 
my_œ°_ö°_mis£d
 = 
FALSE
;

4025 
„tch_ªdúe˘ed
 = 
TRUE
;

4029 i‡(
›
 !
MD_NOP_OP
)

4047 
rs
 = &
RUU
[
RUU_èû
];

4048 
rs
->
¶ù
 = 
sim_cy˛e
 - 1;

4049 
rs
->
IR
 = 
ö°
;

4050 
rs
->
›
 = op;

4051 
rs
->
PC
 = 
ªgs
.
ªgs_PC
;

4052 
rs
->
√xt_PC
 = 
ªgs
.
ªgs_NPC
;Ñs->
¥ed_PC
 =Öred_PC;

4053 
rs
->
ö_LSQ
 = 
FALSE
;

4054 
rs
->
ó_comp
 = 
FALSE
;

4055 
rs
->
ªcovî_ö°
 = 
FALSE
;

4056 
rs
->
dú_upd©e
 = *
dú_upd©e_±r
;

4057 
rs
->
°ack_ªcovî_idx
 = stack_recover_idx;

4058 
rs
->
•ec_mode
 = spec_mode;

4059 
rs
->
addr
 = 0;

4061 
rs
->
£q
 = ++
ö°_£q
;

4062 
rs
->
queued
 =Ñs->
issued
 =Ñs->
com∂ëed
 = 
FALSE
;

4063 
rs
->
±ø˚_£q
 = 
p£q
;

4065 
rs
->
iˇche_miss
 = icache_miss;

4068 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

4071 
rs
->
›
 = 
MD_AGEN_OP
;

4072 
rs
->
ó_comp
 = 
TRUE
;

4075 
lsq
 = &
LSQ
[
LSQ_èû
];

4076 
lsq
->
¶ù
 = 
sim_cy˛e
 - 1;

4077 
lsq
->
IR
 = 
ö°
;

4078 
lsq
->
›
 = op;

4079 
lsq
->
PC
 = 
ªgs
.
ªgs_PC
;

4080 
lsq
->
√xt_PC
 = 
ªgs
.
ªgs_NPC
;Üsq->
¥ed_PC
 =Öred_PC;

4081 
lsq
->
ö_LSQ
 = 
TRUE
;

4082 
lsq
->
ó_comp
 = 
FALSE
;

4083 
lsq
->
ªcovî_ö°
 = 
FALSE
;

4084 
lsq
->
dú_upd©e
.
pdú1
 =Üsq->dú_upd©e.
pdú2
 = 
NULL
;

4085 
lsq
->
dú_upd©e
.
pmëa
 = 
NULL
;

4086 
lsq
->
°ack_ªcovî_idx
 = 0;

4087 
lsq
->
•ec_mode
 = spec_mode;

4088 
lsq
->
addr
 =áddr;

4090 
lsq
->
£q
 = ++
ö°_£q
;

4091 
lsq
->
queued
 =Üsq->
issued
 =Üsq->
com∂ëed
 = 
FALSE
;

4092 
lsq
->
±ø˚_£q
 =Ötrace_seq++;

4095 
	`±ø˚_√wu›
(
lsq
->
±ø˚_£q
, "öã∫ÆÜd/°",Üsq->
PC
, 0);

4096 
	`±ø˚_√w°age
(
lsq
->
±ø˚_£q
, 
PST_DISPATCH
, 0);

4099 
	`ruu_lök_idï
(
rs
, 0, 
NA
);

4100 
	`ruu_lök_idï
(
rs
, 1, 
ö2
);

4101 
	`ruu_lök_idï
(
rs
, 2, 
ö3
);

4104 
	`ruu_ö°Æl_odï
(
rs
, 0, 
DTMP
);

4105 
	`ruu_ö°Æl_odï
(
rs
, 1, 
NA
);

4108 
	`ruu_lök_idï
(
lsq
,

4109  
STORE_OP_INDEX
 ,

4110 
ö1
);

4111 
	`ruu_lök_idï
(
lsq
,

4112  
STORE_ADDR_INDEX
 ,

4113 
DTMP
);

4114 
	`ruu_lök_idï
(
lsq
, 2, 
NA
);

4117 
	`ruu_ö°Æl_odï
(
lsq
, 0, 
out1
);

4118 
	`ruu_ö°Æl_odï
(
lsq
, 1, 
out2
);

4121 
n_di•©ched
++;

4122 
RUU_èû
 = (RUU_èû + 1Ë% 
RUU_size
;

4123 
RUU_num
++;

4124 
LSQ_èû
 = (LSQ_èû + 1Ë% 
LSQ_size
;

4125 
LSQ_num
++;

4127 i‡(
	`OPERANDS_READY
(
rs
))

4130 
	`ªadyq_íqueue
(
rs
);

4133 
	`RSLINK_INIT
(
œ°_›
, 
lsq
);

4136 i‡(((
	`MD_OP_FLAGS
(
›
Ë& (
F_MEM
|
F_STORE
)) == (F_MEM|F_STORE))

4137 && 
	`OPERANDS_READY
(
lsq
))

4141 
	`ªadyq_íqueue
(
lsq
);

4147 
	`ruu_lök_idï
(
rs
, 0, 
ö1
);

4148 
	`ruu_lök_idï
(
rs
, 1, 
ö2
);

4149 
	`ruu_lök_idï
(
rs
, 2, 
ö3
);

4152 
	`ruu_ö°Æl_odï
(
rs
, 0, 
out1
);

4153 
	`ruu_ö°Æl_odï
(
rs
, 1, 
out2
);

4156 
n_di•©ched
++;

4157 
RUU_èû
 = (RUU_èû + 1Ë% 
RUU_size
;

4158 
RUU_num
++;

4161 i‡(
	`OPERANDS_READY
(
rs
))

4164 
	`ªadyq_íqueue
(
rs
);

4166 
œ°_›
 = 
RSLINK_NULL
;

4171 
	`RSLINK_INIT
(
œ°_›
, 
rs
);

4178 
rs
 = 
NULL
;

4182 
sim_tŸÆ_ö¢
++;

4183 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
)

4184 
sim_tŸÆ_bønches
++;

4186 i‡(!
•ec_mode
)

4190 
sim_num_ö¢
++;

4195 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
)

4197 
sim_num_bønches
++;

4198 i‡(
¥ed
 && 
b¥ed_•ec_upd©e
 =
•ec_ID
)

4200 
	`b¥ed_upd©e
(
¥ed
,

4201  
ªgs
.
ªgs_PC
,

4202  
ªgs
.
ªgs_NPC
,

4203  
ªgs
.
ªgs_NPC
 !‘egs.
ªgs_PC
 +

4204 (
md_ö°_t
)),

4205  
¥ed_PC
 !(
ªgs
.
ªgs_PC
 +

4206 (
md_ö°_t
)),

4207  
¥ed_PC
 =
ªgs
.
ªgs_NPC
,

4208  
›
,

4209  &
rs
->
dú_upd©e
);

4214 i‡(
¥ed_PC
 !
ªgs
.
ªgs_NPC
 && !
„tch_ªdúe˘ed
)

4217 
•ec_mode
 = 
TRUE
;

4218 
rs
->
ªcovî_ö°
 = 
TRUE
;

4219 
ªcovî_PC
 = 
ªgs
.
ªgs_NPC
;

4221 
my_œ°_ö°_mis£d
 = 
FALSE
;

4227 
	`±ø˚_√w°age
(
p£q
, 
PST_DISPATCH
,

4228 (
¥ed_PC
 !
ªgs
.
ªgs_NPC
Ë? 
PEV_MPOCCURED
 : 0);

4229 i‡(
›
 =
MD_NOP_OP
)

4232 
	`±ø˚_ídö°
(
p£q
);

4236 
i
=0; i<
pc°©_√…
; i++)

4238 
cou¡î_t
 
√wvÆ
;

4239 
dñè
;

4242 
√wvÆ
 = 
	`STATVAL
(
pc°©_°©s
[
i
]);

4243 
dñè
 = 
√wvÆ
 - 
pc°©_œ°vÆs
[
i
];

4244 i‡(
dñè
 != 0)

4246 
	`°©_add_ßm∂es
(
pc°©_sdi°s
[
i
], 
ªgs
.
ªgs_PC
, 
dñè
);

4247 
pc°©_œ°vÆs
[
i
] = 
√wvÆ
;

4252 
„tch_hód
 = („tch_hód+1Ë& (
ruu_ifq_size
 - 1);

4253 
„tch_num
--;

4256 
made_check
 = 
TRUE
;

4257 i‡(
	`dlôe_check_bªak
(
¥ed_PC
,

4258 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

4259 
addr
, 
sim_num_ö¢
, 
sim_cy˛e
))

4260 
	`dlôe_maö
(
ªgs
.
ªgs_PC
, 
¥ed_PC
, 
sim_cy˛e
, &ªgs, 
mem
);

4264 i‡(!
made_check
)

4266 i‡(
	`dlôe_check_bªak
( 0,

4267 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

4268 
addr
, 
sim_num_ö¢
, 
sim_cy˛e
))

4269 
	`dlôe_maö
(
ªgs
.
ªgs_PC
, 0, 
sim_cy˛e
, &ªgs, 
mem
);

4271 
	}
}

4280 
	$„tch_öô
()

4283 
„tch_d©a
 =

4284 (
„tch_ªc
 *)
	`ˇŒoc
(
ruu_ifq_size
, (fetch_rec));

4285 i‡(!
„tch_d©a
)

4286 
	`Áèl
("out of virtual memory");

4288 
„tch_num
 = 0;

4289 
„tch_èû
 = 
„tch_hód
 = 0;

4290 
IFQ_cou¡
 = 0;

4291 
IFQ_fcou¡
 = 0;

4292 
	}
}

4296 
	$„tch_dump
(
FILE
 *
°ªam
)

4298 
num
, 
hód
;

4300 i‡(!
°ªam
)

4301 
°ªam
 = 
°dîr
;

4303 
	`Ârötf
(
°ªam
, "** fetch stage state **\n");

4305 
	`Ârötf
(
°ªam
, "•ec_mode: %s\n", 
•ec_mode
 ? "t" : "f");

4306 
	`myÂrötf
(
°ªam
, "pred_PC: 0x%08p,Ñecover_PC: 0x%08p\n",

4307 
¥ed_PC
, 
ªcovî_PC
);

4308 
	`myÂrötf
(
°ªam
, "fetch_regs_PC: 0x%08p, fetch_pred_PC: 0x%08p\n",

4309 
„tch_ªgs_PC
, 
„tch_¥ed_PC
);

4310 
	`Ârötf
(
°ªam
, "\n");

4312 
	`Ârötf
(
°ªam
, "** fetch queue contents **\n");

4313 
	`Ârötf
(
°ªam
, "„tch_num: %d\n", 
„tch_num
);

4314 
	`Ârötf
(
°ªam
, "fetch_head: %d, fetch_tail: %d\n",

4315 
„tch_hód
, 
„tch_èû
);

4317 
num
 = 
„tch_num
;

4318 
hód
 = 
„tch_hód
;

4319 
num
)

4321 
	`Ârötf
(
°ªam
, "idx: %2d: in°: `", 
hód
);

4322 
	`md_¥öt_ö¢
(
„tch_d©a
[
hód
].
IR
, fëch_d©a[hód].
ªgs_PC
, 
°ªam
);

4323 
	`Ârötf
(
°ªam
, "'\n");

4324 
	`myÂrötf
(
°ªam
, "Ñegs_PC: 0x%08p,Öred_PC: 0x%08p\n",

4325 
„tch_d©a
[
hód
].
ªgs_PC
, fëch_d©a[hód].
¥ed_PC
);

4326 
hód
 = (hód + 1Ë& (
ruu_ifq_size
 - 1);

4327 
num
--;

4329 
	}
}

4331 
	gœ°_ö°_mis£d
 = 
FALSE
;

4332 
	gœ°_ö°_tmis£d
 = 
FALSE
;

4337 
	$ruu_„tch
()

4339 
i
, 
œt
, 
éb_œt
, 
d⁄e
 = 
FALSE
;

4340 
md_ö°_t
 
ö°
;

4341 
°ack_ªcovî_idx
;

4342 
bønch_˙t
;

4344 
ef„˘_„tch
 = 0;

4345 
i
=0, 
bønch_˙t
=0;

4347 
i
 < (
ruu_decode_width
 * 
„tch_•ìd
)

4349 && 
„tch_num
 < 
ruu_ifq_size


4351 && !
d⁄e
;

4352 
i
++)

4355 
„tch_ªgs_PC
 = 
„tch_¥ed_PC
;

4358 i‡(
ld_ãxt_ba£
 <
„tch_ªgs_PC


4359 && 
„tch_ªgs_PC
 < (
ld_ãxt_ba£
+
ld_ãxt_size
)

4360 && !(
„tch_ªgs_PC
 & ((
md_ö°_t
)-1)))

4363 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
„tch_ªgs_PC
);

4366 
œt
 = 
ˇche_û1_œt
;

4367 i‡(
ˇche_û1
)

4370 
œt
 =

4371 
	`ˇche_ac˚ss
(
ˇche_û1
, 
Ród
, 
	`IACOMPRESS
(
„tch_ªgs_PC
),

4372 
NULL
, 
	`ISCOMPRESS
((
md_ö°_t
)), 
sim_cy˛e
,

4373 
NULL
, NULL);

4374 i‡(
œt
 > 
ˇche_û1_œt
) {

4375 
œ°_ö°_mis£d
 = 
TRUE
;

4376 i‡(!
•ec_mode
)

4377 
my_œ°_ö°_mis£d
 = 
TRUE
;

4378 
md_addr_t
 
addr
;

4379 
addr
 = 
	`IACOMPRESS
(
„tch_ªgs_PC
);

4389 i‡(
ôlb
)

4393 
éb_œt
 =

4394 
	`ˇche_ac˚ss
(
ôlb
, 
Ród
, 
	`IACOMPRESS
(
„tch_ªgs_PC
),

4395 
NULL
, 
	`ISCOMPRESS
((
md_ö°_t
)), 
sim_cy˛e
,

4396 
NULL
, NULL);

4397 i‡(
éb_œt
 > 1)

4398 
œ°_ö°_tmis£d
 = 
TRUE
;

4401 
œt
 = 
	`MAX
(
éb_œt
,Üat);

4405 i‡(
œt
 !
ˇche_û1_œt
)

4408 
ruu_„tch_issue_dñay
 +
œt
 - 1;

4416 
ö°
 = 
MD_NOP_INST
;

4422 i‡(
¥ed
)

4424 
md_›code
 
›
;

4427 
	`MD_SET_OPCODE
(
›
, 
ö°
);

4432 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
) {

4438 
„tch_¥ed_PC
 =

4439 
	`b¥ed_lookup
(
¥ed
,

4440  
„tch_ªgs_PC
,

4442  
›
,

4443  
	`MD_IS_CALL
(
›
),

4444  
	`MD_IS_RETURN
(
›
),

4445  &(
„tch_d©a
[
„tch_èû
].
dú_upd©e
),

4446  &
°ack_ªcovî_idx
);

4448 
„tch_¥ed_PC
 = 0;

4451 i‡(!
„tch_¥ed_PC
)

4454 
„tch_¥ed_PC
 = 
„tch_ªgs_PC
 + (
md_ö°_t
);

4459 
bønch_˙t
++;

4460 i‡(
bønch_˙t
 >
„tch_•ìd
)

4461 
d⁄e
 = 
TRUE
;

4468 
„tch_¥ed_PC
 = 
„tch_ªgs_PC
 + (
md_ö°_t
);

4472 
„tch_d©a
[
„tch_èû
].
IR
 = 
ö°
;

4473 
„tch_d©a
[
„tch_èû
].
ªgs_PC
 = 
„tch_ªgs_PC
;

4474 
„tch_d©a
[
„tch_èû
].
¥ed_PC
 = 
„tch_¥ed_PC
;

4475 
„tch_d©a
[
„tch_èû
].
°ack_ªcovî_idx
 = stack_recover_idx;

4476 
„tch_d©a
[
„tch_èû
].
±ø˚_£q
 =Ötrace_seq++;

4477 
„tch_d©a
[
„tch_èû
].
iˇche_miss
 = 
my_œ°_ö°_mis£d
;

4479 i‡((
„tch_ªgs_PC
 >
°¨t_addr
Ë&& („tch_ªgs_PC < 
íd_addr
))

4480 
ef„˘_„tch
 = 1;

4483 
	`±ø˚_√wö°
(
„tch_d©a
[
„tch_èû
].
±ø˚_£q
,

4484 
ö°
, 
„tch_d©a
[
„tch_èû
].
ªgs_PC
,

4486 
	`±ø˚_√w°age
(
„tch_d©a
[
„tch_èû
].
±ø˚_£q
,

4487 
PST_IFETCH
,

4488 ((
œ°_ö°_mis£d
 ? 
PEV_CACHEMISS
 : 0)

4489 | (
œ°_ö°_tmis£d
 ? 
PEV_TLBMISS
 : 0)));

4490 
œ°_ö°_mis£d
 = 
FALSE
;

4491 
œ°_ö°_tmis£d
 = 
FALSE
;

4492 
my_œ°_ö°_mis£d
 = 
FALSE
;

4495 
„tch_èû
 = („tch_èû + 1Ë& (
ruu_ifq_size
 - 1);

4496 
„tch_num
++;

4498 
	}
}

4502 
	$simoo_m°©e_obj
(
FILE
 *
°ªam
,

4503 *
cmd
,

4504 
ªgs_t
 *
ªgs
,

4505 
mem_t
 *
mem
)

4507 i‡(!
cmd
 || !
	`°rcmp
(cmd, "help"))

4508 
	`Ârötf
(
°ªam
,

4524 i‡(!
	`°rcmp
(
cmd
, "stats"))

4527 
	`sim_¥öt_°©s
(
°ªam
);

4529 i‡(!
	`°rcmp
(
cmd
, "res"))

4532 
	`ªs_dump
(
fu_poﬁ
, 
°ªam
);

4534 i‡(!
	`°rcmp
(
cmd
, "ruu"))

4537 
	`ruu_dump
(
°ªam
);

4539 i‡(!
	`°rcmp
(
cmd
, "lsq"))

4542 
	`lsq_dump
(
°ªam
);

4544 i‡(!
	`°rcmp
(
cmd
, "eventq"))

4547 
	`evítq_dump
(
°ªam
);

4549 i‡(!
	`°rcmp
(
cmd
, "readyq"))

4552 
	`ªadyq_dump
(
°ªam
);

4554 i‡(!
	`°rcmp
(
cmd
, "cv"))

4557 
	`cv_dump
(
°ªam
);

4559 i‡(!
	`°rcmp
(
cmd
, "rspec"))

4562 
	`r•ec_dump
(
°ªam
);

4564 i‡(!
	`°rcmp
(
cmd
, "mspec"))

4567 
	`m•ec_dump
(
°ªam
);

4569 i‡(!
	`°rcmp
(
cmd
, "fetch"))

4572 
	`„tch_dump
(
°ªam
);

4578  
NULL
;

4579 
	}
}

4584 
	$sim_maö
()

4586 
w˚t_sim_cy˛e
 = 0;

4589 
	`sig«l
(
SIGFPE
, 
SIG_IGN
);

4592 
ªgs
.
ªgs_PC
 = 
ld_¥og_íåy
;

4593 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

4595 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
TRUE
);

4598 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

4599 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.ªgs_PC + (
md_ö°_t
),

4600 
sim_cy˛e
, &
ªgs
, 
mem
);

4604 i‡(
Á°fwd_cou¡
 > 0)

4606 
icou¡
;

4607 
md_ö°_t
 
ö°
;

4608 
md_›code
 
›
;

4609 
md_addr_t
 
èrgë_PC
;

4610 
md_addr_t
 
addr
;

4611 
is_wrôe
;

4612 
byã_t
 
ãmp_byã
 = 0;

4613 
hÆf_t
 
ãmp_hÆf
 = 0;

4614 
w‹d_t
 
ãmp_w‹d
 = 0;

4615 #ifde‡
HOST_HAS_QWORD


4616 
qw‹d_t
 
ãmp_qw‹d
 = 0;

4618 
md_Áu…_ty≥
 
Áu…
;

4620 
	`Ârötf
(
°dîr
, "sim: ** fa° f‹w¨dög %d in°†**\n", 
Á°fwd_cou¡
);

4622 
icou¡
=0; icou¡ < 
Á°fwd_cou¡
; icount++)

4625 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

4626 #ifde‡
TARGET_ALPHA


4627 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

4631 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

4634 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

4637 
Áu…
 = 
md_Áu…_n⁄e
;

4640 
	`MD_SET_OPCODE
(
›
, 
ö°
);

4643 
›
)

4645 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

4646 
OP
: \

4647 
	`SYMCAT
(
OP
,
_IMPL
); \

4648 ;

	)

4649 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

4650 
OP
: \

4651 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

4652 
	#CONNECT
(
OP
)

	)

4653 #unde‡
DECLARE_FAULT


4654 
	#DECLARE_FAULT
(
FAULT
) \

4655 { 
Áu…
 = (
FAULT
); ; }

	)

4656 
	~"machöe.def
"

4658 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

4661 i‡(
Áu…
 !
md_Áu…_n⁄e
)

4662 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

4665 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

4667 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

4668 
is_wrôe
 = 
TRUE
;

4672 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

4673 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

4674 
addr
, 
sim_num_ö¢
, sim_num_insn))

4675 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

4678 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

4679 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

4683 
	`Ârötf
(
°dîr
, "sim: ** startingÖerformance simulation **\n");

4686 
	`£tScheduÀ
(
tdma_sched_fûíame
);

4689 
„tch_ªgs_PC
 = 
ªgs
.
ªgs_PC
 - (
md_ö°_t
);

4690 
„tch_¥ed_PC
 = 
ªgs
.
ªgs_PC
;

4691 
ªgs
.
ªgs_PC
 =Ñegs.ªgs_PC - (
md_ö°_t
);

4698 i‡(
RUU_num
 < 
LSQ_num
)

4699 
	`∑nic
("RUU_num < LSQ_num");

4700 i‡(((
RUU_hód
 + 
RUU_num
Ë% 
RUU_size
Ë!
RUU_èû
)

4701 
	`∑nic
("RUU_head/RUU_tail wedged");

4702 i‡(((
LSQ_hód
 + 
LSQ_num
Ë% 
LSQ_size
Ë!
LSQ_èû
)

4703 
	`∑nic
("LSQ_head/LSQ_tail wedged");

4706 
	`±ø˚_check_a˘ive
(
ªgs
.
ªgs_PC
, 
sim_num_ö¢
, 
sim_cy˛e
);

4709 
	`±ø˚_√wcy˛e
(
sim_cy˛e
);

4712 
	`ruu_commô
();

4715 
	`ruu_ªÀa£_fu
();

4721 
	`ruu_wrôeback
();

4723 i‡(!
bugcom∑t_mode
)

4727 
	`lsq_ª‰esh
();

4731 
	`ruu_issue
();

4736 
	`ruu_di•©ch
();

4738 i‡(
bugcom∑t_mode
)

4742 
	`lsq_ª‰esh
();

4746 
	`ruu_issue
();

4750 i‡(!
ruu_„tch_issue_dñay
)

4751 
	`ruu_„tch
();

4753 
ruu_„tch_issue_dñay
--;

4756 
IFQ_cou¡
 +
„tch_num
;

4757 
IFQ_fcou¡
 +((
„tch_num
 =
ruu_ifq_size
) ? 1 : 0);

4758 
RUU_cou¡
 +
RUU_num
;

4759 
RUU_fcou¡
 +((
RUU_num
 =
RUU_size
) ? 1 : 0);

4760 
LSQ_cou¡
 +
LSQ_num
;

4761 
LSQ_fcou¡
 +((
LSQ_num
 =
LSQ_size
) ? 1 : 0);

4764 
sim_cy˛e
++;

4767 i‡(
ef„˘_commô
)

4768 
ef„˘_cy˛es
++;

4771 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

4776 
	}
}

	@sim-profile.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"lﬂdî.h
"

62 
	~"sysˇŒ.h
"

63 
	~"dlôe.h
"

64 
	~"symbﬁ.h
"

65 
	~"›ti⁄s.h
"

66 
	~"°©s.h
"

67 
	~"sim.h
"

75 
ªgs_t
 
	gªgs
;

78 
mem_t
 *
	gmem
 = 
NULL
;

81 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

84 
	gmax_ö°s
;

87 
	g¥of_Æl
 ;

88 
	g¥of_ic
 ;

89 
	g¥of_ö°
 ;

90 
	g¥of_bc
 ;

91 
	g¥of_am
 ;

92 
	g¥of_£g
 ;

93 
	g¥of_tsyms
 ;

94 
	g¥of_dsyms
 ;

95 
	glﬂd_loˇls
 ;

96 
	g¥of_èddr
 ;

99 
	#MAX_PCSTAT_VARS
 8

	)

100 
	gpc°©_√…
 = 0;

101 *
	gpc°©_v¨s
[
MAX_PCSTAT_VARS
];

105 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

107 
	`›t_ªg_hódî
(
odb
,

114 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

115 &
max_ö°s
, 0,

116  
TRUE
, 
NULL
);

118 
	`›t_ªg_Êag
(
odb
, "-all", "enableállÖrofile options",

119 &
¥of_Æl
, 
FALSE
, 
TRUE
, 
NULL
);

121 
	`›t_ªg_Êag
(
odb
, "-iclass", "enable instruction classÖrofiling",

122 &
¥of_ic
, 
FALSE
, 
TRUE
, 
NULL
);

124 
	`›t_ªg_Êag
(
odb
, "-iprof", "enable instructionÖrofiling",

125 &
¥of_ö°
, 
FALSE
, 
TRUE
, 
NULL
);

127 
	`›t_ªg_Êag
(
odb
, "-brprof", "enable branch instructionÖrofiling",

128 &
¥of_bc
, 
FALSE
, 
TRUE
, 
NULL
);

130 
	`›t_ªg_Êag
(
odb
, "-amprof", "enableáddress modeÖrofiling",

131 &
¥of_am
, 
FALSE
, 
TRUE
, 
NULL
);

133 
	`›t_ªg_Êag
(
odb
, "-segprof", "enableÜoad/storeáddress segmentÖrofiling",

134 &
¥of_£g
, 
FALSE
, 
TRUE
, 
NULL
);

136 
	`›t_ªg_Êag
(
odb
, "-tsymprof", "enableÅext symbolÖrofiling",

137 &
¥of_tsyms
, 
FALSE
, 
TRUE
, 
NULL
);

139 
	`›t_ªg_Êag
(
odb
, "-taddrprof", "enableÅextáddressÖrofiling",

140 &
¥of_èddr
, 
FALSE
, 
TRUE
, 
NULL
);

142 
	`›t_ªg_Êag
(
odb
, "-dsymprof", "enable data symbolÖrofiling",

143 &
¥of_dsyms
, 
FALSE
, 
TRUE
, 
NULL
);

145 
	`›t_ªg_Êag
(
odb
, "-internal",

147 &
lﬂd_loˇls
, 
FALSE
, 
TRUE
, 
NULL
);

149 
	`›t_ªg_°rög_li°
(
odb
, "-pcstat",

151 
pc°©_v¨s
, 
MAX_PCSTAT_VARS
, &
pc°©_√…
, 
NULL
,

152  
FALSE
, 
NULL
, 
TRUE
);

153 
	}
}

157 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

159 i‡(
¥of_Æl
)

162 
¥of_ic
 = 
TRUE
;

163 
¥of_ö°
 = 
TRUE
;

164 
¥of_bc
 = 
TRUE
;

165 
¥of_am
 = 
TRUE
;

166 
¥of_£g
 = 
TRUE
;

167 
¥of_tsyms
 = 
TRUE
;

168 
¥of_dsyms
 = 
TRUE
;

169 
¥of_èddr
 = 
TRUE
;

171 
	}
}

174 
	eö°_˛ass_t
 {

175 
	mic_lﬂd
,

176 
	mic_°‹e
,

177 
	mic_unc⁄d
,

178 
	mic_c⁄d
,

179 
	mic_icomp
,

180 
	mic_fcomp
,

181 
	mic_å≠
,

182 
	mic_NUM


186 *
	gö°_˛ass_°r
[
ic_NUM
] = {

197 
°©_°©_t
 *
	gic_¥of
 = 
NULL
;

200 *
	gö°_°r
[
OP_MAX
];

203 
°©_°©_t
 *
	gö°_¥of
 = 
NULL
;

206 
	ebønch_˛ass_t
 {

207 
	mbc_unc⁄d_dú
,

208 
	mbc_c⁄d_dú
,

209 
	mbc_ˇŒ_dú
,

210 
	mbc_unc⁄d_ödú
,

211 
	mbc_c⁄d_ödú
,

212 
	mbc_ˇŒ_ödú
,

213 
	mbc_NUM


217 *
	gbønch_˛ass_°r
[
bc_NUM
] = {

227 
°©_°©_t
 *
	gbc_¥of
 = 
NULL
;

230 
°©_°©_t
 *
	gam_¥of
 = 
NULL
;

233 
	eaddr_£g_t
 {

234 
	m£g_d©a
,

235 
	m£g_hóp
,

236 
	m£g_°ack
,

237 
	m£g_ãxt
,

238 
	m£g_NUM


242 *
	gaddr_£g_°r
[
£g_NUM
] = {

250 
°©_°©_t
 *
	g£g_¥of
 = 
NULL
;

253 
addr_£g_t


254 
	$böd_to_£g
(
md_addr_t
 
addr
)

256 i‡(
ld_d©a_ba£
 <
addr
 &&ádd∏< (ld_d©a_ba£ + 
ld_d©a_size
))

257  
£g_d©a
;

258 i‡((
ld_d©a_ba£
 + 
ld_d©a_size
Ë<
addr
 &&ádd∏< 
ld_brk_poöt
)

259  
£g_hóp
;

261 i‡((
ld_°ack_ba£
 - (16*1024*1024)Ë<
addr
 &&áddr <Üd_stack_base)

262  
£g_°ack
;

263 i‡(
ld_ãxt_ba£
 <
addr
 &&ádd∏< (ld_ãxt_ba£ + 
ld_ãxt_size
))

264  
£g_ãxt
;

266 
	`∑nic
("cannot bindáddressÅo segment");

267 
	}
}

270 
°©_°©_t
 *
	gtsym_¥of
 = 
NULL
;

271 **
	gtsym_«mes
 = 
NULL
;

274 
°©_°©_t
 *
	gdsym_¥of
 = 
NULL
;

275 **
	gdsym_«mes
 = 
NULL
;

278 
°©_°©_t
 *
	gèddr_¥of
 = 
NULL
;

281 
°©_°©_t
 *
	gpc°©_°©s
[
MAX_PCSTAT_VARS
];

282 
cou¡î_t
 
	gpc°©_œ°vÆs
[
MAX_PCSTAT_VARS
];

283 
°©_°©_t
 *
	gpc°©_sdi°s
[
MAX_PCSTAT_VARS
];

286 
	#STATVAL
(
STAT
) \

287 ((
STAT
)->
sc
 =
sc_öt
 \

288 ? (
cou¡î_t
)*((
STAT
)->
v¨ü¡
.
f‹_öt
.
v¨
) \

289 : ((
STAT
)->
sc
 =
sc_uöt
 \

290 ? (
cou¡î_t
)*((
STAT
)->
v¨ü¡
.
f‹_uöt
.
v¨
) \

291 : ((
STAT
)->
sc
 =
sc_cou¡î
 \

292 ? *((
STAT
)->
v¨ü¡
.
f‹_cou¡î
.
v¨
) \

293 : (
	`∑nic
("bad sèà˛ass"), 0))))

	)

297 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

299 
i
;

301 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

303 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

304 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

306 &
sim_num_ªfs
, 0, 
NULL
);

307 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

309 &
sim_ñ≠£d_time
, 0, 
NULL
);

310 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

312 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

314 i‡(
¥of_ic
)

317 
ic_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_inst_class_prof",

320  
ic_NUM
,

322  (
PF_COUNT
|
PF_PDF
),

323  
NULL
,

324  
ö°_˛ass_°r
,

325  
NULL
);

328 i‡(
¥of_ö°
)

330 
i
;

331 
buf
[512];

334 
i
=0; i < 
OP_MAX
-1; i++)

336 
	`•rötf
(
buf
, "%-8†%-6s", 
md_›2«me
[
i
+1], 
md_›2f‹m©
[i+1]);

337 
ö°_°r
[
i
] = 
	`my°rdup
(
buf
);

341 
ö°_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_inst_prof",

344  
OP_MAX
-1,

346  (
PF_COUNT
|
PF_PDF
),

347  
NULL
,

348  
ö°_°r
,

349  
NULL
);

352 i‡(
¥of_bc
)

355 
bc_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_branch_prof",

358  
bc_NUM
,

360  (
PF_COUNT
|
PF_PDF
),

361  
NULL
,

362  
bønch_˛ass_°r
,

363  
NULL
);

366 i‡(
¥of_am
)

369 
am_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_addr_mode_prof",

372  
md_amode_NUM
,

374  (
PF_COUNT
|
PF_PDF
),

375  
NULL
,

376  
md_amode_°r
,

377  
NULL
);

380 i‡(
¥of_£g
)

383 
£g_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_addr_seg_prof",

386  
£g_NUM
,

388  (
PF_COUNT
|
PF_PDF
),

389  
NULL
,

390  
addr_£g_°r
,

391  
NULL
);

394 i‡(
¥of_tsyms
 && 
sym_¡extsyms
 != 0)

396 
i
;

399 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
lﬂd_loˇls
);

402 
tsym_«mes
 = (**)
	`ˇŒoc
(
sym_¡extsyms
, (*));

404 
i
=0; i < 
sym_¡extsyms
; i++)

405 
tsym_«mes
[
i
] = 
sym_ãxtsyms
[i]->
«me
;

408 
tsym_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_text_sym_prof",

411  
sym_¡extsyms
,

413  (
PF_COUNT
|
PF_PDF
),

414  
NULL
,

415  
tsym_«mes
,

416  
NULL
);

419 i‡(
¥of_dsyms
 && 
sym_nd©asyms
 != 0)

421 
i
;

424 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
lﬂd_loˇls
);

427 
dsym_«mes
 = (**)
	`ˇŒoc
(
sym_nd©asyms
, (*));

429 
i
=0; i < 
sym_nd©asyms
; i++)

430 
dsym_«mes
[
i
] = 
sym_d©asyms
[i]->
«me
;

433 
dsym_¥of
 = 
	`°©_ªg_di°
(
sdb
, "sim_data_sym_prof",

436  
sym_nd©asyms
,

438  (
PF_COUNT
|
PF_PDF
),

439  
NULL
,

440  
dsym_«mes
,

441  
NULL
);

444 i‡(
¥of_èddr
)

450 
èddr_¥of
 = 
	`°©_ªg_sdi°
(
sdb
, "sim_text_addr_prof",

453  (
PF_COUNT
|
PF_PDF
),

455  
NULL
);

458 
i
=0; i<
pc°©_√…
; i++)

460 
buf
[512], 
buf1
[512];

461 
°©_°©_t
 *
°©
;

466 
°©
 = 
	`°©_föd_°©
(
sdb
, 
pc°©_v¨s
[
i
]);

467 i‡(!
°©
)

468 
	`Áèl
("ˇ¬ŸÜoˇãány sèti°i¯«med `%s'", 
pc°©_v¨s
[
i
]);

471 i‡(
°©
->
sc
 !
sc_öt
 && sèt->s¯!
sc_uöt
 && sèt->s¯!
sc_cou¡î
)

472 
	`Áèl
("`-pcstat' statistical variable `%s' isÇotán integralÅype",

473 
°©
->
«me
);

476 
pc°©_°©s
[
i
] = 
°©
;

477 
pc°©_œ°vÆs
[
i
] = 
	`STATVAL
(
°©
);

480 
	`•rötf
(
buf
, "%s_by_pc", 
°©
->
«me
);

481 
	`•rötf
(
buf1
, "%†(byÅexàaddªss)", 
°©
->
desc
);

482 
pc°©_sdi°s
[
i
] = 
	`°©_ªg_sdi°
(
sdb
, 
buf
, 
buf1
,

484  (
PF_COUNT
|
PF_PDF
),

486  
NULL
);

488 
	`ld_ªg_°©s
(
sdb
);

489 
	`mem_ªg_°©s
(
mem
, 
sdb
);

490 
	}
}

494 
	$sim_öô
()

496 
sim_num_ªfs
 = 0;

499 
	`ªgs_öô
(&
ªgs
);

502 
mem
 = 
	`mem_¸óã
("mem");

503 
	`mem_öô
(
mem
);

504 
	}
}

508 
	$¥ofûe_m°©e_obj
(
FILE
 *
°ªam
,

509 *
cmd
,

510 
ªgs_t
 *
ªgs
,

511 
mem_t
 *
mem
)

514 
	`sim_¥öt_°©s
(
°ªam
);

517  
NULL
;

518 
	}
}

522 
	$sim_lﬂd_¥og
(*
‚ame
,

523 
¨gc
, **
¨gv
,

524 **
ívp
)

527 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

530 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
¥ofûe_m°©e_obj
);

531 
	}
}

536 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

539 
	}
}

543 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

545 
	}
}

549 
	$sim_unöô
()

552 
	}
}

564 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

567 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

570 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

571 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

573 #i‡
deföed
(
TARGET_PISA
)

576 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

577 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

578 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

579 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

580 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

581 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

584 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

585 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

586 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

587 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

588 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

589 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

591 #ñi‡
deföed
(
TARGET_ALPHA
)

594 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

595 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

596 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[N])

	)

597 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[N] = (EXPR))

	)

600 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

601 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

602 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

603 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

606 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

610 
	#READ_BYTE
(
SRC
, 
FAULT
) \

611 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

612 
	#READ_HALF
(
SRC
, 
FAULT
) \

613 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

614 
	#READ_WORD
(
SRC
, 
FAULT
) \

615 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

616 #ifde‡
HOST_HAS_QWORD


617 
	#READ_QWORD
(
SRC
, 
FAULT
) \

618 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

621 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

622 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

623 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

624 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

625 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

626 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

627 #ifde‡
HOST_HAS_QWORD


628 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

629 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

633 
	#SYSCALL
(
INST
Ë
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, INST, 
TRUE
)

	)

637 
	gfsm
 = 0;

641 
	$sim_maö
()

643 
i
;

644 
md_ö°_t
 
ö°
;

645 
md_addr_t
 
addr
;

646 
is_wrôe
;

647 
md_›code
 
›
;

648 
Êags
;

649 
md_Áu…_ty≥
 
Áu…
;

651 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation **\n");

654 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

657 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

658 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),Ñegs.regs_PC,

659 
sim_num_ö¢
, &
ªgs
, 
mem
);

661 
TRUE
)

664 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

665 #ifde‡
TARGET_ALPHA


666 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

670 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

672 i‡(
vîbo£
)

674 
	`myÂrötf
(
°dîr
, "%10¿@ 0x%08p: ", 
sim_num_ö¢
, 
ªgs
.
ªgs_PC
);

675 
	`md_¥öt_ö¢
(
ö°
, 
ªgs
.
ªgs_PC
, 
°dîr
);

676 
	`Ârötf
(
°dîr
, "\n");

681 
sim_num_ö¢
++;

684 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

687 
Áu…
 = 
md_Áu…_n⁄e
;

690 
	`MD_SET_OPCODE
(
›
, 
ö°
);

693 
›
)

695 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

696 
OP
: \

697 
	`SYMCAT
(
OP
,
_IMPL
); \

698 ;

	)

699 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

700 
OP
: \

701 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

702 
	#CONNECT
(
OP
)

	)

703 
	#DECLARE_FAULT
(
FAULT
) \

704 { 
Áu…
 = (
FAULT
); ; }

	)

705 
	~"machöe.def
"

707 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

710 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

712 
sim_num_ªfs
++;

713 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

714 
is_wrôe
 = 
TRUE
;

720 
Êags
 = 
	`MD_OP_FLAGS
(
›
);

722 i‡(
¥of_ic
)

724 
ö°_˛ass_t
 
ic
;

727 i‡(
Êags
 & 
F_LOAD
)

728 
ic
 = 
ic_lﬂd
;

729 i‡(
Êags
 & 
F_STORE
)

730 
ic
 = 
ic_°‹e
;

731 i‡(
Êags
 & 
F_UNCOND
)

732 
ic
 = 
ic_unc⁄d
;

733 i‡(
Êags
 & 
F_COND
)

734 
ic
 = 
ic_c⁄d
;

735 i‡(
Êags
 & 
F_ICOMP
)

736 
ic
 = 
ic_icomp
;

737 i‡(
Êags
 & 
F_FCOMP
)

738 
ic
 = 
ic_fcomp
;

739 i‡(
Êags
 & 
F_TRAP
)

740 
ic
 = 
ic_å≠
;

742 
	`∑nic
("instruction hasÇo class");

745 
	`°©_add_ßm∂e
(
ic_¥of
, ()
ic
);

748 i‡(
¥of_ö°
)

751 
	`°©_add_ßm∂e
(
ö°_¥of
, ()
›
 - 1);

754 i‡(
¥of_bc
)

756 
bønch_˛ass_t
 
bc
;

759 i‡(
Êags
 & 
F_CTRL
)

761 i‡((
Êags
 & (
F_CALL
|
F_DIRJMP
)) == (F_CALL|F_DIRJMP))

762 
bc
 = 
bc_ˇŒ_dú
;

763 i‡((
Êags
 & (
F_CALL
|
F_INDIRJMP
)) == (F_CALL|F_INDIRJMP))

764 
bc
 = 
bc_ˇŒ_ödú
;

765 i‡((
Êags
 & (
F_UNCOND
|
F_DIRJMP
)) == (F_UNCOND|F_DIRJMP))

766 
bc
 = 
bc_unc⁄d_dú
;

767 i‡((
Êags
 & (
F_UNCOND
|
F_INDIRJMP
))== (F_UNCOND|F_INDIRJMP))

768 
bc
 = 
bc_unc⁄d_ödú
;

769 i‡((
Êags
 & (
F_COND
|
F_DIRJMP
)) == (F_COND|F_DIRJMP))

770 
bc
 = 
bc_c⁄d_dú
;

771 i‡((
Êags
 & (
F_COND
|
F_INDIRJMP
)) == (F_COND|F_INDIRJMP))

772 
bc
 = 
bc_c⁄d_ödú
;

774 
	`∑nic
("branch hasÇo class");

777 
	`°©_add_ßm∂e
(
bc_¥of
, ()
bc
);

781 i‡(
¥of_am
)

783 
md_amode_ty≥
 
am
;

786 
	`MD_AMODE_PREPROBE
(
›
, 
fsm
);

789 i‡(
Êags
 & 
F_MEM
)

792 
	`MD_AMODE_PROBE
(
am
, 
›
, 
fsm
);

795 
	`°©_add_ßm∂e
(
am_¥of
, ()
am
);

798 
	`MD_AMODE_POSTPROBE
(
fsm
);

802 i‡(
¥of_£g
)

804 i‡(
Êags
 & 
F_MEM
)

807 
	`°©_add_ßm∂e
(
£g_¥of
, ()
	`böd_to_£g
(
addr
));

811 i‡(
¥of_tsyms
)

813 
tödex
;

816 
	`sym_böd_addr
(
ªgs
.
ªgs_PC
, &
tödex
, 
FALSE
, 
sdb_ãxt
);

818 i‡(
tödex
 >= 0)

820 i‡(
tödex
 > 
sym_¡extsyms
)

821 
	`∑nic
("bogusÅext symbol index");

823 
	`°©_add_ßm∂e
(
tsym_¥of
, 
tödex
);

828 i‡(
¥of_dsyms
)

830 
dödex
;

832 i‡(
Êags
 & 
F_MEM
)

835 
	`sym_böd_addr
(
addr
, &
dödex
, 
FALSE
, 
sdb_d©a
);

837 i‡(
dödex
 >= 0)

839 i‡(
dödex
 > 
sym_nd©asyms
)

840 
	`∑nic
("bogus data symbol index");

842 
	`°©_add_ßm∂e
(
dsym_¥of
, 
dödex
);

848 i‡(
¥of_èddr
)

851 
	`°©_add_ßm∂e
(
èddr_¥of
, 
ªgs
.
ªgs_PC
);

855 
i
=0; i<
pc°©_√…
; i++)

857 
cou¡î_t
 
√wvÆ
;

858 
dñè
;

861 
√wvÆ
 = 
	`STATVAL
(
pc°©_°©s
[
i
]);

862 
dñè
 = 
√wvÆ
 - 
pc°©_œ°vÆs
[
i
];

863 i‡(
dñè
 != 0)

865 
	`°©_add_ßm∂es
(
pc°©_sdi°s
[
i
], 
ªgs
.
ªgs_PC
, 
dñè
);

866 
pc°©_œ°vÆs
[
i
] = 
√wvÆ
;

872 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

873 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

874 
addr
, 
sim_num_ö¢
, sim_num_insn))

875 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

878 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

879 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

882 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

885 
	}
}

	@sim-safe-new.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"lﬂdî.h
"

62 
	~"sysˇŒ.h
"

63 
	~"dlôe.h
"

64 
	~"›ti⁄s.h
"

65 
	~"°©s.h
"

66 
	~"sim.h
"

76 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

79 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

82 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

83 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

85 #i‡
deföed
(
TARGET_PISA
)

88 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

89 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

90 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

91 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

92 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

93 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

96 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

97 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

98 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

99 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

100 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

101 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

103 #ñi‡
deföed
(
TARGET_ALPHA
)

106 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

107 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

108 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(N)])

	)

109 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(N)] = (EXPR))

	)

112 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

113 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

114 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

115 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

118 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

122 
	#READ_BYTE
(
SRC
, 
FAULT
) \

123 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

124 
	#READ_HALF
(
SRC
, 
FAULT
) \

125 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

126 
	#READ_WORD
(
SRC
, 
FAULT
) \

127 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

128 #ifde‡
HOST_HAS_QWORD


129 
	#READ_QWORD
(
SRC
, 
FAULT
) \

130 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

133 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

134 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

135 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

136 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

137 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

138 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

139 #ifde‡
HOST_HAS_QWORD


140 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

141 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

145 
	#SYSCALL
(
INST
Ë
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, INST, 
TRUE
)

	)

148 
ªgs_t
 
	gªgs
;

151 
mem_t
 *
	gmem
 = 
NULL
;

154 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

157 
	gmax_ö°s
;

161 *
ö°_˙ts
;

163 
	#CALL_STACK_SIZE
 32

	)

164 
	#TAKEN
 1

	)

165 
	#NOT_TAKEN
 0

	)

166 
	#rshi·
(
x
, 
b
Ë(((Ë(x)Ë>> (b))

	)

167 
	#CACHE_LINE
(
addr
Ë(
	`rshi·
((◊ddrË<< 
CACHE_TAG_BITS
), \

168 (
CACHE_TAG_BITS
 + 
CACHE_LINE_BITS
)))

	)

169 
	#CACHE_LINE_TAG
(
addr
Ë(
	`rshi·
(◊ddr), (32 - 
CACHE_TAG_BITS
)))

	)

170 
	#IS_CACHE_MISS
(
addr
Ë(
ˇche_èbÀ
[
	`CACHE_LINE
(addr)] != \

171 
	`CACHE_LINE_TAG
(
addr
))

	)

172 
	#SPC
 (
•ec_PC
)

	)

173 
	#SET_SPC
(
x
Ë(
SPC
 = (xË? ((
CPC
 + 8 + (
OFS
 << 2))) : \

174 (
CPC
 + (
md_ö°_t
)))

	)

176 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

179 *
	g¥ed_ty≥
;

182 
	gtwﬁev_√…
 = 4;

183 
	gtwﬁev_c⁄fig
[4] =

184 { 1, 128, 3, 
TRUE
};

186 íum {
	m≥r„˘
, 
	mGAg
, 
	mgsh¨e
, 
	mloˇl
};

187 
	gb¥ed_scheme
;

188 
	gb¥ed_èbÀ_bôs
 = 0;

189 
	ghi°‹y_bôs
;

190 
	gBPRED_TABLE_SIZE
;

191 
	gP_MASK
, 
	gH_MASK
;

192 
	gBPENALTY
 = 5;

194 *
	gb¥ed_miss
;

195 *
	gb¥ed_èbÀ
;

196 
	ghi°‹y_ªgi°î
 = 0;

197 
	gbønch_cou¡
 = 0;

200 *
	gˇche_û1_›t
;

202 
	gíabÀ_iˇche
 = 0;

203 
	gCACHE_LINE_SIZE
;

204 
	gCACHE_SET_NUM
;

205 
	gCACHE_LINE_BITS
;

206 
	gCACHE_TAG_BITS
;

207 
	gCPENALTY
 = 10;

209 *
	gˇche_miss
;

210 *
	gˇche_èbÀ
;

211 
	gˇche_blockög_cou¡
;

212 *
	gˇche_blockög
;

213 
	gˇche_blockög_dñay
;

216 
	gcode_ö°s
 = 0;

217 
	gmy_ö¢_cou¡
 = 0;

219 
ef„˘_cy˛es
;

220 
ef„˘_b¥ed_mis£s
;

221 
ef„˘_iˇche_mis£s
;

223 
	#CALL_STACK_SIZE
 32

	)

224 
md_addr_t
 
	gˇŒ_°ack
[
CALL_STACK_SIZE
];

225 
	gˇŒ_Àvñ
 = 0;

227 
	$öt_log2
(
i
)

229 
b
;

231 
b
 = 0; 
i
; b++)

232 
i
 >>= 1;

233  
b
;

234 
	}
}

238 
	$mask
(
n
)

240 
i
 = 0;

242 i‡((
n
 < 0) || (n >= 32))

245 
n
 > 0) {

246 
i
 = (ò<< 1Ë+ 1; 
n
--;

248  
i
;

249 
	}
}

254 
	$¸óã_my_b¥ed
()

257 
i
;

259 
bønch_cou¡
 = 0;

260 
my_ö¢_cou¡
 = 0;

261 
ef„˘_b¥ed_mis£s
 = 0;

262 
hi°‹y_ªgi°î
 = 0;

263 
b¥ed_miss
 = (*Ë
	`ˇŒoc
(1024, ());

264 
b¥ed_èbÀ
 = (*)
	`ˇŒoc
(
BPRED_TABLE_SIZE
,

267 
i
=0; i<
BPRED_TABLE_SIZE
; i++)

268 
b¥ed_èbÀ
[
i
] = 0;

269 
i
=0; i<1024; i++)

270 
b¥ed_miss
[
i
] = 0;

272 
i
=0; i<
MAX_CODE_SIZE
; i++)

273 
ö°_˙ts
[
i
] = 0;

275 
	}
}

279 
	$lookup_my_b¥ed
(
md_addr_t
 
cuºít
, md_addr_à
èrgë
)

281 
outcome
, 
¥edi˘i⁄
;

282 
ödex
;

285 
bønch_cou¡
++;

286 i‡(
èrgë
 =
cuºít
 + (
md_ö°_t
))

287 
outcome
 = 
NOT_TAKEN
;

289 
outcome
 = 
TAKEN
;

291 
b¥ed_scheme
) {

292 
GAg
:

293 
ödex
 = 
hi°‹y_ªgi°î
;

295 
gsh¨e
:

298 
ödex
 = (
hi°‹y_ªgi°î
 << (
b¥ed_èbÀ_bôs
 - 
hi°‹y_bôs
))

299 ^ (
	`rshi·
(
cuºít
, 3));

301 
loˇl
:

302 
ödex
 = 
	`rshi·
(
cuºít
, 3);

305 
ödex
 &
P_MASK
;

307 
¥edi˘i⁄
 = 
b¥ed_èbÀ
[
ödex
];

308 i‡(
¥edi˘i⁄
 !
outcome
){

309 
ef„˘_b¥ed_mis£s
++;

310 
b¥ed_miss
[
	`rshi·
(
cuºít
 - 
°¨t_addr
, 3)]++;

311 
b¥ed_èbÀ
[
ödex
] = 
outcome
;

313 
hi°‹y_ªgi°î
 = ((hi°‹y_ªgi°î << 1Ë| 
outcome
Ë& 
H_MASK
;

315  (
¥edi˘i⁄
 !
outcome
);

316 
	}
}

320 
	$•ec_exec
(
md_ö°_t
 
ö°
, 
x
)

322 
md_addr_t
 
•ec_PC
;

323 
md_›code
 
›
;

324 
˛ocks_À·
 = 
BPENALTY
;

325 
s_ˇŒ_Àvñ
 = 
ˇŒ_Àvñ
;

326 
Àn
, 
i
;

327 
md_addr_t
 
backup_ˇŒ_°ack
[
BPENALTY
];

331 
Àn
 = (
BPENALTY
 >
ˇŒ_Àvñ
) ? call_level : BPENALTY;

332 
i
 = 0; i < 
Àn
; i++)

333 
backup_ˇŒ_°ack
[
i
] = 
ˇŒ_°ack
[
ˇŒ_Àvñ
 - 
Àn
 + i];

335 
	`SET_SPC
(
x
);

336 
˛ocks_À·
 > 0) {

337 i‡((
•ec_PC
 >
°¨t_addr
Ë&& (•ec_PC < 
íd_addr
)) {

341 i‡(
íabÀ_iˇche
 && 
	`IS_CACHE_MISS
(
•ec_PC
)) {

342 
ˇche_blockög
[
	`rshi·
(
ªgs
.
ªgs_PC
 - 
°¨t_addr
, 3)]++;

343 
ˇche_blockög_cou¡
++;

344 
ˇche_blockög_dñay
 +(
CPENALTY
 - 
˛ocks_À·
);

345 
ˇche_èbÀ
[
	`CACHE_LINE
(
•ec_PC
)] = 
	`CACHE_LINE_TAG
(spec_PC);

346 
˛ocks_À·
 = 0;

350 
˛ocks_À·
 = 0;

353 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
•ec_PC
);

355 
	`MD_SET_OPCODE
(
›
, 
ö°
);

356 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
) {

357 
›
) {

358 
JAL
:

359 
ˇŒ_°ack
[
s_ˇŒ_Àvñ
] = 
•ec_PC
 + (
md_ö°_t
);

360 
s_ˇŒ_Àvñ
++;

361 
JUMP
:

362 
•ec_PC
 = ((
SPC
 & 036000000000Ë| (
TARG
 << 2));

363 
˛ocks_À·
--;

365 
JR
:

366 
s_ˇŒ_Àvñ
--;

367 
•ec_PC
 = 
ˇŒ_°ack
[
s_ˇŒ_Àvñ
];

368 
˛ocks_À·
--;

371 
˛ocks_À·
 = 0;

375 
•ec_PC
 +(
md_ö°_t
);

376 
˛ocks_À·
--;

381 
i
 = 0; i < 
Àn
; i++)

382 
ˇŒ_°ack
[
ˇŒ_Àvñ
 - 
Àn
 + 
i
] = 
backup_ˇŒ_°ack
[i];

384 
	}
}

387 
	$öô_ˇche
()

389 
ef„˘_iˇche_mis£s
 = 0;

390 
ˇche_blockög_cou¡
 = 0;

391 
ˇche_blockög_dñay
 = 0;

392 
CACHE_LINE_BITS
 = 
	`öt_log2
(
CACHE_LINE_SIZE
) - 1;

393 
CACHE_TAG_BITS
 = 32 - (
	`öt_log2
(
CACHE_SET_NUM
Ë- 1Ë- 
CACHE_LINE_BITS
;

395 
ˇche_miss
 = (*Ë
	`ˇŒoc
(
code_ö°s
, ());

396 
ˇche_blockög
 = (*Ë
	`ˇŒoc
(
code_ö°s
, ());

397 
ˇche_èbÀ
 = (*)
	`ˇŒoc
(
CACHE_SET_NUM
, ());

399 
	}
}

406 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

408 
	`›t_ªg_hódî
(
odb
,

417 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

418 &
max_ö°s
, 0,

419  
TRUE
, 
NULL
);

422 
	`›t_ªg_°rög
(
odb
, "-bpred",

424 &
¥ed_ty≥
, "2lev",

425  
TRUE
, 
NULL
);

427 
	`›t_ªg_öt_li°
(
odb
, "-bpred:2lev",

430 
twﬁev_c⁄fig
, 
twﬁev_√…
, &twolev_nelt,

431  
twﬁev_c⁄fig
,

432  
TRUE
, 
NULL
, 
FALSE
);

434 
	`›t_ªg_°rög
(
odb
, "-cache:il1",

436 &
ˇche_û1_›t
, "il1:32:32:1:l",

437  
TRUE
, 
NULL
);

439 
	`¥ötf
("b¥ed_ty≥: %s\n", 
¥ed_ty≥
);

440 
	`¥ötf
("-b¥ed:2Àv: %d %d %d %d\n", 
twﬁev_c⁄fig
[0],Åwolev_config[1],

441 
twﬁev_c⁄fig
[2],Åwolev_config[3]);

442 
	`¥ötf
("-ˇche:û1: %s\n", 
ˇche_û1_›t
);

446 
	}
}

450 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

454 
assoc
;

455 
«me
[128], 
c
;

457 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "perfect")) {

459 
b¥ed_scheme
 = 
≥r„˘
;

460 } i‡(!
	`my°ricmp
(
¥ed_ty≥
, "2lev")) {

461 
b¥ed_èbÀ_bôs
 = 
	`öt_log2
(
twﬁev_c⁄fig
[1]) - 1;

462 
hi°‹y_bôs
 = 
twﬁev_c⁄fig
[2];

463 i‡(
hi°‹y_bôs
 == 0) {

464 
b¥ed_scheme
 = 
loˇl
;

465 } i‡(
twﬁev_c⁄fig
[3] =
TRUE
) {

466 
b¥ed_scheme
 = 
gsh¨e
;

468 
b¥ed_scheme
 = 
GAg
;

469 
b¥ed_èbÀ_bôs
 = 
hi°‹y_bôs
;

471 
BPRED_TABLE_SIZE
 = 
twﬁev_c⁄fig
[1];

473 
P_MASK
 = 
	`mask
(
b¥ed_èbÀ_bôs
);

474 
H_MASK
 = 
	`mask
(
hi°‹y_bôs
);

476 
	`¥ötf
("b¥ed_scheme: %d\n", 
b¥ed_scheme
);

477 
	`¥ötf
("b¥ed_èbÀ_bôs: %d\n", 
b¥ed_èbÀ_bôs
);

478 
	`¥ötf
("hi°‹y_bôs: %d\n", 
hi°‹y_bôs
);

480 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "none")) {

481 
íabÀ_iˇche
 = 0;

483 
íabÀ_iˇche
 = 1;

484 i‡(
	`ssˇnf
(
ˇche_û1_›t
, "%[^:]:%d:%d:%d:%c",

485 
«me
, &
CACHE_SET_NUM
, &
CACHE_LINE_SIZE
, &
assoc
, &
c
) != 5) {

486 
	`Ârötf
(
°dîr
, "wrong cache configuration!\n");

487 
	`exô
(1);

491 
	`¥ötf
("CACHE_SET_NUM: %d\n", 
CACHE_SET_NUM
);

492 
	`¥ötf
("CACHE_LINE_SIZE: %d\n", 
CACHE_LINE_SIZE
);

495 
	}
}

499 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

501 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

503 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

504 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

506 &
sim_num_ªfs
, 0, 
NULL
);

507 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

509 &
sim_ñ≠£d_time
, 0, 
NULL
);

510 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

512 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

513 
	`ld_ªg_°©s
(
sdb
);

514 
	`mem_ªg_°©s
(
mem
, 
sdb
);

515 
	}
}

519 
	$sim_öô
()

521 
sim_num_ªfs
 = 0;

524 
	`ªgs_öô
(&
ªgs
);

527 
mem
 = 
	`mem_¸óã
("mem");

528 
	`mem_öô
(
mem
);

529 
	}
}

533 
	$sim_lﬂd_¥og
(*
‚ame
,

534 
¨gc
, **
¨gv
,

535 **
ívp
)

538 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

541 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
dlôe_m°©e_obj
);

542 
	}
}

546 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

549 
	}
}

553 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

556 
	}
}

560 
	$sim_unöô
()

563 
	}
}

576 
	$sim_maö
()

578 
md_ö°_t
 
ö°
;

579 
md_addr_t
 
addr
;

580 
md_›code
 
›
;

581 
is_wrôe
;

582 
md_Áu…_ty≥
 
Áu…
;

584 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation **\n");

587 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

591 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
TRUE
);

592 
code_ö°s
 = (
íd_addr
 - 
°¨t_addr
Ë/ (
md_ö°_t
);

594 i‡(
b¥ed_scheme
 !
≥r„˘
)

595 
	`¸óã_my_b¥ed
();

596 i‡(
íabÀ_iˇche
)

597 
	`öô_ˇche
();

598 
	`Ârötf
(
°dîr
, "íabÀ_iˇche: %d\n", 
íabÀ_iˇche
);

603 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

604 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),

605 
ªgs
.
ªgs_PC
, 
sim_num_ö¢
, &ªgs, 
mem
);

607 
TRUE
)

610 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

611 #ifde‡
TARGET_ALPHA


612 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

616 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

619 
sim_num_ö¢
++;

622 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

625 
Áu…
 = 
md_Áu…_n⁄e
;

628 
	`MD_SET_OPCODE
(
›
, 
ö°
);

631 
›
)

633 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

634 
OP
: \

635 
	`SYMCAT
(
OP
,
_IMPL
); \

636 ;

	)

637 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

638 
OP
: \

639 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

640 
	#CONNECT
(
OP
)

	)

641 
	#DECLARE_FAULT
(
FAULT
) \

642 { 
Áu…
 = (
FAULT
); ; }

	)

643 
	~"machöe.def
"

645 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

648 i‡(
Áu…
 !
md_Áu…_n⁄e
)

649 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

651 i‡(
vîbo£
)

653 
	`myÂrötf
(
°dîr
, "%10n [xor: 0x%08x] @ 0x%08p: ",

654 
sim_num_ö¢
, 
	`md_x‹_ªgs
(&
ªgs
),Ñegs.
ªgs_PC
);

655 
	`md_¥öt_ö¢
(
ö°
, 
ªgs
.
ªgs_PC
, 
°dîr
);

656 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

657 
	`myÂrötf
(
°dîr
, " mem: 0x%08p", 
addr
);

658 
	`Ârötf
(
°dîr
, "\n");

662 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

664 
sim_num_ªfs
++;

665 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

666 
is_wrôe
 = 
TRUE
;

670 i‡((
ªgs
.
ªgs_PC
 >
°¨t_addr
Ë&& (ªgs.ªgs_PC < 
íd_addr
)) {

671 
my_ö¢_cou¡
++;

672 
ö°_˙ts
[
	`rshi·
(
ªgs
.
ªgs_PC
 - 
°¨t_addr
, 3)]++;

675 i‡(
íabÀ_iˇche
 && 
	`IS_CACHE_MISS
(
ªgs
.
ªgs_PC
)) {

676 
ˇche_èbÀ
[
	`CACHE_LINE
(
ªgs
.
ªgs_PC
)] = 
	`CACHE_LINE_TAG
(regs.regs_PC);

677 
ˇche_miss
[
	`rshi·
(
ªgs
.
ªgs_PC
 - 
°¨t_addr
, 3)]++;

678 
ef„˘_iˇche_mis£s
++;

682 i‡((
b¥ed_scheme
 !
≥r„˘
Ë&& (
	`MD_OP_FLAGS
(
›
Ë& 
F_COND
)) {

683 i‡(
	`lookup_my_b¥ed
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
))

684 
	`•ec_exec
(
ö°
, (
ªgs
.
ªgs_NPC
 =‘egs.
ªgs_PC
 + (
md_ö°_t
))));

688 i‡(
›
 =
JAL
) {

689 
ˇŒ_°ack
[
ˇŒ_Àvñ
] = 
ªgs
.
ªgs_PC
 + (
md_ö°_t
);

690 i‡((
ªgs
.
ªgs_NPC
 >
°¨t_addr
Ë&& (ªgs.ªgs_NPC < 
íd_addr
))

691 
ˇŒ_Àvñ
++;

694 i‡(
›
 =
JR
Ë
ˇŒ_Àvñ
--;

700 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

701 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

702 
addr
, 
sim_num_ö¢
, sim_num_insn))

703 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

706 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

707 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

709 
ef„˘_cy˛es
 = 
my_ö¢_cou¡
;

710 
ef„˘_cy˛es
 +
ef„˘_b¥ed_mis£s
 * 
BPENALTY
;

711 
ef„˘_cy˛es
 +
ef„˘_iˇche_mis£s
 * 
CPENALTY
;

713 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

716 
	}
}

	@sim-safe-orig.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"lﬂdî.h
"

62 
	~"sysˇŒ.h
"

63 
	~"dlôe.h
"

64 
	~"›ti⁄s.h
"

65 
	~"°©s.h
"

66 
	~"sim.h
"

76 
ªgs_t
 
	gªgs
;

79 
mem_t
 *
	gmem
 = 
NULL
;

82 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

85 
	gmax_ö°s
;

89 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

91 
	`›t_ªg_hódî
(
odb
,

100 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

101 &
max_ö°s
, 0,

102  
TRUE
, 
NULL
);

104 
	}
}

108 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

111 
	}
}

115 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

117 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

119 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

120 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

122 &
sim_num_ªfs
, 0, 
NULL
);

123 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

125 &
sim_ñ≠£d_time
, 0, 
NULL
);

126 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

128 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

129 
	`ld_ªg_°©s
(
sdb
);

130 
	`mem_ªg_°©s
(
mem
, 
sdb
);

131 
	}
}

135 
	$sim_öô
()

137 
sim_num_ªfs
 = 0;

140 
	`ªgs_öô
(&
ªgs
);

143 
mem
 = 
	`mem_¸óã
("mem");

144 
	`mem_öô
(
mem
);

145 
	}
}

149 
	$sim_lﬂd_¥og
(*
‚ame
,

150 
¨gc
, **
¨gv
,

151 **
ívp
)

154 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

157 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
dlôe_m°©e_obj
);

158 
	}
}

162 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

165 
	}
}

169 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

172 
	}
}

176 
	$sim_unöô
()

179 
	}
}

191 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

194 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

197 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

198 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

200 #i‡
deföed
(
TARGET_PISA
)

203 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

204 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

205 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

206 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

207 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

208 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

211 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

212 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

213 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

214 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

215 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

216 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

218 #ñi‡
deföed
(
TARGET_ALPHA
)

221 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

222 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

223 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(N)])

	)

224 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(N)] = (EXPR))

	)

227 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

228 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

229 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

230 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

233 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

237 
	#READ_BYTE
(
SRC
, 
FAULT
) \

238 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

239 
	#READ_HALF
(
SRC
, 
FAULT
) \

240 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

241 
	#READ_WORD
(
SRC
, 
FAULT
) \

242 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

243 #ifde‡
HOST_HAS_QWORD


244 
	#READ_QWORD
(
SRC
, 
FAULT
) \

245 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

248 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

249 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

250 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

251 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

252 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

253 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

254 #ifde‡
HOST_HAS_QWORD


255 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

256 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

260 
	#SYSCALL
(
INST
Ë
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, INST, 
TRUE
)

	)

264 
	$sim_maö
()

266 
md_ö°_t
 
ö°
;

267 
md_addr_t
 
addr
;

268 
md_›code
 
›
;

269 
is_wrôe
;

270 
md_Áu…_ty≥
 
Áu…
;

272 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation **\n");

275 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

278 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

279 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),

280 
ªgs
.
ªgs_PC
, 
sim_num_ö¢
, &ªgs, 
mem
);

282 
TRUE
)

285 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

286 #ifde‡
TARGET_ALPHA


287 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

291 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

294 
sim_num_ö¢
++;

297 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

300 
Áu…
 = 
md_Áu…_n⁄e
;

303 
	`MD_SET_OPCODE
(
›
, 
ö°
);

306 
›
)

308 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

309 
OP
: \

310 
	`SYMCAT
(
OP
,
_IMPL
); \

311 ;

	)

312 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

313 
OP
: \

314 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

315 
	#CONNECT
(
OP
)

	)

316 
	#DECLARE_FAULT
(
FAULT
) \

317 { 
Áu…
 = (
FAULT
); ; }

	)

318 
	~"machöe.def
"

320 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

323 i‡(
Áu…
 !
md_Áu…_n⁄e
)

324 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

326 i‡(
vîbo£
)

328 
	`myÂrötf
(
°dîr
, "%10n [xor: 0x%08x] @ 0x%08p: ",

329 
sim_num_ö¢
, 
	`md_x‹_ªgs
(&
ªgs
),Ñegs.
ªgs_PC
);

330 
	`md_¥öt_ö¢
(
ö°
, 
ªgs
.
ªgs_PC
, 
°dîr
);

331 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

332 
	`myÂrötf
(
°dîr
, " mem: 0x%08p", 
addr
);

333 
	`Ârötf
(
°dîr
, "\n");

337 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

339 
sim_num_ªfs
++;

340 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

341 
is_wrôe
 = 
TRUE
;

345 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

346 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

347 
addr
, 
sim_num_ö¢
, sim_num_insn))

348 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

351 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

352 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

355 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

358 
	}
}

	@sim-safe.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<m©h.h
>

56 
	~"ho°.h
"

57 
	~"misc.h
"

58 
	~"machöe.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"lﬂdî.h
"

62 
	~"sysˇŒ.h
"

63 
	~"dlôe.h
"

64 
	~"›ti⁄s.h
"

65 
	~"°©s.h
"

66 
	~"sim.h
"

76 
	#SET_NPC
(
EXPR
Ë(
ªgs
.
ªgs_NPC
 = (EXPR))

	)

79 
	#CPC
 (
ªgs
.
ªgs_PC
)

	)

82 
	#GPR
(
N
Ë(
ªgs
.
ªgs_R
[N])

	)

83 
	#SET_GPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_R
[N] = (EXPR))

	)

85 #i‡
deföed
(
TARGET_PISA
)

88 
	#FPR_L
(
N
Ë(
ªgs
.
ªgs_F
.
l
[(N)])

	)

89 
	#SET_FPR_L
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
l
[(N)] = (EXPR))

	)

90 
	#FPR_F
(
N
Ë(
ªgs
.
ªgs_F
.
f
[(N)])

	)

91 
	#SET_FPR_F
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
f
[(N)] = (EXPR))

	)

92 
	#FPR_D
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1])

	)

93 
	#SET_FPR_D
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(NË>> 1] = (EXPR))

	)

96 
	#SET_HI
(
EXPR
Ë(
ªgs
.
ªgs_C
.
hi
 = (EXPR))

	)

97 
	#HI
 (
ªgs
.
ªgs_C
.
hi
)

	)

98 
	#SET_LO
(
EXPR
Ë(
ªgs
.
ªgs_C
.
lo
 = (EXPR))

	)

99 
	#LO
 (
ªgs
.
ªgs_C
.
lo
)

	)

100 
	#FCC
 (
ªgs
.
ªgs_C
.
fcc
)

	)

101 
	#SET_FCC
(
EXPR
Ë(
ªgs
.
ªgs_C
.
fcc
 = (EXPR))

	)

103 #ñi‡
deföed
(
TARGET_ALPHA
)

106 
	#FPR_Q
(
N
Ë(
ªgs
.
ªgs_F
.
q
[N])

	)

107 
	#SET_FPR_Q
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
q
[N] = (EXPR))

	)

108 
	#FPR
(
N
Ë(
ªgs
.
ªgs_F
.
d
[(N)])

	)

109 
	#SET_FPR
(
N
,
EXPR
Ë(
ªgs
.
ªgs_F
.
d
[(N)] = (EXPR))

	)

112 
	#FPCR
 (
ªgs
.
ªgs_C
.
Â¸
)

	)

113 
	#SET_FPCR
(
EXPR
Ë(
ªgs
.
ªgs_C
.
Â¸
 = (EXPR))

	)

114 
	#UNIQ
 (
ªgs
.
ªgs_C
.
uniq
)

	)

115 
	#SET_UNIQ
(
EXPR
Ë(
ªgs
.
ªgs_C
.
uniq
 = (EXPR))

	)

118 #îr‹ 
No
 
ISA
 
èrgë
 
deföed
...

122 
	#READ_BYTE
(
SRC
, 
FAULT
) \

123 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_BYTE
(
mem
,áddr))

	)

124 
	#READ_HALF
(
SRC
, 
FAULT
) \

125 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_HALF
(
mem
,áddr))

	)

126 
	#READ_WORD
(
SRC
, 
FAULT
) \

127 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_WORD
(
mem
,áddr))

	)

128 #ifde‡
HOST_HAS_QWORD


129 
	#READ_QWORD
(
SRC
, 
FAULT
) \

130 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
SRC
), 
	`MEM_READ_QWORD
(
mem
,áddr))

	)

133 
	#WRITE_BYTE
(
SRC
, 
DST
, 
FAULT
) \

134 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_BYTE
(
mem
,áddr, (
SRC
)))

	)

135 
	#WRITE_HALF
(
SRC
, 
DST
, 
FAULT
) \

136 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_HALF
(
mem
,áddr, (
SRC
)))

	)

137 
	#WRITE_WORD
(
SRC
, 
DST
, 
FAULT
) \

138 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_WORD
(
mem
,áddr, (
SRC
)))

	)

139 #ifde‡
HOST_HAS_QWORD


140 
	#WRITE_QWORD
(
SRC
, 
DST
, 
FAULT
) \

141 ((
FAULT
Ë
md_Áu…_n⁄e
, 
addr
 = (
DST
), 
	`MEM_WRITE_QWORD
(
mem
,áddr, (
SRC
)))

	)

145 
	#SYSCALL
(
INST
Ë
	`sys_sysˇŒ
(&
ªgs
, 
mem_ac˚ss
, 
mem
, INST, 
TRUE
)

	)

148 
ªgs_t
 
	gªgs
;

151 
mem_t
 *
	gmem
 = 
NULL
;

154 
cou¡î_t
 
	gsim_num_ªfs
 = 0;

157 
	gmax_ö°s
;

161 *
ö°_˙ts
;

163 
	#CALL_STACK_SIZE
 32

	)

164 
	#TAKEN
 1

	)

165 
	#NOT_TAKEN
 0

	)

166 
	#rshi·
(
x
, 
b
Ë(((Ë(x)Ë>> (b))

	)

167 
	#CACHE_LINE
(
addr
Ë(
	`rshi·
((◊ddrË<< 
CACHE_TAG_BITS
), \

168 (
CACHE_TAG_BITS
 + 
CACHE_LINE_BITS
)))

	)

169 
	#CACHE_LINE_TAG
(
addr
Ë(
	`rshi·
(◊ddr), (32 - 
CACHE_TAG_BITS
)))

	)

170 
	#IS_CACHE_MISS
(
addr
Ë(
ˇche_èbÀ
[
	`CACHE_LINE
(addr)] != \

171 
	`CACHE_LINE_TAG
(
addr
))

	)

172 
	#SPC
 (
•ec_PC
)

	)

173 
	#SET_SPC
(
x
Ë(
SPC
 = (xË? ((
CPC
 + 8 + (
OFS
 << 2))) : \

174 (
CPC
 + (
md_ö°_t
)))

	)

176 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

179 *
	g¥ed_ty≥
;

182 
	gtwﬁev_√…
 = 4;

183 
	gtwﬁev_c⁄fig
[4] =

184 { 1, 128, 3, 
TRUE
};

186 íum {
	m≥r„˘
, 
	mGAg
, 
	mgsh¨e
, 
	mloˇl
};

187 
	gb¥ed_scheme
;

188 
	gb¥ed_èbÀ_bôs
 = 0;

189 
	ghi°‹y_bôs
;

190 
	gBPRED_TABLE_SIZE
;

191 
	gP_MASK
, 
	gH_MASK
;

192 
	gBPENALTY
 = 10;

194 *
	gb¥ed_miss
;

195 *
	gb¥ed_èbÀ
;

196 
	ghi°‹y_ªgi°î
 = 0;

199 *
	gˇche_û1_›t
;

201 
	gíabÀ_iˇche
 = 0;

202 
	gCACHE_LINE_SIZE
;

203 
	gCACHE_SET_NUM
;

204 
	gCACHE_LINE_BITS
;

205 
	gCACHE_TAG_BITS
;

206 
	gCPENALTY
 = 50;

208 *
	gˇche_miss
;

209 *
	gˇche_èbÀ
;

210 
	gˇche_blockög_cou¡
;

211 *
	gˇche_blockög
;

212 
	gˇche_blockög_dñay
;

215 
	gcode_ö°s
 = 0;

216 
	gmy_ö¢_cou¡
 = 0;

218 
ef„˘_cy˛es
;

219 
ef„˘_b¥ed_cou¡
;

220 
ef„˘_b¥ed_mis£s
;

221 
ef„˘_iˇche_mis£s
;

223 
	#CALL_STACK_SIZE
 32

	)

224 
md_addr_t
 
	gˇŒ_°ack
[
CALL_STACK_SIZE
];

225 
	gˇŒ_Àvñ
 = 0;

227 
	$öt_log2
(
i
)

229 
b
;

231 
b
 = 0; 
i
; b++)

232 
i
 >>= 1;

233  
b
;

234 
	}
}

238 
	$mask
(
n
)

240 
i
 = 0;

242 i‡((
n
 < 0) || (n >= 32))

245 
n
 > 0) {

246 
i
 = (ò<< 1Ë+ 1; 
n
--;

248  
i
;

249 
	}
}

254 
	$¸óã_my_b¥ed
()

257 
i
;

259 
my_ö¢_cou¡
 = 0;

260 
ef„˘_b¥ed_mis£s
 = 0;

261 
hi°‹y_ªgi°î
 = 0;

262 
b¥ed_miss
 = (*Ë
	`ˇŒoc
(1024, ());

263 
b¥ed_èbÀ
 = (*)
	`ˇŒoc
(
BPRED_TABLE_SIZE
,

266 
i
=0; i<
BPRED_TABLE_SIZE
; i++)

267 
b¥ed_èbÀ
[
i
] = 0;

268 
i
=0; i<1024; i++)

269 
b¥ed_miss
[
i
] = 0;

271 
i
=0; i<
MAX_CODE_SIZE
; i++)

272 
ö°_˙ts
[
i
] = 0;

274 
	}
}

278 
	$lookup_my_b¥ed
(
md_addr_t
 
cuºít
, md_addr_à
èrgë
)

280 
outcome
, 
¥edi˘i⁄
;

281 
ödex
;

284 
ef„˘_b¥ed_cou¡
++;

285 i‡(
èrgë
 =
cuºít
 + (
md_ö°_t
))

286 
outcome
 = 
NOT_TAKEN
;

288 
outcome
 = 
TAKEN
;

290 
b¥ed_scheme
) {

291 
GAg
:

292 
ödex
 = 
hi°‹y_ªgi°î
;

294 
gsh¨e
:

297 
ödex
 = (
hi°‹y_ªgi°î
 << (
b¥ed_èbÀ_bôs
 - 
hi°‹y_bôs
))

298 ^ (
	`rshi·
(
cuºít
, 3));

300 
loˇl
:

301 
ödex
 = 
	`rshi·
(
cuºít
, 3);

304 
ödex
 &
P_MASK
;

306 
¥edi˘i⁄
 = 
b¥ed_èbÀ
[
ödex
];

307 i‡(
¥edi˘i⁄
 !
outcome
){

308 
ef„˘_b¥ed_mis£s
++;

309 
b¥ed_miss
[
	`rshi·
(
cuºít
 - 
°¨t_addr
, 3)]++;

310 
b¥ed_èbÀ
[
ödex
] = 
outcome
;

312 
hi°‹y_ªgi°î
 = ((hi°‹y_ªgi°î << 1Ë| 
outcome
Ë& 
H_MASK
;

314  (
¥edi˘i⁄
 !
outcome
);

315 
	}
}

319 
	$•ec_exec
(
md_ö°_t
 
ö°
, 
x
)

321 
md_addr_t
 
•ec_PC
;

322 
md_›code
 
›
;

323 
˛ocks_À·
 = 
BPENALTY
;

324 
s_ˇŒ_Àvñ
 = 
ˇŒ_Àvñ
;

325 
Àn
, 
i
;

326 
md_addr_t
 
backup_ˇŒ_°ack
[
BPENALTY
];

330 
Àn
 = (
BPENALTY
 >
ˇŒ_Àvñ
) ? call_level : BPENALTY;

331 
i
 = 0; i < 
Àn
; i++)

332 
backup_ˇŒ_°ack
[
i
] = 
ˇŒ_°ack
[
ˇŒ_Àvñ
 - 
Àn
 + i];

334 
	`SET_SPC
(
x
);

335 
˛ocks_À·
 > 0) {

336 i‡((
•ec_PC
 >
°¨t_addr
Ë&& (•ec_PC < 
íd_addr
)) {

340 i‡(
íabÀ_iˇche
 && 
	`IS_CACHE_MISS
(
•ec_PC
)) {

341 
ˇche_blockög
[
	`rshi·
(
ªgs
.
ªgs_PC
 - 
°¨t_addr
, 3)]++;

342 
ˇche_blockög_cou¡
++;

343 
ˇche_blockög_dñay
 +(
CPENALTY
 - 
˛ocks_À·
);

344 
ˇche_èbÀ
[
	`CACHE_LINE
(
•ec_PC
)] = 
	`CACHE_LINE_TAG
(spec_PC);

345 
˛ocks_À·
 = 0;

349 
˛ocks_À·
 = 0;

352 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
•ec_PC
);

354 
	`MD_SET_OPCODE
(
›
, 
ö°
);

355 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_CTRL
) {

356 
›
) {

357 
JAL
:

358 
ˇŒ_°ack
[
s_ˇŒ_Àvñ
] = 
•ec_PC
 + (
md_ö°_t
);

359 
s_ˇŒ_Àvñ
++;

360 
JUMP
:

361 
•ec_PC
 = ((
SPC
 & 036000000000Ë| (
TARG
 << 2));

362 
˛ocks_À·
--;

364 
JR
:

365 
s_ˇŒ_Àvñ
--;

366 
•ec_PC
 = 
ˇŒ_°ack
[
s_ˇŒ_Àvñ
];

367 
˛ocks_À·
--;

370 
˛ocks_À·
 = 0;

374 
•ec_PC
 +(
md_ö°_t
);

375 
˛ocks_À·
--;

380 
i
 = 0; i < 
Àn
; i++)

381 
ˇŒ_°ack
[
ˇŒ_Àvñ
 - 
Àn
 + 
i
] = 
backup_ˇŒ_°ack
[i];

383 
	}
}

386 
	$öô_ˇche
()

388 
ef„˘_iˇche_mis£s
 = 0;

389 
ˇche_blockög_cou¡
 = 0;

390 
ˇche_blockög_dñay
 = 0;

391 
CACHE_LINE_BITS
 = 
	`öt_log2
(
CACHE_LINE_SIZE
) - 1;

392 
CACHE_TAG_BITS
 = 32 - (
	`öt_log2
(
CACHE_SET_NUM
Ë- 1Ë- 
CACHE_LINE_BITS
;

394 
ˇche_miss
 = (*Ë
	`ˇŒoc
(
code_ö°s
, ());

395 
ˇche_blockög
 = (*Ë
	`ˇŒoc
(
code_ö°s
, ());

396 
ˇche_èbÀ
 = (*)
	`ˇŒoc
(
CACHE_SET_NUM
, ());

398 
	}
}

405 
	$sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
)

407 
	`›t_ªg_hódî
(
odb
,

416 
	`›t_ªg_uöt
(
odb
, "-max:inst", "maximumÇumber of inst'sÅoÉxecute",

417 &
max_ö°s
, 0,

418  
TRUE
, 
NULL
);

421 
	`›t_ªg_°rög
(
odb
, "-bpred",

423 &
¥ed_ty≥
, "2lev",

424  
TRUE
, 
NULL
);

426 
	`›t_ªg_öt_li°
(
odb
, "-bpred:2lev",

429 
twﬁev_c⁄fig
, 
twﬁev_√…
, &twolev_nelt,

430  
twﬁev_c⁄fig
,

431  
TRUE
, 
NULL
, 
FALSE
);

433 
	`›t_ªg_°rög
(
odb
, "-cache:il1",

435 &
ˇche_û1_›t
, "il1:32:32:1:l",

436  
TRUE
, 
NULL
);

438 
	`¥ötf
("b¥ed_ty≥: %s\n", 
¥ed_ty≥
);

439 
	`¥ötf
("-b¥ed:2Àv: %d %d %d %d\n", 
twﬁev_c⁄fig
[0],Åwolev_config[1],

440 
twﬁev_c⁄fig
[2],Åwolev_config[3]);

441 
	`¥ötf
("-ˇche:û1: %s\n", 
ˇche_û1_›t
);

445 
	}
}

449 
	$sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
)

453 
assoc
;

454 
«me
[128], 
c
;

456 i‡(!
	`my°ricmp
(
¥ed_ty≥
, "perfect")) {

458 
b¥ed_scheme
 = 
≥r„˘
;

459 } i‡(!
	`my°ricmp
(
¥ed_ty≥
, "2lev")) {

460 
b¥ed_èbÀ_bôs
 = 
	`öt_log2
(
twﬁev_c⁄fig
[1]) - 1;

461 
hi°‹y_bôs
 = 
twﬁev_c⁄fig
[2];

462 i‡(
hi°‹y_bôs
 == 0) {

463 
b¥ed_scheme
 = 
loˇl
;

464 } i‡(
twﬁev_c⁄fig
[3] =
TRUE
) {

465 
b¥ed_scheme
 = 
gsh¨e
;

467 
b¥ed_scheme
 = 
GAg
;

468 
b¥ed_èbÀ_bôs
 = 
hi°‹y_bôs
;

470 
BPRED_TABLE_SIZE
 = 
twﬁev_c⁄fig
[1];

472 
P_MASK
 = 
	`mask
(
b¥ed_èbÀ_bôs
);

473 
H_MASK
 = 
	`mask
(
hi°‹y_bôs
);

475 
	`¥ötf
("b¥ed_scheme: %d\n", 
b¥ed_scheme
);

476 
	`¥ötf
("b¥ed_èbÀ_bôs: %d\n", 
b¥ed_èbÀ_bôs
);

477 
	`¥ötf
("hi°‹y_bôs: %d\n", 
hi°‹y_bôs
);

479 i‡(!
	`my°ricmp
(
ˇche_û1_›t
, "none")) {

480 
íabÀ_iˇche
 = 0;

482 
íabÀ_iˇche
 = 1;

483 i‡(
	`ssˇnf
(
ˇche_û1_›t
, "%[^:]:%d:%d:%d:%c",

484 
«me
, &
CACHE_SET_NUM
, &
CACHE_LINE_SIZE
, &
assoc
, &
c
) != 5) {

485 
	`Ârötf
(
°dîr
, "wrong cache configuration!\n");

486 
	`exô
(1);

490 
	`¥ötf
("CACHE_SET_NUM: %d\n", 
CACHE_SET_NUM
);

491 
	`¥ötf
("CACHE_LINE_SIZE: %d\n", 
CACHE_LINE_SIZE
);

494 
	}
}

498 
	$sim_ªg_°©s
(
°©_sdb_t
 *
sdb
)

500 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_insn",

502 &
sim_num_ö¢
, sim_num_ö¢, 
NULL
);

503 
	`°©_ªg_cou¡î
(
sdb
, "sim_num_refs",

505 &
sim_num_ªfs
, 0, 
NULL
);

506 
	`°©_ªg_öt
(
sdb
, "sim_elapsed_time",

508 &
sim_ñ≠£d_time
, 0, 
NULL
);

509 
	`°©_ªg_f‹muœ
(
sdb
, "sim_inst_rate",

511 "sim_num_ö¢ / sim_ñ≠£d_time", 
NULL
);

512 
	`ld_ªg_°©s
(
sdb
);

513 
	`mem_ªg_°©s
(
mem
, 
sdb
);

514 
	}
}

518 
	$sim_öô
()

520 
sim_num_ªfs
 = 0;

523 
	`ªgs_öô
(&
ªgs
);

526 
mem
 = 
	`mem_¸óã
("mem");

527 
	`mem_öô
(
mem
);

528 
	}
}

532 
	$sim_lﬂd_¥og
(*
‚ame
,

533 
¨gc
, **
¨gv
,

534 **
ívp
)

537 
	`ld_lﬂd_¥og
(
‚ame
, 
¨gc
, 
¨gv
, 
ívp
, &
ªgs
, 
mem
, 
TRUE
);

540 
	`dlôe_öô
(
md_ªg_obj
, 
dlôe_mem_obj
, 
dlôe_m°©e_obj
);

541 
	}
}

545 
	$sim_aux_c⁄fig
(
FILE
 *
°ªam
)

548 
	}
}

552 
	$sim_aux_°©s
(
FILE
 *
°ªam
)

555 
	}
}

559 
	$sim_unöô
()

562 
	}
}

574 
sym_lﬂdsyms
(*
‚ame
,

575 
lﬂd_loˇls
);

579 
	$sim_maö
()

581 
md_ö°_t
 
ö°
;

582 
md_addr_t
 
addr
;

583 
md_›code
 
›
;

584 
is_wrôe
;

585 
md_Áu…_ty≥
 
Áu…
;

587 
	`Ârötf
(
°dîr
, "sim: ** starting functional simulation **\n");

590 
ªgs
.
ªgs_NPC
 =Ñegs.
ªgs_PC
 + (
md_ö°_t
);

594 
	`sym_lﬂdsyms
(
ld_¥og_‚ame
, 
TRUE
);

595 
code_ö°s
 = (
íd_addr
 - 
°¨t_addr
Ë/ (
md_ö°_t
);

596 
ö°_˙ts
 = (*Ë
	`ˇŒoc
(
code_ö°s
, ());

598 i‡(
b¥ed_scheme
 !
≥r„˘
)

599 
	`¸óã_my_b¥ed
();

600 i‡(
íabÀ_iˇche
)

601 
	`öô_ˇche
();

602 
	`Ârötf
(
°dîr
, "íabÀ_iˇche: %d\n", 
íabÀ_iˇche
);

607 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_PC
, 0, 0, 0, 0))

608 
	`dlôe_maö
(
ªgs
.
ªgs_PC
 - (
md_ö°_t
),

609 
ªgs
.
ªgs_PC
, 
sim_num_ö¢
, &ªgs, 
mem
);

611 
TRUE
)

614 
ªgs
.
ªgs_R
[
MD_REG_ZERO
] = 0;

615 #ifde‡
TARGET_ALPHA


616 
ªgs
.
ªgs_F
.
d
[
MD_REG_ZERO
] = 0.0;

620 
	`MD_FETCH_INST
(
ö°
, 
mem
, 
ªgs
.
ªgs_PC
);

623 
sim_num_ö¢
++;

626 
addr
 = 0; 
is_wrôe
 = 
FALSE
;

629 
Áu…
 = 
md_Áu…_n⁄e
;

632 
	`MD_SET_OPCODE
(
›
, 
ö°
);

635 
›
)

637 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

638 
OP
: \

639 
	`SYMCAT
(
OP
,
_IMPL
); \

640 ;

	)

641 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
) \

642 
OP
: \

643 
	`∑nic
("©ãm±edÅÿexecuãáÜökög opcode");

	)

644 
	#CONNECT
(
OP
)

	)

645 
	#DECLARE_FAULT
(
FAULT
) \

646 { 
Áu…
 = (
FAULT
); ; }

	)

647 
	~"machöe.def
"

649 
	`∑nic
("attemptedÅoÉxecuteá bogus opcode");

652 i‡(
Áu…
 !
md_Áu…_n⁄e
)

653 
	`Áèl
("Áu… (%dËdëe˘ed @ 0x%08p", 
Áu…
, 
ªgs
.
ªgs_PC
);

655 i‡(
vîbo£
)

657 
	`myÂrötf
(
°dîr
, "%10n [xor: 0x%08x] @ 0x%08p: ",

658 
sim_num_ö¢
, 
	`md_x‹_ªgs
(&
ªgs
),Ñegs.
ªgs_PC
);

659 
	`md_¥öt_ö¢
(
ö°
, 
ªgs
.
ªgs_PC
, 
°dîr
);

660 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

661 
	`myÂrötf
(
°dîr
, " mem: 0x%08p", 
addr
);

662 
	`Ârötf
(
°dîr
, "\n");

666 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_MEM
)

668 
sim_num_ªfs
++;

669 i‡(
	`MD_OP_FLAGS
(
›
Ë& 
F_STORE
)

670 
is_wrôe
 = 
TRUE
;

674 i‡((
ªgs
.
ªgs_PC
 >
°¨t_addr
Ë&& (ªgs.ªgs_PC < 
íd_addr
)) {

675 
my_ö¢_cou¡
++;

676 
ö°_˙ts
[
	`rshi·
(
ªgs
.
ªgs_PC
 - 
°¨t_addr
, 3)]++;

679 i‡(
íabÀ_iˇche
 && 
	`IS_CACHE_MISS
(
ªgs
.
ªgs_PC
)) {

680 
ˇche_èbÀ
[
	`CACHE_LINE
(
ªgs
.
ªgs_PC
)] = 
	`CACHE_LINE_TAG
(regs.regs_PC);

681 
ˇche_miss
[
	`rshi·
(
ªgs
.
ªgs_PC
 - 
°¨t_addr
, 3)]++;

682 
ef„˘_iˇche_mis£s
++;

686 i‡((
b¥ed_scheme
 !
≥r„˘
Ë&& (
	`MD_OP_FLAGS
(
›
Ë& 
F_COND
)) {

687 i‡(
	`lookup_my_b¥ed
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
))

688 
	`•ec_exec
(
ö°
, (
ªgs
.
ªgs_NPC
 =‘egs.
ªgs_PC
 + (
md_ö°_t
))));

692 i‡(
›
 =
JAL
) {

693 
ˇŒ_°ack
[
ˇŒ_Àvñ
] = 
ªgs
.
ªgs_PC
 + (
md_ö°_t
);

694 i‡((
ªgs
.
ªgs_NPC
 >
°¨t_addr
Ë&& (ªgs.ªgs_NPC < 
íd_addr
))

695 
ˇŒ_Àvñ
++;

698 i‡(
›
 =
JR
Ë
ˇŒ_Àvñ
--;

704 i‡(
	`dlôe_check_bªak
(
ªgs
.
ªgs_NPC
,

705 
is_wrôe
 ? 
ACCESS_WRITE
 : 
ACCESS_READ
,

706 
addr
, 
sim_num_ö¢
, sim_num_insn))

707 
	`dlôe_maö
(
ªgs
.
ªgs_PC
,Ñegs.
ªgs_NPC
, 
sim_num_ö¢
, &ªgs, 
mem
);

710 
ªgs
.
ªgs_PC
 =Ñegs.
ªgs_NPC
;

711 
ªgs
.
ªgs_NPC
 +(
md_ö°_t
);

716 
ef„˘_cy˛es
 = 
my_ö¢_cou¡
;

717 
ef„˘_cy˛es
 +
ef„˘_b¥ed_mis£s
 * 
BPENALTY
;

718 
ef„˘_cy˛es
 +
ef„˘_iˇche_mis£s
 * 
CPENALTY
;

724 i‡(
max_ö°s
 && 
sim_num_ö¢
 >= max_insts)

727 
	}
}

	@sim.h

52 #i‚de‡
SIM_H


53 
	#SIM_H


	)

55 
	~<°dio.h
>

56 
	~<£tjmp.h
>

57 
	~<time.h
>

59 
	~"›ti⁄s.h
"

60 
	~"°©s.h
"

61 
	~"ªgs.h
"

62 
	~"mem‹y.h
"

65 
sim_dump_°©s
;

68 
sim_exô_now
;

71 
jmp_buf
 
sim_exô_buf
;

74 
sim_sw≠_byãs
;

75 
sim_sw≠_w‹ds
;

78 
cou¡î_t
 
sim_num_ö¢
;

81 
time_t
 
sim_°¨t_time
;

82 
time_t
 
sim_íd_time
;

83 
sim_ñ≠£d_time
;

86 
›t_odb_t
 *
sim_odb
;

89 
°©_sdb_t
 *
sim_sdb
;

92 *
sim_eio_‚ame
;

93 *
sim_chk±_‚ame
;

94 
FILE
 *
sim_eio_fd
;

97 
FILE
 *
sim_¥ogfd
;

105 
sim_ªg_›ti⁄s
(
›t_odb_t
 *
odb
);

110 
sim_check_›ti⁄s
(
›t_odb_t
 *
odb
, 
¨gc
, **
¨gv
);

113 
sim_ªg_°©s
(
°©_sdb_t
 *
sdb
);

116 
sim_öô
();

119 
sim_lﬂd_¥og
(*
‚ame
, 
¨gc
, **
¨gv
, **
ívp
);

124 
sim_aux_c⁄fig
(
FILE
 *
°ªam
);

127 
sim_maö
();

132 
sim_aux_°©s
(
FILE
 *
°ªam
);

135 
sim_unöô
();

139 
sim_¥öt_°©s
(
FILE
 *
fd
);

	@stats.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<limôs.h
>

55 
	~<m©h.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"machöe.h
"

60 
	~"evÆ.h
"

61 
	~"°©s.h
"

64 
evÆ_vÆue_t


65 
	$°©_evÆ_idít
(
evÆ_°©e_t
 *
es
)

67 
°©_sdb_t
 *
sdb
 = 
es
->
u£r_±r
;

68 
°©_°©_t
 *
°©
;

69 
evÆ_vÆue_t
 
îr_vÆue
 = { 
ë_öt
, { 0 } };

70 
evÆ_vÆue_t
 
vÆ
;

73 
°©
 = 
sdb
->
°©s
; sèà!
NULL
; sèà°©->
√xt
)

75 i‡(!
	`°rcmp
(
°©
->
«me
, 
es
->
tok_buf
))

81 i‡(!
°©
)

84 
evÆ_îr‹
 = 
ERR_UNDEFVAR
;

85  
îr_vÆue
;

90 
°©
->
sc
)

92 
sc_öt
:

93 
vÆ
.
ty≥
 = 
ë_öt
;

94 
vÆ
.
vÆue
.
as_öt
 = *
°©
->
v¨ü¡
.
f‹_öt
.
v¨
;

96 
sc_uöt
:

97 
vÆ
.
ty≥
 = 
ë_uöt
;

98 
vÆ
.
vÆue
.
as_uöt
 = *
°©
->
v¨ü¡
.
f‹_uöt
.
v¨
;

100 #ifde‡
HOST_HAS_QWORD


101 
sc_qw‹d
:

103 
vÆ
.
ty≥
 = 
ë_doubÀ
;

104 #ifde‡
_MSC_VER


105 
vÆ
.
vÆue
.
as_doubÀ
 = ()(
sqw‹d_t
)*
°©
->
v¨ü¡
.
f‹_qw‹d
.
v¨
;

107 
vÆ
.
vÆue
.
as_doubÀ
 = ()*
°©
->
v¨ü¡
.
f‹_qw‹d
.
v¨
;

110 
sc_sqw‹d
:

112 
vÆ
.
ty≥
 = 
ë_doubÀ
;

113 
vÆ
.
vÆue
.
as_doubÀ
 = ()*
°©
->
v¨ü¡
.
f‹_sqw‹d
.
v¨
;

116 
sc_Êﬂt
:

117 
vÆ
.
ty≥
 = 
ë_Êﬂt
;

118 
vÆ
.
vÆue
.
as_Êﬂt
 = *
°©
->
v¨ü¡
.
f‹_Êﬂt
.
v¨
;

120 
sc_doubÀ
:

121 
vÆ
.
ty≥
 = 
ë_doubÀ
;

122 
vÆ
.
vÆue
.
as_doubÀ
 = *
°©
->
v¨ü¡
.
f‹_doubÀ
.
v¨
;

124 
sc_di°
:

125 
sc_sdi°
:

126 
	`Áèl
("stat distributionsÇotállowed in formulaÉxpressions");

128 
sc_f‹muœ
:

131 
evÆ_°©e_t
 *
es
 = 
	`evÆ_√w
(
°©_evÆ_idít
, 
sdb
);

132 *
ídp
;

134 
vÆ
 = 
	`evÆ_ex¥
(
es
, 
°©
->
v¨ü¡
.
f‹_f‹muœ
.
f‹muœ
, &
ídp
);

135 i‡(
evÆ_îr‹
 !
ERR_NOERR
 || *
ídp
 != '\0')

138 
vÆ
 = 
îr_vÆue
;

141 
	`evÆ_dñëe
(
es
);

145 
	`∑nic
("bogus stat class");

148  
vÆ
;

149 
	}
}

152 
°©_sdb_t
 *

153 
	$°©_√w
()

155 
°©_sdb_t
 *
sdb
;

157 
sdb
 = (
°©_sdb_t
 *)
	`ˇŒoc
(1, (stat_sdb_t));

158 i‡(!
sdb
)

159 
	`Áèl
("out of virtual memory");

161 
sdb
->
°©s
 = 
NULL
;

162 
sdb
->
evÆu©‹
 = 
	`evÆ_√w
(
°©_evÆ_idít
, sdb);

164  
sdb
;

165 
	}
}

169 
	$°©_dñëe
(
°©_sdb_t
 *
sdb
)

171 
i
;

172 
°©_°©_t
 *
°©
, *
°©_√xt
;

173 
buckë_t
 *
buckë
, *
buckë_√xt
;

176 
°©
 = 
sdb
->
°©s
; sèà!
NULL
; sèà
°©_√xt
)

178 
°©_√xt
 = 
°©
->
√xt
;

179 
°©
->
√xt
 = 
NULL
;

182 
°©
->
sc
)

184 
sc_öt
:

185 
sc_uöt
:

186 #ifde‡
HOST_HAS_QWORD


187 
sc_qw‹d
:

188 
sc_sqw‹d
:

190 
sc_Êﬂt
:

191 
sc_doubÀ
:

192 
sc_f‹muœ
:

195 
sc_di°
:

197 
	`‰ì
(
°©
->
v¨ü¡
.
f‹_di°
.
¨r
);

198 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
 = 
NULL
;

200 
sc_sdi°
:

202 
i
=0; i<
HTAB_SZ
; i++)

204 
buckë
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
i
];

205 
buckë
 !
NULL
;

206 
buckë
 = 
buckë_√xt
)

208 
buckë_√xt
 = 
buckë
->
√xt
;

209 
buckë
->
√xt
 = 
NULL
;

210 
	`‰ì
(
buckë
);

212 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
i
] = 
NULL
;

215 
	`‰ì
(
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
);

216 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
 = 
NULL
;

219 
	`∑nic
("bogus stat class");

222 
	`‰ì
(
°©
);

224 
sdb
->
°©s
 = 
NULL
;

225 
	`evÆ_dñëe
(
sdb
->
evÆu©‹
);

226 
sdb
->
evÆu©‹
 = 
NULL
;

227 
	`‰ì
(
sdb
);

228 
	}
}

232 
	$add_°©
(
°©_sdb_t
 *
sdb
,

233 
°©_°©_t
 *
°©
)

235 
°©_°©_t
 *
ñt
, *
¥ev
;

238 
¥ev
=
NULL
, 
ñt
=
sdb
->
°©s
;É… !NULL;ÖªvÛ…,É…Û…->
√xt
)

242 i‡(
¥ev
 !
NULL
)

243 
¥ev
->
√xt
 = 
°©
;

245 
sdb
->
°©s
 = 
°©
;

246 
°©
->
√xt
 = 
NULL
;

247 
	}
}

250 
°©_°©_t
 *

251 
	$°©_ªg_öt
(
°©_sdb_t
 *
sdb
,

252 *
«me
,

253 *
desc
,

254 *
v¨
,

255 
öô_vÆ
,

256 *
f‹m©
)

258 
°©_°©_t
 *
°©
;

260 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

261 i‡(!
°©
)

262 
	`Áèl
("out of virtual memory");

264 
°©
->
«me
 = 
	`my°rdup
(name);

265 
°©
->
desc
 = 
	`my°rdup
(desc);

266 
°©
->
f‹m©
 = format ? format : "%12d";

267 
°©
->
sc
 = 
sc_öt
;

268 
°©
->
v¨ü¡
.
f‹_öt
.
v¨
 = var;

269 
°©
->
v¨ü¡
.
f‹_öt
.
öô_vÆ
 = init_val;

272 
	`add_°©
(
sdb
, 
°©
);

275 *
v¨
 = 
öô_vÆ
;

277  
°©
;

278 
	}
}

281 
°©_°©_t
 *

282 
	$°©_ªg_uöt
(
°©_sdb_t
 *
sdb
,

283 *
«me
,

284 *
desc
,

285 *
v¨
,

286 
öô_vÆ
,

287 *
f‹m©
)

289 
°©_°©_t
 *
°©
;

291 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

292 i‡(!
°©
)

293 
	`Áèl
("out of virtual memory");

295 
°©
->
«me
 = 
	`my°rdup
(name);

296 
°©
->
desc
 = 
	`my°rdup
(desc);

297 
°©
->
f‹m©
 = format ? format : "%12u";

298 
°©
->
sc
 = 
sc_uöt
;

299 
°©
->
v¨ü¡
.
f‹_uöt
.
v¨
 = var;

300 
°©
->
v¨ü¡
.
f‹_uöt
.
öô_vÆ
 = init_val;

303 
	`add_°©
(
sdb
, 
°©
);

306 *
v¨
 = 
öô_vÆ
;

308  
°©
;

309 
	}
}

311 #ifde‡
HOST_HAS_QWORD


313 
°©_°©_t
 *

314 
	$°©_ªg_qw‹d
(
°©_sdb_t
 *
sdb
,

315 *
«me
,

316 *
desc
,

317 
qw‹d_t
 *
v¨
,

318 
qw‹d_t
 
öô_vÆ
,

319 *
f‹m©
)

321 
°©_°©_t
 *
°©
;

323 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

324 i‡(!
°©
)

325 
	`Áèl
("out of virtual memory");

327 
°©
->
«me
 = 
	`my°rdup
(name);

328 
°©
->
desc
 = 
	`my°rdup
(desc);

329 
°©
->
f‹m©
 = format ? format : "%12lu";

330 
°©
->
sc
 = 
sc_qw‹d
;

331 
°©
->
v¨ü¡
.
f‹_qw‹d
.
v¨
 = var;

332 
°©
->
v¨ü¡
.
f‹_qw‹d
.
öô_vÆ
 = init_val;

335 
	`add_°©
(
sdb
, 
°©
);

338 *
v¨
 = 
öô_vÆ
;

340  
°©
;

341 
	}
}

344 
°©_°©_t
 *

345 
	$°©_ªg_sqw‹d
(
°©_sdb_t
 *
sdb
,

346 *
«me
,

347 *
desc
,

348 
sqw‹d_t
 *
v¨
,

349 
sqw‹d_t
 
öô_vÆ
,

350 *
f‹m©
)

352 
°©_°©_t
 *
°©
;

354 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

355 i‡(!
°©
)

356 
	`Áèl
("out of virtual memory");

358 
°©
->
«me
 = 
	`my°rdup
(name);

359 
°©
->
desc
 = 
	`my°rdup
(desc);

360 
°©
->
f‹m©
 = format ? format : "%12ld";

361 
°©
->
sc
 = 
sc_sqw‹d
;

362 
°©
->
v¨ü¡
.
f‹_sqw‹d
.
v¨
 = var;

363 
°©
->
v¨ü¡
.
f‹_sqw‹d
.
öô_vÆ
 = init_val;

366 
	`add_°©
(
sdb
, 
°©
);

369 *
v¨
 = 
öô_vÆ
;

371  
°©
;

372 
	}
}

376 
°©_°©_t
 *

377 
	$°©_ªg_Êﬂt
(
°©_sdb_t
 *
sdb
,

378 *
«me
,

379 *
desc
,

380 *
v¨
,

381 
öô_vÆ
,

382 *
f‹m©
)

384 
°©_°©_t
 *
°©
;

386 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

387 i‡(!
°©
)

388 
	`Áèl
("out of virtual memory");

390 
°©
->
«me
 = 
	`my°rdup
(name);

391 
°©
->
desc
 = 
	`my°rdup
(desc);

392 
°©
->
f‹m©
 = format ? format : "%12.4f";

393 
°©
->
sc
 = 
sc_Êﬂt
;

394 
°©
->
v¨ü¡
.
f‹_Êﬂt
.
v¨
 = var;

395 
°©
->
v¨ü¡
.
f‹_Êﬂt
.
öô_vÆ
 = init_val;

398 
	`add_°©
(
sdb
, 
°©
);

401 *
v¨
 = 
öô_vÆ
;

403  
°©
;

404 
	}
}

407 
°©_°©_t
 *

408 
	$°©_ªg_doubÀ
(
°©_sdb_t
 *
sdb
,

409 *
«me
,

410 *
desc
,

411 *
v¨
,

412 
öô_vÆ
,

413 *
f‹m©
)

415 
°©_°©_t
 *
°©
;

417 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

418 i‡(!
°©
)

419 
	`Áèl
("out of virtual memory");

421 
°©
->
«me
 = 
	`my°rdup
(name);

422 
°©
->
desc
 = 
	`my°rdup
(desc);

423 
°©
->
f‹m©
 = format ? format : "%12.4f";

424 
°©
->
sc
 = 
sc_doubÀ
;

425 
°©
->
v¨ü¡
.
f‹_doubÀ
.
v¨
 = var;

426 
°©
->
v¨ü¡
.
f‹_doubÀ
.
öô_vÆ
 = init_val;

429 
	`add_°©
(
sdb
, 
°©
);

432 *
v¨
 = 
öô_vÆ
;

434  
°©
;

435 
	}
}

443 
°©_°©_t
 *

444 
	$°©_ªg_di°
(
°©_sdb_t
 *
sdb
,

445 *
«me
,

446 *
desc
,

447 
öô_vÆ
,

448 
¨r_sz
,

449 
buckë_sz
,

450 
pf
,

451 *
f‹m©
,

452 **
im≠
,

453 
¥öt_‚_t
 
¥öt_‚
)

455 
i
;

456 
°©_°©_t
 *
°©
;

457 *
¨r
;

459 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

460 i‡(!
°©
)

461 
	`Áèl
("out of virtual memory");

463 
°©
->
«me
 = 
	`my°rdup
(name);

464 
°©
->
desc
 = 
	`my°rdup
(desc);

465 
°©
->
f‹m©
 = f‹m© ? f‹m© : 
NULL
;

466 
°©
->
sc
 = 
sc_di°
;

467 
°©
->
v¨ü¡
.
f‹_di°
.
öô_vÆ
 = init_val;

468 
°©
->
v¨ü¡
.
f‹_di°
.
¨r_sz
 =árr_sz;

469 
°©
->
v¨ü¡
.
f‹_di°
.
buckë_sz
 = bucket_sz;

470 
°©
->
v¨ü¡
.
f‹_di°
.
pf
 =Öf;

471 
°©
->
v¨ü¡
.
f‹_di°
.
im≠
 = imap;

472 
°©
->
v¨ü¡
.
f‹_di°
.
¥öt_‚
 =Örint_fn;

473 
°©
->
v¨ü¡
.
f‹_di°
.
ovîÊows
 = 0;

475 
¨r
 = (*)
	`ˇŒoc
(
¨r_sz
, ());

476 i‡(!
¨r
)

477 
	`Áèl
("out of virtual memory");

478 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
 =árr;

481 
	`add_°©
(
sdb
, 
°©
);

484 
i
=0; i < 
¨r_sz
; i++)

485 
¨r
[
i
] = 
öô_vÆ
;

487  
°©
;

488 
	}
}

497 
°©_°©_t
 *

498 
	$°©_ªg_sdi°
(
°©_sdb_t
 *
sdb
,

499 *
«me
,

500 *
desc
,

501 
öô_vÆ
,

502 
pf
,

503 *
f‹m©
,

504 
¥öt_‚_t
 
¥öt_‚
)

506 
°©_°©_t
 *
°©
;

507 
buckë_t
 **
ßº
;

509 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

510 i‡(!
°©
)

511 
	`Áèl
("out of virtual memory");

513 
°©
->
«me
 = 
	`my°rdup
(name);

514 
°©
->
desc
 = 
	`my°rdup
(desc);

515 
°©
->
f‹m©
 = f‹m© ? f‹m© : 
NULL
;

516 
°©
->
sc
 = 
sc_sdi°
;

517 
°©
->
v¨ü¡
.
f‹_sdi°
.
öô_vÆ
 = init_val;

518 
°©
->
v¨ü¡
.
f‹_sdi°
.
pf
 =Öf;

519 
°©
->
v¨ü¡
.
f‹_sdi°
.
¥öt_‚
 =Örint_fn;

522 
ßº
 = (
buckë_t
 **)
	`ˇŒoc
(
HTAB_SZ
, (bucket_t *));

523 i‡(!
ßº
)

524 
	`Áèl
("out of virtual memory");

525 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
 = sarr;

528 
	`add_°©
(
sdb
, 
°©
);

530  
°©
;

531 
	}
}

535 
	$°©_add_ßm∂es
(
°©_°©_t
 *
°©
,

536 
md_addr_t
 
ödex
,

537 
nßm∂es
)

539 
°©
->
sc
)

541 
sc_di°
:

543 
i
;

546 
i
 = 
ödex
 / 
°©
->
v¨ü¡
.
f‹_di°
.
buckë_sz
;

549 i‡(
i
 >
°©
->
v¨ü¡
.
f‹_di°
.
¨r_sz
)

550 
°©
->
v¨ü¡
.
f‹_di°
.
ovîÊows
 +
nßm∂es
;

552 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
] +
nßm∂es
;

555 
sc_sdi°
:

557 
buckë_t
 *
buckë
;

558 
hash
 = 
	`HTAB_HASH
(
ödex
);

560 i‡(
hash
 < 0 || hash >
HTAB_SZ
)

561 
	`∑nic
("hashÅable index overflow");

564 
buckë
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
hash
];

565 
buckë
 !
NULL
;

566 
buckë
 = buckë->
√xt
)

568 i‡(
buckë
->
ödex
 == index)

571 i‡(!
buckë
)

574 
buckë
 = (
buckë_t
 *)
	`ˇŒoc
(1, (bucket_t));

575 i‡(!
buckë
)

576 
	`Áèl
("out of virtual memory");

577 
buckë
->
√xt
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
hash
];

578 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
hash
] = 
buckë
;

579 
buckë
->
ödex
 = index;

580 
buckë
->
cou¡
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.
öô_vÆ
;

582 
buckë
->
cou¡
 +
nßm∂es
;

586 
	`∑nic
("stat variable isÇotánárray distribution");

588 
	}
}

592 
	$°©_add_ßm∂e
(
°©_°©_t
 *
°©
,

593 
md_addr_t
 
ödex
)

595 
	`°©_add_ßm∂es
(
°©
, 
ödex
, 1);

596 
	}
}

605 
°©_°©_t
 *

606 
	$°©_ªg_f‹muœ
(
°©_sdb_t
 *
sdb
,

607 *
«me
,

608 *
desc
,

609 *
f‹muœ
,

610 *
f‹m©
)

612 
°©_°©_t
 *
°©
;

614 
°©
 = (
°©_°©_t
 *)
	`ˇŒoc
(1, (stat_stat_t));

615 i‡(!
°©
)

616 
	`Áèl
("out of virtual memory");

618 
°©
->
«me
 = 
	`my°rdup
(name);

619 
°©
->
desc
 = 
	`my°rdup
(desc);

620 
°©
->
f‹m©
 = format ? format : "%12.4f";

621 
°©
->
sc
 = 
sc_f‹muœ
;

622 
°©
->
v¨ü¡
.
f‹_f‹muœ
.
f‹muœ
 = 
	`my°rdup
(formula);

625 
	`add_°©
(
sdb
, 
°©
);

627  
°©
;

628 
	}
}

633 
	$com∑ª_‚
(*
p1
, *
p2
)

635 
buckë_t
 **
pb1
 = 
p1
, **
pb2
 = 
p2
;

638 i‡((*
pb1
)->
ödex
 < (*
pb2
)->index)

640 i‡((*
pb1
)->
ödex
 > (*
pb2
)->index)

644 
	}
}

648 
	$¥öt_di°
(
°©_°©_t
 *
°©
,

649 
FILE
 *
fd
)

651 
i
, 
bcou¡
, 
imax
, 
imö
;

652 
btŸÆ
, 
bsum
, 
bv¨
, 
bavg
, 
bsqsum
;

653 
pf
 = 
°©
->
v¨ü¡
.
f‹_di°
.pf;

656 
bcou¡
 = 0; 
btŸÆ
 = 0.0; 
bv¨
 = 0.0; 
bsqsum
 = 0.0;

657 
imax
 = 0; 
imö
 = 
UINT_MAX
;

658 
i
=0; i<
°©
->
v¨ü¡
.
f‹_di°
.
¨r_sz
; i++)

660 
bcou¡
++;

661 
btŸÆ
 +
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
];

663 
bsqsum
 +(()
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
] *

664 ()
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
]);

665 
bavg
 = 
btŸÆ
 / 
	`MAX
(()
bcou¡
, 1.0);

666 
bv¨
 = (
bsqsum
 - (()
bcou¡
 * 
bavg
 * bavg)) /

667 ()(((
bcou¡
 - 1) > 0) ? (bcount - 1) : 1);

671 
	`Ârötf
(
fd
, "\n");

672 
	`Ârötf
(
fd
, "%-22†# %s\n", 
°©
->
«me
, sèt->
desc
);

673 
	`Ârötf
(
fd
, "%s.array_size = %u\n",

674 
°©
->
«me
, sèt->
v¨ü¡
.
f‹_di°
.
¨r_sz
);

675 
	`Ârötf
(
fd
, "%s.bucket_size = %u\n",

676 
°©
->
«me
, sèt->
v¨ü¡
.
f‹_di°
.
buckë_sz
);

678 
	`Ârötf
(
fd
, "%s.cou¡ = %u\n", 
°©
->
«me
, 
bcou¡
);

679 
	`Ârötf
(
fd
, "%s.tŸÆ = %.0f\n", 
°©
->
«me
, 
btŸÆ
);

680 i‡(
bcou¡
 > 0)

682 
	`Ârötf
(
fd
, "%s.imö = %u\n", 
°©
->
«me
, 0U);

683 
	`Ârötf
(
fd
, "%s.imax = %u\n", 
°©
->
«me
, 
bcou¡
);

687 
	`Ârötf
(
fd
, "%s.imö = %d\n", 
°©
->
«me
, -1);

688 
	`Ârötf
(
fd
, "%s.imax = %d\n", 
°©
->
«me
, -1);

690 
	`Ârötf
(
fd
, "%s.avîagê%8.4f\n", 
°©
->
«me
, 
btŸÆ
/
	`MAX
(
bcou¡
, 1.0));

691 
	`Ârötf
(
fd
, "%s.°d_dev = %8.4f\n", 
°©
->
«me
, 
	`sqπ
(
bv¨
));

692 
	`Ârötf
(
fd
, "%s.overflows = %u\n",

693 
°©
->
«me
, sèt->
v¨ü¡
.
f‹_di°
.
ovîÊows
);

695 
	`Ârötf
(
fd
, "#Ödf ==Örob dist fn, cdf == cumulative dist fn\n");

696 
	`Ârötf
(
fd
, "# %14s ", "index");

697 i‡(
pf
 & 
PF_COUNT
)

698 
	`Ârötf
(
fd
, "%10s ", "count");

699 i‡(
pf
 & 
PF_PDF
)

700 
	`Ârötf
(
fd
, "%6s ", "pdf");

701 i‡(
pf
 & 
PF_CDF
)

702 
	`Ârötf
(
fd
, "%6s ", "cdf");

703 
	`Ârötf
(
fd
, "\n");

705 
	`Ârötf
(
fd
, "%s.°¨t_di°\n", 
°©
->
«me
);

707 i‡(
bcou¡
 > 0)

710 
bsum
 = 0.0;

711 
i
=0; i<
bcou¡
; i++)

713 
bsum
 +()
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
];

714 i‡(
°©
->
v¨ü¡
.
f‹_di°
.
¥öt_‚
)

716 
°©
->
v¨ü¡
.
f‹_di°
.
	`¥öt_‚
(stat,

717 
i
,

718 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
],

719 
bsum
,

720 
btŸÆ
);

724 i‡(
°©
->
f‹m©
 =
NULL
)

726 i‡(
°©
->
v¨ü¡
.
f‹_di°
.
im≠
)

727 
	`Ârötf
(
fd
, "%-16†", 
°©
->
v¨ü¡
.
f‹_di°
.
im≠
[
i
]);

729 
	`Ârötf
(
fd
, "%16u ",

730 
i
 * 
°©
->
v¨ü¡
.
f‹_di°
.
buckë_sz
);

731 i‡(
pf
 & 
PF_COUNT
)

732 
	`Ârötf
(
fd
, "%10u ", 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
]);

733 i‡(
pf
 & 
PF_PDF
)

734 
	`Ârötf
(
fd
, "%6.2f ",

735 ()
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
] /

736 
	`MAX
(
btŸÆ
, 1.0) * 100.0);

737 i‡(
pf
 & 
PF_CDF
)

738 
	`Ârötf
(
fd
, "%6.2‡", 
bsum
/
	`MAX
(
btŸÆ
, 1.0) * 100.0);

742 i‡(
pf
 =(
PF_COUNT
|
PF_PDF
|
PF_CDF
))

744 i‡(
°©
->
v¨ü¡
.
f‹_di°
.
im≠
)

745 
	`Ârötf
(
fd
, 
°©
->
f‹m©
,

746 
°©
->
v¨ü¡
.
f‹_di°
.
im≠
[
i
],

747 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
],

748 ()
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
] /

749 
	`MAX
(
btŸÆ
, 1.0) * 100.0,

750 
bsum
/
	`MAX
(
btŸÆ
, 1.0) * 100.0);

752 
	`Ârötf
(
fd
, 
°©
->
f‹m©
,

753 
i
 * 
°©
->
v¨ü¡
.
f‹_di°
.
buckë_sz
,

754 
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
],

755 ()
°©
->
v¨ü¡
.
f‹_di°
.
¨r
[
i
] /

756 
	`MAX
(
btŸÆ
, 1.0) * 100.0,

757 
bsum
/
	`MAX
(
btŸÆ
, 1.0) * 100.0);

760 
	`Áèl
("distribution formatÇot yet implemented");

762 
	`Ârötf
(
fd
, "\n");

767 
	`Ârötf
(
fd
, "%s.íd_di°\n", 
°©
->
«me
);

768 
	}
}

772 
	$¥öt_sdi°
(
°©_°©_t
 *
°©
,

773 
FILE
 *
fd
)

775 
i
, 
bcou¡
;

776 
md_addr_t
 
imax
, 
imö
;

777 
btŸÆ
, 
bsum
, 
bv¨
, 
bavg
, 
bsqsum
;

778 
buckë_t
 *
buckë
;

779 
pf
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.pf;

782 
bcou¡
 = 0; 
btŸÆ
 = 0.0; 
bv¨
 = 0.0; 
bsqsum
 = 0.0;

783 
imax
 = 0; 
imö
 = 
UINT_MAX
;

784 
i
=0; i<
HTAB_SZ
; i++)

786 
buckë
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
i
];

787 
buckë
 !
NULL
;

788 
buckë
 = buckë->
√xt
)

790 
bcou¡
++;

791 
btŸÆ
 +
buckë
->
cou¡
;

793 
bsqsum
 +(()
buckë
->
cou¡
 * ()bucket->count);

794 
bavg
 = 
btŸÆ
 / ()
bcou¡
;

795 
bv¨
 = (
bsqsum
 - (()
bcou¡
 * 
bavg
 * bavg)) /

796 ()(((
bcou¡
 - 1) > 0) ? (bcount - 1) : 1);

797 i‡(
buckë
->
ödex
 < 
imö
)

798 
imö
 = 
buckë
->
ödex
;

799 i‡(
buckë
->
ödex
 > 
imax
)

800 
imax
 = 
buckë
->
ödex
;

805 
	`Ârötf
(
fd
, "\n");

806 
	`Ârötf
(
fd
, "%-22†# %s\n", 
°©
->
«me
, sèt->
desc
);

807 
	`Ârötf
(
fd
, "%s.cou¡ = %u\n", 
°©
->
«me
, 
bcou¡
);

808 
	`Ârötf
(
fd
, "%s.tŸÆ = %.0f\n", 
°©
->
«me
, 
btŸÆ
);

809 i‡(
bcou¡
 > 0)

811 
	`myÂrötf
(
fd
, "%s.imö = 0x%p\n", 
°©
->
«me
, 
imö
);

812 
	`myÂrötf
(
fd
, "%s.imax = 0x%p\n", 
°©
->
«me
, 
imax
);

816 
	`Ârötf
(
fd
, "%s.imö = %d\n", 
°©
->
«me
, -1);

817 
	`Ârötf
(
fd
, "%s.imax = %d\n", 
°©
->
«me
, -1);

819 
	`Ârötf
(
fd
, "%s.avîagê%8.4f\n", 
°©
->
«me
, 
btŸÆ
/
bcou¡
);

820 
	`Ârötf
(
fd
, "%s.°d_dev = %8.4f\n", 
°©
->
«me
, 
	`sqπ
(
bv¨
));

821 
	`Ârötf
(
fd
, "%s.ovîÊow†0\n", 
°©
->
«me
);

823 
	`Ârötf
(
fd
, "#Ödf ==Örob dist fn, cdf == cumulative dist fn\n");

824 
	`Ârötf
(
fd
, "# %14s ", "index");

825 i‡(
pf
 & 
PF_COUNT
)

826 
	`Ârötf
(
fd
, "%10s ", "count");

827 i‡(
pf
 & 
PF_PDF
)

828 
	`Ârötf
(
fd
, "%6s ", "pdf");

829 i‡(
pf
 & 
PF_CDF
)

830 
	`Ârötf
(
fd
, "%6s ", "cdf");

831 
	`Ârötf
(
fd
, "\n");

833 
	`Ârötf
(
fd
, "%s.°¨t_di°\n", 
°©
->
«me
);

835 i‡(
bcou¡
 > 0)

837 
bödex
;

838 
buckë_t
 **
b¨r
;

841 
b¨r
 = (
buckë_t
 **)
	`ˇŒoc
(
bcou¡
, (bucket_t *));

842 i‡(!
b¨r
)

843 
	`Áèl
("out of virtual memory");

844 
bödex
=0,
i
=0; i<
HTAB_SZ
; i++)

846 
buckë
 = 
°©
->
v¨ü¡
.
f‹_sdi°
.
ßº
[
i
];

847 
buckë
 !
NULL
;

848 
buckë
 = buckë->
√xt
)

850 
b¨r
[
bödex
++] = 
buckë
;

855 
	`qs‹t
(
b¨r
, 
bcou¡
, (
buckë_t
 *), (*)
com∑ª_‚
);

858 
bsum
 = 0.0;

859 
i
=0; i<
bcou¡
; i++)

861 
bsum
 +()
b¨r
[
i
]->
cou¡
;

862 i‡(
°©
->
v¨ü¡
.
f‹_sdi°
.
¥öt_‚
)

864 
°©
->
v¨ü¡
.
f‹_sdi°
.
	`¥öt_‚
(stat,

865 
b¨r
[
i
]->
ödex
,

866 
b¨r
[
i
]->
cou¡
,

867 
bsum
,

868 
btŸÆ
);

872 i‡(
°©
->
f‹m©
 =
NULL
)

874 
	`myÂrötf
(
fd
, "0x%∞", 
b¨r
[
i
]->
ödex
);

875 i‡(
pf
 & 
PF_COUNT
)

876 
	`Ârötf
(
fd
, "%10u ", 
b¨r
[
i
]->
cou¡
);

877 i‡(
pf
 & 
PF_PDF
)

878 
	`Ârötf
(
fd
, "%6.2f ",

879 ()
b¨r
[
i
]->
cou¡
/
	`MAX
(
btŸÆ
, 1.0) * 100.0);

880 i‡(
pf
 & 
PF_CDF
)

881 
	`Ârötf
(
fd
, "%6.2‡", 
bsum
/
	`MAX
(
btŸÆ
, 1.0) * 100.0);

885 i‡(
pf
 =(
PF_COUNT
|
PF_PDF
|
PF_CDF
))

887 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
,

888 
b¨r
[
i
]->
ödex
, b¨r[i]->
cou¡
,

889 ()
b¨r
[
i
]->
cou¡
/
	`MAX
(
btŸÆ
, 1.0)*100.0,

890 
bsum
/
	`MAX
(
btŸÆ
, 1.0) * 100.0);

892 i‡(
pf
 =(
PF_COUNT
|
PF_PDF
))

894 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
,

895 
b¨r
[
i
]->
ödex
, b¨r[i]->
cou¡
,

896 ()
b¨r
[
i
]->
cou¡
/
	`MAX
(
btŸÆ
, 1.0)*100.0);

898 i‡(
pf
 =
PF_COUNT
)

900 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
,

901 
b¨r
[
i
]->
ödex
, b¨r[i]->
cou¡
);

904 
	`Áèl
("distribution formatÇot yet implemented");

906 
	`Ârötf
(
fd
, "\n");

911 
	`‰ì
(
b¨r
);

914 
	`Ârötf
(
fd
, "%s.íd_di°\n", 
°©
->
«me
);

915 
	}
}

919 
	$°©_¥öt_°©
(
°©_sdb_t
 *
sdb
,

920 
°©_°©_t
 *
°©
,

921 
FILE
 *
fd
)

923 
evÆ_vÆue_t
 
vÆ
;

925 
°©
->
sc
)

927 
sc_öt
:

928 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

929 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
, *°©->
v¨ü¡
.
f‹_öt
.
v¨
);

930 
	`Ârötf
(
fd
, " # %s", 
°©
->
desc
);

932 
sc_uöt
:

933 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

934 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
, *°©->
v¨ü¡
.
f‹_uöt
.
v¨
);

935 
	`Ârötf
(
fd
, " # %s", 
°©
->
desc
);

937 #ifde‡
HOST_HAS_QWORD


938 
sc_qw‹d
:

940 
buf
[128];

942 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

943 
	`my•rötf
(
buf
, 
°©
->
f‹m©
, *°©->
v¨ü¡
.
f‹_qw‹d
.
v¨
);

944 
	`Ârötf
(
fd
, "%†# %s", 
buf
, 
°©
->
desc
);

947 
sc_sqw‹d
:

949 
buf
[128];

951 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

952 
	`my•rötf
(
buf
, 
°©
->
f‹m©
, *°©->
v¨ü¡
.
f‹_sqw‹d
.
v¨
);

953 
	`Ârötf
(
fd
, "%†# %s", 
buf
, 
°©
->
desc
);

957 
sc_Êﬂt
:

958 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

959 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
, ()*°©->
v¨ü¡
.
f‹_Êﬂt
.
v¨
);

960 
	`Ârötf
(
fd
, " # %s", 
°©
->
desc
);

962 
sc_doubÀ
:

963 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

964 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
, *°©->
v¨ü¡
.
f‹_doubÀ
.
v¨
);

965 
	`Ârötf
(
fd
, " # %s", 
°©
->
desc
);

967 
sc_di°
:

968 
	`¥öt_di°
(
°©
, 
fd
);

970 
sc_sdi°
:

971 
	`¥öt_sdi°
(
°©
, 
fd
);

973 
sc_f‹muœ
:

976 
evÆ_°©e_t
 *
es
 = 
	`evÆ_√w
(
°©_evÆ_idít
, 
sdb
);

977 *
ídp
;

979 
	`Ârötf
(
fd
, "%-22†", 
°©
->
«me
);

980 
vÆ
 = 
	`evÆ_ex¥
(
es
, 
°©
->
v¨ü¡
.
f‹_f‹muœ
.
f‹muœ
, &
ídp
);

981 i‡(
evÆ_îr‹
 !
ERR_NOERR
 || *
ídp
 != '\0')

982 
	`Ârötf
(
fd
, "<îr‹: %s>", 
evÆ_îr_°r
[
evÆ_îr‹
]);

984 
	`myÂrötf
(
fd
, 
°©
->
f‹m©
, 
	`evÆ_as_doubÀ
(
vÆ
));

985 
	`Ârötf
(
fd
, " # %s", 
°©
->
desc
);

988 
	`evÆ_dñëe
(
es
);

992 
	`∑nic
("bogus stat class");

994 
	`Ârötf
(
fd
, "\n");

995 
	}
}

999 
	$°©_¥öt_°©s
(
°©_sdb_t
 *
sdb
,

1000 
FILE
 *
fd
)

1002 
°©_°©_t
 *
°©
;

1004 i‡(!
sdb
)

1010 
°©
=
sdb
->
°©s
; sèà!
NULL
; sèt=°©->
√xt
)

1011 
	`°©_¥öt_°©
(
sdb
, 
°©
, 
fd
);

1012 
	}
}

1015 
°©_°©_t
 *

1016 
	$°©_föd_°©
(
°©_sdb_t
 *
sdb
,

1017 *
°©_«me
)

1019 
°©_°©_t
 *
°©
;

1021 
°©
 = 
sdb
->
°©s
; sèà!
NULL
; sèà°©->
√xt
)

1023 i‡(!
	`°rcmp
(
°©
->
«me
, 
°©_«me
))

1026  
°©
;

1027 
	}
}

1029 #ifde‡
TESTIT


1032 
	$maö
()

1034 
°©_sdb_t
 *
sdb
;

1035 
°©_°©_t
 *
°©
, *
°©1
, *
°©2
, *
°©3
, *
°©4
, *
°©5
;

1036 
™_öt
;

1037 
a_uöt
;

1038 
a_Êﬂt
;

1039 
a_doubÀ
;

1040 *
my_im≠
[8] = {

1045 
sdb
 = 
	`°©_√w
();

1048 
	`°©_ªg_öt
(
sdb
, "stat.an_int", "An integer stat variable.",

1049 &
™_öt
, 1, 
NULL
);

1050 
	`°©_ªg_uöt
(
sdb
, "stat.a_uint", "An unsigned integer stat variable.",

1051 &
a_uöt
, 2, "%u (unsigned)");

1052 
	`°©_ªg_Êﬂt
(
sdb
, "stat.a_float", "A float stat variable.",

1053 &
a_Êﬂt
, 3, 
NULL
);

1054 
	`°©_ªg_doubÀ
(
sdb
, "stat.a_double", "A double stat variable.",

1055 &
a_doubÀ
, 4, 
NULL
);

1056 
	`°©_ªg_f‹muœ
(
sdb
, "stat.a_formula", "A double stat formula.",

1057 "°©.a_Êﬂà/ sèt.a_uöt", 
NULL
);

1058 
	`°©_ªg_f‹muœ
(
sdb
, "stat.a_formula1", "A double stat formula #1.",

1059 "2 * (°©.a_f‹muœ / (1.5 * sèt.™_öt))", 
NULL
);

1060 
	`°©_ªg_f‹muœ
(
sdb
, "stat.a_bad_formula", "A double stat formula w/error.",

1061 "°©.a_Êﬂà/ (°©.a_uöà- 2)", 
NULL
);

1062 
°©
 = 
	`°©_ªg_di°
(
sdb
, "stat.a_dist", "Anárray distribution.",

1063 0, 8, 1, 
PF_ALL
, 
NULL
, NULL, NULL);

1064 
°©1
 = 
	`°©_ªg_di°
(
sdb
, "stat.a_dist1", "Anárray distribution #1.",

1065 0, 8, 4, 
PF_ALL
, 
NULL
, NULL, NULL);

1066 
°©2
 = 
	`°©_ªg_di°
(
sdb
, "stat.a_dist2", "Anárray distribution #2.",

1067 0, 8, 1, (
PF_PDF
|
PF_CDF
), 
NULL
, NULL, NULL);

1068 
°©3
 = 
	`°©_ªg_di°
(
sdb
, "stat.a_dist3", "Anárray distribution #3.",

1069 0, 8, 1, 
PF_ALL
, 
NULL
, 
my_im≠
, NULL);

1070 
°©4
 = 
	`°©_ªg_sdi°
(
sdb
, "stat.a_sdist", "A sparseárray distribution.",

1071 0, 
PF_ALL
, 
NULL
, NULL);

1072 
°©5
 = 
	`°©_ªg_sdi°
(
sdb
, "stat.a_sdist1",

1074 0, 
PF_ALL
, "0x%08lx %10lu %6.2f %6.2f",

1075 
NULL
);

1078 
	`Ârötf
(
°dout
, "** Initial stats...\n");

1079 
	`°©_¥öt_°©s
(
sdb
, 
°dout
);

1082 
™_öt
++;

1083 
a_uöt
++;

1084 
a_Êﬂt
 *= 2;

1085 
a_doubÀ
 *= 4;

1087 
	`°©_add_ßm∂e
(
°©
, 8);

1088 
	`°©_add_ßm∂e
(
°©
, 8);

1089 
	`°©_add_ßm∂e
(
°©
, 1);

1090 
	`°©_add_ßm∂e
(
°©
, 3);

1091 
	`°©_add_ßm∂e
(
°©
, 4);

1092 
	`°©_add_ßm∂e
(
°©
, 4);

1093 
	`°©_add_ßm∂e
(
°©
, 7);

1095 
	`°©_add_ßm∂e
(
°©1
, 32);

1096 
	`°©_add_ßm∂e
(
°©1
, 32);

1097 
	`°©_add_ßm∂e
(
°©1
, 1);

1098 
	`°©_add_ßm∂e
(
°©1
, 12);

1099 
	`°©_add_ßm∂e
(
°©1
, 17);

1100 
	`°©_add_ßm∂e
(
°©1
, 18);

1101 
	`°©_add_ßm∂e
(
°©1
, 30);

1103 
	`°©_add_ßm∂e
(
°©2
, 8);

1104 
	`°©_add_ßm∂e
(
°©2
, 8);

1105 
	`°©_add_ßm∂e
(
°©2
, 1);

1106 
	`°©_add_ßm∂e
(
°©2
, 3);

1107 
	`°©_add_ßm∂e
(
°©2
, 4);

1108 
	`°©_add_ßm∂e
(
°©2
, 4);

1109 
	`°©_add_ßm∂e
(
°©2
, 7);

1111 
	`°©_add_ßm∂e
(
°©3
, 8);

1112 
	`°©_add_ßm∂e
(
°©3
, 8);

1113 
	`°©_add_ßm∂e
(
°©3
, 1);

1114 
	`°©_add_ßm∂e
(
°©3
, 3);

1115 
	`°©_add_ßm∂e
(
°©3
, 4);

1116 
	`°©_add_ßm∂e
(
°©3
, 4);

1117 
	`°©_add_ßm∂e
(
°©3
, 7);

1119 
	`°©_add_ßm∂e
(
°©4
, 800);

1120 
	`°©_add_ßm∂e
(
°©4
, 800);

1121 
	`°©_add_ßm∂e
(
°©4
, 1123);

1122 
	`°©_add_ßm∂e
(
°©4
, 3332);

1123 
	`°©_add_ßm∂e
(
°©4
, 4000);

1124 
	`°©_add_ßm∂es
(
°©4
, 4001, 18);

1125 
	`°©_add_ßm∂e
(
°©4
, 7);

1127 
	`°©_add_ßm∂e
(
°©5
, 800);

1128 
	`°©_add_ßm∂e
(
°©5
, 800);

1129 
	`°©_add_ßm∂e
(
°©5
, 1123);

1130 
	`°©_add_ßm∂e
(
°©5
, 3332);

1131 
	`°©_add_ßm∂e
(
°©5
, 4000);

1132 
	`°©_add_ßm∂es
(
°©5
, 4001, 18);

1133 
	`°©_add_ßm∂e
(
°©5
, 7);

1136 
	`Ârötf
(
°dout
, "** Final stats...\n");

1137 
	`°©_¥öt_°©s
(
sdb
, 
°dout
);

1140 
	`°©_dñëe
(
sdb
);

1141 
	`exô
(0);

1142 
	}
}

	@stats.h

52 #i‚de‡
STAT_H


53 
	#STAT_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"machöe.h
"

59 
	~"evÆ.h
"

73 
	e°©_˛ass_t
 {

74 
	msc_öt
 = 0,

75 
	msc_uöt
,

76 #ifde‡
HOST_HAS_QWORD


77 
	msc_qw‹d
,

78 
	msc_sqw‹d
,

80 
	msc_Êﬂt
,

81 
	msc_doubÀ
,

82 
	msc_di°
,

83 
	msc_sdi°
,

84 
	msc_f‹muœ
,

85 
	msc_NUM


89 
	#HTAB_SZ
 1024

	)

90 
	#HTAB_HASH
(
I
Ë((((IË>> 8Ë^ (I)Ë& (
HTAB_SZ
 - 1))

	)

93 
	sbuckë_t
 {

94 
buckë_t
 *
	m√xt
;

95 
md_addr_t
 
	mödex
;

96 
	mcou¡
;

100 
	g°©_°©_t
;

103 
	#PF_COUNT
 0x0001

	)

104 
	#PF_PDF
 0x0002

	)

105 
	#PF_CDF
 0x0004

	)

106 
	#PF_ALL
 (
PF_COUNT
|
PF_PDF
|
PF_CDF
)

	)

112 (*
	t¥öt_‚_t
)(
	t°©_°©_t
 *
	t°©
,

113 
	tmd_addr_t
 
	tödex
,

114 
	tcou¡
,

115 
	tsum
,

116 
	ttŸÆ
);

119 
	s°©_°©_t
 {

120 
°©_°©_t
 *
	m√xt
;

121 *
	m«me
;

122 *
	mdesc
;

123 *
	mf‹m©
;

124 
°©_˛ass_t
 
	msc
;

125 
	u°©_v¨ü¡_t
 {

127 
	s°©_f‹_öt_t
 {

128 *
	mv¨
;

129 
	möô_vÆ
;

130 } 
	mf‹_öt
;

132 
	s°©_f‹_uöt_t
 {

133 *
	mv¨
;

134 
	möô_vÆ
;

135 } 
	mf‹_uöt
;

136 #ifde‡
HOST_HAS_QWORD


138 
	s°©_f‹_qw‹d_t
 {

139 
qw‹d_t
 *
	mv¨
;

140 
qw‹d_t
 
	möô_vÆ
;

141 } 
	mf‹_qw‹d
;

143 
	s°©_f‹_sqw‹d_t
 {

144 
sqw‹d_t
 *
	mv¨
;

145 
sqw‹d_t
 
	möô_vÆ
;

146 } 
	mf‹_sqw‹d
;

149 
	s°©_f‹_Êﬂt_t
 {

150 *
	mv¨
;

151 
	möô_vÆ
;

152 } 
	mf‹_Êﬂt
;

154 
	s°©_f‹_doubÀ_t
 {

155 *
	mv¨
;

156 
	möô_vÆ
;

157 } 
	mf‹_doubÀ
;

159 
	s°©_f‹_di°_t
 {

160 
	möô_vÆ
;

161 *
	m¨r
;

162 
	m¨r_sz
;

163 
	mbuckë_sz
;

164 
	mpf
;

165 **
	mim≠
;

166 
¥öt_‚_t
 
	m¥öt_‚
;

167 
	movîÊows
;

168 } 
	mf‹_di°
;

170 
	s°©_f‹_sdi°_t
 {

171 
	möô_vÆ
;

172 
buckë_t
 **
	mßº
;

173 
	mpf
;

174 
¥öt_‚_t
 
	m¥öt_‚
;

175 } 
	mf‹_sdi°
;

177 
	s°©_f‹_f‹muœ_t
 {

178 *
	mf‹muœ
;

179 } 
	mf‹_f‹muœ
;

180 } 
	mv¨ü¡
;

184 
	s°©_sdb_t
 {

185 
°©_°©_t
 *
	m°©s
;

186 
evÆ_°©e_t
 *
	mevÆu©‹
;

190 
evÆ_vÆue_t


191 
°©_evÆ_idít
(
evÆ_°©e_t
 *
es
);

194 
°©_sdb_t
 *
°©_√w
();

198 
°©_dñëe
(
°©_sdb_t
 *
sdb
);

201 
°©_°©_t
 *

202 
°©_ªg_öt
(
°©_sdb_t
 *
sdb
,

203 *
«me
,

204 *
desc
,

205 *
v¨
,

206 
öô_vÆ
,

207 *
f‹m©
);

210 
°©_°©_t
 *

211 
°©_ªg_uöt
(
°©_sdb_t
 *
sdb
,

212 *
«me
,

213 *
desc
,

214 *
v¨
,

215 
öô_vÆ
,

216 *
f‹m©
);

218 #ifde‡
HOST_HAS_QWORD


220 
°©_°©_t
 *

221 
°©_ªg_qw‹d
(
°©_sdb_t
 *
sdb
,

222 *
«me
,

223 *
desc
,

224 
qw‹d_t
 *
v¨
,

225 
qw‹d_t
 
öô_vÆ
,

226 *
f‹m©
);

229 
°©_°©_t
 *

230 
°©_ªg_sqw‹d
(
°©_sdb_t
 *
sdb
,

231 *
«me
,

232 *
desc
,

233 
sqw‹d_t
 *
v¨
,

234 
sqw‹d_t
 
öô_vÆ
,

235 *
f‹m©
);

239 
°©_°©_t
 *

240 
°©_ªg_Êﬂt
(
°©_sdb_t
 *
sdb
,

241 *
«me
,

242 *
desc
,

243 *
v¨
,

244 
öô_vÆ
,

245 *
f‹m©
);

248 
°©_°©_t
 *

249 
°©_ªg_doubÀ
(
°©_sdb_t
 *
sdb
,

250 *
«me
,

251 *
desc
,

252 *
v¨
,

253 
öô_vÆ
,

254 *
f‹m©
);

262 
°©_°©_t
 *

263 
°©_ªg_di°
(
°©_sdb_t
 *
sdb
,

264 *
«me
,

265 *
desc
,

266 
öô_vÆ
,

267 
¨r_sz
,

268 
buckë_sz
,

269 
pf
,

270 *
f‹m©
,

271 **
im≠
,

272 
¥öt_‚_t
 
¥öt_‚
);

281 
°©_°©_t
 *

282 
°©_ªg_sdi°
(
°©_sdb_t
 *
sdb
,

283 *
«me
,

284 *
desc
,

285 
öô_vÆ
,

286 
pf
,

287 *
f‹m©
,

288 
¥öt_‚_t
 
¥öt_‚
);

292 
°©_add_ßm∂es
(
°©_°©_t
 *
°©
,

293 
md_addr_t
 
ödex
,

294 
nßm∂es
);

298 
°©_add_ßm∂e
(
°©_°©_t
 *
°©
,

299 
md_addr_t
 
ödex
);

308 
°©_°©_t
 *

309 
°©_ªg_f‹muœ
(
°©_sdb_t
 *
sdb
,

310 *
«me
,

311 *
desc
,

312 *
f‹muœ
,

313 *
f‹m©
);

317 
°©_¥öt_°©
(
°©_sdb_t
 *
sdb
,

318 
°©_°©_t
 *
°©
,

319 
FILE
 *
fd
);

323 
°©_¥öt_°©s
(
°©_sdb_t
 *
sdb
,

324 
FILE
 *
fd
);

328 
°©_°©_t
 *

329 
°©_föd_°©
(
°©_sdb_t
 *
sdb
,

330 *
°©_«me
);

	@symbol.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 #ifde‡
BFD_LOADER


58 
	~<bfd.h
>

60 
	~"èrgë-piß/ecoff.h
"

62 
	~"lﬂdî.h
"

63 
	~"symbﬁ.h
"

65 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

70 
sym_sym_t
 *
	gsym_db
 = 
NULL
;

73 
	gsym_nsyms
 = 0;

74 
sym_sym_t
 **
	gsym_syms
 = 
NULL
;

77 
sym_sym_t
 **
	gsym_syms_by_«me
 = 
NULL
;

80 
	gsym_¡extsyms
 = 0;

81 
sym_sym_t
 **
	gsym_ãxtsyms
 = 
NULL
;

84 
sym_sym_t
 **
	gsym_ãxtsyms_by_«me
 = 
NULL
;

87 
	gsym_nd©asyms
 = 0;

88 
sym_sym_t
 **
	gsym_d©asyms
 = 
NULL
;

91 
sym_sym_t
 **
	gsym_d©asyms_by_«me
 = 
NULL
;

94 
	gsyms_lﬂded
 = 
FALSE
;

102 
	$is_lib_func
(*
func_«me
)

104 i‡((
	`°rcmp
(
func_«me
, "__do_global_dtors") == 0)

105 || (
	`°rcmp
(
func_«me
, "__libc_init") == 0))

109 
	}
}

117 
	$gë_¥og_ønge
()

119 
i
, 
size
 = 0;

120 
sym_sym_t
 *
sym
;

122 
°¨t_addr
 = 
sym_ãxtsyms
[0]->
addr
;

123 
i
=0; i < 
sym_¡extsyms
; i++) {

124 
sym
 = 
sym_ãxtsyms
[
i
];

125 i‡(
	`is_lib_func
(
sym
->
«me
))

127 
size
 +
sym
->size;

129 
íd_addr
 = 
°¨t_addr
 + 
size
;

130 
	}
}

132 #ifde‡
PRINT_SYMS


135 
	$Êags2°r
(
Êags
)

137 
buf
[256];

138 *
p
;

140 i‡(!
Êags
)

143 
p
 = 
buf
;

144 *
p
 = '\0';

146 i‡(
Êags
 & 
BSF_LOCAL
)

148 *
p
++ = 'L';

149 *
p
++ = '|';

151 i‡(
Êags
 & 
BSF_GLOBAL
)

153 *
p
++ = 'G';

154 *
p
++ = '|';

156 i‡(
Êags
 & 
BSF_DEBUGGING
)

158 *
p
++ = 'D';

159 *
p
++ = '|';

161 i‡(
Êags
 & 
BSF_FUNCTION
)

163 *
p
++ = 'F';

164 *
p
++ = '|';

166 i‡(
Êags
 & 
BSF_KEEP
)

168 *
p
++ = 'K';

169 *
p
++ = '|';

171 i‡(
Êags
 & 
BSF_KEEP_G
)

173 *
p
++ = 'k'; *p++ = '|';

175 i‡(
Êags
 & 
BSF_WEAK
)

177 *
p
++ = 'W';

178 *
p
++ = '|';

180 i‡(
Êags
 & 
BSF_SECTION_SYM
)

182 *
p
++ = 'S'; *p++ = '|';

184 i‡(
Êags
 & 
BSF_OLD_COMMON
)

186 *
p
++ = 'O';

187 *
p
++ = '|';

189 i‡(
Êags
 & 
BSF_NOT_AT_END
)

191 *
p
++ = 'N';

192 *
p
++ = '|';

194 i‡(
Êags
 & 
BSF_CONSTRUCTOR
)

196 *
p
++ = 'C';

197 *
p
++ = '|';

199 i‡(
Êags
 & 
BSF_WARNING
)

201 *
p
++ = 'w';

202 *
p
++ = '|';

204 i‡(
Êags
 & 
BSF_INDIRECT
)

206 *
p
++ = 'I';

207 *
p
++ = '|';

209 i‡(
Êags
 & 
BSF_FILE
)

211 *
p
++ = 'f';

212 *
p
++ = '|';

215 i‡(
p
 =
buf
)

216 
	`∑nic
("no flags detected");

218 *--
p
 = '\0';

219  
buf
;

220 
	}
}

225 
	$acmp
(
sym_sym_t
 **
sym1
, sym_sym_à**
sym2
)

227  ()((*
sym1
)->
addr
 - (*
sym2
)->addr);

228 
	}
}

232 
	$ncmp
(
sym_sym_t
 **
sym1
, sym_sym_à**
sym2
)

234  
	`°rcmp
((*
sym1
)->
«me
, (*
sym2
)->name);

235 
	}
}

237 
	#RELEVANT_SCOPE
(
SYM
) \

239 ((
SYM
)->
Êags
 & 
BSF_GLOBAL
) \

241 (((
SYM
)->
Êags
 & (
BSF_LOCAL
|
BSF_DEBUGGING
)) == BSF_LOCAL) \

242 && (
SYM
)->
«me
[0] != '$') \

244 
lﬂd_loˇls
 \

246 ((
SYM
)->
Êags
&(
BSF_LOCAL
|
BSF_DEBUGGING
))==(BSF_LOCAL|BSF_DEBUGGING)\

247 && (
SYM
)->
«me
[0] == '$') \

249 ((
SYM
)->
Êags
 & (
BSF_LOCAL
|
BSF_DEBUGGING
)) == (BSF_LOCAL) \

250 && (
SYM
)->
«me
[0] ='$'))))

	)

255 
	$sym_lﬂdsyms
(*
‚ame
,

256 
lﬂd_loˇls
)

258 
i
, 
debug_˙t
;

259 #ifde‡
BFD_LOADER


260 
bfd
 *
abfd
;

261 
asymbﬁ
 **
syms
;

262 
°‹age
, 
i
, 
nsyms
, 
debug_˙t
;

264 
Àn
;

265 
FILE
 *
fobj
;

266 
ecoff_fûehdr
 
fhdr
;

267 
ecoff_aouthdr
 
ahdr
;

268 
ecoff_symhdr_t
 
symhdr
;

269 *
°πab
 = 
NULL
;

270 
ecoff_EXTR
 *
exå
;

273 i‡(
syms_lﬂded
)

280 #ifde‡
BFD_LOADER


283 i‡(!(
abfd
 = 
	`bfd_›ír
(
‚ame
, "ss-coff-big")))

284 i‡(!(
abfd
 = 
	`bfd_›ír
(
‚ame
, "ss-coff-little")))

285 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
‚ame
);

290 i‡(!
	`bfd_check_f‹m©
(
abfd
, 
bfd_obje˘
))

292 
	`bfd_˛o£
(
abfd
);

293 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
‚ame
);

297 i‡(
abfd
->
xvec
->
byã‹dî_big_p
 !()
ld_èrgë_big_ídün
)

298 
	`∑nic
("binaryÉndian changed");

300 i‡((
	`bfd_gë_fûe_Êags
(
abfd
Ë& (
HAS_SYMS
|
HAS_LOCALS
)))

303 
°‹age
 = 
	`bfd_gë_symèb_uµî_bound
(
abfd
);

304 i‡(
°‹age
 <= 0)

305 
	`Áèl
("HAS_SYMS i†£t, buà`%s' stû»œck†symbﬁs", 
‚ame
);

307 
syms
 = (
asymbﬁ
 **)
	`ˇŒoc
(
°‹age
, 1);

308 i‡(!
syms
)

309 
	`Áèl
("out of virtual memory");

311 
nsyms
 = 
	`bfd_ˇn⁄iˇlize_symèb
 (
abfd
, 
syms
);

312 i‡(
nsyms
 <= 0)

313 
	`Áèl
("HAS_SYMS i†£t, buà`%s' stû»œck†symbﬁs", 
‚ame
);

320 
sym_nd©asyms
 = 0; 
sym_¡extsyms
 = 0;

321 
i
=0; i < 
nsyms
; i++)

323 
asymbﬁ
 *
sym
 = 
syms
[
i
];

327 (!
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".rdata")

328 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".data")

329 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sdata")

330 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".bss")

331 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sbss"))

333 && 
	`RELEVANT_SCOPE
(
sym
))

336 
sym_nd©asyms
++;

337 #ifde‡
PRINT_SYMS


338 
	`Ârötf
(
°dîr
,

340 
sym
->
«me
, sym->
£˘i⁄
->«me, 
	`Êags2°r
(sym->
Êags
),

341 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
);

345 !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".text")

347 && 
	`RELEVANT_SCOPE
(
sym
))

350 
sym_¡extsyms
++;

351 #ifde‡
PRINT_SYMS


352 
	`Ârötf
(
°dîr
,

354 
sym
->
«me
, sym->
£˘i⁄
->«me, 
	`Êags2°r
(sym->
Êags
),

355 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
);

361 #ifde‡
PRINT_SYMS


362 
	`Ârötf
(
°dîr
,

364 
sym
->
«me
, sym->
£˘i⁄
->«me, 
	`Êags2°r
(sym->
Êags
),

365 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
);

369 
sym_nsyms
 = 
sym_¡extsyms
 + 
sym_nd©asyms
;

370 i‡(
sym_nsyms
 <= 0)

371 
	`Áèl
("`%s' ha†nÿãxà‹ d©®symbﬁs", 
‚ame
);

374 
sym_db
 = (
sym_sym_t
 *)
	`ˇŒoc
(
sym_nsyms
, (sym_sym_t));

375 i‡(!
sym_db
)

376 
	`Áèl
("out of virtual memory");

379 
debug_˙t
=0, 
i
=0; i < 
nsyms
; i++)

381 
asymbﬁ
 *
sym
 = 
syms
[
i
];

385 (!
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".rdata")

386 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".data")

387 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sdata")

388 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".bss")

389 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sbss"))

391 && 
	`RELEVANT_SCOPE
(
sym
))

394 
sym_db
[
debug_˙t
].
«me
 = 
	`my°rdup
((*)
sym
->name);

395 
sym_db
[
debug_˙t
].
£g
 = 
ss_d©a
;

396 
sym_db
[
debug_˙t
].
öôülized
 =

397 (!
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".rdata")

398 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".data")

399 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sdata"));

400 
sym_db
[
debug_˙t
].
pub
 = (
sym
->
Êags
 & 
BSF_GLOBAL
);

401 
sym_db
[
debug_˙t
].
loˇl
 = (
sym
->
«me
[0] == '$');

402 
sym_db
[
debug_˙t
].
addr
 = 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
;

404 
debug_˙t
++;

407 !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".text")

409 && 
	`RELEVANT_SCOPE
(
sym
))

412 
sym_db
[
debug_˙t
].
«me
 = 
	`my°rdup
((*)
sym
->name);

413 
sym_db
[
debug_˙t
].
£g
 = 
ss_ãxt
;

414 
sym_db
[
debug_˙t
].
öôülized
 = 
TRUE
;

415 
sym_db
[
debug_˙t
].
pub
 = (
sym
->
Êags
 & 
BSF_GLOBAL
);

416 
sym_db
[
debug_˙t
].
loˇl
 = (
sym
->
«me
[0] == '$');

417 
sym_db
[
debug_˙t
].
addr
 = 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
;

419 
debug_˙t
++;

427 i‡(
debug_˙t
 !
sym_nsyms
)

428 
	`∑nic
("couldÇotÜocateáll counted symbols");

431 
	`‰ì
(
syms
);

435 i‡(!
	`bfd_˛o£
(
abfd
))

436 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
‚ame
);

441 #i‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
_MSC_VER
)

442 
fobj
 = 
	`f›í
(
‚ame
, "rb");

444 
fobj
 = 
	`f›í
(
‚ame
, "r");

446 i‡(!
fobj
)

447 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
‚ame
);

449 i‡(
	`‰ód
(&
fhdr
, (
ecoff_fûehdr
), 1, 
fobj
) < 1)

450 
	`Áèl
("ˇ¬ŸÑód hódî fromÉxecuèbÀ `%s'", 
‚ame
);

453 i‡(
fhdr
.
f_magic
 !
ECOFF_EB_MAGIC
 && fhdr.f_magi¯!
ECOFF_EL_MAGIC
)

454 
	`Áèl
("bad magi¯numbî i¿execuèbÀ `%s'", 
‚ame
);

456 i‡(
	`‰ód
(&
ahdr
, (
ecoff_aouthdr
), 1, 
fobj
) < 1)

457 
	`Áèl
("ˇ¬ŸÑód AOUT hódî fromÉxecuèbÀ `%s'", 
‚ame
);

460 
	`f£ek
(
fobj
, 
fhdr
.
f_sym±r
, 0);

462 i‡(
	`‰ód
(&
symhdr
, (
ecoff_symhdr_t
), 1, 
fobj
) < 1)

463 
	`Áèl
("couldÇŸÑód symbﬁi¯hódî fromÉxecuèbÀ `%s'", 
‚ame
);

465 i‡(
symhdr
.
magic
 !
ECOFF_magicSym
)

466 
	`Áèl
("bad magi¯numbî (0x%xËö symbﬁi¯hódî", 
symhdr
.
magic
);

469 
Àn
 = 
symhdr
.
issMax
 + symhdr.
issExtMax
;

470 
°πab
 = (*)
	`ˇŒoc
(
Àn
, ());

471 i‡(!
°πab
)

472 
	`Áèl
("out of virtual memory");

475 
	`f£ek
(
fobj
, 
symhdr
.
cbSsOff£t
, 0);

476 i‡(
	`‰ód
(
°πab
, 
Àn
, 1, 
fobj
) < 0)

477 
	`Áèl
("error whileÑeading symbolÅableÇames");

480 
Àn
 = 
symhdr
.
isymMax
 + symhdr.
õxtMax
;

481 i‡(
Àn
 <= 0)

482 
	`Áèl
("`%s' ha†nÿãxà‹ d©®symbﬁs", 
‚ame
);

483 
sym_db
 = (
sym_sym_t
 *)
	`ˇŒoc
(
Àn
, (sym_sym_t));

484 i‡(!
sym_db
)

485 
	`Áèl
("out of virtual memory");

488 
exå
 =

489 (
ecoff_EXTR
 *)
	`ˇŒoc
(
symhdr
.
õxtMax
, (ecoff_EXTR));

490 i‡(!
exå
)

491 
	`Áèl
("out of virtual memory");

493 
	`f£ek
(
fobj
, 
symhdr
.
cbExtOff£t
, 0);

494 i‡(
	`‰ód
(
exå
, (
ecoff_EXTR
), 
symhdr
.
õxtMax
, 
fobj
) < 0)

495 
	`Áèl
("errorÑeadingÉxternal symbolÉntries");

497 
sym_nsyms
 = 0; 
sym_nd©asyms
 = 0; 
sym_¡extsyms
 = 0;

500 
i
=0; i < 
symhdr
.
õxtMax
; i++)

502 
°r_off£t
;

504 
°r_off£t
 = 
symhdr
.
issMax
 + 
exå
[
i
].
asym
.
iss
;

507 
	`¥ötf
("ext %2d: ifd = %2d, iss = %3d, value = %8x, st = %3x, "

509 
i
, 
exå
[i].
ifd
,

510 
exå
[
i
].
asym
.
iss
,Éxå[i].asym.
vÆue
,

511 
exå
[
i
].
asym
.
°
,Éxå[i].asym.
sc
,

512 
exå
[
i
].
asym
.
ödex
);

513 
	`¥ötf
(" %08x %2d %2d %s\n",

514 
exå
[
i
].
asym
.
vÆue
,

515 
exå
[
i
].
asym
.
°
,

516 
exå
[
i
].
asym
.
sc
,

517 &
°πab
[
°r_off£t
]);

520 
exå
[
i
].
asym
.
°
)

522 
ECOFF_°GlobÆ
:

523 
ECOFF_°Sètic
:

525 
sym_db
[
sym_nsyms
].
«me
 = 
	`my°rdup
(&
°πab
[
°r_off£t
]);

526 
sym_db
[
sym_nsyms
].
£g
 = 
ss_d©a
;

527 
sym_db
[
sym_nsyms
].
öôülized
 = 
TRUE
;

528 
sym_db
[
sym_nsyms
].
pub
 = 
TRUE
;

529 
sym_db
[
sym_nsyms
].
loˇl
 = 
FALSE
;

530 
sym_db
[
sym_nsyms
].
addr
 = 
exå
[
i
].
asym
.
vÆue
;

531 
sym_nsyms
++;

532 
sym_nd©asyms
++;

535 
ECOFF_°Proc
:

536 
ECOFF_°SèticProc
:

537 
ECOFF_°Labñ
:

539 
sym_db
[
sym_nsyms
].
«me
 = 
	`my°rdup
(&
°πab
[
°r_off£t
]);

540 
sym_db
[
sym_nsyms
].
£g
 = 
ss_ãxt
;

541 
sym_db
[
sym_nsyms
].
öôülized
 = 
TRUE
;

542 
sym_db
[
sym_nsyms
].
pub
 = 
TRUE
;

543 
sym_db
[
sym_nsyms
].
loˇl
 = 
FALSE
;

544 
sym_db
[
sym_nsyms
].
addr
 = 
exå
[
i
].
asym
.
vÆue
;

545 
sym_nsyms
++;

546 
sym_¡extsyms
++;

553 
	`‰ì
(
exå
);

556 i‡(
	`f˛o£
(
fobj
))

557 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
‚ame
);

566 
sym_syms
 =

567 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nsyms
, (sym_sym_t *));

568 i‡(!
sym_syms
)

569 
	`Áèl
("out of virtual memory");

571 
sym_syms_by_«me
 =

572 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nsyms
, (sym_sym_t *));

573 i‡(!
sym_syms_by_«me
)

574 
	`Áèl
("out of virtual memory");

576 
debug_˙t
=0, 
i
=0; i<
sym_nsyms
; i++)

578 
sym_syms
[
debug_˙t
] = &
sym_db
[
i
];

579 
sym_syms_by_«me
[
debug_˙t
] = &
sym_db
[
i
];

580 
debug_˙t
++;

583 i‡(
debug_˙t
 !
sym_nsyms
)

584 
	`∑nic
("couldÇotÜocateáll symbols");

587 
	`qs‹t
(
sym_syms
, 
sym_nsyms
, (
sym_sym_t
 *), (*)
acmp
);

590 
	`qs‹t
(
sym_syms_by_«me
, 
sym_nsyms
, (
sym_sym_t
 *), (*)
ncmp
);

593 
sym_ãxtsyms
 =

594 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_¡extsyms
, (sym_sym_t *));

595 i‡(!
sym_ãxtsyms
)

596 
	`Áèl
("out of virtual memory");

598 
sym_ãxtsyms_by_«me
 =

599 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_¡extsyms
, (sym_sym_t *));

600 i‡(!
sym_ãxtsyms_by_«me
)

601 
	`Áèl
("out of virtual memory");

603 
debug_˙t
=0, 
i
=0; i<
sym_nsyms
; i++)

605 i‡(
sym_db
[
i
].
£g
 =
ss_ãxt
)

607 
sym_ãxtsyms
[
debug_˙t
] = &
sym_db
[
i
];

608 
sym_ãxtsyms_by_«me
[
debug_˙t
] = &
sym_db
[
i
];

609 
debug_˙t
++;

613 i‡(
debug_˙t
 !
sym_¡extsyms
)

614 
	`∑nic
("couldÇotÜocateállÅext symbols");

617 
	`qs‹t
(
sym_ãxtsyms
, 
sym_¡extsyms
, (
sym_sym_t
 *), (*)
acmp
);

620 
	`qs‹t
(
sym_ãxtsyms_by_«me
, 
sym_¡extsyms
,

621 (
sym_sym_t
 *), (*)
ncmp
);

624 
sym_d©asyms
 =

625 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nd©asyms
, (sym_sym_t *));

626 i‡(!
sym_d©asyms
)

627 
	`Áèl
("out of virtual memory");

629 
sym_d©asyms_by_«me
 =

630 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nd©asyms
, (sym_sym_t *));

631 i‡(!
sym_d©asyms_by_«me
)

632 
	`Áèl
("out of virtual memory");

634 
debug_˙t
=0, 
i
=0; i<
sym_nsyms
; i++)

636 i‡(
sym_db
[
i
].
£g
 =
ss_d©a
)

638 
sym_d©asyms
[
debug_˙t
] = &
sym_db
[
i
];

639 
sym_d©asyms_by_«me
[
debug_˙t
] = &
sym_db
[
i
];

640 
debug_˙t
++;

644 i‡(
debug_˙t
 !
sym_nd©asyms
)

645 
	`∑nic
("couldÇotÜocateáll data symbols");

648 
	`qs‹t
(
sym_d©asyms
, 
sym_nd©asyms
, (
sym_sym_t
 *), (*)
acmp
);

651 
	`qs‹t
(
sym_d©asyms_by_«me
, 
sym_nd©asyms
,

652 (
sym_sym_t
 *), (*)
ncmp
);

655 
i
=0; i<
sym_¡extsyms
; i++)

657 
sym_ãxtsyms
[
i
]->
size
 =

658 (
i
 !(
sym_¡extsyms
 - 1)

659 ? (
sym_ãxtsyms
[
i
+1]->
addr
 - sym_textsyms[i]->addr)

660 : ((
ld_ãxt_ba£
 + 
ld_ãxt_size
Ë- 
sym_ãxtsyms
[
i
]->
addr
));

662 
i
=0; i<
sym_nd©asyms
; i++)

664 
sym_d©asyms
[
i
]->
size
 =

665 (
i
 !(
sym_nd©asyms
 - 1)

666 ? (
sym_d©asyms
[
i
+1]->
addr
 - sym_datasyms[i]->addr)

667 : ((
ld_d©a_ba£
 + 
ld_d©a_size
Ë- 
sym_d©asyms
[
i
]->
addr
));

671 
syms_lﬂded
 = 
TRUE
;

673 
	`gë_¥og_ønge
();

674 
	}
}

678 
	$sym_dumpsym
(
sym_sym_t
 *
sym
,

679 
FILE
 *
fd
)

681 
	`Ârötf
(
fd
,

683 
sym
->
«me
,

684 
sym
->
£g
 =
ss_d©a
 ? "data" : "text",

685 
sym
->
öôülized
 ? "y" : "n",

686 
sym
->
pub
 ? "y" : "n",

687 
sym
->
loˇl
 ? "y" : "n",

688 
sym
->
addr
,

689 
sym
->
size
);

690 
	}
}

694 
	$sym_dumpsyms
(
FILE
 *
fd
)

696 
i
;

698 
i
=0; i < 
sym_nsyms
; i++)

699 
	`sym_dumpsym
(
sym_syms
[
i
], 
fd
);

700 
	}
}

704 
	$sym_dump°©e
(
FILE
 *
fd
)

706 
i
;

708 i‡(
fd
 =
NULL
)

709 
fd
 = 
°dîr
;

711 
	`Ârötf
(
fd
, "** All symbols sorted byáddress:\n");

712 
i
=0; i < 
sym_nsyms
; i++)

713 
	`sym_dumpsym
(
sym_syms
[
i
], 
fd
);

715 
	`Ârötf
(
fd
, "\n** All symbols sorted byÇame:\n");

716 
i
=0; i < 
sym_nsyms
; i++)

717 
	`sym_dumpsym
(
sym_syms_by_«me
[
i
], 
fd
);

719 
	`Ârötf
(
fd
, "** Text symbols sorted byáddress:\n");

720 
i
=0; i < 
sym_¡extsyms
; i++)

721 
	`sym_dumpsym
(
sym_ãxtsyms
[
i
], 
fd
);

723 
	`Ârötf
(
fd
, "\n** Text symbols sorted byÇame:\n");

724 
i
=0; i < 
sym_¡extsyms
; i++)

725 
	`sym_dumpsym
(
sym_ãxtsyms_by_«me
[
i
], 
fd
);

727 
	`Ârötf
(
fd
, "** Data symbols sorted byáddress:\n");

728 
i
=0; i < 
sym_nd©asyms
; i++)

729 
	`sym_dumpsym
(
sym_d©asyms
[
i
], 
fd
);

731 
	`Ârötf
(
fd
, "\n** Data symbols sorted byÇame:\n");

732 
i
=0; i < 
sym_nd©asyms
; i++)

733 
	`sym_dumpsym
(
sym_d©asyms_by_«me
[
i
], 
fd
);

734 
	}
}

740 
sym_sym_t
 *

741 
	$sym_böd_addr
(
md_addr_t
 
addr
,

742 *
pödex
,

743 
exa˘
,

744 
sym_db_t
 
db
)

746 
nsyms
, 
low
, 
high
, 
pos
;

747 
sym_sym_t
 **
syms
;

749 
db
)

751 
sdb_™y
:

752 
syms
 = 
sym_syms
;

753 
nsyms
 = 
sym_nsyms
;

755 
sdb_ãxt
:

756 
syms
 = 
sym_ãxtsyms
;

757 
nsyms
 = 
sym_¡extsyms
;

759 
sdb_d©a
:

760 
syms
 = 
sym_d©asyms
;

761 
nsyms
 = 
sym_nd©asyms
;

764 
	`∑nic
("bogus symbol database");

768 i‡(!
nsyms
)

770 i‡(
pödex
)

771 *
pödex
 = -1;

772  
NULL
;

776 
low
 = 0;

777 
high
 = 
nsyms
-1;

778 
pos
 = (
low
 + 
high
) >> 1;

780 (
exa˘
 && 
syms
[
pos
]->
addr
 ==áddr)

782 || (!
exa˘


783 && 
syms
[
pos
]->
addr
 <=áddr

784 && 
addr
 < (
syms
[
pos
]->add∏+ 
	`MAX
(1, syms[pos]->
size
)))))

786 i‡(
addr
 < 
syms
[
pos
]->addr)

787 
high
 = 
pos
 - 1;

789 
low
 = 
pos
 + 1;

790 i‡(
high
 >
low
)

791 
pos
 = (
low
 + 
high
) >> 1;

794 i‡(
pödex
)

795 *
pödex
 = -1;

796  
NULL
;

801 i‡(
pödex
)

802 *
pödex
 = 
pos
;

803  
syms
[
pos
];

804 
	}
}

809 
sym_sym_t
 *

810 
	$sym_böd_«me
(*
«me
,

811 *
pödex
,

812 
sym_db_t
 
db
)

814 
nsyms
, 
low
, 
high
, 
pos
, 
cmp
;

815 
sym_sym_t
 **
syms
;

817 
db
)

819 
sdb_™y
:

820 
syms
 = 
sym_syms_by_«me
;

821 
nsyms
 = 
sym_nsyms
;

823 
sdb_ãxt
:

824 
syms
 = 
sym_ãxtsyms_by_«me
;

825 
nsyms
 = 
sym_¡extsyms
;

827 
sdb_d©a
:

828 
syms
 = 
sym_d©asyms_by_«me
;

829 
nsyms
 = 
sym_nd©asyms
;

832 
	`∑nic
("bogus symbol database");

836 i‡(!
nsyms
)

838 i‡(
pödex
)

839 *
pödex
 = -1;

840  
NULL
;

844 
low
 = 0;

845 
high
 = 
nsyms
-1;

846 
pos
 = (
low
 + 
high
) >> 1;

847 !–!(
cmp
 = 
	`°rcmp
(
syms
[
pos
]->
«me
,Çame))))

849 i‡(
cmp
 > 0)

850 
high
 = 
pos
 - 1;

852 
low
 = 
pos
 + 1;

853 i‡(
high
 >
low
)

854 
pos
 = (
low
 + 
high
) >> 1;

857 i‡(
pödex
)

858 *
pödex
 = -1;

859  
NULL
;

864 i‡(
pödex
)

865 *
pödex
 = 
pos
;

866  
syms
[
pos
];

867 
	}
}

	@symbol.h

62 #i‚de‡
SYMBOL_H


63 
	#SYMBOL_H


	)

65 
	~<°dio.h
>

67 
	~"ho°.h
"

68 
	~"misc.h
"

69 
	~"machöe.h
"

71 
	esym_£g_t
 {

72 
	mss_d©a
,

73 
	mss_ãxt
,

74 
	mss_NUM


78 
	ssym_sym_t
 {

79 *
	m«me
;

80 
sym_£g_t
 
	m£g
;

81 
	möôülized
;

82 
	mpub
;

83 
	mloˇl
;

84 
md_addr_t
 
	maddr
;

85 
	msize
;

89 
sym_sym_t
 *
sym_db
;

92 
sym_nsyms
;

93 
sym_sym_t
 **
sym_syms
;

96 
sym_sym_t
 **
sym_syms_by_«me
;

99 
sym_¡extsyms
;

100 
sym_sym_t
 **
sym_ãxtsyms
;

103 
sym_sym_t
 **
sym_ãxtsyms_by_«me
;

106 
sym_nd©asyms
;

107 
sym_sym_t
 **
sym_d©asyms
;

110 
sym_sym_t
 **
sym_d©asyms_by_«me
;

114 
sym_lﬂdsyms
(*
‚ame
,

115 
lﬂd_loˇls
);

119 
sym_dumpsym
(
sym_sym_t
 *
sym
,

120 
FILE
 *
fd
);

124 
sym_dumpsyms
(
FILE
 *
fd
);

128 
sym_dump°©e
(
FILE
 *
fd
);

131 
	esym_db_t
 {

132 
	msdb_™y
,

133 
	msdb_ãxt
,

134 
	msdb_d©a
,

135 
	msdb_NUM


142 
sym_sym_t
 *

143 
sym_böd_addr
(
md_addr_t
 
addr
,

144 *
pödex
,

145 
exa˘
,

146 
sym_db_t
 
db
);

151 
sym_sym_t
 *

152 
sym_böd_«me
(*
«me
,

153 *
pödex
,

154 
sym_db_t
 
db
);

160 
gë_¥og_ønge
();

	@syscall.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~"ho°.h
"

55 
	~"misc.h
"

56 
	~"machöe.h
"

57 
	~"ªgs.h
"

58 
	~"mem‹y.h
"

59 
	~"lﬂdî.h
"

60 
	~"sim.h
"

61 
	~"ídün.h
"

62 
	~"eio.h
"

63 
	~"sysˇŒ.h
"

66 #i‚de‡
MD_CROSS_ENDIAN


68 #ifde‡
_MSC_VER


69 
	~<io.h
>

71 
	~<uni°d.h
>

73 
	~<f˙é.h
>

74 
	~<sys/ty≥s.h
>

75 #i‚de‡
_MSC_VER


76 
	~<sys/∑øm.h
>

78 
	~<î∫o.h
>

79 
	~<time.h
>

80 #i‚de‡
_MSC_VER


81 
	~<sys/time.h
>

83 #i‚de‡
_MSC_VER


84 
	~<sys/ªsour˚.h
>

86 
	~<sig«l.h
>

90 
	~<sys/°©.h
>

91 #i‚de‡
_MSC_VER


92 
	~<sys/uio.h
>

94 
	~<£tjmp.h
>

95 #i‚de‡
_MSC_VER


96 
	~<sys/times.h
>

98 
	~<limôs.h
>

99 #i‚de‡
_MSC_VER


100 
	~<sys/io˘l.h
>

102 #i‡!
deföed
(
löux
Ë&& !deföed(
•¨c
Ë&& !deföed(
hpux
Ë&& !deföed(
__hpux
Ë&& !deföed(
__CYGWIN32__
Ë&& !deföed(
u…rix
)

103 #i‚de‡
_MSC_VER


104 
	~<sys/£À˘.h
>

107 #ifde‡
löux


108 
	~<utime.h
>

109 
	~<sgây.h
>

112 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
)

113 
	~<sgây.h
>

116 #ifde‡
__svr4__


117 
	~"utime.h
"

120 #i‡
deföed
(
•¨c
Ë&& deföed(
__unix__
)

121 #i‡
deföed
(
__svr4__
Ë|| deföed(
__USLC__
)

122 
	~<dúít.h
>

124 
	~<sys/dú.h
>

128 #unde‡
NL0


129 #unde‡
NL1


130 #unde‡
CR0


131 #unde‡
CR1


132 #unde‡
CR2


133 #unde‡
CR3


134 #unde‡
TAB0


135 #unde‡
TAB1


136 #unde‡
TAB2


137 #unde‡
XTABS


138 #unde‡
BS0


139 #unde‡
BS1


140 #unde‡
FF0


141 #unde‡
FF1


142 #unde‡
ECHO


143 #unde‡
NOFLSH


144 #unde‡
TOSTOP


145 #unde‡
FLUSHO


146 #unde‡
PENDIN


149 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
)

150 #unde‡
CR0


153 #ifde‡
__FªeBSD__


154 
	~<sys/io˘l_com∑t.h
>

156 #i‚de‡
_MSC_VER


157 
	~<ãrmio.h
>

161 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
)

163 #unde‡
HUPCL


164 #unde‡
ECHO


165 #unde‡
B50


166 #unde‡
B75


167 #unde‡
B110


168 #unde‡
B134


169 #unde‡
B150


170 #unde‡
B200


171 #unde‡
B300


172 #unde‡
B600


173 #unde‡
B1200


174 #unde‡
B1800


175 #unde‡
B2400


176 #unde‡
B4800


177 #unde‡
B9600


178 #unde‡
B19200


179 #unde‡
B38400


180 #unde‡
NL0


181 #unde‡
NL1


182 #unde‡
CR0


183 #unde‡
CR1


184 #unde‡
CR2


185 #unde‡
CR3


186 #unde‡
TAB0


187 #unde‡
TAB1


188 #unde‡
BS0


189 #unde‡
BS1


190 #unde‡
FF0


191 #unde‡
FF1


192 #unde‡
EXTA


193 #unde‡
EXTB


194 #unde‡
B900


195 #unde‡
B3600


196 #unde‡
B7200


197 #unde‡
XTABS


198 
	~<sgây.h
>

199 
	~<utime.h
>

202 #ifde‡
_MSC_VER


203 
	#ac˚ss
 
_ac˚ss


	)

204 
	#chmod
 
_chmod


	)

205 
	#chdú
 
_chdú


	)

206 
	#u∆ök
 
_u∆ök


	)

207 
	#›í
 
_›í


	)

208 
	#¸ót
 
_¸ót


	)

209 
	#pùe
 
_pùe


	)

210 
	#dup
 
_dup


	)

211 
	#dup2
 
_dup2


	)

212 
	#°©
 
_°©


	)

213 
	#f°©
 
_f°©


	)

214 
	#l£ek
 
_l£ek


	)

215 
	#ªad
 
_ªad


	)

216 
	#wrôe
 
_wrôe


	)

217 
	#˛o£
 
_˛o£


	)

218 
	#gëpid
 
_gëpid


	)

219 
	#utime
 
_utime


	)

220 
	~<sys/utime.h
>

228 
	#SS_SYS_sysˇŒ
 0

	)

230 
	#SS_SYS_f‹k
 2

	)

231 
	#SS_SYS_ªad
 3

	)

233 
	#SS_SYS_›í
 5

	)

234 
	#SS_SYS_˛o£
 6

	)

236 
	#SS_SYS_¸ót
 8

	)

237 
	#SS_SYS_lök
 9

	)

238 
	#SS_SYS_u∆ök
 10

	)

239 
	#SS_SYS_execv
 11

	)

240 
	#SS_SYS_chdú
 12

	)

242 
	#SS_SYS_mknod
 14

	)

243 
	#SS_SYS_chmod
 15

	)

244 
	#SS_SYS_chown
 16

	)

245 
	#SS_SYS_brk
 17

	)

247 
	#SS_SYS_l£ek
 19

	)

248 
	#SS_SYS_gëpid
 20

	)

249 
	#SS_SYS_mou¡
 21

	)

250 
	#SS_SYS_umou¡
 22

	)

252 
	#SS_SYS_gëuid
 24

	)

254 
	#SS_SYS_±ø˚
 26

	)

261 
	#SS_SYS_ac˚ss
 33

	)

264 
	#SS_SYS_sync
 36

	)

265 
	#SS_SYS_kûl
 37

	)

266 
	#SS_SYS_°©
 38

	)

268 
	#SS_SYS_l°©
 40

	)

269 
	#SS_SYS_dup
 41

	)

270 
	#SS_SYS_pùe
 42

	)

272 
	#SS_SYS_¥ofû
 44

	)

275 
	#SS_SYS_gëgid
 47

	)

279 
	#SS_SYS_ac˘
 51

	)

282 
	#SS_SYS_io˘l
 54

	)

283 
	#SS_SYS_ªboŸ
 55

	)

285 
	#SS_SYS_symlök
 57

	)

286 
	#SS_SYS_ªadlök
 58

	)

287 
	#SS_SYS_execve
 59

	)

288 
	#SS_SYS_umask
 60

	)

289 
	#SS_SYS_chroŸ
 61

	)

290 
	#SS_SYS_f°©
 62

	)

292 
	#SS_SYS_gë∑gesize
 64

	)

293 
	#SS_SYS_mªm≠
 65

	)

294 
	#SS_SYS_vf‹k
 66

	)

297 
	#SS_SYS_sbrk
 69

	)

298 
	#SS_SYS_s°k
 70

	)

299 
	#SS_SYS_mm≠
 71

	)

300 
	#SS_SYS_vadvi£
 72

	)

301 
	#SS_SYS_munm≠
 73

	)

302 
	#SS_SYS_m¥Ÿe˘
 74

	)

303 
	#SS_SYS_madvi£
 75

	)

304 
	#SS_SYS_vh™gup
 76

	)

306 
	#SS_SYS_möc‹e
 78

	)

307 
	#SS_SYS_gëgroups
 79

	)

308 
	#SS_SYS_£tgroups
 80

	)

309 
	#SS_SYS_gëpgΩ
 81

	)

310 
	#SS_SYS_£çgΩ
 82

	)

311 
	#SS_SYS_£tôimî
 83

	)

312 
	#SS_SYS_waô3
 84

	)

313 
	#SS_SYS_waô
 
SYS_waô3


	)

314 
	#SS_SYS_sw≠⁄
 85

	)

315 
	#SS_SYS_gëôimî
 86

	)

316 
	#SS_SYS_gëho°«me
 87

	)

317 
	#SS_SYS_£tho°«me
 88

	)

318 
	#SS_SYS_gëdèbÀsize
 89

	)

319 
	#SS_SYS_dup2
 90

	)

320 
	#SS_SYS_gëd›t
 91

	)

321 
	#SS_SYS_f˙é
 92

	)

322 
	#SS_SYS_£À˘
 93

	)

323 
	#SS_SYS_£td›t
 94

	)

324 
	#SS_SYS_fsync
 95

	)

325 
	#SS_SYS_£çri‹ôy
 96

	)

326 
	#SS_SYS_sockë
 97

	)

327 
	#SS_SYS_c⁄√˘
 98

	)

328 
	#SS_SYS_ac˚±
 99

	)

329 
	#SS_SYS_gë¥i‹ôy
 100

	)

330 
	#SS_SYS_£nd
 101

	)

331 
	#SS_SYS_ªcv
 102

	)

332 
	#SS_SYS_sigªtu∫
 103

	)

334 
	#SS_SYS_böd
 104

	)

335 
	#SS_SYS_£tsock›t
 105

	)

336 
	#SS_SYS_li°í
 106

	)

338 
	#SS_SYS_sigvec
 108

	)

339 
	#SS_SYS_sigblock
 109

	)

340 
	#SS_SYS_sig£tmask
 110

	)

341 
	#SS_SYS_sig∑u£
 111

	)

342 
	#SS_SYS_sig°ack
 112

	)

343 
	#SS_SYS_ªcvmsg
 113

	)

344 
	#SS_SYS_£ndmsg
 114

	)

346 
	#SS_SYS_gëtimeofday
 116

	)

347 
	#SS_SYS_gërußge
 117

	)

348 
	#SS_SYS_gësock›t
 118

	)

350 
	#SS_SYS_ªadv
 120

	)

351 
	#SS_SYS_wrôev
 121

	)

352 
	#SS_SYS_£âimeofday
 122

	)

353 
	#SS_SYS_fchown
 123

	)

354 
	#SS_SYS_fchmod
 124

	)

355 
	#SS_SYS_ªcv‰om
 125

	)

356 
	#SS_SYS_£åeuid
 126

	)

357 
	#SS_SYS_£åegid
 127

	)

358 
	#SS_SYS_ª«me
 128

	)

359 
	#SS_SYS_åunˇã
 129

	)

360 
	#SS_SYS_·runˇã
 130

	)

361 
	#SS_SYS_Êock
 131

	)

363 
	#SS_SYS_£ndto
 133

	)

364 
	#SS_SYS_shutdown
 134

	)

365 
	#SS_SYS_sockë∑ú
 135

	)

366 
	#SS_SYS_mkdú
 136

	)

367 
	#SS_SYS_rmdú
 137

	)

368 
	#SS_SYS_utimes
 138

	)

369 
	#SS_SYS_sig˛ónup
 139

	)

371 
	#SS_SYS_adjtime
 140

	)

372 
	#SS_SYS_gë≥î«me
 141

	)

373 
	#SS_SYS_gëho°id
 142

	)

374 
	#SS_SYS_£tho°id
 143

	)

375 
	#SS_SYS_gëæimô
 144

	)

376 
	#SS_SYS_£ålimô
 145

	)

377 
	#SS_SYS_kûÕg
 146

	)

379 
	#SS_SYS_£tquŸa
 148

	)

380 
	#SS_SYS_quŸa
 149

	)

381 
	#SS_SYS_gësock«me
 150

	)

383 
	#SS_SYS_sysmùs
 151

	)

387 
	#SS_SYS_ˇcheÊush
 152

	)

388 
	#SS_SYS_ˇche˘l
 153

	)

389 
	#SS_SYS_©omic_›
 155

	)

392 
	#SS_SYS_debug
 154

	)

394 
	#SS_SYS_°©fs
 160

	)

395 
	#SS_SYS_f°©fs
 161

	)

396 
	#SS_SYS_unmou¡
 162

	)

398 
	#SS_SYS_quŸa˘l
 168

	)

401 
	#SS_SYS_hdwc⁄f
 171

	)

405 
	#SS_SYS_nfs_svc
 158

	)

406 
	#SS_SYS_nfssvc
 158

	)

407 
	#SS_SYS_nfs_biod
 163

	)

408 
	#SS_SYS_async_d´m⁄
 163

	)

409 
	#SS_SYS_nfs_gëfh
 164

	)

410 
	#SS_SYS_gëfh
 164

	)

411 
	#SS_SYS_gëdúíåõs
 159

	)

412 
	#SS_SYS_gëdomaö«me
 165

	)

413 
	#SS_SYS_£tdomaö«me
 166

	)

414 
	#SS_SYS_exp‹tfs
 169

	)

416 
	#SS_SYS_msg˘l
 172

	)

417 
	#SS_SYS_msggë
 173

	)

418 
	#SS_SYS_msgrcv
 174

	)

419 
	#SS_SYS_msg¢d
 175

	)

420 
	#SS_SYS_£m˘l
 176

	)

421 
	#SS_SYS_£mgë
 177

	)

422 
	#SS_SYS_£m›
 178

	)

423 
	#SS_SYS_u«me
 179

	)

424 
	#SS_SYS_shmsys
 180

	)

425 
	#SS_SYS_∂ock
 181

	)

426 
	#SS_SYS_lockf
 182

	)

427 
	#SS_SYS_u°©
 183

	)

428 
	#SS_SYS_gëm¡
 184

	)

429 
	#SS_SYS_sig≥ndög
 187

	)

430 
	#SS_SYS_£tsid
 188

	)

431 
	#SS_SYS_waôpid
 189

	)

433 
	#SS_SYS_utc_gëtime
 233

	)

434 
	#SS_SYS_utc_adjtime
 234

	)

435 
	#SS_SYS_aud˙é
 252

	)

436 
	#SS_SYS_audgí
 253

	)

437 
	#SS_SYS_°¨t˝u
 254

	)

438 
	#SS_SYS_°›˝u
 255

	)

439 
	#SS_SYS_gësysöfo
 256

	)

440 
	#SS_SYS_£tsysöfo
 257

	)

443 
	#SS_IOCTL_TIOCGETP
 1074164744

	)

444 
	#SS_IOCTL_TIOCSETP
 -2147060727

	)

445 
	#SS_IOCTL_TCGETP
 1076130901

	)

446 
	#SS_IOCTL_TCGETA
 1075082331

	)

447 
	#SS_IOCTL_TIOCGLTC
 1074164852

	)

448 
	#SS_IOCTL_TIOCSLTC
 -2147060619

	)

449 
	#SS_IOCTL_TIOCGWINSZ
 1074295912

	)

450 
	#SS_IOCTL_TCSETAW
 -2146143143

	)

451 
	#SS_IOCTL_TIOCGETC
 1074164754

	)

452 
	#SS_IOCTL_TIOCSETC
 -2147060719

	)

453 
	#SS_IOCTL_TIOCLBIC
 -2147191682

	)

454 
	#SS_IOCTL_TIOCLBIS
 -2147191681

	)

455 
	#SS_IOCTL_TIOCLGET
 0x4004747c

	)

456 
	#SS_IOCTL_TIOCLSET
 -2147191683

	)

460 
	#MAXBUFSIZE
 1024

	)

466 
	#NUM_IOCTL_BYTES
 128

	)

470 
	sss_°©buf


472 
shÆf_t
 
	mss_°_dev
;

473 
shÆf_t
 
	mss_∑d
;

474 
w‹d_t
 
	mss_°_öo
;

475 
hÆf_t
 
	mss_°_mode
;

476 
shÆf_t
 
	mss_°_∆ök
;

477 
shÆf_t
 
	mss_°_uid
;

478 
shÆf_t
 
	mss_°_gid
;

479 
shÆf_t
 
	mss_°_rdev
;

480 
shÆf_t
 
	mss_∑d1
;

481 
sw‹d_t
 
	mss_°_size
;

482 
sw‹d_t
 
	mss_°_©ime
;

483 
sw‹d_t
 
	mss_°_•¨e1
;

484 
sw‹d_t
 
	mss_°_mtime
;

485 
sw‹d_t
 
	mss_°_•¨e2
;

486 
sw‹d_t
 
	mss_°_˘ime
;

487 
sw‹d_t
 
	mss_°_•¨e3
;

488 
sw‹d_t
 
	mss_°_blksize
;

489 
sw‹d_t
 
	mss_°_blocks
;

490 
w‹d_t
 
	mss_°_gínum
;

491 
sw‹d_t
 
	mss_°_•¨e4
;

494 
	sss_sgâyb
 {

495 
byã_t
 
	msg_i•ìd
;

496 
byã_t
 
	msg_o•ìd
;

497 
byã_t
 
	msg_îa£
;

498 
byã_t
 
	msg_kûl
;

499 
shÆf_t
 
	msg_Êags
;

502 
	sss_timevÆ


504 
sw‹d_t
 
	mss_tv_£c
;

505 
sw‹d_t
 
	mss_tv_u£c
;

510 
	sss_rußge


512 
ss_timevÆ
 
	mss_ru_utime
;

513 
ss_timevÆ
 
	mss_ru_°ime
;

514 
sw‹d_t
 
	mss_ru_maxrss
;

515 
sw‹d_t
 
	mss_ru_ixrss
;

516 
sw‹d_t
 
	mss_ru_idrss
;

517 
sw‹d_t
 
	mss_ru_i§ss
;

518 
sw‹d_t
 
	mss_ru_möÊt
;

519 
sw‹d_t
 
	mss_ru_majÊt
;

520 
sw‹d_t
 
	mss_ru_nsw≠
;

521 
sw‹d_t
 
	mss_ru_öblock
;

522 
sw‹d_t
 
	mss_ru_oublock
;

523 
sw‹d_t
 
	mss_ru_msg¢d
;

524 
sw‹d_t
 
	mss_ru_msgrcv
;

525 
sw‹d_t
 
	mss_ru_nsig«ls
;

526 
sw‹d_t
 
	mss_ru_nvcsw
;

527 
sw‹d_t
 
	mss_ru_nivcsw
;

530 
	sss_timez⁄e


532 
sw‹d_t
 
	mss_tz_möuãswe°
;

533 
sw‹d_t
 
	mss_tz_d°time
;

536 
	sss_æimô


538 
	mss_æim_cur
;

539 
	mss_æim_max
;

544 
	#SS_O_RDONLY
 0

	)

545 
	#SS_O_WRONLY
 1

	)

546 
	#SS_O_RDWR
 2

	)

547 
	#SS_O_APPEND
 0x0008

	)

548 
	#SS_O_CREAT
 0x0200

	)

549 
	#SS_O_TRUNC
 0x0400

	)

550 
	#SS_O_EXCL
 0x0800

	)

551 
	#SS_O_NONBLOCK
 0x4000

	)

552 
	#SS_O_NOCTTY
 0x8000

	)

553 
	#SS_O_SYNC
 0x2000

	)

557 
	mss_Êag
;

558 
	mloˇl_Êag
;

559 } 
	gss_Êag_èbÀ
[] = {

561 #ifde‡
_MSC_VER


562 { 
SS_O_RDONLY
, 
_O_RDONLY
 },

563 { 
SS_O_WRONLY
, 
_O_WRONLY
 },

564 { 
SS_O_RDWR
, 
_O_RDWR
 },

565 { 
SS_O_APPEND
, 
_O_APPEND
 },

566 { 
SS_O_CREAT
, 
_O_CREAT
 },

567 { 
SS_O_TRUNC
, 
_O_TRUNC
 },

568 { 
SS_O_EXCL
, 
_O_EXCL
 },

569 #ifde‡
_O_NONBLOCK


570 { 
SS_O_NONBLOCK
, 
_O_NONBLOCK
 },

572 #ifde‡
_O_NOCTTY


573 { 
SS_O_NOCTTY
, 
_O_NOCTTY
 },

575 #ifde‡
_O_SYNC


576 { 
SS_O_SYNC
, 
_O_SYNC
 },

579 { 
SS_O_RDONLY
, 
O_RDONLY
 },

580 { 
SS_O_WRONLY
, 
O_WRONLY
 },

581 { 
SS_O_RDWR
, 
O_RDWR
 },

582 { 
SS_O_APPEND
, 
O_APPEND
 },

583 { 
SS_O_CREAT
, 
O_CREAT
 },

584 { 
SS_O_TRUNC
, 
O_TRUNC
 },

585 { 
SS_O_EXCL
, 
O_EXCL
 },

586 { 
SS_O_NONBLOCK
, 
O_NONBLOCK
 },

587 { 
SS_O_NOCTTY
, 
O_NOCTTY
 },

588 #ifde‡
O_SYNC


589 { 
SS_O_SYNC
, 
O_SYNC
 },

593 
	#SS_NFLAGS
 ((
ss_Êag_èbÀ
)/(ss_Êag_èbÀ[0]))

	)

602 
	$sys_sysˇŒ
(
ªgs_t
 *
ªgs
,

603 
mem_ac˚ss_‚
 
mem_‚
,

604 
mem_t
 *
mem
,

605 
md_ö°_t
 
ö°
,

606 
åa˚abÀ
)

608 
w‹d_t
 
syscode
 = 
ªgs
->
ªgs_R
[2];

611 i‡(
åa˚abÀ
 && 
sim_eio_fd
 !
NULL
)

613 
	`eio_ªad_åa˚
(
sim_eio_fd
, 
sim_num_ö¢
, 
ªgs
, 
mem_‚
, 
mem
, 
ö°
);

618 #ifde‡
MD_CROSS_ENDIAN


619 i‡(
syscode
 =
SS_SYS_exô
)

622 
	`l⁄gjmp
(
sim_exô_buf
, 
ªgs
->
ªgs_R
[4]+1);

625 
	`Áèl
("cannotÉxecute PISA system call on cross-endian host");

630 
syscode
)

632 
SS_SYS_exô
:

634 
	`l⁄gjmp
(
sim_exô_buf
, 
ªgs
->
ªgs_R
[4]+1);

638 
SS_SYS_f‹k
:

640 
ªgs
->
ªgs_R
[2] = 
	`f‹k
();

641 i‡(
ªgs
->
ªgs_R
[2] != -1)

643 
ªgs
->
ªgs_R
[7] = 0;

645 i‡(
ªgs
->
ªgs_R
[2] != 0)

646 
ªgs
->
ªgs_R
[3] = 0;

649 
	`Áèl
("SYS_fork failed");

654 
SS_SYS_vf‹k
:

656 
r31_∑ª¡
 = 
ªgs
->
ªgs_R
[31];

657  
ªgs
->
ªgs_R
[2] = 
	`vf‹k
();

658 i‡(
ªgs
->
ªgs_R
[2] != -1)

659 
ªgs
->
ªgs_R
[7] = 0;

661 
	`Áèl
("vfork() in SYS_vfork failed");

662 i‡(
ªgs
->
ªgs_R
[2] != 0)

664 
ªgs
->
ªgs_R
[3] = 0;

665 
ªgs
->
ªgs_R
[7] = 0;

666 
ªgs
->
ªgs_R
[31] = 
r31_∑ª¡
;

671 
SS_SYS_ªad
:

673 *
buf
;

676 i‡(!(
buf
 = (*)
	`ˇŒoc
–
ªgs
->
ªgs_R
[6], ())))

677 
	`Áèl
("out of memory in SYS_read");

680  
ªgs
->
ªgs_R
[2] =

681 
	`ªad
–
ªgs
->
ªgs_R
[4], 
buf
,Ñegs->regs_R[6]);

684 i‡(
ªgs
->
ªgs_R
[2] != -1)

685 
ªgs
->
ªgs_R
[7] = 0;

689 
ªgs
->
ªgs_R
[2] = 
î∫o
;

690 
ªgs
->
ªgs_R
[7] = 1;

694 
	`mem_bc›y
(
mem_‚
, 
mem
,

695 
Wrôe
, 
ªgs
->
ªgs_R
[5],

696 
buf
, 
ªgs
->
ªgs_R
[2]);

699 
	`‰ì
(
buf
);

703 
SS_SYS_wrôe
:

705 *
buf
;

708 i‡(!(
buf
 = (*)
	`ˇŒoc
–
ªgs
->
ªgs_R
[6], ())))

709 
	`Áèl
("out of memory in SYS_write");

712 
	`mem_bc›y
(
mem_‚
, 
mem
,

713 
Ród
, 
ªgs
->
ªgs_R
[5],

714 
buf
, 
ªgs
->
ªgs_R
[6]);

717 i‡(
sim_¥ogfd
 && 
	`MD_OUTPUT_SYSCALL
(
ªgs
))

721  
ªgs
->
ªgs_R
[2] =

722 
	`fwrôe
(
buf
, 1, 
ªgs
->
ªgs_R
[6], 
sim_¥ogfd
);

728  
ªgs
->
ªgs_R
[2] =

729 
	`wrôe
–
ªgs
->
ªgs_R
[4],

730 
buf
, 
ªgs
->
ªgs_R
[6]);

734 i‡(
ªgs
->
ªgs_R
[2] ==Ñegs->regs_R[6])

735  
ªgs
->
ªgs_R
[7] = 0;

739 
ªgs
->
ªgs_R
[2] = 
î∫o
;

740 
ªgs
->
ªgs_R
[7] = 1;

744 
	`‰ì
(
buf
);

748 
SS_SYS_›í
:

750 
buf
[
MAXBUFSIZE
];

751 
i
;

752 
ss_Êags
 = 
ªgs
->
ªgs_R
[5], 
loˇl_Êags
 = 0;

755 
i
=0; i<
SS_NFLAGS
; i++)

757 i‡(
ss_Êags
 & 
ss_Êag_èbÀ
[
i
].
ss_Êag
)

759 
ss_Êags
 &~
ss_Êag_èbÀ
[
i
].
ss_Êag
;

760 
loˇl_Êags
 |
ss_Êag_èbÀ
[
i
].
loˇl_Êag
;

764 i‡(
ss_Êags
 != 0)

765 
	`Áèl
("sysˇŒ: o≥n: c™nŸ decodêÊags: 0x%08x", 
ss_Êags
);

768 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

771  
ªgs
->
ªgs_R
[2] =

772 
	`›í
(
buf
, 
loˇl_Êags
, 
ªgs
->
ªgs_R
[6]);

775 i‡(
ªgs
->
ªgs_R
[2] != -1)

776 
ªgs
->
ªgs_R
[7] = 0;

780 
ªgs
->
ªgs_R
[2] = 
î∫o
;

781 
ªgs
->
ªgs_R
[7] = 1;

786 
SS_SYS_˛o£
:

788 i‡–
ªgs
->
ªgs_R
[4] == 0

789 || 
ªgs
->
ªgs_R
[4] == 1

790 || 
ªgs
->
ªgs_R
[4] == 2)

792 
ªgs
->
ªgs_R
[7] = 0;

797 
ªgs
->
ªgs_R
[2] = 
	`˛o£
(Ñegs->regs_R[4]);

800 i‡(
ªgs
->
ªgs_R
[2] != -1)

801 
ªgs
->
ªgs_R
[7] = 0;

805 
ªgs
->
ªgs_R
[2] = 
î∫o
;

806 
ªgs
->
ªgs_R
[7] = 1;

810 
SS_SYS_¸ót
:

812 
buf
[
MAXBUFSIZE
];

815 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

818  
ªgs
->
ªgs_R
[2] = 
	`¸ót
(
buf
,Ñegs->regs_R[5]);

821 i‡(
ªgs
->
ªgs_R
[2] != -1)

822 
ªgs
->
ªgs_R
[7] = 0;

826 
ªgs
->
ªgs_R
[2] = 
î∫o
;

827 
ªgs
->
ªgs_R
[7] = 1;

832 
SS_SYS_u∆ök
:

834 
buf
[
MAXBUFSIZE
];

837 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

840  
ªgs
->
ªgs_R
[2] = 
	`u∆ök
(
buf
);

843 i‡(
ªgs
->
ªgs_R
[2] != -1)

844 
ªgs
->
ªgs_R
[7] = 0;

848 
ªgs
->
ªgs_R
[2] = 
î∫o
;

849 
ªgs
->
ªgs_R
[7] = 1;

854 
SS_SYS_chdú
:

856 
buf
[
MAXBUFSIZE
];

859 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

862  
ªgs
->
ªgs_R
[2] = 
	`chdú
(
buf
);

865 i‡(
ªgs
->
ªgs_R
[2] != -1)

866 
ªgs
->
ªgs_R
[7] = 0;

870 
ªgs
->
ªgs_R
[2] = 
î∫o
;

871 
ªgs
->
ªgs_R
[7] = 1;

876 
SS_SYS_chmod
:

878 
buf
[
MAXBUFSIZE
];

881 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

884  
ªgs
->
ªgs_R
[2] = 
	`chmod
(
buf
,Ñegs->regs_R[5]);

887 i‡(
ªgs
->
ªgs_R
[2] != -1)

888 
ªgs
->
ªgs_R
[7] = 0;

892 
ªgs
->
ªgs_R
[2] = 
î∫o
;

893 
ªgs
->
ªgs_R
[7] = 1;

898 
SS_SYS_chown
:

899 #ifde‡
_MSC_VER


900 
	`w¨n
("syscall chown()Çot yet implemented for MSC...");

901 
ªgs
->
ªgs_R
[7] = 0;

904 
buf
[
MAXBUFSIZE
];

907 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

910  
ªgs
->
ªgs_R
[2] = 
	`chown
(
buf
,Ñegs->regs_R[5],

911  
ªgs
->
ªgs_R
[6]);

914 i‡(
ªgs
->
ªgs_R
[2] != -1)

915 
ªgs
->
ªgs_R
[7] = 0;

919 
ªgs
->
ªgs_R
[2] = 
î∫o
;

920 
ªgs
->
ªgs_R
[7] = 1;

926 
SS_SYS_brk
:

928 
md_addr_t
 
addr
;

931 
addr
 = 
	`ROUND_UP
–
ªgs
->
ªgs_R
[4], 
MD_PAGE_SIZE
);

934 i‡(
addr
 >
ld_brk_poöt
 &&ádd∏< (
md_addr_t
)
ªgs
->
ªgs_R
[29])

936 
ªgs
->
ªgs_R
[2] = 0;

937 
ªgs
->
ªgs_R
[7] = 0;

938 
ld_brk_poöt
 = 
addr
;

943 
ªgs
->
ªgs_R
[2] = 
ENOMEM
;

944 
ªgs
->
ªgs_R
[7] = 1;

949 
SS_SYS_l£ek
:

951 
ªgs
->
ªgs_R
[2] =

952 
	`l£ek
–
ªgs
->
ªgs_R
[4],

953  
ªgs
->
ªgs_R
[5],Ñegs->regs_R[6]);

956 i‡(
ªgs
->
ªgs_R
[2] != -1)

957 
ªgs
->
ªgs_R
[7] = 0;

961 
ªgs
->
ªgs_R
[2] = 
î∫o
;

962 
ªgs
->
ªgs_R
[7] = 1;

966 
SS_SYS_gëpid
:

968  
ªgs
->
ªgs_R
[2] = 
	`gëpid
();

971 i‡(
ªgs
->
ªgs_R
[2] != -1)

972 
ªgs
->
ªgs_R
[7] = 0;

976 
ªgs
->
ªgs_R
[2] = 
î∫o
;

977 
ªgs
->
ªgs_R
[7] = 1;

981 
SS_SYS_gëuid
:

982 #ifde‡
_MSC_VER


983 
	`w¨n
("syscall getuid()Çot yet implemented for MSC...");

984 
ªgs
->
ªgs_R
[7] = 0;

987  
ªgs
->
ªgs_R
[2] = 
	`gëuid
();

990  
ªgs
->
ªgs_R
[3] = 
	`gëeuid
();

993 i‡(
ªgs
->
ªgs_R
[2] != -1)

994 
ªgs
->
ªgs_R
[7] = 0;

998 
ªgs
->
ªgs_R
[2] = 
î∫o
;

999 
ªgs
->
ªgs_R
[7] = 1;

1004 
SS_SYS_ac˚ss
:

1006 
buf
[
MAXBUFSIZE
];

1009 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

1012  
ªgs
->
ªgs_R
[2] = 
	`ac˚ss
(
buf
,Ñegs->regs_R[5]);

1015 i‡(
ªgs
->
ªgs_R
[2] != -1)

1016 
ªgs
->
ªgs_R
[7] = 0;

1020 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1021 
ªgs
->
ªgs_R
[7] = 1;

1026 
SS_SYS_°©
:

1027 
SS_SYS_l°©
:

1029 
buf
[
MAXBUFSIZE
];

1030 
ss_°©buf
 
ss_sbuf
;

1031 #ifde‡
_MSC_VER


1032 
_°©
 
sbuf
;

1034 
°©
 
sbuf
;

1038 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

1041 i‡(
syscode
 =
SS_SYS_°©
)

1042  
ªgs
->
ªgs_R
[2] = 
	`°©
(
buf
, &
sbuf
);

1045 #ifde‡
_MSC_VER


1046 
	`w¨n
("syscallÜstat()Çot yet implemented for MSC...");

1047 
ªgs
->
ªgs_R
[7] = 0;

1050  
ªgs
->
ªgs_R
[2] = 
	`l°©
(
buf
, &
sbuf
);

1055 i‡(
ªgs
->
ªgs_R
[2] != -1)

1056 
ªgs
->
ªgs_R
[7] = 0;

1060 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1061 
ªgs
->
ªgs_R
[7] = 1;

1065 
ss_sbuf
.
ss_°_dev
 = 
	`MD_SWAPH
(
sbuf
.
°_dev
);

1066 
ss_sbuf
.
ss_∑d
 = 0;

1067 
ss_sbuf
.
ss_°_öo
 = 
	`MD_SWAPW
(
sbuf
.
°_öo
);

1068 
ss_sbuf
.
ss_°_mode
 = 
	`MD_SWAPH
(
sbuf
.
°_mode
);

1069 
ss_sbuf
.
ss_°_∆ök
 = 
	`MD_SWAPH
(
sbuf
.
°_∆ök
);

1070 
ss_sbuf
.
ss_°_uid
 = 
	`MD_SWAPH
(
sbuf
.
°_uid
);

1071 
ss_sbuf
.
ss_°_gid
 = 
	`MD_SWAPH
(
sbuf
.
°_gid
);

1072 
ss_sbuf
.
ss_°_rdev
 = 
	`MD_SWAPH
(
sbuf
.
°_rdev
);

1073 
ss_sbuf
.
ss_∑d1
 = 0;

1074 
ss_sbuf
.
ss_°_size
 = 
	`MD_SWAPW
(
sbuf
.
°_size
);

1075 
ss_sbuf
.
ss_°_©ime
 = 
	`MD_SWAPW
(
sbuf
.
°_©ime
);

1076 
ss_sbuf
.
ss_°_•¨e1
 = 0;

1077 
ss_sbuf
.
ss_°_mtime
 = 
	`MD_SWAPW
(
sbuf
.
°_mtime
);

1078 
ss_sbuf
.
ss_°_•¨e2
 = 0;

1079 
ss_sbuf
.
ss_°_˘ime
 = 
	`MD_SWAPW
(
sbuf
.
°_˘ime
);

1080 
ss_sbuf
.
ss_°_•¨e3
 = 0;

1081 #i‚de‡
_MSC_VER


1082 
ss_sbuf
.
ss_°_blksize
 = 
	`MD_SWAPW
(
sbuf
.
°_blksize
);

1083 
ss_sbuf
.
ss_°_blocks
 = 
	`MD_SWAPW
(
sbuf
.
°_blocks
);

1085 
ss_sbuf
.
ss_°_gínum
 = 0;

1086 
ss_sbuf
.
ss_°_•¨e4
 = 0;

1089 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1090 &
ss_sbuf
, (
ss_°©buf
));

1094 
SS_SYS_dup
:

1096  
ªgs
->
ªgs_R
[2] = 
	`dup
(Ñegs->regs_R[4]);

1099 i‡(
ªgs
->
ªgs_R
[2] != -1)

1100 
ªgs
->
ªgs_R
[7] = 0;

1104 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1105 
ªgs
->
ªgs_R
[7] = 1;

1109 #i‚de‡
_MSC_VER


1110 
SS_SYS_pùe
:

1112 
fd
[2];

1115 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
fd
, (fd));

1118  
ªgs
->
ªgs_R
[7] = 
	`pùe
(
fd
);

1121  
ªgs
->
ªgs_R
[2] = 
fd
[0];

1122  
ªgs
->
ªgs_R
[3] = 
fd
[1];

1125 i‡(
ªgs
->
ªgs_R
[7] == -1)

1127 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1128 
ªgs
->
ªgs_R
[7] = 1;

1134 
SS_SYS_gëgid
:

1135 #ifde‡
_MSC_VER


1136 
	`w¨n
("syscall getgid()Çot yet implemented for MSC...");

1137 
ªgs
->
ªgs_R
[7] = 0;

1140  
ªgs
->
ªgs_R
[2] = 
	`gëgid
();

1143  
ªgs
->
ªgs_R
[3] = 
	`gëegid
();

1146 i‡(
ªgs
->
ªgs_R
[2] != -1)

1147 
ªgs
->
ªgs_R
[7] = 0;

1151 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1152 
ªgs
->
ªgs_R
[7] = 1;

1157 
SS_SYS_io˘l
:

1159 
buf
[
NUM_IOCTL_BYTES
];

1160 
loˇl_ªq
 = 0;

1163  
ªgs
->
ªgs_R
[5]) {

1164 #ifde‡
TIOCGETP


1165 
SS_IOCTL_TIOCGETP
:

1166 
loˇl_ªq
 = 
TIOCGETP
;

1169 #ifde‡
TIOCSETP


1170 
SS_IOCTL_TIOCSETP
:

1171 
loˇl_ªq
 = 
TIOCSETP
;

1174 #ifde‡
TIOCGETP


1175 
SS_IOCTL_TCGETP
:

1176 
loˇl_ªq
 = 
TIOCGETP
;

1179 #ifde‡
TCGETA


1180 
SS_IOCTL_TCGETA
:

1181 
loˇl_ªq
 = 
TCGETA
;

1184 #ifde‡
TIOCGLTC


1185 
SS_IOCTL_TIOCGLTC
:

1186 
loˇl_ªq
 = 
TIOCGLTC
;

1189 #ifde‡
TIOCSLTC


1190 
SS_IOCTL_TIOCSLTC
:

1191 
loˇl_ªq
 = 
TIOCSLTC
;

1194 #ifde‡
TIOCGWINSZ


1195 
SS_IOCTL_TIOCGWINSZ
:

1196 
loˇl_ªq
 = 
TIOCGWINSZ
;

1199 #ifde‡
TCSETAW


1200 
SS_IOCTL_TCSETAW
:

1201 
loˇl_ªq
 = 
TCSETAW
;

1204 #ifde‡
TIOCGETC


1205 
SS_IOCTL_TIOCGETC
:

1206 
loˇl_ªq
 = 
TIOCGETC
;

1209 #ifde‡
TIOCSETC


1210 
SS_IOCTL_TIOCSETC
:

1211 
loˇl_ªq
 = 
TIOCSETC
;

1214 #ifde‡
TIOCLBIC


1215 
SS_IOCTL_TIOCLBIC
:

1216 
loˇl_ªq
 = 
TIOCLBIC
;

1219 #ifde‡
TIOCLBIS


1220 
SS_IOCTL_TIOCLBIS
:

1221 
loˇl_ªq
 = 
TIOCLBIS
;

1224 #ifde‡
TIOCLGET


1225 
SS_IOCTL_TIOCLGET
:

1226 
loˇl_ªq
 = 
TIOCLGET
;

1229 #ifde‡
TIOCLSET


1230 
SS_IOCTL_TIOCLSET
:

1231 
loˇl_ªq
 = 
TIOCLSET
;

1236 #i‡!
	`deföed
(
TIOCGETP
Ë&& (deföed(
löux
Ë|| deföed(
__CYGWIN32__
))

1237 i‡(!
loˇl_ªq
 && 
ªgs
->
ªgs_R
[5] =
SS_IOCTL_TIOCGETP
)

1239 
ãrmios
 
lbuf
;

1240 
ss_sgâyb
 
buf
;

1242  
ªgs
->
ªgs_R
[2] =

1243 
	`tcgë©å
–()
ªgs
->
ªgs_R
[4], &
lbuf
);

1246 
buf
.
sg_i•ìd
 = 
lbuf
.
c_i•ìd
;

1247 
buf
.
sg_o•ìd
 = 
lbuf
.
c_o•ìd
;

1248 
buf
.
sg_îa£
 = 
lbuf
.
c_cc
[
VERASE
];

1249 
buf
.
sg_kûl
 = 
lbuf
.
c_cc
[
VKILL
];

1250 
buf
.
sg_Êags
 = 0;

1252 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
,

1253  
ªgs
->
ªgs_R
[6], &
buf
,

1254 (
ss_sgâyb
));

1256 i‡(
ªgs
->
ªgs_R
[2] != -1)

1257 
ªgs
->
ªgs_R
[7] = 0;

1260 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1261 
ªgs
->
ªgs_R
[7] = 1;

1267 i‡(!
loˇl_ªq
)

1271 
	`w¨n
("syscall: ioctl: ioctl codeÇot supported d=%d,Ñeq=%d",

1272 
ªgs
->
ªgs_R
[4],Ñegs->regs_R[5]);

1273 
ªgs
->
ªgs_R
[2] = 0;

1274 
ªgs
->
ªgs_R
[7] = 0;

1278 #ifde‡
_MSC_VER


1279 
	`w¨n
("syscall getgid()Çot yet implemented for MSC...");

1280 
ªgs
->
ªgs_R
[7] = 0;

1285 #ifde‡
TIOCGETP


1286 i‡(
loˇl_ªq
 =
TIOCGETP
 && 
sim_¥ogfd
)

1292 
ªgs
->
ªgs_R
[2] = 
ENOTTY
;

1293 
ªgs
->
ªgs_R
[7] = 1;

1301 i‡–
ªgs
->
ªgs_R
[6] != 0)

1302 
	`mem_bc›y
(
mem_‚
, 
mem
,

1303 
Ród
, 
ªgs
->
ªgs_R
[6], 
buf
, 
NUM_IOCTL_BYTES
);

1306  
ªgs
->
ªgs_R
[2] =

1307 
	`io˘l
–
ªgs
->
ªgs_R
[4], 
loˇl_ªq
, 
buf
);

1310 i‡–
ªgs
->
ªgs_R
[6] != 0)

1311 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[6],

1312 
buf
, 
NUM_IOCTL_BYTES
);

1315 i‡(
ªgs
->
ªgs_R
[2] != -1)

1316 
ªgs
->
ªgs_R
[7] = 0;

1320 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1321 
ªgs
->
ªgs_R
[7] = 1;

1328 
SS_SYS_f°©
:

1330 
ss_°©buf
 
ss_sbuf
;

1331 #ifde‡
_MSC_VER


1332 
_°©
 
sbuf
;

1334 
°©
 
sbuf
;

1338  
ªgs
->
ªgs_R
[2] = 
	`f°©
–ªgs->ªgs_R[4], &
sbuf
);

1341 i‡(
ªgs
->
ªgs_R
[2] != -1)

1342 
ªgs
->
ªgs_R
[7] = 0;

1346 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1347 
ªgs
->
ªgs_R
[7] = 1;

1351 
ss_sbuf
.
ss_°_dev
 = 
	`MD_SWAPH
(
sbuf
.
°_dev
);

1352 
ss_sbuf
.
ss_∑d
 = 0;

1353 
ss_sbuf
.
ss_°_öo
 = 
	`MD_SWAPW
(
sbuf
.
°_öo
);

1354 
ss_sbuf
.
ss_°_mode
 = 
	`MD_SWAPH
(
sbuf
.
°_mode
);

1355 
ss_sbuf
.
ss_°_∆ök
 = 
	`MD_SWAPH
(
sbuf
.
°_∆ök
);

1356 
ss_sbuf
.
ss_°_uid
 = 
	`MD_SWAPH
(
sbuf
.
°_uid
);

1357 
ss_sbuf
.
ss_°_gid
 = 
	`MD_SWAPH
(
sbuf
.
°_gid
);

1358 
ss_sbuf
.
ss_°_rdev
 = 
	`MD_SWAPH
(
sbuf
.
°_rdev
);

1359 
ss_sbuf
.
ss_∑d1
 = 0;

1360 
ss_sbuf
.
ss_°_size
 = 
	`MD_SWAPW
(
sbuf
.
°_size
);

1361 
ss_sbuf
.
ss_°_©ime
 = 
	`MD_SWAPW
(
sbuf
.
°_©ime
);

1362 
ss_sbuf
.
ss_°_•¨e1
 = 0;

1363 
ss_sbuf
.
ss_°_mtime
 = 
	`MD_SWAPW
(
sbuf
.
°_mtime
);

1364 
ss_sbuf
.
ss_°_•¨e2
 = 0;

1365 
ss_sbuf
.
ss_°_˘ime
 = 
	`MD_SWAPW
(
sbuf
.
°_˘ime
);

1366 
ss_sbuf
.
ss_°_•¨e3
 = 0;

1367 #i‚de‡
_MSC_VER


1368 
ss_sbuf
.
ss_°_blksize
 = 
	`MD_SWAPW
(
sbuf
.
°_blksize
);

1369 
ss_sbuf
.
ss_°_blocks
 = 
	`MD_SWAPW
(
sbuf
.
°_blocks
);

1371 
ss_sbuf
.
ss_°_gínum
 = 0;

1372 
ss_sbuf
.
ss_°_•¨e4
 = 0;

1375 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1376 &
ss_sbuf
, (
ss_°©buf
));

1380 
SS_SYS_gë∑gesize
:

1382 
ªgs
->
ªgs_R
[2] = 
MD_PAGE_SIZE
;

1385 i‡(
ªgs
->
ªgs_R
[2] != -1)

1386 
ªgs
->
ªgs_R
[7] = 0;

1390 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1391 
ªgs
->
ªgs_R
[7] = 1;

1395 
SS_SYS_£tôimî
:

1397 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1398 
	`w¨n
("syscall: setitimer ignored");

1401 
SS_SYS_gëdèbÀsize
:

1402 #i‡
	`deföed
(
_AIX
)

1404 
ªgs
->
ªgs_R
[2] = 
	`gëdèbÀsize
();

1407 i‡(
ªgs
->
ªgs_R
[2] != -1)

1408 
ªgs
->
ªgs_R
[7] = 0;

1412 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1413 
ªgs
->
ªgs_R
[7] = 1;

1415 #ñi‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
u…rix
Ë|| deföed(
_MSC_VER
)

1418 
	`w¨n
("syscall: called getdtablesize()\n");

1419 
ªgs
->
ªgs_R
[2] = 16;

1420 
ªgs
->
ªgs_R
[7] = 0;

1424 
æimô
 
æ
;

1427 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) != -1)

1429 
ªgs
->
ªgs_R
[2] = 
æ
.
æim_cur
;

1430 
ªgs
->
ªgs_R
[7] = 0;

1435 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1436 
ªgs
->
ªgs_R
[7] = 1;

1442 
SS_SYS_dup2
:

1444 
ªgs
->
ªgs_R
[2] =

1445 
	`dup2
–
ªgs
->
ªgs_R
[4],Ñegs->regs_R[5]);

1448 i‡(
ªgs
->
ªgs_R
[2] != -1)

1449 
ªgs
->
ªgs_R
[7] = 0;

1453 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1454 
ªgs
->
ªgs_R
[7] = 1;

1458 
SS_SYS_f˙é
:

1459 #ifde‡
_MSC_VER


1460 
	`w¨n
("syscall fcntl()Çot yet implemented for MSC...");

1461 
ªgs
->
ªgs_R
[7] = 0;

1464 
ªgs
->
ªgs_R
[2] =

1465 
	`f˙é
–
ªgs
->
ªgs_R
[4],Ñegs->regs_R[5],

1466  
ªgs
->
ªgs_R
[6]);

1469 i‡(
ªgs
->
ªgs_R
[2] != -1)

1470 
ªgs
->
ªgs_R
[7] = 0;

1474 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1475 
ªgs
->
ªgs_R
[7] = 1;

1480 
SS_SYS_£À˘
:

1481 #ifde‡
_MSC_VER


1482 
	`w¨n
("syscall select()Çot yet implemented for MSC...");

1483 
ªgs
->
ªgs_R
[7] = 0;

1486 
fd_£t
 
ªadfd
, 
wrôefd
, 
ex˚±fd
;

1487 
fd_£t
 *
ªadfdp
, *
wrôefdp
, *
ex˚±fdp
;

1488 
timevÆ
 
timeout
, *
timeouç
;

1489 
w‹d_t
 
∑øm5
;

1494 
	`mem_bc›y
(
mem_‚
, 
mem
,

1495 
Ród
, 
ªgs
->
ªgs_R
[29]+16, &
∑øm5
, (
w‹d_t
));

1498 i‡–
ªgs
->
ªgs_R
[5] != 0)

1500 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1501 &
ªadfd
, (
fd_£t
));

1502 
ªadfdp
 = &
ªadfd
;

1505 
ªadfdp
 = 
NULL
;

1508 i‡–
ªgs
->
ªgs_R
[6] != 0)

1510 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[6],

1511 &
wrôefd
, (
fd_£t
));

1512 
wrôefdp
 = &
wrôefd
;

1515 
wrôefdp
 = 
NULL
;

1518 i‡–
ªgs
->
ªgs_R
[7] != 0)

1520 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[7],

1521 &
ex˚±fd
, (
fd_£t
));

1522 
ex˚±fdp
 = &
ex˚±fd
;

1525 
ex˚±fdp
 = 
NULL
;

1528 i‡–
∑øm5
 != 0)

1530 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
∑øm5
,

1531 &
timeout
, (
timevÆ
));

1532 
timeouç
 = &
timeout
;

1535 
timeouç
 = 
NULL
;

1537 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
)

1539  
ªgs
->
ªgs_R
[2] =

1540 
	`£À˘
–
ªgs
->
ªgs_R
[4],

1541 (*)
ªadfdp
, (*)
wrôefdp
, (*)
ex˚±fdp
, 
timeouç
);

1544  
ªgs
->
ªgs_R
[2] =

1545 
	`£À˘
–
ªgs
->
ªgs_R
[4],

1546 
ªadfdp
, 
wrôefdp
, 
ex˚±fdp
, 
timeouç
);

1550 i‡(
ªgs
->
ªgs_R
[2] != -1)

1551 
ªgs
->
ªgs_R
[7] = 0;

1555 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1556 
ªgs
->
ªgs_R
[7] = 1;

1560 i‡–
ªgs
->
ªgs_R
[5] != 0)

1561 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1562 &
ªadfd
, (
fd_£t
));

1565 i‡–
ªgs
->
ªgs_R
[6] != 0)

1566 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[6],

1567 &
wrôefd
, (
fd_£t
));

1570 i‡–
ªgs
->
ªgs_R
[7] != 0)

1571 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[7],

1572 &
ex˚±fd
, (
fd_£t
));

1575 i‡–
∑øm5
 != 0)

1576 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
∑øm5
,

1577 &
timeout
, (
timevÆ
));

1582 
SS_SYS_sigvec
:

1584 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1585 
	`w¨n
("syscall: sigvec ignored");

1588 
SS_SYS_sigblock
:

1590 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1591 
	`w¨n
("syscall: sigblock ignored");

1594 
SS_SYS_sig£tmask
:

1596 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1597 
	`w¨n
("syscall: sigsetmask ignored");

1601 
SS_SYS_sig°ack
:

1606 i‡(
ªgs
->
ªgs_R
[5] != 0)

1608 (*
maf
)(
Ród
, 
ªgs
->
ªgs_R
[29]+28, (*)&
ãmp
, 4);

1609 (*
maf
)(
Wrôe
, 
ªgs
->
ªgs_R
[5], (*)&
ãmp
, 4);

1611 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1615 
SS_SYS_gëtimeofday
:

1616 #ifde‡
_MSC_VER


1617 
	`w¨n
("syscall gettimeofday()Çot yet implemented for MSC...");

1618 
ªgs
->
ªgs_R
[7] = 0;

1621 
ss_timevÆ
 
ss_tv
;

1622 
timevÆ
 
tv
, *
tvp
;

1623 
ss_timez⁄e
 
ss_tz
;

1624 
timez⁄e
 
tz
, *
tzp
;

1626 i‡–
ªgs
->
ªgs_R
[4] != 0)

1629 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4],

1630 &
ss_tv
, (
ss_timevÆ
));

1633 
tv
.
tv_£c
 = 
	`MD_SWAPW
(
ss_tv
.
ss_tv_£c
);

1634 
tv
.
tv_u£c
 = 
	`MD_SWAPW
(
ss_tv
.
ss_tv_u£c
);

1635 
tvp
 = &
tv
;

1638 
tvp
 = 
NULL
;

1640 i‡–
ªgs
->
ªgs_R
[5] != 0)

1643 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1644 &
ss_tz
, (
ss_timez⁄e
));

1647 
tz
.
tz_möuãswe°
 = 
	`MD_SWAPW
(
ss_tz
.
ss_tz_möuãswe°
);

1648 
tz
.
tz_d°time
 = 
	`MD_SWAPW
(
ss_tz
.
ss_tz_d°time
);

1649 
tzp
 = &
tz
;

1652 
tzp
 = 
NULL
;

1655  
ªgs
->
ªgs_R
[2] = 
	`gëtimeofday
(
tvp
, 
tzp
);

1658 i‡(
ªgs
->
ªgs_R
[2] != -1)

1659 
ªgs
->
ªgs_R
[7] = 0;

1663 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1664 
ªgs
->
ªgs_R
[7] = 1;

1667 i‡–
ªgs
->
ªgs_R
[4] != 0)

1670 
ss_tv
.
ss_tv_£c
 = 
	`MD_SWAPW
(
tv
.
tv_£c
);

1671 
ss_tv
.
ss_tv_u£c
 = 
	`MD_SWAPW
(
tv
.
tv_u£c
);

1674 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[4],

1675 &
ss_tv
, (
ss_timevÆ
));

1678 i‡–
ªgs
->
ªgs_R
[5] != 0)

1681 
ss_tz
.
ss_tz_möuãswe°
 = 
	`MD_SWAPW
(
tz
.
tz_möuãswe°
);

1682 
ss_tz
.
ss_tz_d°time
 = 
	`MD_SWAPW
(
tz
.
tz_d°time
);

1685 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1686 &
ss_tz
, (
ss_timez⁄e
));

1692 
SS_SYS_gërußge
:

1693 #i‡
	`deföed
(
__svr4__
Ë|| deföed(
__USLC__
Ë|| deföed(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
_AIX
)

1695 
tms
 
tms_buf
;

1696 
ss_rußge
 
rußge
;

1699 i‡(
	`times
(&
tms_buf
) != -1)

1702 
ªgs
->
ªgs_R
[2] = 0;

1703 
ªgs
->
ªgs_R
[7] = 0;

1708 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1709 
ªgs
->
ªgs_R
[7] = 1;

1713 #i‡
	`deföed
(
__svr4__
)

1714 
	`mem£t
(&
rußge
, '\0', (
ss_rußge
));

1716 
	`bzîo
(&
rußge
, (
ss_rußge
));

1720 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
tms_buf
.
tms_utime
/
CLK_TCK
;

1721 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
	`MD_SWAPW
(rusage.ss_ru_utime.ss_tv_sec);

1722 
rußge
.
ss_ru_utime
.
ss_tv_u£c
 = 0;

1723 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 = 
tms_buf
.
tms_°ime
/
CLK_TCK
;

1724 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 = 
	`MD_SWAPW
(rusage.ss_ru_stime.ss_tv_sec);

1725 
rußge
.
ss_ru_°ime
.
ss_tv_u£c
 = 0;

1728 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1729 &
rußge
, (
ss_rußge
));

1731 #ñi‡
	`deföed
(
__unix__
Ë|| deföed(
unix
)

1733 
rußge
 
loˇl_rußge
;

1734 
ss_rußge
 
rußge
;

1737  
ªgs
->
ªgs_R
[2] =

1738 
	`gërußge
–
ªgs
->
ªgs_R
[4], &
loˇl_rußge
);

1741 i‡(
ªgs
->
ªgs_R
[2] != -1)

1742 
ªgs
->
ªgs_R
[7] = 0;

1746 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1747 
ªgs
->
ªgs_R
[7] = 1;

1751 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
loˇl_rußge
.
ru_utime
.
tv_£c
;

1752 
rußge
.
ss_ru_utime
.
ss_tv_u£c
 = 
loˇl_rußge
.
ru_utime
.
tv_u£c
;

1753 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_utime
.
tv_£c
);

1754 
rußge
.
ss_ru_utime
.
ss_tv_u£c
 =

1755 
	`MD_SWAPW
(
loˇl_rußge
.
ru_utime
.
tv_u£c
);

1756 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 = 
loˇl_rußge
.
ru_°ime
.
tv_£c
;

1757 
rußge
.
ss_ru_°ime
.
ss_tv_u£c
 = 
loˇl_rußge
.
ru_°ime
.
tv_u£c
;

1758 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 =

1759 
	`MD_SWAPW
(
loˇl_rußge
.
ru_°ime
.
tv_£c
);

1760 
rußge
.
ss_ru_°ime
.
ss_tv_u£c
 =

1761 
	`MD_SWAPW
(
loˇl_rußge
.
ru_°ime
.
tv_u£c
);

1762 
rußge
.
ss_ru_maxrss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_maxrss
);

1763 
rußge
.
ss_ru_ixrss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_ixrss
);

1764 
rußge
.
ss_ru_idrss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_idrss
);

1765 
rußge
.
ss_ru_i§ss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_i§ss
);

1766 
rußge
.
ss_ru_möÊt
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_möÊt
);

1767 
rußge
.
ss_ru_majÊt
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_majÊt
);

1768 
rußge
.
ss_ru_nsw≠
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nsw≠
);

1769 
rußge
.
ss_ru_öblock
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_öblock
);

1770 
rußge
.
ss_ru_oublock
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_oublock
);

1771 
rußge
.
ss_ru_msg¢d
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_msg¢d
);

1772 
rußge
.
ss_ru_msgrcv
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_msgrcv
);

1773 
rußge
.
ss_ru_nsig«ls
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nsig«ls
);

1774 
rußge
.
ss_ru_nvcsw
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nvcsw
);

1775 
rußge
.
ss_ru_nivcsw
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nivcsw
);

1778 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1779 &
rußge
, (
ss_rußge
));

1781 #ñi‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
_MSC_VER
)

1782 
	`w¨n
("syscall: called getrusage()\n");

1783 
ªgs
->
ªgs_R
[7] = 0;

1785 #îr‹ 
No
 
	`gërußge
(Ë
im∂emíèti⁄
!

1789 
SS_SYS_wrôev
:

1790 #ifde‡
_MSC_VER


1791 
	`w¨n
("syscall writev()Çot yet implemented for MSC...");

1792 
ªgs
->
ªgs_R
[7] = 0;

1795 
i
;

1796 *
buf
;

1797 
iovec
 *
iov
;

1800 
iov
 =

1801 (
iovec
 *)
	`mÆloc
–
ªgs
->
ªgs_R
[6]

1802 * (
iovec
));

1803 i‡(!
iov
)

1804 
	`Áèl
("out of virtual memory in SYS_writev");

1807 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1808 
iov
, 
ªgs
->
ªgs_R
[6] * (
iovec
));

1811 
i
=0; i < 
ªgs
->
ªgs_R
[6]; i++)

1813 
iov
[
i
].
iov_ba£
 = (*)
	`MD_SWAPW
(()iov[i].iov_base);

1814 
iov
[
i
].
iov_Àn
 = 
	`MD_SWAPW
(iov[i].iov_len);

1815 i‡(
iov
[
i
].
iov_ba£
 !
NULL
)

1817 
buf
 = (*)
	`ˇŒoc
(
iov
[
i
].
iov_Àn
, ());

1818 i‡(!
buf
)

1819 
	`Áèl
("out of virtual memory in SYS_writev");

1820 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, (
md_addr_t
)
iov
[
i
].
iov_ba£
,

1821 
buf
, 
iov
[
i
].
iov_Àn
);

1822 
iov
[
i
].
iov_ba£
 = 
buf
;

1827  
ªgs
->
ªgs_R
[2] =

1828 
	`wrôev
–
ªgs
->
ªgs_R
[4], 
iov
,Ñegs->regs_R[6]);

1831 i‡(
ªgs
->
ªgs_R
[2] != -1)

1832 
ªgs
->
ªgs_R
[7] = 0;

1836 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1837 
ªgs
->
ªgs_R
[7] = 1;

1841 
i
=0; i < 
ªgs
->
ªgs_R
[6]; i++)

1843 i‡(
iov
[
i
].
iov_ba£
)

1845 
	`‰ì
(
iov
[
i
].
iov_ba£
);

1846 
iov
[
i
].
iov_ba£
 = 
NULL
;

1849 
	`‰ì
(
iov
);

1854 
SS_SYS_utimes
:

1856 
buf
[
MAXBUFSIZE
];

1859 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

1861 i‡–
ªgs
->
ªgs_R
[5] == 0)

1863 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
löux
)

1865  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, 
NULL
);

1866 #ñi‡
	`deföed
(
_MSC_VER
)

1868  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, 
NULL
);

1869 #ñi‡
	`deföed
(
__svr4__
Ë|| deföed(
__USLC__
Ë|| deföed(
unix
Ë|| deföed(
_AIX
Ë|| deföed(
__Æpha
)

1870  
ªgs
->
ªgs_R
[2] = 
	`utimes
(
buf
, 
NULL
);

1871 #ñi‡
	`deföed
(
__CYGWIN32__
)

1872 
	`w¨n
("syscall: called utimes()\n");

1874 #îr‹ 
No
 
	`utimes
(Ë
im∂emíèti⁄
!

1879 
ss_timevÆ
 
ss_tvÆ
[2];

1880 #i‚de‡
_MSC_VER


1881 
timevÆ
 
tvÆ
[2];

1885 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1886 
ss_tvÆ
, 2*(
ss_timevÆ
));

1888 #i‚de‡
_MSC_VER


1890 
tvÆ
[0].
tv_£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[0].
ss_tv_£c
);

1891 
tvÆ
[0].
tv_u£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[0].
ss_tv_u£c
);

1892 
tvÆ
[1].
tv_£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[1].
ss_tv_£c
);

1893 
tvÆ
[1].
tv_u£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[1].
ss_tv_u£c
);

1896 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__svr4__
)

1899 
utimbuf
 
ubuf
;

1901 
ubuf
.
a˘ime
 = 
tvÆ
[0].
tv_£c
;

1902 
ubuf
.
modtime
 = 
tvÆ
[1].
tv_£c
;

1904  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, &
ubuf
);

1906 #ñi‡
	`deföed
(
_MSC_VER
)

1909 
_utimbuf
 
ubuf
;

1911 
ubuf
.
a˘ime
 = 
ss_tvÆ
[0].
ss_tv_£c
;

1912 
ubuf
.
modtime
 = 
ss_tvÆ
[1].
ss_tv_£c
;

1914  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, &
ubuf
);

1916 #ñi‡
	`deföed
(
__USLC__
Ë|| deföed(
unix
Ë|| deföed(
_AIX
Ë|| deföed(
__Æpha
)

1917  
ªgs
->
ªgs_R
[2] = 
	`utimes
(
buf
, 
tvÆ
);

1918 #ñi‡
	`deföed
(
__CYGWIN32__
)

1919 
	`w¨n
("syscall: called utimes()\n");

1921 #îr‹ 
No
 
	`utimes
(Ë
im∂emíèti⁄
!

1926 i‡(
ªgs
->
ªgs_R
[2] != -1)

1927 
ªgs
->
ªgs_R
[7] = 0;

1931 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1932 
ªgs
->
ªgs_R
[7] = 1;

1937 
SS_SYS_gëæimô
:

1938 
SS_SYS_£ålimô
:

1939 #ifde‡
_MSC_VER


1940 
	`w¨n
("syscall get/setrlimit()Çot yet implemented for MSC...");

1941 
ªgs
->
ªgs_R
[7] = 0;

1942 #ñi‡
	`deföed
(
__CYGWIN32__
)

1943 
	`w¨n
("syscall: called get/setrlimit()\n");

1944 
ªgs
->
ªgs_R
[7] = 0;

1948 
ss_æimô
 
ss_æ
;

1949 
æimô
 
æ
;

1952 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1953 &
ss_æ
, (
ss_æimô
));

1956 
æ
.
æim_cur
 = 
	`MD_SWAPW
(
ss_æ
.
ss_æim_cur
);

1957 
æ
.
æim_max
 = 
	`MD_SWAPW
(
ss_æ
.
ss_æim_max
);

1960 i‡(
syscode
 =
SS_SYS_gëæimô
)

1961  
ªgs
->
ªgs_R
[2] = 
	`gëæimô
‘egs->ªgs_R[4], &
æ
);

1963  
ªgs
->
ªgs_R
[2] = 
	`£ålimô
‘egs->ªgs_R[4], &
æ
);

1966 i‡(
ªgs
->
ªgs_R
[2] != -1)

1967 
ªgs
->
ªgs_R
[7] = 0;

1971 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1972 
ªgs
->
ªgs_R
[7] = 1;

1976 
ss_æ
.
ss_æim_cur
 = 
	`MD_SWAPW
(
æ
.
æim_cur
);

1977 
ss_æ
.
ss_æim_max
 = 
	`MD_SWAPW
(
æ
.
æim_max
);

1980 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1981 &
ss_æ
, (
ss_æimô
));

1987 
SS_SYS_gëdúíåõs
:

1991 
i
;

1992 *
buf
;

1993 
ba£
;

1995 
buf
 = (*)
	`ˇŒoc
–
ªgs
->
ªgs_R
[6] + 1, ());

1996 i‡(!
buf
)

1997 
	`Áèl
("out of memory in SYS_getdirentries");

2000 
i
=0; i< 
ªgs
->
ªgs_R
[6]; i++)

2001 (*
maf
)(
Ród
, 
ªgs
->
ªgs_R
[5]+
i
,

2002 (*)&
buf
[
i
], 1);

2003 (*
maf
)(
Ród
, 
ªgs
->
ªgs_R
[7], (*)&
ba£
, 4);

2005  
ªgs
->
ªgs_R
[2] =

2006 
	`gëdúíåõs
–
ªgs
->
ªgs_R
[4], 
buf
,

2007  
ªgs
->
ªgs_R
[6], &
ba£
);

2009 i‡(
ªgs
->
ªgs_R
[2] != -1)

2010 
ªgs
->
ªgs_R
[7] = 0;

2013 
ªgs
->
ªgs_R
[2] = 
î∫o
;

2014 
ªgs
->
ªgs_R
[7] = 1;

2018 
i
=0; i< 
ªgs
->
ªgs_R
[6]; i++)

2019 (*
maf
)(
Wrôe
, 
ªgs
->
ªgs_R
[5]+
i
,

2020 (*)&
buf
[
i
], 1);

2021 (*
maf
)(
Wrôe
, 
ªgs
->
ªgs_R
[7], (*)&
ba£
, 4);

2023 
	`‰ì
(
buf
);

2029 
	`∑nic
("övÆid/unim∂emíãd sy°em cÆ»ícou¡îed, codê%d", 
syscode
);

2034 
	}
}

	@syscall.h

52 #i‚de‡
SYSCALL_H


53 
	#SYSCALL_H


	)

55 
	~<sys/ty≥s.h
>

56 #ifde‡
_MSC_VER


57 
	~<time.h
>

59 
	~<sys/time.h
>

62 
	~"ho°.h
"

63 
	~"misc.h
"

64 
	~"machöe.h
"

93 
sys_sysˇŒ
(
ªgs_t
 *
ªgs
,

94 
mem_ac˚ss_‚
 
mem_‚
,

95 
mem_t
 *
mem
,

96 
md_ö°_t
 
ö°
,

97 
åa˚abÀ
);

	@sysprobe.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 #i‚de‡
_MSC_VER


55 
	~<uni°d.h
>

57 
	#ac˚ss
 
_ac˚ss


	)

58 
	#X_OK
 4

	)

61 
	~"ho°.h
"

62 
	~"misc.h
"

64 *
	ggzù_∑ths
[] =

72 
NULL


75 
	#HOST_ONLY


	)

76 
	~"ídün.c
"

78 
	#CAT
(
a
,
b
Ë®
	)
b

80 
	#MSB
 0x80000000

	)

82 
	$Á°_SRL
()

84 
w‹d_t
 
ui
;

86 i‡((
ui
) != 4)

89  
FALSE
;

92 
ui
 = (
w‹d_t
)
MSB
;

93 i‡(((
ui
 >> 1Ë& 
MSB
) != 0)

96  
FALSE
;

101  
TRUE
;

103 
	}
}

106 
	$Á°_SRA
()

108 
sw‹d_t
 
si
;

110 i‡((
si
) != 4)

113  
FALSE
;

116 
si
 = (
sw‹d_t
)
MSB
;

117 i‡((
si
 >> 1Ë& 
MSB
)

120  
TRUE
;

125  
FALSE
;

127 
	}
}

130 
	$maö
(
¨gc
, **
¨gv
)

132 
lôée_byãs
 = 0, 
lôée_w‹ds
 = 0;

134 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "-s"))

136 
	`ídün_ho°_byã_‹dî
())

138 
ídün_big
:

139 
	`Ârötf
(
°dout
, "big\n");

141 
ídün_lôée
:

142 
	`Ârötf
(
°dout
, "little\n");

144 
ídün_unknown
:

145 
	`Ârötf
(
°dîr
, "\nerror: cannot determine byte order!\n");

146 
	`exô
(1);

148 
	`ab‹t
();

151 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "-libs"))

153 #ifde‡
BFD_LOADER


154 
	`Ârötf
(
°dout
, "-lbfd -liberty ");

157 #ifde‡
löux


159 #ñi‡
	`deföed
(
__USLC__
Ë|| (deföed(
__svr4__
Ë&& deföed(
__i386__
Ë&& deföed(
__unix__
))

160 
	`Ârötf
(
°dout
, "-L/usr/ucblib -lucb ");

164 
	`Ârötf
(
°dout
, " \n");

166 i‡(
¨gc
 =1 || (¨g¯=2 && !
	`°rcmp
(
¨gv
[1], "-flags")))

168 
	`ídün_ho°_byã_‹dî
())

170 
ídün_big
:

171 
	`Ârötf
(
°dout
, "-DBYTES_BIG_ENDIAN ");

173 
ídün_lôée
:

174 
	`Ârötf
(
°dout
, "-DBYTES_LITTLE_ENDIAN ");

175 
lôée_byãs
 = 1;

177 
ídün_unknown
:

178 
	`Ârötf
(
°dîr
, "\nerror: cannot determine byte order!\n");

179 
	`exô
(1);

181 
	`ab‹t
();

184 
	`ídün_ho°_w‹d_‹dî
())

186 
ídün_big
:

187 
	`Ârötf
(
°dout
, "-DWORDS_BIG_ENDIAN ");

189 
ídün_lôée
:

190 
	`Ârötf
(
°dout
, "-DWORDS_LITTLE_ENDIAN ");

191 
lôée_w‹ds
 = 1;

193 
ídün_unknown
:

194 
	`Ârötf
(
°dîr
, "\nerror: cannot determine word order!\n");

195 
	`exô
(1);

197 
	`ab‹t
();

200 #ifde‡
_AIX


201 
	`Ârötf
(
°dout
, "-D_ALL_SOURCE ");

204 #i‡(
	`deföed
(
hpux
Ë|| deföed(
__hpux
)Ë&& !deföed(
__GNUC__
)

205 
	`Ârötf
(
°dout
, "-D_INCLUDE_HPUX_SOURCE -D_INCLUDE_XOPEN_SOURCE -D_INCLUDE_AES_SOURCE ");

208 #i‚de‡
__GNUC__


212 
i
 = 5, 
j
;

214 
j
 = 
	`CAT
(-,-
i
);

216 i‡(
j
 == 4)

219 
	`Ârötf
(
°dout
, "-DOLD_SYMCAT ");

221 i‡(
j
 == 5)

230 
	`Ârötf
(
°dîr
, "\nerror: cannot grok symbol concat method!\n");

231 
	`exô
(1);

236 #i‚de‡
SLOW_SHIFTS


238 i‡(
	`Á°_SRL
())

239 
	`Ârötf
(
°dout
, "-DFAST_SRL ");

240 i‡(
	`Á°_SRA
())

241 
	`Ârötf
(
°dout
, "-DFAST_SRA ");

245 #i‚de‡
GZIP_PATH


247 
i
;

249 
i
=0; 
gzù_∑ths
[i] !
NULL
; i++)

251 i‡(
	`ac˚ss
(
gzù_∑ths
[
i
], 
X_OK
) == 0)

253 
	`Ârötf
(
°dout
, "-DGZIP_PATH=\"%s\" ", 
gzù_∑ths
[
i
]);

261 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "-t"))

263 
	`Ârötf
(
°dout
, "sizeof(int) = %d\n", ());

264 
	`Ârötf
(
°dout
, "sizeof(long) = %d\n", ());

269 i‡(
lôée_byãs
 !
lôée_w‹ds
)

271 
	`Ârötf
(
°dîr
,

273 
	`exô
(1);

275 
	`exô
(0);

277 
	}
}

	@target-pisa/config.h

52 #i‚de‡
CONFIG_H


53 
	#CONFIG_H


	)

	@target-pisa/configbig.h

52 #i‚de‡
CONFIGBIG_H


53 
	#CONFIGBIG_H


	)

56 
	#TARGET_PISA_BIG


	)

	@target-pisa/configlit.h

52 #i‚de‡
CONFIGLIT_H


53 
	#CONFIGLIT_H


	)

56 
	#TARGET_PISA_LITTLE


	)

	@target-pisa/ecoff.h

54 #i‚de‡
ECOFF_H


55 
	#ECOFF_H


	)

57 
	#ECOFF_EB_MAGIC
 0x0160

	)

58 
	#ECOFF_EB_OTHER
 0x6001

	)

59 
	#ECOFF_EL_MAGIC
 0x0162

	)

60 
	#ECOFF_EL_OTHER
 0x6201

	)

61 
	#ECOFF_ALPHAMAGIC
 0603

	)

63 
	secoff_fûehdr
 {

64 
hÆf_t
 
	mf_magic
;

65 
hÆf_t
 
	mf_ns˙s
;

66 
sw‹d_t
 
	mf_timd©
;

67 
sw‹d_t
 
	mf_sym±r
;

68 
sw‹d_t
 
	mf_nsyms
;

69 
hÆf_t
 
	mf_›thdr
;

70 
hÆf_t
 
	mf_Êags
;

73 
	secoff_aouthdr
 {

74 
shÆf_t
 
	mmagic
;

75 
shÆf_t
 
	mv°amp
;

76 
sw‹d_t
 
	mtsize
;

77 
sw‹d_t
 
	mdsize
;

78 
sw‹d_t
 
	mbsize
;

79 
sw‹d_t
 
	míåy
;

80 
sw‹d_t
 
	mãxt_°¨t
;

81 
sw‹d_t
 
	md©a_°¨t
;

82 
sw‹d_t
 
	mbss_°¨t
;

83 
sw‹d_t
 
	mg¥mask
;

84 
sw‹d_t
 
	m˝rmask
[4];

85 
sw‹d_t
 
	mgp_vÆue
;

88 
	secoff_s˙hdr
 {

89 
	ms_«me
[8];

90 
sw‹d_t
 
	ms_∑ddr
;

91 
sw‹d_t
 
	ms_vaddr
;

92 
sw‹d_t
 
	ms_size
;

93 
sw‹d_t
 
	ms_s˙±r
;

94 
sw‹d_t
 
	ms_ªÕå
;

95 
sw‹d_t
 
	ms_ n›å
;

96 
hÆf_t
 
	ms_ƒñoc
;

97 
hÆf_t
 
	ms_∆¬o
;

98 
sw‹d_t
 
	ms_Êags
;

101 
	secoff_symhdr_t
 {

102 
shÆf_t
 
	mmagic
;

103 
shÆf_t
 
	mv°amp
;

104 
sw‹d_t
 
	mûöeMax
;

105 
sw‹d_t
 
	mcbLöe
;

106 
sw‹d_t
 
	mcbLöeOff£t
;

107 
sw‹d_t
 
	midnMax
;

108 
sw‹d_t
 
	mcbDnOff£t
;

109 
sw‹d_t
 
	mùdMax
;

110 
sw‹d_t
 
	mcbPdOff£t
;

111 
sw‹d_t
 
	misymMax
;

112 
sw‹d_t
 
	mcbSymOff£t
;

113 
sw‹d_t
 
	mi›tMax
;

114 
sw‹d_t
 
	mcbO±Off£t
;

115 
sw‹d_t
 
	müuxMax
;

116 
sw‹d_t
 
	mcbAuxOff£t
;

117 
sw‹d_t
 
	missMax
;

118 
sw‹d_t
 
	mcbSsOff£t
;

119 
sw‹d_t
 
	missExtMax
;

120 
sw‹d_t
 
	mcbSsExtOff£t
;

121 
sw‹d_t
 
	mifdMax
;

122 
sw‹d_t
 
	mcbFdOff£t
;

123 
sw‹d_t
 
	m¸fd
;

124 
sw‹d_t
 
	mcbRfdOff£t
;

125 
sw‹d_t
 
	mõxtMax
;

126 
sw‹d_t
 
	mcbExtOff£t
;

127 } 
	tecoff_HDRR
;

129 
	#ECOFF_magicSym
 0x7009

	)

131 
	secoff_fdr
 {

132 
w‹d_t
 
	madr
;

133 
sw‹d_t
 
	mrss
;

134 
sw‹d_t
 
	missBa£
;

135 
sw‹d_t
 
	mcbSs
;

136 
sw‹d_t
 
	misymBa£
;

137 
sw‹d_t
 
	mcsym
;

138 
sw‹d_t
 
	mûöeBa£
;

139 
sw‹d_t
 
	m˛öe
;

140 
sw‹d_t
 
	mi›tBa£
;

141 
sw‹d_t
 
	mc›t
;

142 
hÆf_t
 
	mùdFú°
;

143 
hÆf_t
 
	m˝d
;

144 
sw‹d_t
 
	müuxBa£
;

145 
sw‹d_t
 
	mˇux
;

146 
sw‹d_t
 
	mrfdBa£
;

147 
sw‹d_t
 
	m¸fd
;

148 
	mœng
 :5;

149 
	mfMîge
 :1;

150 
	mfRódö
 :1;

151 
	mfBigídün
 :1;

152 
	mª£rved
 :24;

153 
sw‹d_t
 
	mcbLöeOff£t
;

154 
sw‹d_t
 
	mcbLöe
;

155 } 
	tecoff_FDR
;

157 
	secoff_pdr
 {

158 
w‹d_t
 
	madr
;

159 
sw‹d_t
 
	misym
;

160 
sw‹d_t
 
	mûöe
;

161 
sw‹d_t
 
	mªgmask
;

162 
sw‹d_t
 
	mªgoff£t
;

163 
sw‹d_t
 
	mi›t
;

164 
sw‹d_t
 
	m‰egmask
;

165 
sw‹d_t
 
	m‰egoff£t
;

166 
sw‹d_t
 
	m‰ameoff£t
;

167 
shÆf_t
 
	m‰amîeg
;

168 
shÆf_t
 
	mp¸eg
;

169 
sw‹d_t
 
	m Low
;

170 
sw‹d_t
 
	m High
;

171 
sw‹d_t
 
	mcbLöeOff£t
;

172 } 
	tecoff_PDR
;

174 
	secoff_SYMR
 {

175 
sw‹d_t
 
	miss
;

176 
sw‹d_t
 
	mvÆue
;

177 
	m°
 :6;

178 
	msc
 :5;

179 
	mª£rved
 :1;

180 
	mödex
 :20;

181 } 
	tecoff_SYMR
;

183 
	secoff_EXTR
 {

184 
shÆf_t
 
	mª£rved
;

185 
shÆf_t
 
	mifd
;

186 
ecoff_SYMR
 
	masym
;

187 } 
	tecoff_EXTR
;

189 
	#ECOFF_R_SN_TEXT
 1

	)

190 
	#ECOFF_R_SN_RDATA
 2

	)

191 
	#ECOFF_R_SN_DATA
 3

	)

192 
	#ECOFF_R_SN_SDATA
 4

	)

193 
	#ECOFF_R_SN_SBSS
 5

	)

194 
	#ECOFF_R_SN_BSS
 6

	)

196 
	#ECOFF_STYP_TEXT
 0x0020

	)

197 
	#ECOFF_STYP_RDATA
 0x0100

	)

198 
	#ECOFF_STYP_DATA
 0x0040

	)

199 
	#ECOFF_STYP_SDATA
 0x0200

	)

200 
	#ECOFF_STYP_SBSS
 0x0400

	)

201 
	#ECOFF_STYP_BSS
 0x0080

	)

203 
	#ECOFF_°Nû
 0

	)

204 
	#ECOFF_°GlobÆ
 1

	)

205 
	#ECOFF_°Sètic
 2

	)

206 
	#ECOFF_°P¨am
 3

	)

207 
	#ECOFF_°Loˇl
 4

	)

208 
	#ECOFF_°Labñ
 5

	)

209 
	#ECOFF_°Proc
 6

	)

210 
	#ECOFF_°Block
 7

	)

211 
	#ECOFF_°End
 8

	)

212 
	#ECOFF_°Membî
 9

	)

213 
	#ECOFF_°Ty≥def
 10

	)

214 
	#ECOFF_°Fûe
 11

	)

215 
	#ECOFF_°RegRñoc
 12

	)

216 
	#ECOFF_°F‹w¨d
 13

	)

217 
	#ECOFF_°SèticProc
 14

	)

218 
	#ECOFF_°C⁄°™t
 15

	)

	@target-pisa/loader.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"ídün.h
"

59 
	~"ªgs.h
"

60 
	~"mem‹y.h
"

61 
	~"sim.h
"

62 
	~"eio.h
"

63 
	~"lﬂdî.h
"

65 #ifde‡
BFD_LOADER


66 
	~<bfd.h
>

68 
	~"èrgë-piß/ecoff.h
"

72 
	#TEXT_TAIL_PADDING
 128

	)

75 
md_addr_t
 
	gld_ãxt_ba£
 = 0;

78 
	gld_ãxt_size
 = 0;

81 
md_addr_t
 
	gld_d©a_ba£
 = 0;

84 
	gld_d©a_size
 = 0;

87 
md_addr_t
 
	gld_brk_poöt
 = 0;

90 
md_addr_t
 
	gld_°ack_ba£
 = 
MD_STACK_BASE
;

93 
	gld_°ack_size
 = 0;

96 
md_addr_t
 
	gld_°ack_mö
 = (md_addr_t)-1;

99 *
	gld_¥og_‚ame
 = 
NULL
;

102 
md_addr_t
 
	gld_¥og_íåy
 = 0;

105 
md_addr_t
 
	gld_ívú⁄_ba£
 = 0;

108 
	gld_èrgë_big_ídün
;

112 
	$ld_ªg_°©s
(
°©_sdb_t
 *
sdb
)

114 
	`°©_ªg_addr
(
sdb
, "ld_text_base",

116 &
ld_ãxt_ba£
,Üd_text_base, " 0x%08p");

117 
	`°©_ªg_uöt
(
sdb
, "ld_text_size",

119 &
ld_ãxt_size
,Üd_ãxt_size, 
NULL
);

120 
	`°©_ªg_addr
(
sdb
, "ld_data_base",

122 &
ld_d©a_ba£
,Üd_data_base, " 0x%08p");

123 
	`°©_ªg_uöt
(
sdb
, "ld_data_size",

125 &
ld_d©a_size
,Üd_d©a_size, 
NULL
);

126 
	`°©_ªg_addr
(
sdb
, "ld_stack_base",

128 &
ld_°ack_ba£
,Üd_stack_base, " 0x%08p");

129 
	`°©_ªg_uöt
(
sdb
, "ld_stack_size",

131 &
ld_°ack_size
,Üd_°ack_size, 
NULL
);

133 
	`°©_ªg_addr
(
sdb
, "ld_stack_min",

135 &
ld_°ack_mö
,Üd_stack_min, " 0x%08p");

137 
	`°©_ªg_addr
(
sdb
, "ld_prog_entry",

139 &
ld_¥og_íåy
,Üd_prog_entry, " 0x%08p");

140 
	`°©_ªg_addr
(
sdb
, "ld_environ_base",

142 &
ld_ívú⁄_ba£
,Üd_environ_base, " 0x%08p");

143 
	`°©_ªg_öt
(
sdb
, "ld_target_big_endian",

145 &
ld_èrgë_big_ídün
,Üd_èrgë_big_ídün, 
NULL
);

146 
	}
}

152 
	$ld_lﬂd_¥og
(*
‚ame
,

153 
¨gc
, **
¨gv
,

154 **
ívp
,

155 
ªgs_t
 *
ªgs
,

156 
mem_t
 *
mem
,

157 
zîo_bss_£gs
)

159 
i
;

160 
w‹d_t
 
ãmp
;

161 
md_addr_t
 
•
, 
d©a_bªak
 = 0, 
nuŒ_±r
 = 0, 
¨gv_addr
, 
ívp_addr
;

163 i‡(
	`eio_vÆid
(
‚ame
))

165 i‡(
¨gc
 != 1)

167 
	`Ârötf
(
°dîr
, "error: EIO file hasárguments\n");

168 
	`exô
(1);

171 
	`Ârötf
(
°dîr
, "sim:Üﬂdög EIO fûe: %s\n", 
‚ame
);

173 
sim_eio_‚ame
 = 
	`my°rdup
(
‚ame
);

176 
sim_eio_fd
 = 
	`eio_›í
(
‚ame
);

179 i‡(
	`eio_ªad_chk±
(
ªgs
, 
mem
, 
sim_eio_fd
) != -1)

180 
	`Áèl
("bad initial checkpoint in EIO file");

183 i‡(
sim_chk±_‚ame
 !
NULL
)

185 
cou¡î_t
 
ª°‹e_i˙t
;

187 
FILE
 *
chk±_fd
;

189 
	`Ârötf
(
°dîr
, "sim:Üoading checkpoint file: %s\n",

190 
sim_chk±_‚ame
);

192 i‡(!
	`eio_vÆid
(
sim_chk±_‚ame
))

193 
	`Áèl
("file `%s' doesÇotáppearÅo beá checkpoint file",

194 
sim_chk±_‚ame
);

197 
chk±_fd
 = 
	`eio_›í
(
sim_chk±_‚ame
);

200 
ª°‹e_i˙t
 = 
	`eio_ªad_chk±
(
ªgs
, 
mem
, 
chk±_fd
);

203 
	`myÂrötf
(
°dîr
, "sim: fast forwardingÅo instruction %n\n",

204 
ª°‹e_i˙t
);

205 
	`eio_Á°_f‹w¨d
(
sim_eio_fd
, 
ª°‹e_i˙t
);

209 
ld_ívú⁄_ba£
 = 
ªgs
->
ªgs_R
[
MD_REG_SP
];

210 
ld_¥og_íåy
 = 
ªgs
->
ªgs_PC
;

215 #ifde‡
MD_CROSS_ENDIAN


218 
	`Áèl
("SimpleScalar/PISA only supports binaryÉxecution on\n"

224 i‡(
sim_chk±_‚ame
 !
NULL
)

225 
	`Áèl
("checkpoints only supported while EIOÅracing");

227 #ifde‡
BFD_LOADER


230 
bfd
 *
abfd
;

231 
a£˘i⁄
 *
£˘
;

235 
ld_°ack_ba£
 = 
MD_STACK_BASE
;

236 
•
 = 
	`ROUND_DOWN
(
MD_STACK_BASE
 - 
MD_MAX_ENVIRON
, (
dÊﬂt_t
));

237 
ld_°ack_size
 = 
ld_°ack_ba£
 - 
•
;

240 
ld_ívú⁄_ba£
 = 
•
;

243 i‡(!(
abfd
 = 
	`bfd_›ír
(
¨gv
[0], "ss-coff-big")))

244 i‡(!(
abfd
 = 
	`bfd_›ír
(
¨gv
[0], "ss-coff-little")))

245 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
¨gv
[0]);

250 i‡(!
	`bfd_check_f‹m©
(
abfd
, 
bfd_obje˘
))

252 
	`bfd_˛o£
(
abfd
);

253 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
¨gv
[0]);

257 
ld_¥og_‚ame
 = 
¨gv
[0];

260 
ld_èrgë_big_ídün
 = 
abfd
->
xvec
->
byã‹dî_big_p
;

262 
	`debug
("processing %d sections in `%s'...",

263 
	`bfd_cou¡_£˘i⁄s
(
abfd
), 
¨gv
[0]);

266 
£˘
=
abfd
->
£˘i⁄s
; se˘; se˘=£˘->
√xt
)

268 *
p
;

270 
	`debug
("processing section `%s', %d bytes @ 0x%08x...",

271 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), 
	`bfd_£˘i⁄_size
(abfd, sect),

272 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
));

275 i‡((
	`bfd_gë_£˘i⁄_Êags
(
abfd
, 
£˘
Ë& 
SEC_ALLOC
)

276 && (
	`bfd_gë_£˘i⁄_Êags
(
abfd
, 
£˘
Ë& 
SEC_LOAD
)

277 && 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
)

278 && 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
))

281 
p
 = 
	`ˇŒoc
(
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
), ());

282 i‡(!
p
)

283 
	`Áèl
("cannotállocate %d bytes for section `%s'",

284 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
),

285 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
));

287 i‡(!
	`bfd_gë_£˘i⁄_c⁄ã¡s
(
abfd
, 
£˘
, 
p
, (
fûe_±r
)0,

288 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
)))

289 
	`Áèl
("couldÇotÑeadÉntire `%s' section fromÉxecutable",

290 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
));

293 
	`mem_bc›y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
),

294 
p
, 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
));

297 
	`‰ì
(
p
);

300 i‡(
zîo_bss_£gs


301 && (
	`bfd_gë_£˘i⁄_Êags
(
abfd
, 
£˘
Ë& 
SEC_LOAD
)

302 && 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
)

303 && 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
))

306 
	`mem_bzîo
(
mem_ac˚ss
, 
mem
,

307 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
),

308 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
));

313 
	`debug
("ignoring section `%s' duringÜoad...",

314 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
));

318 i‡(!
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".text"))

321 
ld_ãxt_size
 =

322 ((
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
Ë+ 
	`bfd_£˘i⁄_size
(abfd, sect))

323 - 
MD_TEXT_BASE
)

324 + 
TEXT_TAIL_PADDING
;

327 
	`mem_bzîo
(
mem_ac˚ss
, 
mem
,

328 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
)

329 + 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
),

330 
TEXT_TAIL_PADDING
);

333 i‡(!
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".rdata")

334 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".data")

335 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".sdata")

336 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".bss")

337 || !
	`°rcmp
(
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), ".sbss"))

340 i‡(
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
Ë+ 
	`bfd_£˘i⁄_size
(abfd, sect) >

341 
d©a_bªak
)

342 
d©a_bªak
 = (
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
) +

343 
	`bfd_£˘i⁄_size
(
abfd
, 
£˘
));

348 
	`Áèl
("encountered unknown section `%s', %d bytes @ 0x%08x",

349 
	`bfd_£˘i⁄_«me
(
abfd
, 
£˘
), 
	`bfd_£˘i⁄_size
(abfd, sect),

350 
	`bfd_£˘i⁄_vma
(
abfd
, 
£˘
));

355 
ld_ãxt_ba£
 = 
MD_TEXT_BASE
;

356 
ld_d©a_ba£
 = 
MD_DATA_BASE
;

357 
ld_¥og_íåy
 = 
	`bfd_gë_°¨t_addªss
(
abfd
);

358 
ld_d©a_size
 = 
d©a_bªak
 - 
ld_d©a_ba£
;

361 i‡(!
	`bfd_˛o£
(
abfd
))

362 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
¨gv
[0]);

368 
FILE
 *
fobj
;

369 
Êoc
;

370 
ecoff_fûehdr
 
fhdr
;

371 
ecoff_aouthdr
 
ahdr
;

372 
ecoff_s˙hdr
 
shdr
;

376 
ld_°ack_ba£
 = 
MD_STACK_BASE
;

377 
•
 = 
	`ROUND_DOWN
(
MD_STACK_BASE
 - 
MD_MAX_ENVIRON
, (
dÊﬂt_t
));

378 
ld_°ack_size
 = 
ld_°ack_ba£
 - 
•
;

381 
ld_ívú⁄_ba£
 = 
•
;

384 
ld_¥og_‚ame
 = 
¨gv
[0];

387 #i‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
_MSC_VER
)

388 
fobj
 = 
	`f›í
(
¨gv
[0], "rb");

390 
fobj
 = 
	`f›í
(
¨gv
[0], "r");

392 i‡(!
fobj
)

393 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
¨gv
[0]);

395 i‡(
	`‰ód
(&
fhdr
, (
ecoff_fûehdr
), 1, 
fobj
) < 1)

396 
	`Áèl
("ˇ¬ŸÑód hódî fromÉxecuèbÀ `%s'", 
¨gv
[0]);

399 i‡(
fhdr
.
f_magic
 =
ECOFF_EB_MAGIC
)

400 
ld_èrgë_big_ídün
 = 
TRUE
;

401 i‡(
fhdr
.
f_magic
 =
ECOFF_EL_MAGIC
)

402 
ld_èrgë_big_ídün
 = 
FALSE
;

403 i‡(
fhdr
.
f_magic
 =
ECOFF_EB_OTHER
 || fhdr.f_magi¯=
ECOFF_EL_OTHER
)

404 
	`Áèl
("PISA bö¨y `%s' ha†wr⁄gÉndü¿f‹m©", 
¨gv
[0]);

405 i‡(
fhdr
.
f_magic
 =
ECOFF_ALPHAMAGIC
)

406 
	`Áèl
("PISA simuœt‹ c™nŸÑu¿AÕh®bö¨y `%s'", 
¨gv
[0]);

408 
	`Áèl
("bad magicÇumber inÉxecutable `%s' (notánÉxecutable?)",

409 
¨gv
[0]);

411 i‡(
	`‰ód
(&
ahdr
, (
ecoff_aouthdr
), 1, 
fobj
) < 1)

412 
	`Áèl
("ˇ¬ŸÑód AOUT hódî fromÉxecuèbÀ `%s'", 
¨gv
[0]);

414 
d©a_bªak
 = 
MD_DATA_BASE
 + 
ahdr
.
dsize
 +áhdr.
bsize
;

417 
D©a_°¨t
 = 
ahdr
.
d©a_°¨t
;

418 
D©a_size
 = 
ahdr
.
dsize
;

419 
Bss_size
 = 
ahdr
.
bsize
;

420 
Bss_°¨t
 = 
ahdr
.
bss_°¨t
;

421 
Gp_vÆue
 = 
ahdr
.
gp_vÆue
;

422 
Text_íåy
 = 
ahdr
.
íåy
;

428 
	`f£ek
(
fobj
, (
ecoff_fûehdr
Ë+ 
fhdr
.
f_›thdr
, 0);

430 
	`debug
("¥o˚ssög %d se˘i⁄†ö `%s'...", 
fhdr
.
f_ns˙s
, 
¨gv
[0]);

433 
Êoc
 = 
	`·ñl
(
fobj
);

434 
i
 = 0; i < 
fhdr
.
f_ns˙s
; i++)

436 *
p
;

438 i‡(
	`f£ek
(
fobj
, 
Êoc
, 0) == -1)

439 
	`Áèl
("couldÇotÑesetÜocation inÉxecutable");

440 i‡(
	`‰ód
(&
shdr
, (
ecoff_s˙hdr
), 1, 
fobj
) < 1)

441 
	`Áèl
("couldÇŸÑód se˘i⁄ %d fromÉxecuèbÀ", 
i
);

442 
Êoc
 = 
	`·ñl
(
fobj
);

444 
shdr
.
s_Êags
)

446 
ECOFF_STYP_TEXT
:

447 
ld_ãxt_size
 = ((
shdr
.
s_vaddr
 + shdr.
s_size
Ë- 
MD_TEXT_BASE
)

448 + 
TEXT_TAIL_PADDING
;

450 
p
 = 
	`ˇŒoc
(
shdr
.
s_size
, ());

451 i‡(!
p
)

452 
	`Áèl
("out of virtual memory");

454 i‡(
	`f£ek
(
fobj
, 
shdr
.
s_s˙±r
, 0) == -1)

455 
	`Áèl
("couldÇŸÑód `.ãxt' fromÉxecuèbÀ", 
i
);

456 i‡(
	`‰ód
(
p
, 
shdr
.
s_size
, 1, 
fobj
) < 1)

457 
	`Áèl
("couldÇotÑeadÅext section fromÉxecutable");

460 
	`mem_bc›y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
shdr
.
s_vaddr
, 
p
, shdr.
s_size
);

463 
	`mem_bzîo
(
mem_ac˚ss
, 
mem
,

464 
shdr
.
s_vaddr
 + shdr.
s_size
, 
TEXT_TAIL_PADDING
);

467 
	`‰ì
(
p
);

470 
Text_£ek
 = 
shdr
.
s_s˙±r
;

471 
Text_°¨t
 = 
shdr
.
s_vaddr
;

472 
Text_size
 = 
shdr
.
s_size
 / 4;

474 
Text_size
 += 10;

475 
Text_íd
 = 
Text_°¨t
 + 
Text_size
 * 4;

480 
ECOFF_STYP_RDATA
:

485 
Rd©a_°¨t
 = 
shdr
.
s_vaddr
;

486 
Rd©a_size
 = 
shdr
.
s_size
;

487 
Rd©a_£ek
 = 
shdr
.
s_s˙±r
;

490 
ECOFF_STYP_DATA
:

492 
D©a_£ek
 = 
shdr
.
s_s˙±r
;

495 
ECOFF_STYP_SDATA
:

497 
Sd©a_£ek
 = 
shdr
.
s_s˙±r
;

500 
p
 = 
	`ˇŒoc
(
shdr
.
s_size
, ());

501 i‡(!
p
)

502 
	`Áèl
("out of virtual memory");

504 i‡(
	`f£ek
(
fobj
, 
shdr
.
s_s˙±r
, 0) == -1)

505 
	`Áèl
("couldÇŸÑód `.ãxt' fromÉxecuèbÀ", 
i
);

506 i‡(
	`‰ód
(
p
, 
shdr
.
s_size
, 1, 
fobj
) < 1)

507 
	`Áèl
("couldÇotÑeadÅext section fromÉxecutable");

510 
	`mem_bc›y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
shdr
.
s_vaddr
, 
p
, shdr.
s_size
);

513 
	`‰ì
(
p
);

517 
ECOFF_STYP_BSS
:

520 
ECOFF_STYP_SBSS
:

526 
ld_ãxt_ba£
 = 
MD_TEXT_BASE
;

527 
ld_d©a_ba£
 = 
MD_DATA_BASE
;

528 
ld_¥og_íåy
 = 
ahdr
.
íåy
;

529 
ld_d©a_size
 = 
d©a_bªak
 - 
ld_d©a_ba£
;

532 i‡(
	`f˛o£
(
fobj
))

533 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
¨gv
[0]);

538 i‡(!
ld_ãxt_ba£
 || !
ld_ãxt_size
)

539 
	`Áèl
("executable is missingá `.text' section");

540 i‡(!
ld_d©a_ba£
 || !
ld_d©a_size
)

541 
	`Áèl
("executable is missingá `.data' section");

542 i‡(!
ld_¥og_íåy
)

543 
	`Áèl
("programÉntryÖointÇot specified");

546 
sim_sw≠_byãs
 = (
	`ídün_ho°_byã_‹dî
(Ë!
	`ídün_èrgë_byã_‹dî
());

547 i‡(
sim_sw≠_byãs
)

552 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping bytesÅo match host...\n");

553 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping may break yourÖrogram!\n");

555 
	`Áèl
("binaryÉndian doesÇot match hostÉndian");

558 
sim_sw≠_w‹ds
 = (
	`ídün_ho°_w‹d_‹dî
(Ë!
	`ídün_èrgë_w‹d_‹dî
());

559 i‡(
sim_sw≠_w‹ds
)

564 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping wordsÅo match host...\n");

565 
	`Ârötf
(
°dîr
, "sim: *WARNING*: swapping may break yourÖrogram!\n");

567 
	`Áèl
("binaryÉndian doesÇot match hostÉndian");

572 
ãmp
 = 
	`MD_SWAPW
(
¨gc
);

573 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
•
, &
ãmp
, (
w‹d_t
));

574 
•
 +(
w‹d_t
);

577 
¨gv_addr
 = 
•
;

578 
•
 = s∞+ (
¨gc
 + 1Ë* (
md_addr_t
);

581 
ívp_addr
 = 
•
;

582 
i
=0; 
ívp
[i]; i++)

583 
•
 +(
md_addr_t
);

584 
•
 +(
md_addr_t
);

587 
i
=0; i<
¨gc
; i++)

590 
ãmp
 = 
	`MD_SWAPW
(
•
);

591 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
¨gv_addr
 + 
i
*(
md_addr_t
),

592 &
ãmp
, (
md_addr_t
));

594 
	`mem_°r˝y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
•
, 
¨gv
[
i
]);

595 
•
 +
	`°æí
(
¨gv
[
i
]) + 1;

598 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
¨gv_addr
 + 
i
*(
md_addr_t
),

599 &
nuŒ_±r
, (
md_addr_t
));

602 
i
 = 0; 
ívp
[i]; i++)

605 
ãmp
 = 
	`MD_SWAPW
(
•
);

606 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
ívp_addr
 + 
i
*(
md_addr_t
),

607 &
ãmp
, (
md_addr_t
));

609 
	`mem_°r˝y
(
mem_ac˚ss
, 
mem
, 
Wrôe
, 
•
, 
ívp
[
i
]);

610 
•
 +
	`°æí
(
ívp
[
i
]) + 1;

613 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
ívp_addr
 + 
i
*(
md_addr_t
),

614 &
nuŒ_±r
, (
md_addr_t
));

617 i‡(
•
 > 
ld_°ack_ba£
)

622 
	`Áèl
("environment overflow, increase MD_MAX_ENVIRON in ss.h");

626 
ld_brk_poöt
 = 
	`ROUND_UP
(
ld_d©a_ba£
 + 
ld_d©a_size
, 
MD_PAGE_SIZE
);

629 
ld_°ack_mö
 = 
ªgs
->
ªgs_R
[
MD_REG_SP
];

632 
ªgs
->
ªgs_R
[
MD_REG_SP
] = 
ld_ívú⁄_ba£
;

633 
ªgs
->
ªgs_PC
 = 
ld_¥og_íåy
;

635 
	`debug
("ld_text_base: 0x%08xÜd_text_size: 0x%08x",

636 
ld_ãxt_ba£
, 
ld_ãxt_size
);

637 
	`debug
("ld_data_base: 0x%08xÜd_data_size: 0x%08x",

638 
ld_d©a_ba£
, 
ld_d©a_size
);

639 
	`debug
("ld_stack_base: 0x%08xÜd_stack_size: 0x%08x",

640 
ld_°ack_ba£
, 
ld_°ack_size
);

641 
	`debug
("ld_¥og_íåy: 0x%08x", 
ld_¥og_íåy
);

645 
md_addr_t
 
addr
;

646 
md_ö°_t
 
ö°
;

647 
md_Áu…_ty≥
 
Áu…
;

649 i‡(
OP_MAX
 > 255)

650 
	`Áèl
("cannotÖerform fast decoding,Åoo many opcodes");

652 
	`debug
("sim: decodingÅext segment...");

653 
addr
=
ld_ãxt_ba£
;

654 
addr
 < (
ld_ãxt_ba£
+
ld_ãxt_size
);

655 
addr
 +(
md_ö°_t
))

657 
Áu…
 = 
	`mem_ac˚ss
(
mem
, 
Ród
, 
addr
, &
ö°
, (inst));

658 i‡(
Áu…
 !
md_Áu…_n⁄e
)

659 
	`Áèl
("couldÇotÑead instruction memory");

660 
ö°
.
a
 = (ö°.®& ~0xffË| (
w‹d_t
)
	`MD_OP_ENUM
(
	`MD_OPFIELD
(inst));

661 
Áu…
 = 
	`mem_ac˚ss
(
mem
, 
Wrôe
, 
addr
, &
ö°
, (inst));

662 i‡(
Áu…
 !
md_Áu…_n⁄e
)

663 
	`Áèl
("couldÇot write instruction memory");

666 
	}
}

	@target-pisa/pisa.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 
	~"machöe.h
"

58 
	~"evÆ.h
"

59 
	~"ªgs.h
"

62 
md_ö°_t
 
	gMD_NOP_INST
 = { 
NOP
, 0 };

65 
md_›code
 
	gmd_mask2›
[
MD_MAX_MASK
+1];

68 *
	gmd_›2«me
[
OP_MAX
] = {

69 
NULL
,

70 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËNAME,

	)

71 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
ËNAME,

	)

72 
	#CONNECT
(
OP
)

	)

73 
	~"machöe.def
"

77 *
	gmd_›2f‹m©
[
OP_MAX
] = {

78 
NULL
,

79 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËOPFORM,

	)

80 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
Ë
NULL
,

	)

81 
	#CONNECT
(
OP
)

	)

82 
	~"machöe.def
"

86 
md_fu_˛ass
 
	gmd_›2fu
[
OP_MAX
] = {

87 
FUCœss_NA
,

88 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËRES,

	)

89 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
Ë
FUCœss_NA
,

	)

90 
	#CONNECT
(
OP
)

	)

91 
	~"machöe.def
"

95 *
	gmd_fu2«me
[
NUM_FU_CLASSES
] = {

96 
NULL
,

111 
	gmd_›2Êags
[
OP_MAX
] = {

112 
NA
,

113 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËFLAGS,

	)

114 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
Ë
NA
,

	)

115 
	#CONNECT
(
OP
)

	)

116 
	~"machöe.def
"

120 
w‹d_t
 
	gmd_Ã_masks
[] = {

121 #ifde‡
BYTES_BIG_ENDIAN


136 *
	gmd_amode_°r
[
md_amode_NUM
] =

147 
md_ªg_«mes_t
 
	gmd_ªg_«mes
[] =

152 { "$r0", 
π_g¥
, 0 },

153 { "$zîo", 
π_g¥
, 0 },

154 { "$r1", 
π_g¥
, 1 },

155 { "$r2", 
π_g¥
, 2 },

156 { "$r3", 
π_g¥
, 3 },

157 { "$r4", 
π_g¥
, 4 },

158 { "$r5", 
π_g¥
, 5 },

159 { "$r6", 
π_g¥
, 6 },

160 { "$r7", 
π_g¥
, 7 },

161 { "$r8", 
π_g¥
, 8 },

162 { "$r9", 
π_g¥
, 9 },

163 { "$r10", 
π_g¥
, 10 },

164 { "$r11", 
π_g¥
, 11 },

165 { "$r12", 
π_g¥
, 12 },

166 { "$r13", 
π_g¥
, 13 },

167 { "$r14", 
π_g¥
, 14 },

168 { "$r15", 
π_g¥
, 15 },

169 { "$r16", 
π_g¥
, 16 },

170 { "$r17", 
π_g¥
, 17 },

171 { "$r18", 
π_g¥
, 18 },

172 { "$r19", 
π_g¥
, 19 },

173 { "$r20", 
π_g¥
, 20 },

174 { "$r21", 
π_g¥
, 21 },

175 { "$r22", 
π_g¥
, 22 },

176 { "$r23", 
π_g¥
, 23 },

177 { "$r24", 
π_g¥
, 24 },

178 { "$r25", 
π_g¥
, 25 },

179 { "$r26", 
π_g¥
, 26 },

180 { "$r27", 
π_g¥
, 27 },

181 { "$r28", 
π_g¥
, 28 },

182 { "$gp", 
π_g¥
, 28 },

183 { "$r29", 
π_g¥
, 29 },

184 { "$•", 
π_g¥
, 29 },

185 { "$r30", 
π_g¥
, 30 },

186 { "$Â", 
π_g¥
, 30 },

187 { "$r31", 
π_g¥
, 31 },

190 { "$f0", 
π_Âr
, 0 },

191 { "$f1", 
π_Âr
, 1 },

192 { "$f2", 
π_Âr
, 2 },

193 { "$f3", 
π_Âr
, 3 },

194 { "$f4", 
π_Âr
, 4 },

195 { "$f5", 
π_Âr
, 5 },

196 { "$f6", 
π_Âr
, 6 },

197 { "$f7", 
π_Âr
, 7 },

198 { "$f8", 
π_Âr
, 8 },

199 { "$f9", 
π_Âr
, 9 },

200 { "$f10", 
π_Âr
, 10 },

201 { "$f11", 
π_Âr
, 11 },

202 { "$f12", 
π_Âr
, 12 },

203 { "$f13", 
π_Âr
, 13 },

204 { "$f14", 
π_Âr
, 14 },

205 { "$f15", 
π_Âr
, 15 },

206 { "$f16", 
π_Âr
, 16 },

207 { "$f17", 
π_Âr
, 17 },

208 { "$f18", 
π_Âr
, 18 },

209 { "$f19", 
π_Âr
, 19 },

210 { "$f20", 
π_Âr
, 20 },

211 { "$f21", 
π_Âr
, 21 },

212 { "$f22", 
π_Âr
, 22 },

213 { "$f23", 
π_Âr
, 23 },

214 { "$f24", 
π_Âr
, 24 },

215 { "$f25", 
π_Âr
, 25 },

216 { "$f26", 
π_Âr
, 26 },

217 { "$f27", 
π_Âr
, 27 },

218 { "$f28", 
π_Âr
, 28 },

219 { "$f29", 
π_Âr
, 29 },

220 { "$f30", 
π_Âr
, 30 },

221 { "$f31", 
π_Âr
, 31 },

224 { "$d0", 
π_d¥
, 0 },

225 { "$d1", 
π_d¥
, 1 },

226 { "$d2", 
π_d¥
, 2 },

227 { "$d3", 
π_d¥
, 3 },

228 { "$d4", 
π_d¥
, 4 },

229 { "$d5", 
π_d¥
, 5 },

230 { "$d6", 
π_d¥
, 6 },

231 { "$d7", 
π_d¥
, 7 },

232 { "$d8", 
π_d¥
, 8 },

233 { "$d9", 
π_d¥
, 9 },

234 { "$d10", 
π_d¥
, 10 },

235 { "$d11", 
π_d¥
, 11 },

236 { "$d12", 
π_d¥
, 12 },

237 { "$d13", 
π_d¥
, 13 },

238 { "$d14", 
π_d¥
, 14 },

239 { "$d15", 
π_d¥
, 15 },

242 { "$l0", 
π_Õr
, 0 },

243 { "$l1", 
π_Õr
, 1 },

244 { "$l2", 
π_Õr
, 2 },

245 { "$l3", 
π_Õr
, 3 },

246 { "$l4", 
π_Õr
, 4 },

247 { "$l5", 
π_Õr
, 5 },

248 { "$l6", 
π_Õr
, 6 },

249 { "$l7", 
π_Õr
, 7 },

250 { "$l8", 
π_Õr
, 8 },

251 { "$l9", 
π_Õr
, 9 },

252 { "$l10", 
π_Õr
, 10 },

253 { "$l11", 
π_Õr
, 11 },

254 { "$l12", 
π_Õr
, 12 },

255 { "$l13", 
π_Õr
, 13 },

256 { "$l14", 
π_Õr
, 14 },

257 { "$l15", 
π_Õr
, 15 },

258 { "$l16", 
π_Õr
, 16 },

259 { "$l17", 
π_Õr
, 17 },

260 { "$l18", 
π_Õr
, 18 },

261 { "$l19", 
π_Õr
, 19 },

262 { "$l20", 
π_Õr
, 20 },

263 { "$l21", 
π_Õr
, 21 },

264 { "$l22", 
π_Õr
, 22 },

265 { "$l23", 
π_Õr
, 23 },

266 { "$l24", 
π_Õr
, 24 },

267 { "$l25", 
π_Õr
, 25 },

268 { "$l26", 
π_Õr
, 26 },

269 { "$l27", 
π_Õr
, 27 },

270 { "$l28", 
π_Õr
, 28 },

271 { "$l29", 
π_Õr
, 29 },

272 { "$l30", 
π_Õr
, 30 },

273 { "$l31", 
π_Õr
, 31 },

276 { "$hi", 
π_˘æ
, 0 },

277 { "$lo", 
π_˘æ
, 1 },

278 { "$fcc", 
π_˘æ
, 2 },

281 { "$pc", 
π_PC
, 0 },

282 { "$≈c", 
π_NPC
, 0 },

285 { 
NULL
, 
π_g¥
, 0 }

290 
	$md_ªg_«me
(
md_ªg_ty≥
 
π
, 
ªg
)

292 
i
;

294 
i
=0; 
md_ªg_«mes
[i].
°r
 !
NULL
; i++)

296 i‡(
md_ªg_«mes
[
i
].
fûe
 =
π
 && md_ªg_«mes[i].
ªg
 ==Ñeg)

297  
md_ªg_«mes
[
i
].
°r
;

301  
NULL
;

302 
	}
}

305 
	$md_ªg_obj
(
ªgs_t
 *
ªgs
,

306 
is_wrôe
,

307 
md_ªg_ty≥
 
π
,

308 
ªg
,

309 
evÆ_vÆue_t
 *
vÆ
)

311 
π
)

313 
π_g¥
:

314 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_IREGS
)

317 i‡(!
is_wrôe
)

319 
vÆ
->
ty≥
 = 
ë_uöt
;

320 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_R
[
ªg
];

323 
ªgs
->
ªgs_R
[
ªg
] = 
	`evÆ_as_uöt
(*
vÆ
);

326 
π_Õr
:

327 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
)

330 i‡(!
is_wrôe
)

332 
vÆ
->
ty≥
 = 
ë_uöt
;

333 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_F
.
l
[
ªg
];

336 
ªgs
->
ªgs_F
.
l
[
ªg
] = 
	`evÆ_as_uöt
(*
vÆ
);

339 
π_Âr
:

340 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
)

343 i‡(!
is_wrôe
)

345 
vÆ
->
ty≥
 = 
ë_Êﬂt
;

346 
vÆ
->
vÆue
.
as_Êﬂt
 = 
ªgs
->
ªgs_F
.
f
[
ªg
];

349 
ªgs
->
ªgs_F
.
f
[
ªg
] = 
	`evÆ_as_Êﬂt
(*
vÆ
);

352 
π_d¥
:

353 i‡(
ªg
 < 0 ||Ñeg >
MD_NUM_FREGS
/2)

356 i‡(!
is_wrôe
)

358 
vÆ
->
ty≥
 = 
ë_doubÀ
;

359 
vÆ
->
vÆue
.
as_doubÀ
 = 
ªgs
->
ªgs_F
.
d
[
ªg
];

362 
ªgs
->
ªgs_F
.
d
[
ªg
] = 
	`evÆ_as_doubÀ
(*
vÆ
);

365 
π_˘æ
:

366 
ªg
)

369 i‡(!
is_wrôe
)

371 
vÆ
->
ty≥
 = 
ë_uöt
;

372 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_C
.
hi
;

375 
ªgs
->
ªgs_C
.
hi
 = 
	`evÆ_as_uöt
(*
vÆ
);

379 i‡(!
is_wrôe
)

381 
vÆ
->
ty≥
 = 
ë_uöt
;

382 
vÆ
->
vÆue
.
as_uöt
 = 
ªgs
->
ªgs_C
.
lo
;

385 
ªgs
->
ªgs_C
.
lo
 = 
	`evÆ_as_uöt
(*
vÆ
);

389 i‡(!
is_wrôe
)

391 
vÆ
->
ty≥
 = 
ë_öt
;

392 
vÆ
->
vÆue
.
as_öt
 = 
ªgs
->
ªgs_C
.
fcc
;

395 
ªgs
->
ªgs_C
.
fcc
 = 
	`evÆ_as_uöt
(*
vÆ
);

403 
π_PC
:

404 i‡(!
is_wrôe
)

406 
vÆ
->
ty≥
 = 
ë_addr
;

407 
vÆ
->
vÆue
.
as_addr
 = 
ªgs
->
ªgs_PC
;

410 
ªgs
->
ªgs_PC
 = 
	`evÆ_as_addr
(*
vÆ
);

413 
π_NPC
:

414 i‡(!
is_wrôe
)

416 
vÆ
->
ty≥
 = 
ë_addr
;

417 
vÆ
->
vÆue
.
as_addr
 = 
ªgs
->
ªgs_NPC
;

420 
ªgs
->
ªgs_NPC
 = 
	`evÆ_as_addr
(*
vÆ
);

424 
	`∑nic
("bogusÑegister bank");

428  
NULL
;

429 
	}
}

433 
	$md_¥öt_úeg
(
md_g¥_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
)

435 
	`Ârötf
(
°ªam
, "%4s: %12d/0x%08x",

436 
	`md_ªg_«me
(
π_g¥
, 
ªg
), 
ªgs
[reg],Ñegs[reg]);

437 
	}
}

440 
	$md_¥öt_úegs
(
md_g¥_t
 
ªgs
, 
FILE
 *
°ªam
)

442 
i
;

444 
i
=0; i < 
MD_NUM_IREGS
; i += 2)

446 
	`md_¥öt_úeg
(
ªgs
, 
i
, 
°ªam
);

447 
	`Ârötf
(
°ªam
, " ");

448 
	`md_¥öt_úeg
(
ªgs
, 
i
+1, 
°ªam
);

449 
	`Ârötf
(
°ªam
, "\n");

451 
	}
}

455 
	$md_¥öt_Âªg
(
md_Âr_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
)

457 
	`Ârötf
(
°ªam
, "%4s: %12d/0x%08x/%f",

458 
	`md_ªg_«me
(
π_Âr
, 
ªg
), 
ªgs
.
l
[ªg],Ñegs.l[ªg],Ñegs.
f
[reg]);

459 i‡–!(
ªg
 & 1))

461 
	`Ârötf
(
°ªam
, " (%4sás double: %f)",

462 
	`md_ªg_«me
(
π_d¥
, 
ªg
/2), 
ªgs
.
d
[reg/2]);

464 
	}
}

467 
	$md_¥öt_Âªgs
(
md_Âr_t
 
ªgs
, 
FILE
 *
°ªam
)

469 
i
;

472 
i
=0; i < 
MD_NUM_FREGS
; i += 2)

474 
	`md_¥öt_Âªg
(
ªgs
, 
i
, 
°ªam
);

475 
	`Ârötf
(
°ªam
, "\n");

477 
	`md_¥öt_Âªg
(
ªgs
, 
i
+1, 
°ªam
);

478 
	`Ârötf
(
°ªam
, "\n");

480 
	}
}

483 
	$md_¥öt_¸eg
(
md_˘æ_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
)

486 
ªg
)

489 
	`Ârötf
(
°ªam
, "HI: 0x%08x", 
ªgs
.
hi
);

493 
	`Ârötf
(
°ªam
, "LO: 0x%08x", 
ªgs
.
lo
);

497 
	`Ârötf
(
°ªam
, "FCC: 0x%08x", 
ªgs
.
fcc
);

501 
	`∑nic
("bogus controlÑegister index");

503 
	}
}

506 
	$md_¥öt_¸egs
(
md_˘æ_t
 
ªgs
, 
FILE
 *
°ªam
)

508 
	`md_¥öt_¸eg
(
ªgs
, 0, 
°ªam
);

509 
	`Ârötf
(
°ªam
, " ");

510 
	`md_¥öt_¸eg
(
ªgs
, 1, 
°ªam
);

511 
	`Ârötf
(
°ªam
, " ");

512 
	`md_¥öt_¸eg
(
ªgs
, 2, 
°ªam
);

513 
	`Ârötf
(
°ªam
, "\n");

514 
	}
}

517 
w‹d_t


518 
	$md_¸c_ªgs
(
ªgs_t
 *
ªgs
)

520 
i
;

521 
w‹d_t
 
¸c_accum
 = 0;

523 
i
=0; i < 
MD_NUM_IREGS
; i++)

524 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_R
[
i
]);

526 
i
=0; i < 
MD_NUM_FREGS
; i++)

527 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_F
.
l
[
i
]);

529 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_C
.
hi
);

530 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_C
.
lo
);

531 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_C
.
fcc
);

532 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_PC
);

533 
¸c_accum
 = 
	`¸c
(¸c_accum, 
ªgs
->
ªgs_NPC
);

535  
¸c_accum
;

536 
	}
}

539 
w‹d_t


540 
	$md_x‹_ªgs
(
ªgs_t
 *
ªgs
)

542 
i
;

543 
w‹d_t
 
checksum
 = 0;

545 
i
=0; i < 
MD_NUM_IREGS
; i++)

546 
checksum
 ^
ªgs
->
ªgs_R
[
i
];

548 
i
=0; i < 
MD_NUM_FREGS
; i++)

549 
checksum
 ^
ªgs
->
ªgs_F
.
l
[
i
];

551 
checksum
 ^
ªgs
->
ªgs_C
.
hi
;

552 
checksum
 ^
ªgs
->
ªgs_C
.
lo
;

553 
checksum
 ^
ªgs
->
ªgs_C
.
fcc
;

554 
checksum
 ^
ªgs
->
ªgs_PC
;

555 
checksum
 ^
ªgs
->
ªgs_NPC
;

557  
checksum
;

558 
	}
}

562 
	$md_öô_decodî
()

565 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
) \

566 i‡(
md_mask2›
[(
MSK
)]Ë
	`Áèl
("doubly defined mask value"); \

567 i‡((
MSK
Ë>
MD_MAX_MASK
Ë
	`Áèl
("mask value isÅooÜarge"); \

568 
md_mask2›
[(
MSK
)]=(
OP
);

	)

570 
	~"machöe.def
"

571 
	}
}

575 
	$md_¥öt_ö¢
(
md_ö°_t
 
ö°
,

576 
md_addr_t
 
pc
,

577 
FILE
 *
°ªam
)

579 
md_›code
 
›
;

582 i‡(!
°ªam
)

583 
°ªam
 = 
°dîr
;

586 
	`MD_SET_OPCODE
(
›
, 
ö°
);

589 i‡(
›
 =
OP_NA
 || o∞>
OP_MAX
)

592 
	`Ârötf
(
°ªam
, "<övÆid in°: 0x%08x:%08x>", 
ö°
.
a
, in°.
b
);

596 *
s
;

598 
	`Ârötf
(
°ªam
, "%-10s", 
	`MD_OP_NAME
(
›
));

600 
s
 = 
	`MD_OP_FORMAT
(
›
);

601 *
s
) {

602 *
s
) {

604 
	`Ârötf
(
°ªam
, "r%d", 
RD
);

607 
	`Ârötf
(
°ªam
, "r%d", 
RS
);

610 
	`Ârötf
(
°ªam
, "r%d", 
RT
);

613 
	`Ârötf
(
°ªam
, "r%d", 
BS
);

616 
	`Ârötf
(
°ªam
, "f%d", 
FD
);

619 
	`Ârötf
(
°ªam
, "f%d", 
FS
);

622 
	`Ârötf
(
°ªam
, "f%d", 
FT
);

625 
	`Ârötf
(
°ªam
, "0x%x", (
pc
 + 8 + (
OFS
 << 2)));

629 
	`Ârötf
(
°ªam
, "%d", 
IMM
);

632 
	`Ârötf
(
°ªam
, "%d", 
SHAMT
);

635 
	`Ârötf
(
°ªam
, "%u", 
UIMM
);

638 
	`Ârötf
(
°ªam
, "0x%x", 
UIMM
);

641 
	`Ârötf
(
°ªam
, "0x%x", ((
pc
 & 036000000000Ë| (
TARG
 << 2)));

644 
	`Ârötf
(
°ªam
, "0x%x", 
BCODE
);

649 i‡(
SS_COMP_OP
 =
SS_COMP_NOP
)

650 
	`Ârötf
(
°ªam
, ")");

651 i‡(
SS_COMP_OP
 =
SS_COMP_POST_INC
)

652 
	`Ârötf
(
°ªam
, ")+");

653 i‡(
SS_COMP_OP
 =
SS_COMP_POST_DEC
)

654 
	`Ârötf
(
°ªam
, ")-");

655 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_INC
)

656 
	`Ârötf
(
°ªam
, ")^+");

657 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_DEC
)

658 
	`Ârötf
(
°ªam
, ")^-");

659 i‡(
SS_COMP_OP
 =
SS_COMP_POST_DBL_INC
)

660 
	`Ârötf
(
°ªam
, ")++");

661 i‡(
SS_COMP_OP
 =
SS_COMP_POST_DBL_DEC
)

662 
	`Ârötf
(
°ªam
, ")--");

663 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_DBL_INC
)

664 
	`Ârötf
(
°ªam
, ")^++");

665 i‡(
SS_COMP_OP
 =
SS_COMP_PRE_DBL_DEC
)

666 
	`Ârötf
(
°ªam
, ")^--");

668 
	`∑nic
("bogus SS_COMP_OP");

673 
	`Âutc
(*
s
, 
°ªam
);

675 
s
++;

678 
	}
}

687 
	#XX
 0x6bababab

	)

690 
	gss_f‹e_èb
[ 8][ 5] = {

694  { 
XX
, XX, XX, XX, XX, },

696  { 
XX
, XX, XX, XX, XX, },

697  { 
XX
, XX, XX, XX, XX, },

698  { 
XX
, XX, XX, XX, XX, },

703 
	gss_a·_èb
[ 8][ 5] = {

707  { 
XX
, XX, XX, XX, XX, },

709  { 
XX
, XX, XX, XX, XX, },

710  { 
XX
, XX, XX, XX, XX, },

711  { 
XX
, XX, XX, XX, XX, },

716 
md_addr_t
 
	gss_Ã_ãmp
;

719 
md_addr_t
 
	gãmp_bs
, 
	gãmp_rd
;

	@target-pisa/pisa.h

52 #i‚de‡
PISA_H


53 
	#PISA_H


	)

55 
	~<°dio.h
>

57 
	~"ho°.h
"

58 
	~"misc.h
"

59 
	~"c⁄fig.h
"

60 
	~"ídün.h
"

68 
	#TARGET_PISA


	)

70 #i‚de‡
TARGET_PISA_BIG


71 #i‚de‡
TARGET_PISA_LITTLE


73 #ifde‡
BYTES_BIG_ENDIAN


74 
	#TARGET_PISA_BIG


	)

76 
	#TARGET_PISA_LITTLE


	)

82 #i‡
deföed
(
BYTES_BIG_ENDIAN
Ë&& deföed(
TARGET_PISA_LITTLE
)

83 
	#MD_CROSS_ENDIAN


	)

85 #i‡
deföed
(
BYTES_LITTLE_ENDIAN
Ë&& deföed(
TARGET_PISA_BIG
)

86 
	#MD_CROSS_ENDIAN


	)

90 
	#NA
 0

	)

97 #unde‡
MD_QWORD_ADDRS


100 
w‹d_t
 
	tmd_addr_t
;

108 
	#MD_PAGE_SIZE
 4096

	)

109 
	#MD_LOG_PAGE_SIZE
 12

	)

116 
	emd_Áu…_ty≥
 {

117 
	mmd_Áu…_n⁄e
 = 0,

118 
	mmd_Áu…_ac˚ss
,

119 
	mmd_Áu…_Æignmít
,

120 
	mmd_Áu…_ovîÊow
,

121 
	mmd_Áu…_div0
,

122 
	mmd_Áu…_bªak
,

123 
	mmd_Áu…_unim∂
,

124 
	mmd_Áu…_öã∫Æ


133 
	#MD_NUM_IREGS
 32

	)

136 
	#MD_NUM_FREGS
 32

	)

139 
	#MD_NUM_CREGS
 3

	)

142 
	#MD_TOTAL_REGS
 \

143 –32 + 32 + 3 + 1 + 1 + 1)

	)

146 
sw‹d_t
 
	tmd_g¥_t
[
MD_NUM_IREGS
];

150 
sw‹d_t
 
	ml
[
MD_NUM_FREGS
];

151 
sÊﬂt_t
 
	mf
[
MD_NUM_FREGS
];

152 
dÊﬂt_t
 
	md
[
MD_NUM_FREGS
/2];

153 } 
	tmd_Âr_t
;

157 
sw‹d_t
 
	mhi
, 
	mlo
;

158 
	mfcc
;

159 } 
	tmd_˘æ_t
;

162 
	emd_ªg_«mes
 {

163 
	mMD_REG_ZERO
 = 0,

164 
	mMD_REG_GP
 = 28,

165 
	mMD_REG_SP
 = 29,

166 
	mMD_REG_FP
 = 30

176 
w‹d_t
 
	ma
;

177 
w‹d_t
 
	mb
;

178 } 
	tmd_ö°_t
;

181 
md_ö°_t
 
MD_NOP_INST
;

184 #ifde‡
MD_CROSS_ENDIAN


186 
	#MD_SWAPH
(
X
Ë
	`SWAP_HALF
(X)

	)

187 
	#MD_SWAPW
(
X
Ë
	`SWAP_WORD
(X)

	)

188 
	#MD_SWAPQ
(
X
Ë
	`SWAP_QWORD
(X)

	)

189 
	#MD_SWAPI
(
X
Ë((X).
a
 = 
	`SWAP_WORD
((X).a), \

190 (
X
).
b
 = 
	`SWAP_WORD
((X).b))

	)

194 
	#MD_SWAPH
(
X
Ë(X)

	)

195 
	#MD_SWAPW
(
X
Ë(X)

	)

196 
	#MD_SWAPQ
(
X
Ë(X)

	)

197 
	#MD_SWAPD
(
X
Ë(X)

	)

198 
	#MD_SWAPI
(
X
Ë(X)

	)

203 
	#MD_FETCH_INST
(
INST
, 
MEM
, 
PC
) \

204 { 
ö°
.
a
 = 
	`MEM_READ_WORD
(
mem
, (
PC
)); \

205 
ö°
.
b
 = 
	`MEM_READ_WORD
(
mem
, (
PC
Ë+ (
w‹d_t
)); }

	)

212 
	#MD_TEXT_BASE
 0x00400000

	)

213 
	#MD_DATA_BASE
 0x10000000

	)

214 
	#MD_STACK_BASE
 0x7fffc000

	)

217 
	#MD_MAX_ENVIRON
 16384

	)

225 
	#MD_OPFIELD
(
INST
Ë(INST.
a
 & 0xff)

	)

226 
	#MD_SET_OPCODE
(
OP
, 
INST
Ë((OPË((INST).
a
 & 0xff))

	)

230 
	#MD_MAX_MASK
 255

	)

233 
	emd_›code
 {

234 
	mOP_NA
 = 0,

235 
	#DEFINST
(
OP
,
MSK
,
NAME
,
OPFORM
,
RES
,
FLAGS
,
O1
,
O2
,
I1
,
I2
,
I3
ËOP,

	)

236 
	#DEFLINK
(
OP
,
MSK
,
NAME
,
MASK
,
SHIFT
ËOP,

	)

237 
	#CONNECT
(
OP
)

	)

238 
	~"machöe.def
"

239 
	mOP_MAX


243 
	#MD_OP_ENUM
(
MSK
Ë(
md_mask2›
[MSK])

	)

244 
md_›code
 
md_mask2›
[];

247 
	#MD_OP_NAME
(
OP
Ë(
md_›2«me
[OP])

	)

248 *
md_›2«me
[];

251 
	#MD_OP_FORMAT
(
OP
Ë(
md_›2f‹m©
[OP])

	)

252 *
md_›2f‹m©
[];

255 
	emd_fu_˛ass
 {

256 
	mFUCœss_NA
 = 0,

257 
	mI¡ALU
,

258 
	mI¡MULT
,

259 
	mI¡DIV
,

260 
	mFlﬂtADD
,

261 
	mFlﬂtCMP
,

262 
	mFlﬂtCVT
,

263 
	mFlﬂtMULT
,

264 
	mFlﬂtDIV
,

265 
	mFlﬂtSQRT
,

266 
	mRdP‹t
,

267 
	mWrP‹t
,

268 
	mNUM_FU_CLASSES


272 
	#MD_OP_FUCLASS
(
OP
Ë(
md_›2fu
[OP])

	)

273 
md_fu_˛ass
 
md_›2fu
[];

276 
	#MD_FU_NAME
(
FU
Ë(
md_fu2«me
[FU])

	)

277 *
md_fu2«me
[];

280 
	#F_ICOMP
 0x00000001

	)

281 
	#F_FCOMP
 0x00000002

	)

282 
	#F_CTRL
 0x00000004

	)

283 
	#F_UNCOND
 0x00000008

	)

284 
	#F_COND
 0x00000010

	)

285 
	#F_MEM
 0x00000020

	)

286 
	#F_LOAD
 0x00000040

	)

287 
	#F_STORE
 0x00000080

	)

288 
	#F_DISP
 0x00000100

	)

289 
	#F_RR
 0x00000200

	)

290 
	#F_DIRECT
 0x00000400

	)

291 
	#F_TRAP
 0x00000800

	)

292 
	#F_LONGLAT
 0x00001000

	)

293 
	#F_DIRJMP
 0x00002000

	)

294 
	#F_INDIRJMP
 0x00004000

	)

295 
	#F_CALL
 0x00008000

	)

296 
	#F_FPCOND
 0x00010000

	)

297 
	#F_IMM
 0x00020000

	)

300 
	#MD_OP_FLAGS
(
OP
Ë(
md_›2Êags
[OP])

	)

301 
md_›2Êags
[];

304 #unde‡
RS


305 
	#RS
 (
ö°
.
b
 >> 24Ë

	)

306 
	#RT
 ((
ö°
.
b
 >> 16Ë& 0xffË

	)

307 
	#RD
 ((
ö°
.
b
 >> 8Ë& 0xffË

	)

310 
	#SHAMT
 (
ö°
.
b
 & 0xff)

	)

313 
	#FS
 
RS


	)

314 
	#FT
 
RT


	)

315 
	#FD
 
RD


	)

318 
	#IMM
 (()(–)(
ö°
.
b
 & 0xffff)))

	)

321 
	#UIMM
 (
ö°
.
b
 & 0xffff)

	)

324 
	#TARG
 (
ö°
.
b
 & 0x3ffffff)

	)

327 
	#BCODE
 (
ö°
.
b
 & 0xfffff)

	)

330 
	#OFS
 
IMM


	)

333 
	#BS
 
RS


	)

336 
	#MAXINT_VAL
 0x7fffffff

	)

339 
	#OVER
(
X
,
Y
) \

340 ((((
X
Ë> 0Ë&& ((
Y
Ë> 0Ë&& (
MAXINT_VAL
 - (X) < (Y))) \

341 || (((
X
Ë< 0Ë&& ((
Y
Ë< 0Ë&& (-
MAXINT_VAL
 - (XË> (Y))))

	)

344 
	#UNDER
(
X
,
Y
) \

345 ((((
X
Ë> 0Ë&& ((
Y
Ë< 0Ë&& (
MAXINT_VAL
 + (Y) < (X))) \

346 || (((
X
Ë< 0Ë&& ((
Y
Ë> 0Ë&& (-
MAXINT_VAL
 + (YË> (X))))

	)

349 #i‚de‡
SET_TPC


350 
	#SET_TPC
(
PC
Ë()0

	)

353 #ifde‡
BYTES_BIG_ENDIAN


355 
	#WL_SIZE
(
ADDR
Ë((ADDRË& 0x03)

	)

356 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

357 
	#WL_PROT_MASK
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

358 
	#WL_PROT_MASK1
(
ADDR
Ë(
md_Ã_masks
[
	`WL_SIZE
(ADDR)])

	)

359 
	#WL_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

362 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

363 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

364 
	#WR_PROT_MASK
(
ADDR
Ë(~(
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

365 
	#WR_PROT_MASK1
(
ADDR
Ë((
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

366 
	#WR_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WR_SIZE
(ADDR)])

	)

369 
	#WL_SIZE
(
ADDR
Ë(4-((ADDRË& 0x03))

	)

370 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

371 
	#WL_PROT_MASK
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

372 
	#WL_PROT_MASK1
(
ADDR
Ë(
md_Ã_masks
[
	`WL_SIZE
(ADDR)])

	)

373 
	#WL_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

376 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

377 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

378 
	#WR_PROT_MASK
(
ADDR
Ë(~(
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

379 
	#WR_PROT_MASK1
(
ADDR
Ë((
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

380 
	#WR_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WR_SIZE
(ADDR)])

	)

384 
w‹d_t
 
md_Ã_masks
[];

388 
	#WL_SIZE
(
ADDR
Ë(4-((ADDRË& 0x03))

	)

389 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

390 
	#WL_PROT_MASK
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

393 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

394 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

395 
	#WR_PROT_MASK
(
ADDR
Ë(~(
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

398 
	#WL_SIZE
(
ADDR
Ë((ADDRË& 0x03)

	)

399 
	#WL_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

400 
	#WL_PROT_MASK1
(
ADDR
Ë(
md_Ã_masks
[
	`WL_SIZE
(ADDR)])

	)

401 
	#WL_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WL_SIZE
(ADDR)])

	)

404 
	#WR_SIZE
(
ADDR
Ë(((ADDRË& 0x03)+1)

	)

405 
	#WR_BASE
(
ADDR
Ë((ADDRË& ~0x03)

	)

406 
	#WR_PROT_MASK1
(
ADDR
Ë((
md_Ã_masks
[
	`WR_SIZE
(ADDR)]))

	)

407 
	#WR_PROT_MASK2
(
ADDR
Ë(
md_Ã_masks
[4-
	`WR_SIZE
(ADDR)])

	)

416 
	#SS_SYS_exô
 1

	)

417 
	#MD_EXIT_SYSCALL
(
REGS
Ë((REGS)->
ªgs_R
[2] =
SS_SYS_exô
)

	)

420 
	#SS_SYS_wrôe
 4

	)

421 
	#MD_OUTPUT_SYSCALL
(
REGS
) \

422 ((
REGS
)->
ªgs_R
[2] =
SS_SYS_wrôe
 \

423 && ((
REGS
)->
ªgs_R
[4] == 1 \

424 || (
REGS
)->
ªgs_R
[4] = 2))

	)

427 
	#MD_STREAM_FILENO
(
REGS
Ë((REGS)->
ªgs_R
[4])

	)

430 
	#MD_IS_CALL
(
OP
) \

431 ((
	`MD_OP_FLAGS
(
OP
Ë& (
F_CTRL
|
F_CALL
)Ë=(F_CTRL|F_CALL))

	)

434 
	#MD_IS_RETURN
(
OP
Ë((OPË=
JR
 && (
RS
Ë=31)

	)

437 
	#MD_IS_INDIR
(
OP
Ë((OPË=
JR
)

	)

440 
	emd_amode_ty≥
 {

441 
	mmd_amode_imm
,

442 
	mmd_amode_gp
,

443 
	mmd_amode_•
,

444 
	mmd_amode_Â
,

445 
	mmd_amode_di•
,

446 
	mmd_amode_º
,

447 
	mmd_amode_NUM


449 *
md_amode_°r
[
md_amode_NUM
];

452 
	#MD_AMODE_PREPROBE
(
OP
, 
FSM
) \

453 { i‡((
OP
Ë=
LUI
Ë(
FSM
Ë(
RT
); }

	)

456 
	#MD_AMODE_PROBE
(
AM
, 
OP
, 
FSM
) \

458 i‡(
	`MD_OP_FLAGS
(
OP
Ë& 
F_DISP
) \

460 i‡((
BS
Ë=(
FSM
)) \

461 (
AM
Ë
md_amode_imm
; \

462 i‡((
BS
Ë=
MD_REG_GP
) \

463 (
AM
Ë
md_amode_gp
; \

464 i‡((
BS
Ë=
MD_REG_SP
) \

465 (
AM
Ë
md_amode_•
; \

466 i‡((
BS
Ë=
MD_REG_FP
) \

467 (
AM
Ë
md_amode_Â
; \

469 (
AM
Ë
md_amode_di•
; \

471 i‡(
	`MD_OP_FLAGS
(
OP
Ë& 
F_RR
) \

472 (
AM
Ë
md_amode_º
; \

474 
	`∑nic
("cannot decodeáddressing mode"); \

475 }

	)

478 
	#MD_AMODE_POSTPROBE
(
FSM
) \

479 { (
FSM
Ë
MD_REG_ZERO
; }

	)

487 
	#MD_EIO_FILE_FORMAT
 
EIO_PISA_FORMAT


	)

489 
	#MD_MISC_REGS_TO_EXO
(
REGS
) \

490 
	`exo_√w
(
ec_li°
, \

491  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)
sim_num_ö¢
), \

492  
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_PC
), \

493  
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_NPC
), \

494  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)(
REGS
)->
ªgs_C
.
hi
), \

495  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)(
REGS
)->
ªgs_C
.
lo
), \

496  
	`exo_√w
(
ec_öãgî
, (
exo_öãgî_t
)(
REGS
)->
ªgs_C
.
fcc
),\

497 
NULL
)

	)

499 
	#MD_IREG_TO_EXO
(
REGS
, 
IDX
) \

500 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_R
[
IDX
])

	)

502 
	#MD_FREG_TO_EXO
(
REGS
, 
IDX
) \

503 
	`exo_√w
(
ec_addªss
, (
exo_öãgî_t
)(
REGS
)->
ªgs_F
.
l
[
IDX
])

	)

505 
	#MD_EXO_TO_MISC_REGS
(
EXO
, 
ICNT
, 
REGS
) \

507 i‡(!
exo
 \

508 || 
exo
->
ec
 !
ec_li°
 \

509 || !
exo
->
as_li°
.
hód
 \

510 || 
exo
->
as_li°
.
hód
->
ec
 !
ec_öãgî
 \

511 || !
exo
->
as_li°
.
hód
->
√xt
 \

512 || 
exo
->
as_li°
.
hód
->
√xt
->
ec
 !
ec_addªss
 \

513 || !
exo
->
as_li°
.
hód
->
√xt
->next \

514 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->
ec
 !
ec_addªss
 \

515 || !
exo
->
as_li°
.
hód
->
√xt
->next->next \

516 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->
ec
 !
ec_öãgî
 \

517 || !
exo
->
as_li°
.
hód
->
√xt
->next->next->next \

518 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->
ec
 !
ec_öãgî
 \

519 || !
exo
->
as_li°
.
hód
->
√xt
->next->next->next->next \

520 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->√xt->
ec
 !
ec_öãgî
\

521 || 
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->√xt->√xà!
NULL
) \

522 
	`Áèl
("couldÇotÑead EIO miscÑegs"); \

523 (
ICNT
Ë(
cou¡î_t
)
exo
->
as_li°
.
hód
->
as_öãgî
.
vÆ
; \

524 (
REGS
)->
ªgs_PC
 = (
md_addr_t
)
exo
->
as_li°
.
hód
->
√xt
->
as_addªss
.
vÆ
; \

525 (
REGS
)->
ªgs_NPC
 = \

526 (
md_addr_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->
as_addªss
.
vÆ
; \

527 (
REGS
)->
ªgs_C
.
hi
 = \

528 (
w‹d_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->
as_öãgî
.
vÆ
; \

529 (
REGS
)->
ªgs_C
.
lo
 = \

530 (
w‹d_t
)
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->
as_öãgî
.
vÆ
; \

531 (
REGS
)->
ªgs_C
.
fcc
 = \

532 ()
exo
->
as_li°
.
hód
->
√xt
->√xt->√xt->√xt->√xt->
as_öãgî
.
vÆ
;

	)

534 
	#MD_EXO_TO_IREG
(
EXO
, 
REGS
, 
IDX
) \

535 ((
REGS
)->
ªgs_R
[
IDX
] = (
w‹d_t
)(
EXO
)->
as_öãgî
.
vÆ
)

	)

537 
	#MD_EXO_TO_FREG
(
EXO
, 
REGS
, 
IDX
) \

538 ((
REGS
)->
ªgs_F
.
l
[
IDX
] = (
w‹d_t
)(
EXO
)->
as_öãgî
.
vÆ
)

	)

540 
	#MD_EXO_CMP_IREG
(
EXO
, 
REGS
, 
IDX
) \

541 ((
REGS
)->
ªgs_R
[
IDX
] !(
sw‹d_t
)(
EXO
)->
as_öãgî
.
vÆ
)

	)

543 
	#MD_FIRST_IN_REG
 2

	)

544 
	#MD_LAST_IN_REG
 7

	)

546 
	#MD_FIRST_OUT_REG
 2

	)

547 
	#MD_LAST_OUT_REG
 7

	)

555 
qw‹d_t
 
	texo_addªss_t
;

558 
qw‹d_t
 
	texo_öãgî_t
;

561 
	texo_Êﬂt_t
;

569 #ifde‡
HOST_HAS_QWORD


570 
	#°©_ªg_cou¡î
 
°©_ªg_sqw‹d


	)

571 
	#sc_cou¡î
 
sc_sqw‹d


	)

572 
	#f‹_cou¡î
 
f‹_sqw‹d


	)

574 
	#°©_ªg_cou¡î
 
°©_ªg_doubÀ


	)

575 
	#sc_cou¡î
 
sc_doubÀ


	)

576 
	#f‹_cou¡î
 
f‹_doubÀ


	)

580 
	#°©_ªg_addr
 
°©_ªg_uöt


	)

588 
	emd_ªg_ty≥
 {

589 
	mπ_g¥
,

590 
	mπ_Õr
,

591 
	mπ_Âr
,

592 
	mπ_d¥
,

593 
	mπ_˘æ
,

594 
	mπ_PC
,

595 
	mπ_NPC
,

596 
	mπ_NUM


600 
	smd_ªg_«mes_t
 {

601 *
	m°r
;

602 
md_ªg_ty≥
 
	mfûe
;

603 
	mªg
;

607 
md_ªg_«mes_t
 
md_ªg_«mes
[];

610 *
md_ªg_«me
(
md_ªg_ty≥
 
π
, 
ªg
);

613 
	gevÆ_vÆue_t
;

614 
	gªgs_t
;

616 
md_ªg_obj
(
ªgs_t
 *
ªgs
,

617 
is_wrôe
,

618 
md_ªg_ty≥
 
π
,

619 
ªg
,

620 
evÆ_vÆue_t
 *
vÆ
);

623 
md_¥öt_úeg
(
md_g¥_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
);

624 
md_¥öt_úegs
(
md_g¥_t
 
ªgs
, 
FILE
 *
°ªam
);

627 
md_¥öt_Âªg
(
md_Âr_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
);

628 
md_¥öt_Âªgs
(
md_Âr_t
 
ªgs
, 
FILE
 *
°ªam
);

631 
md_¥öt_¸eg
(
md_˘æ_t
 
ªgs
, 
ªg
, 
FILE
 *
°ªam
);

632 
md_¥öt_¸egs
(
md_˘æ_t
 
ªgs
, 
FILE
 *
°ªam
);

635 
w‹d_t
 
md_¸c_ªgs
(
ªgs_t
 *
ªgs
);

638 
w‹d_t
 
md_x‹_ªgs
(
ªgs_t
 *
ªgs
);

646 
	#MD_AGEN_OP
 
ADD


	)

649 
	#MD_NOP_OP
 
NOP


	)

653 
	#MD_VALID_ADDR
(
ADDR
) \

654 (((
ADDR
Ë>
ld_ãxt_ba£
 && (ADDRË< (ld_ãxt_ba£ + 
ld_ãxt_size
)) \

655 || ((
ADDR
Ë>
ld_d©a_ba£
 && (ADDRË< 
ld_°ack_ba£
))

	)

664 
	#MD_BR_SHIFT
 3

	)

672 
md_öô_decodî
();

676 
md_¥öt_ö¢
(
md_ö°_t
 
ö°
,

677 
md_addr_t
 
pc
,

678 
FILE
 *
°ªam
);

701 
	#SS_PAGE_SIZE
 4096

	)

704 
	#SS_NUM_REGS
 32

	)

707 
	#SS_TOTAL_REGS
 \

708 (
SS_NUM_REGS
+SS_NUM_REGS+ 1+ 1+ 1+ 1+ \

709  1+ 1)

	)

712 
	#SS_COMP_OP
 ((
ö°
.
a
 & 0xff00Ë>> 8)

	)

715 
	#SS_COMP_NOP
 0x00

	)

716 
	#SS_COMP_POST_INC
 0x01

	)

717 
	#SS_COMP_POST_DEC
 0x02

	)

718 
	#SS_COMP_PRE_INC
 0x03

	)

719 
	#SS_COMP_PRE_DEC
 0x04

	)

720 
	#SS_COMP_POST_DBL_INC
 0x05

	)

721 
	#SS_COMP_POST_DBL_DEC
 0x06

	)

722 
	#SS_COMP_PRE_DBL_INC
 0x07

	)

723 
	#SS_COMP_PRE_DBL_DEC
 0x08

	)

730 
	#INC_DEC
(
EXPR
, 
REG
, 
SIZE
) \

731 (
	`SET_GPR
((
REG
), 
	`GPR
(REGË+ 
ss_f‹e_èb
[(
SIZE
)-1][
SS_COMP_OP
]), \

732 (
EXPR
), \

733 
	`SET_GPR
((
REG
), 
	`GPR
(REGË+ 
ss_a·_èb
[(
SIZE
)-1][
SS_COMP_OP
]))

	)

736 
ss_f‹e_èb
[8][5];

737 
ss_a·_èb
[8][5];

740 
	#Rgp
 28

	)

741 
	#R•
 29

	)

742 
	#RÂ
 30

	)

745 
SS_ADDR_TYPE
 
ss_Ã_ãmp
;

748 
SS_ADDR_TYPE
 
ãmp_bs
, 
ãmp_rd
;

754 #i‚de‡
IFAIL


755 
	#IFAIL
(
S
Ë
	`Áèl
(S)

	)

759 
	#DIV0
(
N
Ë(((NË=0Ë? 
	`IFAIL
("dividêby 0"Ë: ()0)

	)

762 
	#INTALIGN
(
N
) (((N) & 01) \

763 ? 
	`IFAIL
("bad INTÑegi°îálignmít"Ë: ()0)

	)

766 
	#FPALIGN
(
N
) (((N) & 01) \

767 ? 
	`IFAIL
("bad FPÑegi°îálignmít"Ë: ()0)

	)

770 
	#TALIGN
(
TARG
) (((TARG) & 0x7) \

771 ? 
	`IFAIL
("bad jum∞Æignmít"Ë: ()0)

	)

773 
	#OVER
(
X
,
Y
Ë(()0)

	)

774 
	#UNDER
(
X
,
Y
Ë(()0)

	)

775 
	#DIV0
(
N
Ë(()0)

	)

776 
	#INTALIGN
(
N
Ë(()0)

	)

777 
	#FPALIGN
(
N
Ë(()0)

	)

778 
	#TALIGN
(
TARG
Ë(()0)

	)

783 
	#IDIV
(
A
, 
B
Ë((AË/ (B))

	)

784 
	#IMOD
(
A
, 
B
Ë((AË% (B))

	)

785 
	#FDIV
(
A
, 
B
Ë((AË/ (B))

	)

786 
	#FINT
(
A
Ë(()A)

	)

	@target-pisa/symbol.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 
	~"ho°.h
"

56 
	~"misc.h
"

57 #ifde‡
BFD_LOADER


58 
	~<bfd.h
>

60 
	~"èrgë-piß/ecoff.h
"

62 
	~"lﬂdî.h
"

63 
	~"symbﬁ.h
"

65 
md_addr_t
 
°¨t_addr
, 
íd_addr
;

70 
sym_sym_t
 *
	gsym_db
 = 
NULL
;

73 
	gsym_nsyms
 = 0;

74 
sym_sym_t
 **
	gsym_syms
 = 
NULL
;

77 
sym_sym_t
 **
	gsym_syms_by_«me
 = 
NULL
;

80 
	gsym_¡extsyms
 = 0;

81 
sym_sym_t
 **
	gsym_ãxtsyms
 = 
NULL
;

84 
sym_sym_t
 **
	gsym_ãxtsyms_by_«me
 = 
NULL
;

87 
	gsym_nd©asyms
 = 0;

88 
sym_sym_t
 **
	gsym_d©asyms
 = 
NULL
;

91 
sym_sym_t
 **
	gsym_d©asyms_by_«me
 = 
NULL
;

94 
	gsyms_lﬂded
 = 
FALSE
;

102 
	$is_lib_func
(*
func_«me
)

104 i‡((
	`°rcmp
(
func_«me
, "__do_global_dtors") == 0)

105 || (
	`°rcmp
(
func_«me
, "__libc_init") == 0))

109 
	}
}

117 
	$gë_¥og_ønge
()

119 
i
, 
size
 = 0;

120 
sym_sym_t
 *
sym
;

122 
°¨t_addr
 = 
sym_ãxtsyms
[0]->
addr
;

123 
i
=0; i < 
sym_¡extsyms
; i++) {

124 
sym
 = 
sym_ãxtsyms
[
i
];

125 i‡(
	`is_lib_func
(
sym
->
«me
))

127 
size
 +
sym
->size;

129 
íd_addr
 = 
°¨t_addr
 + 
size
;

130 
	}
}

132 #ifde‡
PRINT_SYMS


135 
	$Êags2°r
(
Êags
)

137 
buf
[256];

138 *
p
;

140 i‡(!
Êags
)

143 
p
 = 
buf
;

144 *
p
 = '\0';

146 i‡(
Êags
 & 
BSF_LOCAL
)

148 *
p
++ = 'L';

149 *
p
++ = '|';

151 i‡(
Êags
 & 
BSF_GLOBAL
)

153 *
p
++ = 'G';

154 *
p
++ = '|';

156 i‡(
Êags
 & 
BSF_DEBUGGING
)

158 *
p
++ = 'D';

159 *
p
++ = '|';

161 i‡(
Êags
 & 
BSF_FUNCTION
)

163 *
p
++ = 'F';

164 *
p
++ = '|';

166 i‡(
Êags
 & 
BSF_KEEP
)

168 *
p
++ = 'K';

169 *
p
++ = '|';

171 i‡(
Êags
 & 
BSF_KEEP_G
)

173 *
p
++ = 'k'; *p++ = '|';

175 i‡(
Êags
 & 
BSF_WEAK
)

177 *
p
++ = 'W';

178 *
p
++ = '|';

180 i‡(
Êags
 & 
BSF_SECTION_SYM
)

182 *
p
++ = 'S'; *p++ = '|';

184 i‡(
Êags
 & 
BSF_OLD_COMMON
)

186 *
p
++ = 'O';

187 *
p
++ = '|';

189 i‡(
Êags
 & 
BSF_NOT_AT_END
)

191 *
p
++ = 'N';

192 *
p
++ = '|';

194 i‡(
Êags
 & 
BSF_CONSTRUCTOR
)

196 *
p
++ = 'C';

197 *
p
++ = '|';

199 i‡(
Êags
 & 
BSF_WARNING
)

201 *
p
++ = 'w';

202 *
p
++ = '|';

204 i‡(
Êags
 & 
BSF_INDIRECT
)

206 *
p
++ = 'I';

207 *
p
++ = '|';

209 i‡(
Êags
 & 
BSF_FILE
)

211 *
p
++ = 'f';

212 *
p
++ = '|';

215 i‡(
p
 =
buf
)

216 
	`∑nic
("no flags detected");

218 *--
p
 = '\0';

219  
buf
;

220 
	}
}

225 
	$acmp
(
sym_sym_t
 **
sym1
, sym_sym_à**
sym2
)

227  ()((*
sym1
)->
addr
 - (*
sym2
)->addr);

228 
	}
}

232 
	$ncmp
(
sym_sym_t
 **
sym1
, sym_sym_à**
sym2
)

234  
	`°rcmp
((*
sym1
)->
«me
, (*
sym2
)->name);

235 
	}
}

237 
	#RELEVANT_SCOPE
(
SYM
) \

239 ((
SYM
)->
Êags
 & 
BSF_GLOBAL
) \

241 (((
SYM
)->
Êags
 & (
BSF_LOCAL
|
BSF_DEBUGGING
)) == BSF_LOCAL) \

242 && (
SYM
)->
«me
[0] != '$') \

244 
lﬂd_loˇls
 \

246 ((
SYM
)->
Êags
&(
BSF_LOCAL
|
BSF_DEBUGGING
))==(BSF_LOCAL|BSF_DEBUGGING)\

247 && (
SYM
)->
«me
[0] == '$') \

249 ((
SYM
)->
Êags
 & (
BSF_LOCAL
|
BSF_DEBUGGING
)) == (BSF_LOCAL) \

250 && (
SYM
)->
«me
[0] ='$'))))

	)

255 
	$sym_lﬂdsyms
(*
‚ame
,

256 
lﬂd_loˇls
)

258 
i
, 
debug_˙t
;

259 #ifde‡
BFD_LOADER


260 
bfd
 *
abfd
;

261 
asymbﬁ
 **
syms
;

262 
°‹age
, 
i
, 
nsyms
, 
debug_˙t
;

264 
Àn
;

265 
FILE
 *
fobj
;

266 
ecoff_fûehdr
 
fhdr
;

267 
ecoff_aouthdr
 
ahdr
;

268 
ecoff_symhdr_t
 
symhdr
;

269 *
°πab
 = 
NULL
;

270 
ecoff_EXTR
 *
exå
;

273 i‡(
syms_lﬂded
)

280 #ifde‡
BFD_LOADER


283 i‡(!(
abfd
 = 
	`bfd_›ír
(
‚ame
, "ss-coff-big")))

284 i‡(!(
abfd
 = 
	`bfd_›ír
(
‚ame
, "ss-coff-little")))

285 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
‚ame
);

290 i‡(!
	`bfd_check_f‹m©
(
abfd
, 
bfd_obje˘
))

292 
	`bfd_˛o£
(
abfd
);

293 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
‚ame
);

297 i‡(
abfd
->
xvec
->
byã‹dî_big_p
 !()
ld_èrgë_big_ídün
)

298 
	`∑nic
("binaryÉndian changed");

300 i‡((
	`bfd_gë_fûe_Êags
(
abfd
Ë& (
HAS_SYMS
|
HAS_LOCALS
)))

303 
°‹age
 = 
	`bfd_gë_symèb_uµî_bound
(
abfd
);

304 i‡(
°‹age
 <= 0)

305 
	`Áèl
("HAS_SYMS i†£t, buà`%s' stû»œck†symbﬁs", 
‚ame
);

307 
syms
 = (
asymbﬁ
 **)
	`ˇŒoc
(
°‹age
, 1);

308 i‡(!
syms
)

309 
	`Áèl
("out of virtual memory");

311 
nsyms
 = 
	`bfd_ˇn⁄iˇlize_symèb
 (
abfd
, 
syms
);

312 i‡(
nsyms
 <= 0)

313 
	`Áèl
("HAS_SYMS i†£t, buà`%s' stû»œck†symbﬁs", 
‚ame
);

320 
sym_nd©asyms
 = 0; 
sym_¡extsyms
 = 0;

321 
i
=0; i < 
nsyms
; i++)

323 
asymbﬁ
 *
sym
 = 
syms
[
i
];

327 (!
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".rdata")

328 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".data")

329 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sdata")

330 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".bss")

331 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sbss"))

333 && 
	`RELEVANT_SCOPE
(
sym
))

336 
sym_nd©asyms
++;

337 #ifde‡
PRINT_SYMS


338 
	`Ârötf
(
°dîr
,

340 
sym
->
«me
, sym->
£˘i⁄
->«me, 
	`Êags2°r
(sym->
Êags
),

341 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
);

345 !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".text")

347 && 
	`RELEVANT_SCOPE
(
sym
))

350 
sym_¡extsyms
++;

351 #ifde‡
PRINT_SYMS


352 
	`Ârötf
(
°dîr
,

354 
sym
->
«me
, sym->
£˘i⁄
->«me, 
	`Êags2°r
(sym->
Êags
),

355 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
);

361 #ifde‡
PRINT_SYMS


362 
	`Ârötf
(
°dîr
,

364 
sym
->
«me
, sym->
£˘i⁄
->«me, 
	`Êags2°r
(sym->
Êags
),

365 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
);

369 
sym_nsyms
 = 
sym_¡extsyms
 + 
sym_nd©asyms
;

370 i‡(
sym_nsyms
 <= 0)

371 
	`Áèl
("`%s' ha†nÿãxà‹ d©®symbﬁs", 
‚ame
);

374 
sym_db
 = (
sym_sym_t
 *)
	`ˇŒoc
(
sym_nsyms
, (sym_sym_t));

375 i‡(!
sym_db
)

376 
	`Áèl
("out of virtual memory");

379 
debug_˙t
=0, 
i
=0; i < 
nsyms
; i++)

381 
asymbﬁ
 *
sym
 = 
syms
[
i
];

385 (!
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".rdata")

386 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".data")

387 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sdata")

388 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".bss")

389 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sbss"))

391 && 
	`RELEVANT_SCOPE
(
sym
))

394 
sym_db
[
debug_˙t
].
«me
 = 
	`my°rdup
((*)
sym
->name);

395 
sym_db
[
debug_˙t
].
£g
 = 
ss_d©a
;

396 
sym_db
[
debug_˙t
].
öôülized
 =

397 (!
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".rdata")

398 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".data")

399 || !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".sdata"));

400 
sym_db
[
debug_˙t
].
pub
 = (
sym
->
Êags
 & 
BSF_GLOBAL
);

401 
sym_db
[
debug_˙t
].
loˇl
 = (
sym
->
«me
[0] == '$');

402 
sym_db
[
debug_˙t
].
addr
 = 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
;

404 
debug_˙t
++;

407 !
	`°rcmp
(
sym
->
£˘i⁄
->
«me
, ".text")

409 && 
	`RELEVANT_SCOPE
(
sym
))

412 
sym_db
[
debug_˙t
].
«me
 = 
	`my°rdup
((*)
sym
->name);

413 
sym_db
[
debug_˙t
].
£g
 = 
ss_ãxt
;

414 
sym_db
[
debug_˙t
].
öôülized
 = 
TRUE
;

415 
sym_db
[
debug_˙t
].
pub
 = (
sym
->
Êags
 & 
BSF_GLOBAL
);

416 
sym_db
[
debug_˙t
].
loˇl
 = (
sym
->
«me
[0] == '$');

417 
sym_db
[
debug_˙t
].
addr
 = 
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
;

419 
debug_˙t
++;

427 i‡(
debug_˙t
 !
sym_nsyms
)

428 
	`∑nic
("couldÇotÜocateáll counted symbols");

431 
	`‰ì
(
syms
);

435 i‡(!
	`bfd_˛o£
(
abfd
))

436 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
‚ame
);

441 #i‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
_MSC_VER
)

442 
fobj
 = 
	`f›í
(
‚ame
, "rb");

444 
fobj
 = 
	`f›í
(
‚ame
, "r");

446 i‡(!
fobj
)

447 
	`Áèl
("ˇ¬Ÿ o≥¿execuèbÀ `%s'", 
‚ame
);

449 i‡(
	`‰ód
(&
fhdr
, (
ecoff_fûehdr
), 1, 
fobj
) < 1)

450 
	`Áèl
("ˇ¬ŸÑód hódî fromÉxecuèbÀ `%s'", 
‚ame
);

453 i‡(
fhdr
.
f_magic
 !
ECOFF_EB_MAGIC
 && fhdr.f_magi¯!
ECOFF_EL_MAGIC
)

454 
	`Áèl
("bad magi¯numbî i¿execuèbÀ `%s'", 
‚ame
);

456 i‡(
	`‰ód
(&
ahdr
, (
ecoff_aouthdr
), 1, 
fobj
) < 1)

457 
	`Áèl
("ˇ¬ŸÑód AOUT hódî fromÉxecuèbÀ `%s'", 
‚ame
);

460 
	`f£ek
(
fobj
, 
fhdr
.
f_sym±r
, 0);

462 i‡(
	`‰ód
(&
symhdr
, (
ecoff_symhdr_t
), 1, 
fobj
) < 1)

463 
	`Áèl
("couldÇŸÑód symbﬁi¯hódî fromÉxecuèbÀ `%s'", 
‚ame
);

465 i‡(
symhdr
.
magic
 !
ECOFF_magicSym
)

466 
	`Áèl
("bad magi¯numbî (0x%xËö symbﬁi¯hódî", 
symhdr
.
magic
);

469 
Àn
 = 
symhdr
.
issMax
 + symhdr.
issExtMax
;

470 
°πab
 = (*)
	`ˇŒoc
(
Àn
, ());

471 i‡(!
°πab
)

472 
	`Áèl
("out of virtual memory");

475 
	`f£ek
(
fobj
, 
symhdr
.
cbSsOff£t
, 0);

476 i‡(
	`‰ód
(
°πab
, 
Àn
, 1, 
fobj
) < 0)

477 
	`Áèl
("error whileÑeading symbolÅableÇames");

480 
Àn
 = 
symhdr
.
isymMax
 + symhdr.
õxtMax
;

481 i‡(
Àn
 <= 0)

482 
	`Áèl
("`%s' ha†nÿãxà‹ d©®symbﬁs", 
‚ame
);

483 
sym_db
 = (
sym_sym_t
 *)
	`ˇŒoc
(
Àn
, (sym_sym_t));

484 i‡(!
sym_db
)

485 
	`Áèl
("out of virtual memory");

488 
exå
 =

489 (
ecoff_EXTR
 *)
	`ˇŒoc
(
symhdr
.
õxtMax
, (ecoff_EXTR));

490 i‡(!
exå
)

491 
	`Áèl
("out of virtual memory");

493 
	`f£ek
(
fobj
, 
symhdr
.
cbExtOff£t
, 0);

494 i‡(
	`‰ód
(
exå
, (
ecoff_EXTR
), 
symhdr
.
õxtMax
, 
fobj
) < 0)

495 
	`Áèl
("errorÑeadingÉxternal symbolÉntries");

497 
sym_nsyms
 = 0; 
sym_nd©asyms
 = 0; 
sym_¡extsyms
 = 0;

500 
i
=0; i < 
symhdr
.
õxtMax
; i++)

502 
°r_off£t
;

504 
°r_off£t
 = 
symhdr
.
issMax
 + 
exå
[
i
].
asym
.
iss
;

507 
	`¥ötf
("ext %2d: ifd = %2d, iss = %3d, value = %8x, st = %3x, "

509 
i
, 
exå
[i].
ifd
,

510 
exå
[
i
].
asym
.
iss
,Éxå[i].asym.
vÆue
,

511 
exå
[
i
].
asym
.
°
,Éxå[i].asym.
sc
,

512 
exå
[
i
].
asym
.
ödex
);

513 
	`¥ötf
(" %08x %2d %2d %s\n",

514 
exå
[
i
].
asym
.
vÆue
,

515 
exå
[
i
].
asym
.
°
,

516 
exå
[
i
].
asym
.
sc
,

517 &
°πab
[
°r_off£t
]);

520 
exå
[
i
].
asym
.
°
)

522 
ECOFF_°GlobÆ
:

523 
ECOFF_°Sètic
:

525 
sym_db
[
sym_nsyms
].
«me
 = 
	`my°rdup
(&
°πab
[
°r_off£t
]);

526 
sym_db
[
sym_nsyms
].
£g
 = 
ss_d©a
;

527 
sym_db
[
sym_nsyms
].
öôülized
 = 
TRUE
;

528 
sym_db
[
sym_nsyms
].
pub
 = 
TRUE
;

529 
sym_db
[
sym_nsyms
].
loˇl
 = 
FALSE
;

530 
sym_db
[
sym_nsyms
].
addr
 = 
exå
[
i
].
asym
.
vÆue
;

531 
sym_nsyms
++;

532 
sym_nd©asyms
++;

535 
ECOFF_°Proc
:

536 
ECOFF_°SèticProc
:

537 
ECOFF_°Labñ
:

539 
sym_db
[
sym_nsyms
].
«me
 = 
	`my°rdup
(&
°πab
[
°r_off£t
]);

540 
sym_db
[
sym_nsyms
].
£g
 = 
ss_ãxt
;

541 
sym_db
[
sym_nsyms
].
öôülized
 = 
TRUE
;

542 
sym_db
[
sym_nsyms
].
pub
 = 
TRUE
;

543 
sym_db
[
sym_nsyms
].
loˇl
 = 
FALSE
;

544 
sym_db
[
sym_nsyms
].
addr
 = 
exå
[
i
].
asym
.
vÆue
;

545 
sym_nsyms
++;

546 
sym_¡extsyms
++;

553 
	`‰ì
(
exå
);

556 i‡(
	`f˛o£
(
fobj
))

557 
	`Áèl
("couldÇŸ clo£ÉxecuèbÀ `%s'", 
‚ame
);

566 
sym_syms
 =

567 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nsyms
, (sym_sym_t *));

568 i‡(!
sym_syms
)

569 
	`Áèl
("out of virtual memory");

571 
sym_syms_by_«me
 =

572 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nsyms
, (sym_sym_t *));

573 i‡(!
sym_syms_by_«me
)

574 
	`Áèl
("out of virtual memory");

576 
debug_˙t
=0, 
i
=0; i<
sym_nsyms
; i++)

578 
sym_syms
[
debug_˙t
] = &
sym_db
[
i
];

579 
sym_syms_by_«me
[
debug_˙t
] = &
sym_db
[
i
];

580 
debug_˙t
++;

583 i‡(
debug_˙t
 !
sym_nsyms
)

584 
	`∑nic
("couldÇotÜocateáll symbols");

587 
	`qs‹t
(
sym_syms
, 
sym_nsyms
, (
sym_sym_t
 *), (*)
acmp
);

590 
	`qs‹t
(
sym_syms_by_«me
, 
sym_nsyms
, (
sym_sym_t
 *), (*)
ncmp
);

593 
sym_ãxtsyms
 =

594 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_¡extsyms
, (sym_sym_t *));

595 i‡(!
sym_ãxtsyms
)

596 
	`Áèl
("out of virtual memory");

598 
sym_ãxtsyms_by_«me
 =

599 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_¡extsyms
, (sym_sym_t *));

600 i‡(!
sym_ãxtsyms_by_«me
)

601 
	`Áèl
("out of virtual memory");

603 
debug_˙t
=0, 
i
=0; i<
sym_nsyms
; i++)

605 i‡(
sym_db
[
i
].
£g
 =
ss_ãxt
)

607 
sym_ãxtsyms
[
debug_˙t
] = &
sym_db
[
i
];

608 
sym_ãxtsyms_by_«me
[
debug_˙t
] = &
sym_db
[
i
];

609 
debug_˙t
++;

613 i‡(
debug_˙t
 !
sym_¡extsyms
)

614 
	`∑nic
("couldÇotÜocateállÅext symbols");

617 
	`qs‹t
(
sym_ãxtsyms
, 
sym_¡extsyms
, (
sym_sym_t
 *), (*)
acmp
);

620 
	`qs‹t
(
sym_ãxtsyms_by_«me
, 
sym_¡extsyms
,

621 (
sym_sym_t
 *), (*)
ncmp
);

624 
sym_d©asyms
 =

625 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nd©asyms
, (sym_sym_t *));

626 i‡(!
sym_d©asyms
)

627 
	`Áèl
("out of virtual memory");

629 
sym_d©asyms_by_«me
 =

630 (
sym_sym_t
 **)
	`ˇŒoc
(
sym_nd©asyms
, (sym_sym_t *));

631 i‡(!
sym_d©asyms_by_«me
)

632 
	`Áèl
("out of virtual memory");

634 
debug_˙t
=0, 
i
=0; i<
sym_nsyms
; i++)

636 i‡(
sym_db
[
i
].
£g
 =
ss_d©a
)

638 
sym_d©asyms
[
debug_˙t
] = &
sym_db
[
i
];

639 
sym_d©asyms_by_«me
[
debug_˙t
] = &
sym_db
[
i
];

640 
debug_˙t
++;

644 i‡(
debug_˙t
 !
sym_nd©asyms
)

645 
	`∑nic
("couldÇotÜocateáll data symbols");

648 
	`qs‹t
(
sym_d©asyms
, 
sym_nd©asyms
, (
sym_sym_t
 *), (*)
acmp
);

651 
	`qs‹t
(
sym_d©asyms_by_«me
, 
sym_nd©asyms
,

652 (
sym_sym_t
 *), (*)
ncmp
);

655 
i
=0; i<
sym_¡extsyms
; i++)

657 
sym_ãxtsyms
[
i
]->
size
 =

658 (
i
 !(
sym_¡extsyms
 - 1)

659 ? (
sym_ãxtsyms
[
i
+1]->
addr
 - sym_textsyms[i]->addr)

660 : ((
ld_ãxt_ba£
 + 
ld_ãxt_size
Ë- 
sym_ãxtsyms
[
i
]->
addr
));

662 
i
=0; i<
sym_nd©asyms
; i++)

664 
sym_d©asyms
[
i
]->
size
 =

665 (
i
 !(
sym_nd©asyms
 - 1)

666 ? (
sym_d©asyms
[
i
+1]->
addr
 - sym_datasyms[i]->addr)

667 : ((
ld_d©a_ba£
 + 
ld_d©a_size
Ë- 
sym_d©asyms
[
i
]->
addr
));

671 
syms_lﬂded
 = 
TRUE
;

673 
	`gë_¥og_ønge
();

674 
	}
}

678 
	$sym_dumpsym
(
sym_sym_t
 *
sym
,

679 
FILE
 *
fd
)

681 
	`Ârötf
(
fd
,

683 
sym
->
«me
,

684 
sym
->
£g
 =
ss_d©a
 ? "data" : "text",

685 
sym
->
öôülized
 ? "y" : "n",

686 
sym
->
pub
 ? "y" : "n",

687 
sym
->
loˇl
 ? "y" : "n",

688 
sym
->
addr
,

689 
sym
->
size
);

690 
	}
}

694 
	$sym_dumpsyms
(
FILE
 *
fd
)

696 
i
;

698 
i
=0; i < 
sym_nsyms
; i++)

699 
	`sym_dumpsym
(
sym_syms
[
i
], 
fd
);

700 
	}
}

704 
	$sym_dump°©e
(
FILE
 *
fd
)

706 
i
;

708 i‡(
fd
 =
NULL
)

709 
fd
 = 
°dîr
;

711 
	`Ârötf
(
fd
, "** All symbols sorted byáddress:\n");

712 
i
=0; i < 
sym_nsyms
; i++)

713 
	`sym_dumpsym
(
sym_syms
[
i
], 
fd
);

715 
	`Ârötf
(
fd
, "\n** All symbols sorted byÇame:\n");

716 
i
=0; i < 
sym_nsyms
; i++)

717 
	`sym_dumpsym
(
sym_syms_by_«me
[
i
], 
fd
);

719 
	`Ârötf
(
fd
, "** Text symbols sorted byáddress:\n");

720 
i
=0; i < 
sym_¡extsyms
; i++)

721 
	`sym_dumpsym
(
sym_ãxtsyms
[
i
], 
fd
);

723 
	`Ârötf
(
fd
, "\n** Text symbols sorted byÇame:\n");

724 
i
=0; i < 
sym_¡extsyms
; i++)

725 
	`sym_dumpsym
(
sym_ãxtsyms_by_«me
[
i
], 
fd
);

727 
	`Ârötf
(
fd
, "** Data symbols sorted byáddress:\n");

728 
i
=0; i < 
sym_nd©asyms
; i++)

729 
	`sym_dumpsym
(
sym_d©asyms
[
i
], 
fd
);

731 
	`Ârötf
(
fd
, "\n** Data symbols sorted byÇame:\n");

732 
i
=0; i < 
sym_nd©asyms
; i++)

733 
	`sym_dumpsym
(
sym_d©asyms_by_«me
[
i
], 
fd
);

734 
	}
}

740 
sym_sym_t
 *

741 
	$sym_böd_addr
(
md_addr_t
 
addr
,

742 *
pödex
,

743 
exa˘
,

744 
sym_db_t
 
db
)

746 
nsyms
, 
low
, 
high
, 
pos
;

747 
sym_sym_t
 **
syms
;

749 
db
)

751 
sdb_™y
:

752 
syms
 = 
sym_syms
;

753 
nsyms
 = 
sym_nsyms
;

755 
sdb_ãxt
:

756 
syms
 = 
sym_ãxtsyms
;

757 
nsyms
 = 
sym_¡extsyms
;

759 
sdb_d©a
:

760 
syms
 = 
sym_d©asyms
;

761 
nsyms
 = 
sym_nd©asyms
;

764 
	`∑nic
("bogus symbol database");

768 i‡(!
nsyms
)

770 i‡(
pödex
)

771 *
pödex
 = -1;

772  
NULL
;

776 
low
 = 0;

777 
high
 = 
nsyms
-1;

778 
pos
 = (
low
 + 
high
) >> 1;

780 (
exa˘
 && 
syms
[
pos
]->
addr
 ==áddr)

782 || (!
exa˘


783 && 
syms
[
pos
]->
addr
 <=áddr

784 && 
addr
 < (
syms
[
pos
]->add∏+ 
	`MAX
(1, syms[pos]->
size
)))))

786 i‡(
addr
 < 
syms
[
pos
]->addr)

787 
high
 = 
pos
 - 1;

789 
low
 = 
pos
 + 1;

790 i‡(
high
 >
low
)

791 
pos
 = (
low
 + 
high
) >> 1;

794 i‡(
pödex
)

795 *
pödex
 = -1;

796  
NULL
;

801 i‡(
pödex
)

802 *
pödex
 = 
pos
;

803  
syms
[
pos
];

804 
	}
}

809 
sym_sym_t
 *

810 
	$sym_böd_«me
(*
«me
,

811 *
pödex
,

812 
sym_db_t
 
db
)

814 
nsyms
, 
low
, 
high
, 
pos
, 
cmp
;

815 
sym_sym_t
 **
syms
;

817 
db
)

819 
sdb_™y
:

820 
syms
 = 
sym_syms_by_«me
;

821 
nsyms
 = 
sym_nsyms
;

823 
sdb_ãxt
:

824 
syms
 = 
sym_ãxtsyms_by_«me
;

825 
nsyms
 = 
sym_¡extsyms
;

827 
sdb_d©a
:

828 
syms
 = 
sym_d©asyms_by_«me
;

829 
nsyms
 = 
sym_nd©asyms
;

832 
	`∑nic
("bogus symbol database");

836 i‡(!
nsyms
)

838 i‡(
pödex
)

839 *
pödex
 = -1;

840  
NULL
;

844 
low
 = 0;

845 
high
 = 
nsyms
-1;

846 
pos
 = (
low
 + 
high
) >> 1;

847 !–!(
cmp
 = 
	`°rcmp
(
syms
[
pos
]->
«me
,Çame))))

849 i‡(
cmp
 > 0)

850 
high
 = 
pos
 - 1;

852 
low
 = 
pos
 + 1;

853 i‡(
high
 >
low
)

854 
pos
 = (
low
 + 
high
) >> 1;

857 i‡(
pödex
)

858 *
pödex
 = -1;

859  
NULL
;

864 i‡(
pödex
)

865 *
pödex
 = 
pos
;

866  
syms
[
pos
];

867 
	}
}

	@target-pisa/syscall.c

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~"ho°.h
"

55 
	~"misc.h
"

56 
	~"machöe.h
"

57 
	~"ªgs.h
"

58 
	~"mem‹y.h
"

59 
	~"lﬂdî.h
"

60 
	~"sim.h
"

61 
	~"ídün.h
"

62 
	~"eio.h
"

63 
	~"sysˇŒ.h
"

66 #i‚de‡
MD_CROSS_ENDIAN


68 #ifde‡
_MSC_VER


69 
	~<io.h
>

71 
	~<uni°d.h
>

73 
	~<f˙é.h
>

74 
	~<sys/ty≥s.h
>

75 #i‚de‡
_MSC_VER


76 
	~<sys/∑øm.h
>

78 
	~<î∫o.h
>

79 
	~<time.h
>

80 #i‚de‡
_MSC_VER


81 
	~<sys/time.h
>

83 #i‚de‡
_MSC_VER


84 
	~<sys/ªsour˚.h
>

86 
	~<sig«l.h
>

90 
	~<sys/°©.h
>

91 #i‚de‡
_MSC_VER


92 
	~<sys/uio.h
>

94 
	~<£tjmp.h
>

95 #i‚de‡
_MSC_VER


96 
	~<sys/times.h
>

98 
	~<limôs.h
>

99 #i‚de‡
_MSC_VER


100 
	~<sys/io˘l.h
>

102 #i‡!
deföed
(
löux
Ë&& !deföed(
•¨c
Ë&& !deföed(
hpux
Ë&& !deföed(
__hpux
Ë&& !deföed(
__CYGWIN32__
Ë&& !deföed(
u…rix
)

103 #i‚de‡
_MSC_VER


104 
	~<sys/£À˘.h
>

107 #ifde‡
löux


108 
	~<utime.h
>

109 
	~<sgây.h
>

112 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
)

113 
	~<sgây.h
>

116 #ifde‡
__svr4__


117 
	~"utime.h
"

120 #i‡
deföed
(
•¨c
Ë&& deföed(
__unix__
)

121 #i‡
deföed
(
__svr4__
Ë|| deföed(
__USLC__
)

122 
	~<dúít.h
>

124 
	~<sys/dú.h
>

128 #unde‡
NL0


129 #unde‡
NL1


130 #unde‡
CR0


131 #unde‡
CR1


132 #unde‡
CR2


133 #unde‡
CR3


134 #unde‡
TAB0


135 #unde‡
TAB1


136 #unde‡
TAB2


137 #unde‡
XTABS


138 #unde‡
BS0


139 #unde‡
BS1


140 #unde‡
FF0


141 #unde‡
FF1


142 #unde‡
ECHO


143 #unde‡
NOFLSH


144 #unde‡
TOSTOP


145 #unde‡
FLUSHO


146 #unde‡
PENDIN


149 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
)

150 #unde‡
CR0


153 #ifde‡
__FªeBSD__


154 
	~<sys/io˘l_com∑t.h
>

156 #i‚de‡
_MSC_VER


157 
	~<ãrmio.h
>

161 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
)

163 #unde‡
HUPCL


164 #unde‡
ECHO


165 #unde‡
B50


166 #unde‡
B75


167 #unde‡
B110


168 #unde‡
B134


169 #unde‡
B150


170 #unde‡
B200


171 #unde‡
B300


172 #unde‡
B600


173 #unde‡
B1200


174 #unde‡
B1800


175 #unde‡
B2400


176 #unde‡
B4800


177 #unde‡
B9600


178 #unde‡
B19200


179 #unde‡
B38400


180 #unde‡
NL0


181 #unde‡
NL1


182 #unde‡
CR0


183 #unde‡
CR1


184 #unde‡
CR2


185 #unde‡
CR3


186 #unde‡
TAB0


187 #unde‡
TAB1


188 #unde‡
BS0


189 #unde‡
BS1


190 #unde‡
FF0


191 #unde‡
FF1


192 #unde‡
EXTA


193 #unde‡
EXTB


194 #unde‡
B900


195 #unde‡
B3600


196 #unde‡
B7200


197 #unde‡
XTABS


198 
	~<sgây.h
>

199 
	~<utime.h
>

202 #ifde‡
_MSC_VER


203 
	#ac˚ss
 
_ac˚ss


	)

204 
	#chmod
 
_chmod


	)

205 
	#chdú
 
_chdú


	)

206 
	#u∆ök
 
_u∆ök


	)

207 
	#›í
 
_›í


	)

208 
	#¸ót
 
_¸ót


	)

209 
	#pùe
 
_pùe


	)

210 
	#dup
 
_dup


	)

211 
	#dup2
 
_dup2


	)

212 
	#°©
 
_°©


	)

213 
	#f°©
 
_f°©


	)

214 
	#l£ek
 
_l£ek


	)

215 
	#ªad
 
_ªad


	)

216 
	#wrôe
 
_wrôe


	)

217 
	#˛o£
 
_˛o£


	)

218 
	#gëpid
 
_gëpid


	)

219 
	#utime
 
_utime


	)

220 
	~<sys/utime.h
>

228 
	#SS_SYS_sysˇŒ
 0

	)

230 
	#SS_SYS_f‹k
 2

	)

231 
	#SS_SYS_ªad
 3

	)

233 
	#SS_SYS_›í
 5

	)

234 
	#SS_SYS_˛o£
 6

	)

236 
	#SS_SYS_¸ót
 8

	)

237 
	#SS_SYS_lök
 9

	)

238 
	#SS_SYS_u∆ök
 10

	)

239 
	#SS_SYS_execv
 11

	)

240 
	#SS_SYS_chdú
 12

	)

242 
	#SS_SYS_mknod
 14

	)

243 
	#SS_SYS_chmod
 15

	)

244 
	#SS_SYS_chown
 16

	)

245 
	#SS_SYS_brk
 17

	)

247 
	#SS_SYS_l£ek
 19

	)

248 
	#SS_SYS_gëpid
 20

	)

249 
	#SS_SYS_mou¡
 21

	)

250 
	#SS_SYS_umou¡
 22

	)

252 
	#SS_SYS_gëuid
 24

	)

254 
	#SS_SYS_±ø˚
 26

	)

261 
	#SS_SYS_ac˚ss
 33

	)

264 
	#SS_SYS_sync
 36

	)

265 
	#SS_SYS_kûl
 37

	)

266 
	#SS_SYS_°©
 38

	)

268 
	#SS_SYS_l°©
 40

	)

269 
	#SS_SYS_dup
 41

	)

270 
	#SS_SYS_pùe
 42

	)

272 
	#SS_SYS_¥ofû
 44

	)

275 
	#SS_SYS_gëgid
 47

	)

279 
	#SS_SYS_ac˘
 51

	)

282 
	#SS_SYS_io˘l
 54

	)

283 
	#SS_SYS_ªboŸ
 55

	)

285 
	#SS_SYS_symlök
 57

	)

286 
	#SS_SYS_ªadlök
 58

	)

287 
	#SS_SYS_execve
 59

	)

288 
	#SS_SYS_umask
 60

	)

289 
	#SS_SYS_chroŸ
 61

	)

290 
	#SS_SYS_f°©
 62

	)

292 
	#SS_SYS_gë∑gesize
 64

	)

293 
	#SS_SYS_mªm≠
 65

	)

294 
	#SS_SYS_vf‹k
 66

	)

297 
	#SS_SYS_sbrk
 69

	)

298 
	#SS_SYS_s°k
 70

	)

299 
	#SS_SYS_mm≠
 71

	)

300 
	#SS_SYS_vadvi£
 72

	)

301 
	#SS_SYS_munm≠
 73

	)

302 
	#SS_SYS_m¥Ÿe˘
 74

	)

303 
	#SS_SYS_madvi£
 75

	)

304 
	#SS_SYS_vh™gup
 76

	)

306 
	#SS_SYS_möc‹e
 78

	)

307 
	#SS_SYS_gëgroups
 79

	)

308 
	#SS_SYS_£tgroups
 80

	)

309 
	#SS_SYS_gëpgΩ
 81

	)

310 
	#SS_SYS_£çgΩ
 82

	)

311 
	#SS_SYS_£tôimî
 83

	)

312 
	#SS_SYS_waô3
 84

	)

313 
	#SS_SYS_waô
 
SYS_waô3


	)

314 
	#SS_SYS_sw≠⁄
 85

	)

315 
	#SS_SYS_gëôimî
 86

	)

316 
	#SS_SYS_gëho°«me
 87

	)

317 
	#SS_SYS_£tho°«me
 88

	)

318 
	#SS_SYS_gëdèbÀsize
 89

	)

319 
	#SS_SYS_dup2
 90

	)

320 
	#SS_SYS_gëd›t
 91

	)

321 
	#SS_SYS_f˙é
 92

	)

322 
	#SS_SYS_£À˘
 93

	)

323 
	#SS_SYS_£td›t
 94

	)

324 
	#SS_SYS_fsync
 95

	)

325 
	#SS_SYS_£çri‹ôy
 96

	)

326 
	#SS_SYS_sockë
 97

	)

327 
	#SS_SYS_c⁄√˘
 98

	)

328 
	#SS_SYS_ac˚±
 99

	)

329 
	#SS_SYS_gë¥i‹ôy
 100

	)

330 
	#SS_SYS_£nd
 101

	)

331 
	#SS_SYS_ªcv
 102

	)

332 
	#SS_SYS_sigªtu∫
 103

	)

334 
	#SS_SYS_böd
 104

	)

335 
	#SS_SYS_£tsock›t
 105

	)

336 
	#SS_SYS_li°í
 106

	)

338 
	#SS_SYS_sigvec
 108

	)

339 
	#SS_SYS_sigblock
 109

	)

340 
	#SS_SYS_sig£tmask
 110

	)

341 
	#SS_SYS_sig∑u£
 111

	)

342 
	#SS_SYS_sig°ack
 112

	)

343 
	#SS_SYS_ªcvmsg
 113

	)

344 
	#SS_SYS_£ndmsg
 114

	)

346 
	#SS_SYS_gëtimeofday
 116

	)

347 
	#SS_SYS_gërußge
 117

	)

348 
	#SS_SYS_gësock›t
 118

	)

350 
	#SS_SYS_ªadv
 120

	)

351 
	#SS_SYS_wrôev
 121

	)

352 
	#SS_SYS_£âimeofday
 122

	)

353 
	#SS_SYS_fchown
 123

	)

354 
	#SS_SYS_fchmod
 124

	)

355 
	#SS_SYS_ªcv‰om
 125

	)

356 
	#SS_SYS_£åeuid
 126

	)

357 
	#SS_SYS_£åegid
 127

	)

358 
	#SS_SYS_ª«me
 128

	)

359 
	#SS_SYS_åunˇã
 129

	)

360 
	#SS_SYS_·runˇã
 130

	)

361 
	#SS_SYS_Êock
 131

	)

363 
	#SS_SYS_£ndto
 133

	)

364 
	#SS_SYS_shutdown
 134

	)

365 
	#SS_SYS_sockë∑ú
 135

	)

366 
	#SS_SYS_mkdú
 136

	)

367 
	#SS_SYS_rmdú
 137

	)

368 
	#SS_SYS_utimes
 138

	)

369 
	#SS_SYS_sig˛ónup
 139

	)

371 
	#SS_SYS_adjtime
 140

	)

372 
	#SS_SYS_gë≥î«me
 141

	)

373 
	#SS_SYS_gëho°id
 142

	)

374 
	#SS_SYS_£tho°id
 143

	)

375 
	#SS_SYS_gëæimô
 144

	)

376 
	#SS_SYS_£ålimô
 145

	)

377 
	#SS_SYS_kûÕg
 146

	)

379 
	#SS_SYS_£tquŸa
 148

	)

380 
	#SS_SYS_quŸa
 149

	)

381 
	#SS_SYS_gësock«me
 150

	)

383 
	#SS_SYS_sysmùs
 151

	)

387 
	#SS_SYS_ˇcheÊush
 152

	)

388 
	#SS_SYS_ˇche˘l
 153

	)

389 
	#SS_SYS_©omic_›
 155

	)

392 
	#SS_SYS_debug
 154

	)

394 
	#SS_SYS_°©fs
 160

	)

395 
	#SS_SYS_f°©fs
 161

	)

396 
	#SS_SYS_unmou¡
 162

	)

398 
	#SS_SYS_quŸa˘l
 168

	)

401 
	#SS_SYS_hdwc⁄f
 171

	)

405 
	#SS_SYS_nfs_svc
 158

	)

406 
	#SS_SYS_nfssvc
 158

	)

407 
	#SS_SYS_nfs_biod
 163

	)

408 
	#SS_SYS_async_d´m⁄
 163

	)

409 
	#SS_SYS_nfs_gëfh
 164

	)

410 
	#SS_SYS_gëfh
 164

	)

411 
	#SS_SYS_gëdúíåõs
 159

	)

412 
	#SS_SYS_gëdomaö«me
 165

	)

413 
	#SS_SYS_£tdomaö«me
 166

	)

414 
	#SS_SYS_exp‹tfs
 169

	)

416 
	#SS_SYS_msg˘l
 172

	)

417 
	#SS_SYS_msggë
 173

	)

418 
	#SS_SYS_msgrcv
 174

	)

419 
	#SS_SYS_msg¢d
 175

	)

420 
	#SS_SYS_£m˘l
 176

	)

421 
	#SS_SYS_£mgë
 177

	)

422 
	#SS_SYS_£m›
 178

	)

423 
	#SS_SYS_u«me
 179

	)

424 
	#SS_SYS_shmsys
 180

	)

425 
	#SS_SYS_∂ock
 181

	)

426 
	#SS_SYS_lockf
 182

	)

427 
	#SS_SYS_u°©
 183

	)

428 
	#SS_SYS_gëm¡
 184

	)

429 
	#SS_SYS_sig≥ndög
 187

	)

430 
	#SS_SYS_£tsid
 188

	)

431 
	#SS_SYS_waôpid
 189

	)

433 
	#SS_SYS_utc_gëtime
 233

	)

434 
	#SS_SYS_utc_adjtime
 234

	)

435 
	#SS_SYS_aud˙é
 252

	)

436 
	#SS_SYS_audgí
 253

	)

437 
	#SS_SYS_°¨t˝u
 254

	)

438 
	#SS_SYS_°›˝u
 255

	)

439 
	#SS_SYS_gësysöfo
 256

	)

440 
	#SS_SYS_£tsysöfo
 257

	)

443 
	#SS_IOCTL_TIOCGETP
 1074164744

	)

444 
	#SS_IOCTL_TIOCSETP
 -2147060727

	)

445 
	#SS_IOCTL_TCGETP
 1076130901

	)

446 
	#SS_IOCTL_TCGETA
 1075082331

	)

447 
	#SS_IOCTL_TIOCGLTC
 1074164852

	)

448 
	#SS_IOCTL_TIOCSLTC
 -2147060619

	)

449 
	#SS_IOCTL_TIOCGWINSZ
 1074295912

	)

450 
	#SS_IOCTL_TCSETAW
 -2146143143

	)

451 
	#SS_IOCTL_TIOCGETC
 1074164754

	)

452 
	#SS_IOCTL_TIOCSETC
 -2147060719

	)

453 
	#SS_IOCTL_TIOCLBIC
 -2147191682

	)

454 
	#SS_IOCTL_TIOCLBIS
 -2147191681

	)

455 
	#SS_IOCTL_TIOCLGET
 0x4004747c

	)

456 
	#SS_IOCTL_TIOCLSET
 -2147191683

	)

460 
	#MAXBUFSIZE
 1024

	)

466 
	#NUM_IOCTL_BYTES
 128

	)

470 
	sss_°©buf


472 
shÆf_t
 
	mss_°_dev
;

473 
shÆf_t
 
	mss_∑d
;

474 
w‹d_t
 
	mss_°_öo
;

475 
hÆf_t
 
	mss_°_mode
;

476 
shÆf_t
 
	mss_°_∆ök
;

477 
shÆf_t
 
	mss_°_uid
;

478 
shÆf_t
 
	mss_°_gid
;

479 
shÆf_t
 
	mss_°_rdev
;

480 
shÆf_t
 
	mss_∑d1
;

481 
sw‹d_t
 
	mss_°_size
;

482 
sw‹d_t
 
	mss_°_©ime
;

483 
sw‹d_t
 
	mss_°_•¨e1
;

484 
sw‹d_t
 
	mss_°_mtime
;

485 
sw‹d_t
 
	mss_°_•¨e2
;

486 
sw‹d_t
 
	mss_°_˘ime
;

487 
sw‹d_t
 
	mss_°_•¨e3
;

488 
sw‹d_t
 
	mss_°_blksize
;

489 
sw‹d_t
 
	mss_°_blocks
;

490 
w‹d_t
 
	mss_°_gínum
;

491 
sw‹d_t
 
	mss_°_•¨e4
;

494 
	sss_sgâyb
 {

495 
byã_t
 
	msg_i•ìd
;

496 
byã_t
 
	msg_o•ìd
;

497 
byã_t
 
	msg_îa£
;

498 
byã_t
 
	msg_kûl
;

499 
shÆf_t
 
	msg_Êags
;

502 
	sss_timevÆ


504 
sw‹d_t
 
	mss_tv_£c
;

505 
sw‹d_t
 
	mss_tv_u£c
;

510 
	sss_rußge


512 
ss_timevÆ
 
	mss_ru_utime
;

513 
ss_timevÆ
 
	mss_ru_°ime
;

514 
sw‹d_t
 
	mss_ru_maxrss
;

515 
sw‹d_t
 
	mss_ru_ixrss
;

516 
sw‹d_t
 
	mss_ru_idrss
;

517 
sw‹d_t
 
	mss_ru_i§ss
;

518 
sw‹d_t
 
	mss_ru_möÊt
;

519 
sw‹d_t
 
	mss_ru_majÊt
;

520 
sw‹d_t
 
	mss_ru_nsw≠
;

521 
sw‹d_t
 
	mss_ru_öblock
;

522 
sw‹d_t
 
	mss_ru_oublock
;

523 
sw‹d_t
 
	mss_ru_msg¢d
;

524 
sw‹d_t
 
	mss_ru_msgrcv
;

525 
sw‹d_t
 
	mss_ru_nsig«ls
;

526 
sw‹d_t
 
	mss_ru_nvcsw
;

527 
sw‹d_t
 
	mss_ru_nivcsw
;

530 
	sss_timez⁄e


532 
sw‹d_t
 
	mss_tz_möuãswe°
;

533 
sw‹d_t
 
	mss_tz_d°time
;

536 
	sss_æimô


538 
	mss_æim_cur
;

539 
	mss_æim_max
;

544 
	#SS_O_RDONLY
 0

	)

545 
	#SS_O_WRONLY
 1

	)

546 
	#SS_O_RDWR
 2

	)

547 
	#SS_O_APPEND
 0x0008

	)

548 
	#SS_O_CREAT
 0x0200

	)

549 
	#SS_O_TRUNC
 0x0400

	)

550 
	#SS_O_EXCL
 0x0800

	)

551 
	#SS_O_NONBLOCK
 0x4000

	)

552 
	#SS_O_NOCTTY
 0x8000

	)

553 
	#SS_O_SYNC
 0x2000

	)

557 
	mss_Êag
;

558 
	mloˇl_Êag
;

559 } 
	gss_Êag_èbÀ
[] = {

561 #ifde‡
_MSC_VER


562 { 
SS_O_RDONLY
, 
_O_RDONLY
 },

563 { 
SS_O_WRONLY
, 
_O_WRONLY
 },

564 { 
SS_O_RDWR
, 
_O_RDWR
 },

565 { 
SS_O_APPEND
, 
_O_APPEND
 },

566 { 
SS_O_CREAT
, 
_O_CREAT
 },

567 { 
SS_O_TRUNC
, 
_O_TRUNC
 },

568 { 
SS_O_EXCL
, 
_O_EXCL
 },

569 #ifde‡
_O_NONBLOCK


570 { 
SS_O_NONBLOCK
, 
_O_NONBLOCK
 },

572 #ifde‡
_O_NOCTTY


573 { 
SS_O_NOCTTY
, 
_O_NOCTTY
 },

575 #ifde‡
_O_SYNC


576 { 
SS_O_SYNC
, 
_O_SYNC
 },

579 { 
SS_O_RDONLY
, 
O_RDONLY
 },

580 { 
SS_O_WRONLY
, 
O_WRONLY
 },

581 { 
SS_O_RDWR
, 
O_RDWR
 },

582 { 
SS_O_APPEND
, 
O_APPEND
 },

583 { 
SS_O_CREAT
, 
O_CREAT
 },

584 { 
SS_O_TRUNC
, 
O_TRUNC
 },

585 { 
SS_O_EXCL
, 
O_EXCL
 },

586 { 
SS_O_NONBLOCK
, 
O_NONBLOCK
 },

587 { 
SS_O_NOCTTY
, 
O_NOCTTY
 },

588 #ifde‡
O_SYNC


589 { 
SS_O_SYNC
, 
O_SYNC
 },

593 
	#SS_NFLAGS
 ((
ss_Êag_èbÀ
)/(ss_Êag_èbÀ[0]))

	)

602 
	$sys_sysˇŒ
(
ªgs_t
 *
ªgs
,

603 
mem_ac˚ss_‚
 
mem_‚
,

604 
mem_t
 *
mem
,

605 
md_ö°_t
 
ö°
,

606 
åa˚abÀ
)

608 
w‹d_t
 
syscode
 = 
ªgs
->
ªgs_R
[2];

611 i‡(
åa˚abÀ
 && 
sim_eio_fd
 !
NULL
)

613 
	`eio_ªad_åa˚
(
sim_eio_fd
, 
sim_num_ö¢
, 
ªgs
, 
mem_‚
, 
mem
, 
ö°
);

618 #ifde‡
MD_CROSS_ENDIAN


619 i‡(
syscode
 =
SS_SYS_exô
)

622 
	`l⁄gjmp
(
sim_exô_buf
, 
ªgs
->
ªgs_R
[4]+1);

625 
	`Áèl
("cannotÉxecute PISA system call on cross-endian host");

630 
syscode
)

632 
SS_SYS_exô
:

634 
	`l⁄gjmp
(
sim_exô_buf
, 
ªgs
->
ªgs_R
[4]+1);

638 
SS_SYS_f‹k
:

640 
ªgs
->
ªgs_R
[2] = 
	`f‹k
();

641 i‡(
ªgs
->
ªgs_R
[2] != -1)

643 
ªgs
->
ªgs_R
[7] = 0;

645 i‡(
ªgs
->
ªgs_R
[2] != 0)

646 
ªgs
->
ªgs_R
[3] = 0;

649 
	`Áèl
("SYS_fork failed");

654 
SS_SYS_vf‹k
:

656 
r31_∑ª¡
 = 
ªgs
->
ªgs_R
[31];

657  
ªgs
->
ªgs_R
[2] = 
	`vf‹k
();

658 i‡(
ªgs
->
ªgs_R
[2] != -1)

659 
ªgs
->
ªgs_R
[7] = 0;

661 
	`Áèl
("vfork() in SYS_vfork failed");

662 i‡(
ªgs
->
ªgs_R
[2] != 0)

664 
ªgs
->
ªgs_R
[3] = 0;

665 
ªgs
->
ªgs_R
[7] = 0;

666 
ªgs
->
ªgs_R
[31] = 
r31_∑ª¡
;

671 
SS_SYS_ªad
:

673 *
buf
;

676 i‡(!(
buf
 = (*)
	`ˇŒoc
–
ªgs
->
ªgs_R
[6], ())))

677 
	`Áèl
("out of memory in SYS_read");

680  
ªgs
->
ªgs_R
[2] =

681 
	`ªad
–
ªgs
->
ªgs_R
[4], 
buf
,Ñegs->regs_R[6]);

684 i‡(
ªgs
->
ªgs_R
[2] != -1)

685 
ªgs
->
ªgs_R
[7] = 0;

689 
ªgs
->
ªgs_R
[2] = 
î∫o
;

690 
ªgs
->
ªgs_R
[7] = 1;

694 
	`mem_bc›y
(
mem_‚
, 
mem
,

695 
Wrôe
, 
ªgs
->
ªgs_R
[5],

696 
buf
, 
ªgs
->
ªgs_R
[2]);

699 
	`‰ì
(
buf
);

703 
SS_SYS_wrôe
:

705 *
buf
;

708 i‡(!(
buf
 = (*)
	`ˇŒoc
–
ªgs
->
ªgs_R
[6], ())))

709 
	`Áèl
("out of memory in SYS_write");

712 
	`mem_bc›y
(
mem_‚
, 
mem
,

713 
Ród
, 
ªgs
->
ªgs_R
[5],

714 
buf
, 
ªgs
->
ªgs_R
[6]);

717 i‡(
sim_¥ogfd
 && 
	`MD_OUTPUT_SYSCALL
(
ªgs
))

721  
ªgs
->
ªgs_R
[2] =

722 
	`fwrôe
(
buf
, 1, 
ªgs
->
ªgs_R
[6], 
sim_¥ogfd
);

728  
ªgs
->
ªgs_R
[2] =

729 
	`wrôe
–
ªgs
->
ªgs_R
[4],

730 
buf
, 
ªgs
->
ªgs_R
[6]);

734 i‡(
ªgs
->
ªgs_R
[2] ==Ñegs->regs_R[6])

735  
ªgs
->
ªgs_R
[7] = 0;

739 
ªgs
->
ªgs_R
[2] = 
î∫o
;

740 
ªgs
->
ªgs_R
[7] = 1;

744 
	`‰ì
(
buf
);

748 
SS_SYS_›í
:

750 
buf
[
MAXBUFSIZE
];

751 
i
;

752 
ss_Êags
 = 
ªgs
->
ªgs_R
[5], 
loˇl_Êags
 = 0;

755 
i
=0; i<
SS_NFLAGS
; i++)

757 i‡(
ss_Êags
 & 
ss_Êag_èbÀ
[
i
].
ss_Êag
)

759 
ss_Êags
 &~
ss_Êag_èbÀ
[
i
].
ss_Êag
;

760 
loˇl_Êags
 |
ss_Êag_èbÀ
[
i
].
loˇl_Êag
;

764 i‡(
ss_Êags
 != 0)

765 
	`Áèl
("sysˇŒ: o≥n: c™nŸ decodêÊags: 0x%08x", 
ss_Êags
);

768 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

771  
ªgs
->
ªgs_R
[2] =

772 
	`›í
(
buf
, 
loˇl_Êags
, 
ªgs
->
ªgs_R
[6]);

775 i‡(
ªgs
->
ªgs_R
[2] != -1)

776 
ªgs
->
ªgs_R
[7] = 0;

780 
ªgs
->
ªgs_R
[2] = 
î∫o
;

781 
ªgs
->
ªgs_R
[7] = 1;

786 
SS_SYS_˛o£
:

788 i‡–
ªgs
->
ªgs_R
[4] == 0

789 || 
ªgs
->
ªgs_R
[4] == 1

790 || 
ªgs
->
ªgs_R
[4] == 2)

792 
ªgs
->
ªgs_R
[7] = 0;

797 
ªgs
->
ªgs_R
[2] = 
	`˛o£
(Ñegs->regs_R[4]);

800 i‡(
ªgs
->
ªgs_R
[2] != -1)

801 
ªgs
->
ªgs_R
[7] = 0;

805 
ªgs
->
ªgs_R
[2] = 
î∫o
;

806 
ªgs
->
ªgs_R
[7] = 1;

810 
SS_SYS_¸ót
:

812 
buf
[
MAXBUFSIZE
];

815 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

818  
ªgs
->
ªgs_R
[2] = 
	`¸ót
(
buf
,Ñegs->regs_R[5]);

821 i‡(
ªgs
->
ªgs_R
[2] != -1)

822 
ªgs
->
ªgs_R
[7] = 0;

826 
ªgs
->
ªgs_R
[2] = 
î∫o
;

827 
ªgs
->
ªgs_R
[7] = 1;

832 
SS_SYS_u∆ök
:

834 
buf
[
MAXBUFSIZE
];

837 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

840  
ªgs
->
ªgs_R
[2] = 
	`u∆ök
(
buf
);

843 i‡(
ªgs
->
ªgs_R
[2] != -1)

844 
ªgs
->
ªgs_R
[7] = 0;

848 
ªgs
->
ªgs_R
[2] = 
î∫o
;

849 
ªgs
->
ªgs_R
[7] = 1;

854 
SS_SYS_chdú
:

856 
buf
[
MAXBUFSIZE
];

859 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

862  
ªgs
->
ªgs_R
[2] = 
	`chdú
(
buf
);

865 i‡(
ªgs
->
ªgs_R
[2] != -1)

866 
ªgs
->
ªgs_R
[7] = 0;

870 
ªgs
->
ªgs_R
[2] = 
î∫o
;

871 
ªgs
->
ªgs_R
[7] = 1;

876 
SS_SYS_chmod
:

878 
buf
[
MAXBUFSIZE
];

881 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

884  
ªgs
->
ªgs_R
[2] = 
	`chmod
(
buf
,Ñegs->regs_R[5]);

887 i‡(
ªgs
->
ªgs_R
[2] != -1)

888 
ªgs
->
ªgs_R
[7] = 0;

892 
ªgs
->
ªgs_R
[2] = 
î∫o
;

893 
ªgs
->
ªgs_R
[7] = 1;

898 
SS_SYS_chown
:

899 #ifde‡
_MSC_VER


900 
	`w¨n
("syscall chown()Çot yet implemented for MSC...");

901 
ªgs
->
ªgs_R
[7] = 0;

904 
buf
[
MAXBUFSIZE
];

907 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

910  
ªgs
->
ªgs_R
[2] = 
	`chown
(
buf
,Ñegs->regs_R[5],

911  
ªgs
->
ªgs_R
[6]);

914 i‡(
ªgs
->
ªgs_R
[2] != -1)

915 
ªgs
->
ªgs_R
[7] = 0;

919 
ªgs
->
ªgs_R
[2] = 
î∫o
;

920 
ªgs
->
ªgs_R
[7] = 1;

926 
SS_SYS_brk
:

928 
md_addr_t
 
addr
;

931 
addr
 = 
	`ROUND_UP
–
ªgs
->
ªgs_R
[4], 
MD_PAGE_SIZE
);

934 i‡(
addr
 >
ld_brk_poöt
 &&ádd∏< (
md_addr_t
)
ªgs
->
ªgs_R
[29])

936 
ªgs
->
ªgs_R
[2] = 0;

937 
ªgs
->
ªgs_R
[7] = 0;

938 
ld_brk_poöt
 = 
addr
;

943 
ªgs
->
ªgs_R
[2] = 
ENOMEM
;

944 
ªgs
->
ªgs_R
[7] = 1;

949 
SS_SYS_l£ek
:

951 
ªgs
->
ªgs_R
[2] =

952 
	`l£ek
–
ªgs
->
ªgs_R
[4],

953  
ªgs
->
ªgs_R
[5],Ñegs->regs_R[6]);

956 i‡(
ªgs
->
ªgs_R
[2] != -1)

957 
ªgs
->
ªgs_R
[7] = 0;

961 
ªgs
->
ªgs_R
[2] = 
î∫o
;

962 
ªgs
->
ªgs_R
[7] = 1;

966 
SS_SYS_gëpid
:

968  
ªgs
->
ªgs_R
[2] = 
	`gëpid
();

971 i‡(
ªgs
->
ªgs_R
[2] != -1)

972 
ªgs
->
ªgs_R
[7] = 0;

976 
ªgs
->
ªgs_R
[2] = 
î∫o
;

977 
ªgs
->
ªgs_R
[7] = 1;

981 
SS_SYS_gëuid
:

982 #ifde‡
_MSC_VER


983 
	`w¨n
("syscall getuid()Çot yet implemented for MSC...");

984 
ªgs
->
ªgs_R
[7] = 0;

987  
ªgs
->
ªgs_R
[2] = 
	`gëuid
();

990  
ªgs
->
ªgs_R
[3] = 
	`gëeuid
();

993 i‡(
ªgs
->
ªgs_R
[2] != -1)

994 
ªgs
->
ªgs_R
[7] = 0;

998 
ªgs
->
ªgs_R
[2] = 
î∫o
;

999 
ªgs
->
ªgs_R
[7] = 1;

1004 
SS_SYS_ac˚ss
:

1006 
buf
[
MAXBUFSIZE
];

1009 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

1012  
ªgs
->
ªgs_R
[2] = 
	`ac˚ss
(
buf
,Ñegs->regs_R[5]);

1015 i‡(
ªgs
->
ªgs_R
[2] != -1)

1016 
ªgs
->
ªgs_R
[7] = 0;

1020 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1021 
ªgs
->
ªgs_R
[7] = 1;

1026 
SS_SYS_°©
:

1027 
SS_SYS_l°©
:

1029 
buf
[
MAXBUFSIZE
];

1030 
ss_°©buf
 
ss_sbuf
;

1031 #ifde‡
_MSC_VER


1032 
_°©
 
sbuf
;

1034 
°©
 
sbuf
;

1038 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

1041 i‡(
syscode
 =
SS_SYS_°©
)

1042  
ªgs
->
ªgs_R
[2] = 
	`°©
(
buf
, &
sbuf
);

1045 #ifde‡
_MSC_VER


1046 
	`w¨n
("syscallÜstat()Çot yet implemented for MSC...");

1047 
ªgs
->
ªgs_R
[7] = 0;

1050  
ªgs
->
ªgs_R
[2] = 
	`l°©
(
buf
, &
sbuf
);

1055 i‡(
ªgs
->
ªgs_R
[2] != -1)

1056 
ªgs
->
ªgs_R
[7] = 0;

1060 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1061 
ªgs
->
ªgs_R
[7] = 1;

1065 
ss_sbuf
.
ss_°_dev
 = 
	`MD_SWAPH
(
sbuf
.
°_dev
);

1066 
ss_sbuf
.
ss_∑d
 = 0;

1067 
ss_sbuf
.
ss_°_öo
 = 
	`MD_SWAPW
(
sbuf
.
°_öo
);

1068 
ss_sbuf
.
ss_°_mode
 = 
	`MD_SWAPH
(
sbuf
.
°_mode
);

1069 
ss_sbuf
.
ss_°_∆ök
 = 
	`MD_SWAPH
(
sbuf
.
°_∆ök
);

1070 
ss_sbuf
.
ss_°_uid
 = 
	`MD_SWAPH
(
sbuf
.
°_uid
);

1071 
ss_sbuf
.
ss_°_gid
 = 
	`MD_SWAPH
(
sbuf
.
°_gid
);

1072 
ss_sbuf
.
ss_°_rdev
 = 
	`MD_SWAPH
(
sbuf
.
°_rdev
);

1073 
ss_sbuf
.
ss_∑d1
 = 0;

1074 
ss_sbuf
.
ss_°_size
 = 
	`MD_SWAPW
(
sbuf
.
°_size
);

1075 
ss_sbuf
.
ss_°_©ime
 = 
	`MD_SWAPW
(
sbuf
.
°_©ime
);

1076 
ss_sbuf
.
ss_°_•¨e1
 = 0;

1077 
ss_sbuf
.
ss_°_mtime
 = 
	`MD_SWAPW
(
sbuf
.
°_mtime
);

1078 
ss_sbuf
.
ss_°_•¨e2
 = 0;

1079 
ss_sbuf
.
ss_°_˘ime
 = 
	`MD_SWAPW
(
sbuf
.
°_˘ime
);

1080 
ss_sbuf
.
ss_°_•¨e3
 = 0;

1081 #i‚de‡
_MSC_VER


1082 
ss_sbuf
.
ss_°_blksize
 = 
	`MD_SWAPW
(
sbuf
.
°_blksize
);

1083 
ss_sbuf
.
ss_°_blocks
 = 
	`MD_SWAPW
(
sbuf
.
°_blocks
);

1085 
ss_sbuf
.
ss_°_gínum
 = 0;

1086 
ss_sbuf
.
ss_°_•¨e4
 = 0;

1089 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1090 &
ss_sbuf
, (
ss_°©buf
));

1094 
SS_SYS_dup
:

1096  
ªgs
->
ªgs_R
[2] = 
	`dup
(Ñegs->regs_R[4]);

1099 i‡(
ªgs
->
ªgs_R
[2] != -1)

1100 
ªgs
->
ªgs_R
[7] = 0;

1104 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1105 
ªgs
->
ªgs_R
[7] = 1;

1109 #i‚de‡
_MSC_VER


1110 
SS_SYS_pùe
:

1112 
fd
[2];

1115 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
fd
, (fd));

1118  
ªgs
->
ªgs_R
[7] = 
	`pùe
(
fd
);

1121  
ªgs
->
ªgs_R
[2] = 
fd
[0];

1122  
ªgs
->
ªgs_R
[3] = 
fd
[1];

1125 i‡(
ªgs
->
ªgs_R
[7] == -1)

1127 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1128 
ªgs
->
ªgs_R
[7] = 1;

1134 
SS_SYS_gëgid
:

1135 #ifde‡
_MSC_VER


1136 
	`w¨n
("syscall getgid()Çot yet implemented for MSC...");

1137 
ªgs
->
ªgs_R
[7] = 0;

1140  
ªgs
->
ªgs_R
[2] = 
	`gëgid
();

1143  
ªgs
->
ªgs_R
[3] = 
	`gëegid
();

1146 i‡(
ªgs
->
ªgs_R
[2] != -1)

1147 
ªgs
->
ªgs_R
[7] = 0;

1151 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1152 
ªgs
->
ªgs_R
[7] = 1;

1157 
SS_SYS_io˘l
:

1159 
buf
[
NUM_IOCTL_BYTES
];

1160 
loˇl_ªq
 = 0;

1163  
ªgs
->
ªgs_R
[5]) {

1164 #ifde‡
TIOCGETP


1165 
SS_IOCTL_TIOCGETP
:

1166 
loˇl_ªq
 = 
TIOCGETP
;

1169 #ifde‡
TIOCSETP


1170 
SS_IOCTL_TIOCSETP
:

1171 
loˇl_ªq
 = 
TIOCSETP
;

1174 #ifde‡
TIOCGETP


1175 
SS_IOCTL_TCGETP
:

1176 
loˇl_ªq
 = 
TIOCGETP
;

1179 #ifde‡
TCGETA


1180 
SS_IOCTL_TCGETA
:

1181 
loˇl_ªq
 = 
TCGETA
;

1184 #ifde‡
TIOCGLTC


1185 
SS_IOCTL_TIOCGLTC
:

1186 
loˇl_ªq
 = 
TIOCGLTC
;

1189 #ifde‡
TIOCSLTC


1190 
SS_IOCTL_TIOCSLTC
:

1191 
loˇl_ªq
 = 
TIOCSLTC
;

1194 #ifde‡
TIOCGWINSZ


1195 
SS_IOCTL_TIOCGWINSZ
:

1196 
loˇl_ªq
 = 
TIOCGWINSZ
;

1199 #ifde‡
TCSETAW


1200 
SS_IOCTL_TCSETAW
:

1201 
loˇl_ªq
 = 
TCSETAW
;

1204 #ifde‡
TIOCGETC


1205 
SS_IOCTL_TIOCGETC
:

1206 
loˇl_ªq
 = 
TIOCGETC
;

1209 #ifde‡
TIOCSETC


1210 
SS_IOCTL_TIOCSETC
:

1211 
loˇl_ªq
 = 
TIOCSETC
;

1214 #ifde‡
TIOCLBIC


1215 
SS_IOCTL_TIOCLBIC
:

1216 
loˇl_ªq
 = 
TIOCLBIC
;

1219 #ifde‡
TIOCLBIS


1220 
SS_IOCTL_TIOCLBIS
:

1221 
loˇl_ªq
 = 
TIOCLBIS
;

1224 #ifde‡
TIOCLGET


1225 
SS_IOCTL_TIOCLGET
:

1226 
loˇl_ªq
 = 
TIOCLGET
;

1229 #ifde‡
TIOCLSET


1230 
SS_IOCTL_TIOCLSET
:

1231 
loˇl_ªq
 = 
TIOCLSET
;

1236 #i‡!
	`deföed
(
TIOCGETP
Ë&& (deföed(
löux
Ë|| deföed(
__CYGWIN32__
))

1237 i‡(!
loˇl_ªq
 && 
ªgs
->
ªgs_R
[5] =
SS_IOCTL_TIOCGETP
)

1239 
ãrmios
 
lbuf
;

1240 
ss_sgâyb
 
buf
;

1242  
ªgs
->
ªgs_R
[2] =

1243 
	`tcgë©å
–()
ªgs
->
ªgs_R
[4], &
lbuf
);

1246 
buf
.
sg_i•ìd
 = 
lbuf
.
c_i•ìd
;

1247 
buf
.
sg_o•ìd
 = 
lbuf
.
c_o•ìd
;

1248 
buf
.
sg_îa£
 = 
lbuf
.
c_cc
[
VERASE
];

1249 
buf
.
sg_kûl
 = 
lbuf
.
c_cc
[
VKILL
];

1250 
buf
.
sg_Êags
 = 0;

1252 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
,

1253  
ªgs
->
ªgs_R
[6], &
buf
,

1254 (
ss_sgâyb
));

1256 i‡(
ªgs
->
ªgs_R
[2] != -1)

1257 
ªgs
->
ªgs_R
[7] = 0;

1260 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1261 
ªgs
->
ªgs_R
[7] = 1;

1267 i‡(!
loˇl_ªq
)

1271 
	`w¨n
("syscall: ioctl: ioctl codeÇot supported d=%d,Ñeq=%d",

1272 
ªgs
->
ªgs_R
[4],Ñegs->regs_R[5]);

1273 
ªgs
->
ªgs_R
[2] = 0;

1274 
ªgs
->
ªgs_R
[7] = 0;

1278 #ifde‡
_MSC_VER


1279 
	`w¨n
("syscall getgid()Çot yet implemented for MSC...");

1280 
ªgs
->
ªgs_R
[7] = 0;

1285 #ifde‡
TIOCGETP


1286 i‡(
loˇl_ªq
 =
TIOCGETP
 && 
sim_¥ogfd
)

1292 
ªgs
->
ªgs_R
[2] = 
ENOTTY
;

1293 
ªgs
->
ªgs_R
[7] = 1;

1301 i‡–
ªgs
->
ªgs_R
[6] != 0)

1302 
	`mem_bc›y
(
mem_‚
, 
mem
,

1303 
Ród
, 
ªgs
->
ªgs_R
[6], 
buf
, 
NUM_IOCTL_BYTES
);

1306  
ªgs
->
ªgs_R
[2] =

1307 
	`io˘l
–
ªgs
->
ªgs_R
[4], 
loˇl_ªq
, 
buf
);

1310 i‡–
ªgs
->
ªgs_R
[6] != 0)

1311 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[6],

1312 
buf
, 
NUM_IOCTL_BYTES
);

1315 i‡(
ªgs
->
ªgs_R
[2] != -1)

1316 
ªgs
->
ªgs_R
[7] = 0;

1320 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1321 
ªgs
->
ªgs_R
[7] = 1;

1328 
SS_SYS_f°©
:

1330 
ss_°©buf
 
ss_sbuf
;

1331 #ifde‡
_MSC_VER


1332 
_°©
 
sbuf
;

1334 
°©
 
sbuf
;

1338  
ªgs
->
ªgs_R
[2] = 
	`f°©
–ªgs->ªgs_R[4], &
sbuf
);

1341 i‡(
ªgs
->
ªgs_R
[2] != -1)

1342 
ªgs
->
ªgs_R
[7] = 0;

1346 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1347 
ªgs
->
ªgs_R
[7] = 1;

1351 
ss_sbuf
.
ss_°_dev
 = 
	`MD_SWAPH
(
sbuf
.
°_dev
);

1352 
ss_sbuf
.
ss_∑d
 = 0;

1353 
ss_sbuf
.
ss_°_öo
 = 
	`MD_SWAPW
(
sbuf
.
°_öo
);

1354 
ss_sbuf
.
ss_°_mode
 = 
	`MD_SWAPH
(
sbuf
.
°_mode
);

1355 
ss_sbuf
.
ss_°_∆ök
 = 
	`MD_SWAPH
(
sbuf
.
°_∆ök
);

1356 
ss_sbuf
.
ss_°_uid
 = 
	`MD_SWAPH
(
sbuf
.
°_uid
);

1357 
ss_sbuf
.
ss_°_gid
 = 
	`MD_SWAPH
(
sbuf
.
°_gid
);

1358 
ss_sbuf
.
ss_°_rdev
 = 
	`MD_SWAPH
(
sbuf
.
°_rdev
);

1359 
ss_sbuf
.
ss_∑d1
 = 0;

1360 
ss_sbuf
.
ss_°_size
 = 
	`MD_SWAPW
(
sbuf
.
°_size
);

1361 
ss_sbuf
.
ss_°_©ime
 = 
	`MD_SWAPW
(
sbuf
.
°_©ime
);

1362 
ss_sbuf
.
ss_°_•¨e1
 = 0;

1363 
ss_sbuf
.
ss_°_mtime
 = 
	`MD_SWAPW
(
sbuf
.
°_mtime
);

1364 
ss_sbuf
.
ss_°_•¨e2
 = 0;

1365 
ss_sbuf
.
ss_°_˘ime
 = 
	`MD_SWAPW
(
sbuf
.
°_˘ime
);

1366 
ss_sbuf
.
ss_°_•¨e3
 = 0;

1367 #i‚de‡
_MSC_VER


1368 
ss_sbuf
.
ss_°_blksize
 = 
	`MD_SWAPW
(
sbuf
.
°_blksize
);

1369 
ss_sbuf
.
ss_°_blocks
 = 
	`MD_SWAPW
(
sbuf
.
°_blocks
);

1371 
ss_sbuf
.
ss_°_gínum
 = 0;

1372 
ss_sbuf
.
ss_°_•¨e4
 = 0;

1375 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1376 &
ss_sbuf
, (
ss_°©buf
));

1380 
SS_SYS_gë∑gesize
:

1382 
ªgs
->
ªgs_R
[2] = 
MD_PAGE_SIZE
;

1385 i‡(
ªgs
->
ªgs_R
[2] != -1)

1386 
ªgs
->
ªgs_R
[7] = 0;

1390 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1391 
ªgs
->
ªgs_R
[7] = 1;

1395 
SS_SYS_£tôimî
:

1397 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1398 
	`w¨n
("syscall: setitimer ignored");

1401 
SS_SYS_gëdèbÀsize
:

1402 #i‡
	`deföed
(
_AIX
)

1404 
ªgs
->
ªgs_R
[2] = 
	`gëdèbÀsize
();

1407 i‡(
ªgs
->
ªgs_R
[2] != -1)

1408 
ªgs
->
ªgs_R
[7] = 0;

1412 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1413 
ªgs
->
ªgs_R
[7] = 1;

1415 #ñi‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
u…rix
Ë|| deföed(
_MSC_VER
)

1418 
	`w¨n
("syscall: called getdtablesize()\n");

1419 
ªgs
->
ªgs_R
[2] = 16;

1420 
ªgs
->
ªgs_R
[7] = 0;

1424 
æimô
 
æ
;

1427 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) != -1)

1429 
ªgs
->
ªgs_R
[2] = 
æ
.
æim_cur
;

1430 
ªgs
->
ªgs_R
[7] = 0;

1435 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1436 
ªgs
->
ªgs_R
[7] = 1;

1442 
SS_SYS_dup2
:

1444 
ªgs
->
ªgs_R
[2] =

1445 
	`dup2
–
ªgs
->
ªgs_R
[4],Ñegs->regs_R[5]);

1448 i‡(
ªgs
->
ªgs_R
[2] != -1)

1449 
ªgs
->
ªgs_R
[7] = 0;

1453 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1454 
ªgs
->
ªgs_R
[7] = 1;

1458 
SS_SYS_f˙é
:

1459 #ifde‡
_MSC_VER


1460 
	`w¨n
("syscall fcntl()Çot yet implemented for MSC...");

1461 
ªgs
->
ªgs_R
[7] = 0;

1464 
ªgs
->
ªgs_R
[2] =

1465 
	`f˙é
–
ªgs
->
ªgs_R
[4],Ñegs->regs_R[5],

1466  
ªgs
->
ªgs_R
[6]);

1469 i‡(
ªgs
->
ªgs_R
[2] != -1)

1470 
ªgs
->
ªgs_R
[7] = 0;

1474 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1475 
ªgs
->
ªgs_R
[7] = 1;

1480 
SS_SYS_£À˘
:

1481 #ifde‡
_MSC_VER


1482 
	`w¨n
("syscall select()Çot yet implemented for MSC...");

1483 
ªgs
->
ªgs_R
[7] = 0;

1486 
fd_£t
 
ªadfd
, 
wrôefd
, 
ex˚±fd
;

1487 
fd_£t
 *
ªadfdp
, *
wrôefdp
, *
ex˚±fdp
;

1488 
timevÆ
 
timeout
, *
timeouç
;

1489 
w‹d_t
 
∑øm5
;

1494 
	`mem_bc›y
(
mem_‚
, 
mem
,

1495 
Ród
, 
ªgs
->
ªgs_R
[29]+16, &
∑øm5
, (
w‹d_t
));

1498 i‡–
ªgs
->
ªgs_R
[5] != 0)

1500 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1501 &
ªadfd
, (
fd_£t
));

1502 
ªadfdp
 = &
ªadfd
;

1505 
ªadfdp
 = 
NULL
;

1508 i‡–
ªgs
->
ªgs_R
[6] != 0)

1510 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[6],

1511 &
wrôefd
, (
fd_£t
));

1512 
wrôefdp
 = &
wrôefd
;

1515 
wrôefdp
 = 
NULL
;

1518 i‡–
ªgs
->
ªgs_R
[7] != 0)

1520 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[7],

1521 &
ex˚±fd
, (
fd_£t
));

1522 
ex˚±fdp
 = &
ex˚±fd
;

1525 
ex˚±fdp
 = 
NULL
;

1528 i‡–
∑øm5
 != 0)

1530 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
∑øm5
,

1531 &
timeout
, (
timevÆ
));

1532 
timeouç
 = &
timeout
;

1535 
timeouç
 = 
NULL
;

1537 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
)

1539  
ªgs
->
ªgs_R
[2] =

1540 
	`£À˘
–
ªgs
->
ªgs_R
[4],

1541 (*)
ªadfdp
, (*)
wrôefdp
, (*)
ex˚±fdp
, 
timeouç
);

1544  
ªgs
->
ªgs_R
[2] =

1545 
	`£À˘
–
ªgs
->
ªgs_R
[4],

1546 
ªadfdp
, 
wrôefdp
, 
ex˚±fdp
, 
timeouç
);

1550 i‡(
ªgs
->
ªgs_R
[2] != -1)

1551 
ªgs
->
ªgs_R
[7] = 0;

1555 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1556 
ªgs
->
ªgs_R
[7] = 1;

1560 i‡–
ªgs
->
ªgs_R
[5] != 0)

1561 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1562 &
ªadfd
, (
fd_£t
));

1565 i‡–
ªgs
->
ªgs_R
[6] != 0)

1566 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[6],

1567 &
wrôefd
, (
fd_£t
));

1570 i‡–
ªgs
->
ªgs_R
[7] != 0)

1571 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[7],

1572 &
ex˚±fd
, (
fd_£t
));

1575 i‡–
∑øm5
 != 0)

1576 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
∑øm5
,

1577 &
timeout
, (
timevÆ
));

1582 
SS_SYS_sigvec
:

1584 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1585 
	`w¨n
("syscall: sigvec ignored");

1588 
SS_SYS_sigblock
:

1590 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1591 
	`w¨n
("syscall: sigblock ignored");

1594 
SS_SYS_sig£tmask
:

1596 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1597 
	`w¨n
("syscall: sigsetmask ignored");

1601 
SS_SYS_sig°ack
:

1606 i‡(
ªgs
->
ªgs_R
[5] != 0)

1608 (*
maf
)(
Ród
, 
ªgs
->
ªgs_R
[29]+28, (*)&
ãmp
, 4);

1609 (*
maf
)(
Wrôe
, 
ªgs
->
ªgs_R
[5], (*)&
ãmp
, 4);

1611 
ªgs
->
ªgs_R
[2] =Ñegs->regs_R[7] = 0;

1615 
SS_SYS_gëtimeofday
:

1616 #ifde‡
_MSC_VER


1617 
	`w¨n
("syscall gettimeofday()Çot yet implemented for MSC...");

1618 
ªgs
->
ªgs_R
[7] = 0;

1621 
ss_timevÆ
 
ss_tv
;

1622 
timevÆ
 
tv
, *
tvp
;

1623 
ss_timez⁄e
 
ss_tz
;

1624 
timez⁄e
 
tz
, *
tzp
;

1626 i‡–
ªgs
->
ªgs_R
[4] != 0)

1629 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4],

1630 &
ss_tv
, (
ss_timevÆ
));

1633 
tv
.
tv_£c
 = 
	`MD_SWAPW
(
ss_tv
.
ss_tv_£c
);

1634 
tv
.
tv_u£c
 = 
	`MD_SWAPW
(
ss_tv
.
ss_tv_u£c
);

1635 
tvp
 = &
tv
;

1638 
tvp
 = 
NULL
;

1640 i‡–
ªgs
->
ªgs_R
[5] != 0)

1643 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1644 &
ss_tz
, (
ss_timez⁄e
));

1647 
tz
.
tz_möuãswe°
 = 
	`MD_SWAPW
(
ss_tz
.
ss_tz_möuãswe°
);

1648 
tz
.
tz_d°time
 = 
	`MD_SWAPW
(
ss_tz
.
ss_tz_d°time
);

1649 
tzp
 = &
tz
;

1652 
tzp
 = 
NULL
;

1655  
ªgs
->
ªgs_R
[2] = 
	`gëtimeofday
(
tvp
, 
tzp
);

1658 i‡(
ªgs
->
ªgs_R
[2] != -1)

1659 
ªgs
->
ªgs_R
[7] = 0;

1663 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1664 
ªgs
->
ªgs_R
[7] = 1;

1667 i‡–
ªgs
->
ªgs_R
[4] != 0)

1670 
ss_tv
.
ss_tv_£c
 = 
	`MD_SWAPW
(
tv
.
tv_£c
);

1671 
ss_tv
.
ss_tv_u£c
 = 
	`MD_SWAPW
(
tv
.
tv_u£c
);

1674 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[4],

1675 &
ss_tv
, (
ss_timevÆ
));

1678 i‡–
ªgs
->
ªgs_R
[5] != 0)

1681 
ss_tz
.
ss_tz_möuãswe°
 = 
	`MD_SWAPW
(
tz
.
tz_möuãswe°
);

1682 
ss_tz
.
ss_tz_d°time
 = 
	`MD_SWAPW
(
tz
.
tz_d°time
);

1685 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1686 &
ss_tz
, (
ss_timez⁄e
));

1692 
SS_SYS_gërußge
:

1693 #i‡
	`deföed
(
__svr4__
Ë|| deföed(
__USLC__
Ë|| deföed(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
_AIX
)

1695 
tms
 
tms_buf
;

1696 
ss_rußge
 
rußge
;

1699 i‡(
	`times
(&
tms_buf
) != -1)

1702 
ªgs
->
ªgs_R
[2] = 0;

1703 
ªgs
->
ªgs_R
[7] = 0;

1708 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1709 
ªgs
->
ªgs_R
[7] = 1;

1713 #i‡
	`deföed
(
__svr4__
)

1714 
	`mem£t
(&
rußge
, '\0', (
ss_rußge
));

1716 
	`bzîo
(&
rußge
, (
ss_rußge
));

1720 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
tms_buf
.
tms_utime
/
CLK_TCK
;

1721 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
	`MD_SWAPW
(rusage.ss_ru_utime.ss_tv_sec);

1722 
rußge
.
ss_ru_utime
.
ss_tv_u£c
 = 0;

1723 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 = 
tms_buf
.
tms_°ime
/
CLK_TCK
;

1724 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 = 
	`MD_SWAPW
(rusage.ss_ru_stime.ss_tv_sec);

1725 
rußge
.
ss_ru_°ime
.
ss_tv_u£c
 = 0;

1728 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1729 &
rußge
, (
ss_rußge
));

1731 #ñi‡
	`deföed
(
__unix__
Ë|| deföed(
unix
)

1733 
rußge
 
loˇl_rußge
;

1734 
ss_rußge
 
rußge
;

1737  
ªgs
->
ªgs_R
[2] =

1738 
	`gërußge
–
ªgs
->
ªgs_R
[4], &
loˇl_rußge
);

1741 i‡(
ªgs
->
ªgs_R
[2] != -1)

1742 
ªgs
->
ªgs_R
[7] = 0;

1746 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1747 
ªgs
->
ªgs_R
[7] = 1;

1751 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
loˇl_rußge
.
ru_utime
.
tv_£c
;

1752 
rußge
.
ss_ru_utime
.
ss_tv_u£c
 = 
loˇl_rußge
.
ru_utime
.
tv_u£c
;

1753 
rußge
.
ss_ru_utime
.
ss_tv_£c
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_utime
.
tv_£c
);

1754 
rußge
.
ss_ru_utime
.
ss_tv_u£c
 =

1755 
	`MD_SWAPW
(
loˇl_rußge
.
ru_utime
.
tv_u£c
);

1756 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 = 
loˇl_rußge
.
ru_°ime
.
tv_£c
;

1757 
rußge
.
ss_ru_°ime
.
ss_tv_u£c
 = 
loˇl_rußge
.
ru_°ime
.
tv_u£c
;

1758 
rußge
.
ss_ru_°ime
.
ss_tv_£c
 =

1759 
	`MD_SWAPW
(
loˇl_rußge
.
ru_°ime
.
tv_£c
);

1760 
rußge
.
ss_ru_°ime
.
ss_tv_u£c
 =

1761 
	`MD_SWAPW
(
loˇl_rußge
.
ru_°ime
.
tv_u£c
);

1762 
rußge
.
ss_ru_maxrss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_maxrss
);

1763 
rußge
.
ss_ru_ixrss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_ixrss
);

1764 
rußge
.
ss_ru_idrss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_idrss
);

1765 
rußge
.
ss_ru_i§ss
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_i§ss
);

1766 
rußge
.
ss_ru_möÊt
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_möÊt
);

1767 
rußge
.
ss_ru_majÊt
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_majÊt
);

1768 
rußge
.
ss_ru_nsw≠
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nsw≠
);

1769 
rußge
.
ss_ru_öblock
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_öblock
);

1770 
rußge
.
ss_ru_oublock
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_oublock
);

1771 
rußge
.
ss_ru_msg¢d
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_msg¢d
);

1772 
rußge
.
ss_ru_msgrcv
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_msgrcv
);

1773 
rußge
.
ss_ru_nsig«ls
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nsig«ls
);

1774 
rußge
.
ss_ru_nvcsw
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nvcsw
);

1775 
rußge
.
ss_ru_nivcsw
 = 
	`MD_SWAPW
(
loˇl_rußge
.
ru_nivcsw
);

1778 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1779 &
rußge
, (
ss_rußge
));

1781 #ñi‡
	`deföed
(
__CYGWIN32__
Ë|| deföed(
_MSC_VER
)

1782 
	`w¨n
("syscall: called getrusage()\n");

1783 
ªgs
->
ªgs_R
[7] = 0;

1785 #îr‹ 
No
 
	`gërußge
(Ë
im∂emíèti⁄
!

1789 
SS_SYS_wrôev
:

1790 #ifde‡
_MSC_VER


1791 
	`w¨n
("syscall writev()Çot yet implemented for MSC...");

1792 
ªgs
->
ªgs_R
[7] = 0;

1795 
i
;

1796 *
buf
;

1797 
iovec
 *
iov
;

1800 
iov
 =

1801 (
iovec
 *)
	`mÆloc
–
ªgs
->
ªgs_R
[6]

1802 * (
iovec
));

1803 i‡(!
iov
)

1804 
	`Áèl
("out of virtual memory in SYS_writev");

1807 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1808 
iov
, 
ªgs
->
ªgs_R
[6] * (
iovec
));

1811 
i
=0; i < 
ªgs
->
ªgs_R
[6]; i++)

1813 
iov
[
i
].
iov_ba£
 = (*)
	`MD_SWAPW
(()iov[i].iov_base);

1814 
iov
[
i
].
iov_Àn
 = 
	`MD_SWAPW
(iov[i].iov_len);

1815 i‡(
iov
[
i
].
iov_ba£
 !
NULL
)

1817 
buf
 = (*)
	`ˇŒoc
(
iov
[
i
].
iov_Àn
, ());

1818 i‡(!
buf
)

1819 
	`Áèl
("out of virtual memory in SYS_writev");

1820 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, (
md_addr_t
)
iov
[
i
].
iov_ba£
,

1821 
buf
, 
iov
[
i
].
iov_Àn
);

1822 
iov
[
i
].
iov_ba£
 = 
buf
;

1827  
ªgs
->
ªgs_R
[2] =

1828 
	`wrôev
–
ªgs
->
ªgs_R
[4], 
iov
,Ñegs->regs_R[6]);

1831 i‡(
ªgs
->
ªgs_R
[2] != -1)

1832 
ªgs
->
ªgs_R
[7] = 0;

1836 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1837 
ªgs
->
ªgs_R
[7] = 1;

1841 
i
=0; i < 
ªgs
->
ªgs_R
[6]; i++)

1843 i‡(
iov
[
i
].
iov_ba£
)

1845 
	`‰ì
(
iov
[
i
].
iov_ba£
);

1846 
iov
[
i
].
iov_ba£
 = 
NULL
;

1849 
	`‰ì
(
iov
);

1854 
SS_SYS_utimes
:

1856 
buf
[
MAXBUFSIZE
];

1859 
	`mem_°r˝y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[4], 
buf
);

1861 i‡–
ªgs
->
ªgs_R
[5] == 0)

1863 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
löux
)

1865  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, 
NULL
);

1866 #ñi‡
	`deföed
(
_MSC_VER
)

1868  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, 
NULL
);

1869 #ñi‡
	`deföed
(
__svr4__
Ë|| deföed(
__USLC__
Ë|| deföed(
unix
Ë|| deföed(
_AIX
Ë|| deföed(
__Æpha
)

1870  
ªgs
->
ªgs_R
[2] = 
	`utimes
(
buf
, 
NULL
);

1871 #ñi‡
	`deföed
(
__CYGWIN32__
)

1872 
	`w¨n
("syscall: called utimes()\n");

1874 #îr‹ 
No
 
	`utimes
(Ë
im∂emíèti⁄
!

1879 
ss_timevÆ
 
ss_tvÆ
[2];

1880 #i‚de‡
_MSC_VER


1881 
timevÆ
 
tvÆ
[2];

1885 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1886 
ss_tvÆ
, 2*(
ss_timevÆ
));

1888 #i‚de‡
_MSC_VER


1890 
tvÆ
[0].
tv_£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[0].
ss_tv_£c
);

1891 
tvÆ
[0].
tv_u£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[0].
ss_tv_u£c
);

1892 
tvÆ
[1].
tv_£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[1].
ss_tv_£c
);

1893 
tvÆ
[1].
tv_u£c
 = 
	`MD_SWAPW
(
ss_tvÆ
[1].
ss_tv_u£c
);

1896 #i‡
	`deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__svr4__
)

1899 
utimbuf
 
ubuf
;

1901 
ubuf
.
a˘ime
 = 
tvÆ
[0].
tv_£c
;

1902 
ubuf
.
modtime
 = 
tvÆ
[1].
tv_£c
;

1904  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, &
ubuf
);

1906 #ñi‡
	`deföed
(
_MSC_VER
)

1909 
_utimbuf
 
ubuf
;

1911 
ubuf
.
a˘ime
 = 
ss_tvÆ
[0].
ss_tv_£c
;

1912 
ubuf
.
modtime
 = 
ss_tvÆ
[1].
ss_tv_£c
;

1914  
ªgs
->
ªgs_R
[2] = 
	`utime
(
buf
, &
ubuf
);

1916 #ñi‡
	`deföed
(
__USLC__
Ë|| deföed(
unix
Ë|| deföed(
_AIX
Ë|| deföed(
__Æpha
)

1917  
ªgs
->
ªgs_R
[2] = 
	`utimes
(
buf
, 
tvÆ
);

1918 #ñi‡
	`deföed
(
__CYGWIN32__
)

1919 
	`w¨n
("syscall: called utimes()\n");

1921 #îr‹ 
No
 
	`utimes
(Ë
im∂emíèti⁄
!

1926 i‡(
ªgs
->
ªgs_R
[2] != -1)

1927 
ªgs
->
ªgs_R
[7] = 0;

1931 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1932 
ªgs
->
ªgs_R
[7] = 1;

1937 
SS_SYS_gëæimô
:

1938 
SS_SYS_£ålimô
:

1939 #ifde‡
_MSC_VER


1940 
	`w¨n
("syscall get/setrlimit()Çot yet implemented for MSC...");

1941 
ªgs
->
ªgs_R
[7] = 0;

1942 #ñi‡
	`deföed
(
__CYGWIN32__
)

1943 
	`w¨n
("syscall: called get/setrlimit()\n");

1944 
ªgs
->
ªgs_R
[7] = 0;

1948 
ss_æimô
 
ss_æ
;

1949 
æimô
 
æ
;

1952 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Ród
, 
ªgs
->
ªgs_R
[5],

1953 &
ss_æ
, (
ss_æimô
));

1956 
æ
.
æim_cur
 = 
	`MD_SWAPW
(
ss_æ
.
ss_æim_cur
);

1957 
æ
.
æim_max
 = 
	`MD_SWAPW
(
ss_æ
.
ss_æim_max
);

1960 i‡(
syscode
 =
SS_SYS_gëæimô
)

1961  
ªgs
->
ªgs_R
[2] = 
	`gëæimô
‘egs->ªgs_R[4], &
æ
);

1963  
ªgs
->
ªgs_R
[2] = 
	`£ålimô
‘egs->ªgs_R[4], &
æ
);

1966 i‡(
ªgs
->
ªgs_R
[2] != -1)

1967 
ªgs
->
ªgs_R
[7] = 0;

1971 
ªgs
->
ªgs_R
[2] = 
î∫o
;

1972 
ªgs
->
ªgs_R
[7] = 1;

1976 
ss_æ
.
ss_æim_cur
 = 
	`MD_SWAPW
(
æ
.
æim_cur
);

1977 
ss_æ
.
ss_æim_max
 = 
	`MD_SWAPW
(
æ
.
æim_max
);

1980 
	`mem_bc›y
(
mem_‚
, 
mem
, 
Wrôe
, 
ªgs
->
ªgs_R
[5],

1981 &
ss_æ
, (
ss_æimô
));

1987 
SS_SYS_gëdúíåõs
:

1991 
i
;

1992 *
buf
;

1993 
ba£
;

1995 
buf
 = (*)
	`ˇŒoc
–
ªgs
->
ªgs_R
[6] + 1, ());

1996 i‡(!
buf
)

1997 
	`Áèl
("out of memory in SYS_getdirentries");

2000 
i
=0; i< 
ªgs
->
ªgs_R
[6]; i++)

2001 (*
maf
)(
Ród
, 
ªgs
->
ªgs_R
[5]+
i
,

2002 (*)&
buf
[
i
], 1);

2003 (*
maf
)(
Ród
, 
ªgs
->
ªgs_R
[7], (*)&
ba£
, 4);

2005  
ªgs
->
ªgs_R
[2] =

2006 
	`gëdúíåõs
–
ªgs
->
ªgs_R
[4], 
buf
,

2007  
ªgs
->
ªgs_R
[6], &
ba£
);

2009 i‡(
ªgs
->
ªgs_R
[2] != -1)

2010 
ªgs
->
ªgs_R
[7] = 0;

2013 
ªgs
->
ªgs_R
[2] = 
î∫o
;

2014 
ªgs
->
ªgs_R
[7] = 1;

2018 
i
=0; i< 
ªgs
->
ªgs_R
[6]; i++)

2019 (*
maf
)(
Wrôe
, 
ªgs
->
ªgs_R
[5]+
i
,

2020 (*)&
buf
[
i
], 1);

2021 (*
maf
)(
Wrôe
, 
ªgs
->
ªgs_R
[7], (*)&
ba£
, 4);

2023 
	`‰ì
(
buf
);

2029 
	`∑nic
("övÆid/unim∂emíãd sy°em cÆ»ícou¡îed, codê%d", 
syscode
);

2034 
	}
}

	@version.h

52 #i‡
deföed
(
TARGET_PISA
)

53 
	#VER_TARGET
 "PISA"

	)

54 #ñi‡
deföed
(
TARGET_ALPHA
)

55 
	#VER_TARGET
 "AÕha"

	)

57 #îr‹ 
C™nŸ
 
decode
 
Sim∂eSˇœr
 
èrgë
...

60 
	#VER_MAJOR
 3

	)

61 
	#VER_MINOR
 0

	)

63 
	#VER_UPDATE
 "Augu°, 2003"

	)

	@machine.def

193 
	#NOP_IMPL
 \

196 }

	)

197 
DEFINST
(
NOP
, 0x00,

199 
I¡ALU
, 
F_ICOMP
,

200 
DNA
, DNA, DNA, DNA, DNA)

206 
	#JUMP_IMPL
 \

208 
	`SET_TPC
((
CPC
 & 036000000000Ë| (
TARG
 << 2)); \

209 
	`SET_NPC
((
CPC
 & 036000000000Ë| (
TARG
 << 2)); \

210 }

	)

211 
DEFINST
(
JUMP
, 0x01,

213 
NA
, 
F_CTRL
|
F_UNCOND
|
F_DIRJMP
,

214 
DNA
, DNA, DNA, DNA, DNA)

216 
	#JAL_IMPL
 \

218 
	`SET_TPC
((
CPC
 & 036000000000Ë| (
TARG
 << 2)); \

219 
	`SET_NPC
((
CPC
 & 036000000000Ë| (
TARG
 << 2)); \

220 
	`SET_GPR
(31, 
CPC
 + 8); \

221 }

	)

222 
DEFINST
(
JAL
, 0x02,

224 
I¡ALU
, 
F_CTRL
|
F_UNCOND
|
F_DIRJMP
|
F_CALL
,

225 
DGPR
(31), 
DNA
, DNA, DNA, DNA)

227 
	#JR_IMPL
 \

229 i‡(
	`GPR
(
RS
) & 0x7) \

230 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

232 
	`SET_TPC
(
	`GPR
(
RS
)); \

233 
	`SET_NPC
(
	`GPR
(
RS
)); \

234 }

	)

235 
DEFINST
(
JR
, 0x03,

237 
NA
, 
F_CTRL
|
F_UNCOND
|
F_INDIRJMP
,

238 
DNA
, DNA, 
DGPR
(
RS
), DNA, DNA)

240 
	#JALR_IMPL
 \

242 i‡(
	`GPR
(
RS
) & 0x7) \

243 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

245 
	`SET_GPR
(
RD
, 
CPC
 + 8); \

246 
	`SET_TPC
(
	`GPR
(
RS
)); \

247 
	`SET_NPC
(
	`GPR
(
RS
)); \

248 }

	)

249 
DEFINST
(
JALR
, 0x04,

251 
I¡ALU
, 
F_CTRL
|
F_UNCOND
|
F_INDIRJMP
|
F_CALL
,

252 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DNA, DNA)

254 
	#BEQ_IMPL
 \

256 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

257 i‡(
	`GPR
(
RS
Ë=GPR(
RT
)) \

258 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

259 }

	)

260 
DEFINST
(
BEQ
, 0x05,

262 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
,

263 
DNA
, DNA, 
DGPR
(
RS
), DGPR(
RT
), DNA)

265 
	#BNE_IMPL
 \

267 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

268 i‡(
	`GPR
(
RS
Ë!GPR(
RT
)) \

269 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

270 }

	)

271 
DEFINST
(
BNE
, 0x06,

273 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
,

274 
DNA
, DNA, 
DGPR
(
RS
), DGPR(
RT
), DNA)

276 
	#BLEZ_IMPL
 \

278 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

279 i‡(
	`GPR
(
RS
) <= 0) \

280 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

281 }

	)

282 
DEFINST
(
BLEZ
, 0x07,

284 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
,

285 
DNA
, DNA, 
DGPR
(
RS
), DNA, DNA)

287 
	#BGTZ_IMPL
 \

289 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

290 i‡(
	`GPR
(
RS
) > 0) \

291 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

292 }

	)

293 
DEFINST
(
BGTZ
, 0x08,

295 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
,

296 
DNA
, DNA, 
DGPR
(
RS
), DNA, DNA)

298 
	#BLTZ_IMPL
 \

300 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

301 i‡(
	`GPR
(
RS
) < 0) \

302 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

303 }

	)

304 
DEFINST
(
BLTZ
, 0x09,

306 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
,

307 
DNA
, DNA, 
DGPR
(
RS
), DNA, DNA)

309 
	#BGEZ_IMPL
 \

311 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

312 i‡(
	`GPR
(
RS
) >= 0) \

313 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

314 }

	)

315 
DEFINST
(
BGEZ
, 0x0a,

317 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
,

318 
DNA
, DNA, 
DGPR
(
RS
), DNA, DNA)

320 
	#BC1F_IMPL
 \

322 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

323 i‡(!
FCC
) \

324 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

325 }

	)

326 
DEFINST
(
BC1F
, 0x0b,

328 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
|
F_FPCOND
,

329 
DNA
, DNA, 
DFCC
, DNA, DNA)

331 
	#BC1T_IMPL
 \

333 
	`SET_TPC
(
CPC
 + 8 + (
OFS
 << 2)); \

334 i‡(
FCC
) \

335 
	`SET_NPC
(
CPC
 + 8 + (
OFS
 << 2)); \

336 }

	)

337 
DEFINST
(
BC1T
, 0x0c,

339 
I¡ALU
, 
F_CTRL
|
F_COND
|
F_DIRJMP
|
F_FPCOND
,

340 
DNA
, DNA, 
DFCC
, DNA, DNA)

352 
	#LB_IMPL
 \

354 
sbyã_t
 
_ªsu…
; \

355 
md_Áu…_ty≥
 
_Áu…
; \

357 
_ªsu…
 = 
	`READ_BYTE
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

358 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

359 
	`DECLARE_FAULT
(
_Áu…
); \

360 
	`SET_GPR
(
RT
, (
w‹d_t
)(
sw‹d_t
)
_ªsu…
); \

361 }

	)

362 
DEFINST
(
LB
, 0x20,

364 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

365 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

367 
	#LBU_IMPL
 \

369 
byã_t
 
_ªsu…
; \

370 
md_Áu…_ty≥
 
_Áu…
; \

372 
_ªsu…
 = 
	`READ_BYTE
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

373 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

374 
	`DECLARE_FAULT
(
_Áu…
); \

375 
	`SET_GPR
(
RT
, (
w‹d_t
)
_ªsu…
); \

376 }

	)

377 
DEFINST
(
LBU
, 0x22,

379 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

380 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

382 
	#LH_IMPL
 \

384 
shÆf_t
 
_ªsu…
; \

385 
md_Áu…_ty≥
 
_Áu…
; \

387 
_ªsu…
 = 
	`READ_HALF
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

388 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

389 
	`DECLARE_FAULT
(
_Áu…
); \

390 
	`SET_GPR
(
RT
, (
w‹d_t
)(
sw‹d_t
)
_ªsu…
); \

391 }

	)

392 
DEFINST
(
LH
, 0x24,

394 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

395 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

397 
	#LHU_IMPL
 \

399 
hÆf_t
 
_ªsu…
; \

400 
md_Áu…_ty≥
 
_Áu…
; \

402 
_ªsu…
 = 
	`READ_HALF
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

403 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

404 
	`DECLARE_FAULT
(
_Áu…
); \

405 
	`SET_GPR
(
RT
, (
w‹d_t
)
_ªsu…
); \

406 }

	)

407 
DEFINST
(
LHU
, 0x26,

409 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

410 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

412 
	#LW_IMPL
 \

414 
w‹d_t
 
_ªsu…
; \

415 
md_Áu…_ty≥
 
_Áu…
; \

417 
_ªsu…
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

418 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

419 
	`DECLARE_FAULT
(
_Áu…
); \

420 
	`SET_GPR
(
RT
, 
_ªsu…
); \

421 }

	)

422 
DEFINST
(
LW
, 0x28,

424 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

425 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

427 
	#DLW_IMPL
 \

429 
w‹d_t
 
_ªsu…_hi
, 
_ªsu…_lo
; \

430 
md_Áu…_ty≥
 
_Áu…
; \

432 i‡((
RT
) & 01) \

433 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

435 
_ªsu…_hi
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

436 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

437 
	`DECLARE_FAULT
(
_Áu…
); \

438 
_ªsu…_lo
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ 
OFS
 + 4, 
_Áu…
); \

439 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

440 
	`DECLARE_FAULT
(
_Áu…
); \

442 
	`SET_GPR
(
RT
, 
_ªsu…_hi
); \

443 
	`SET_GPR
((
RT
Ë+ 1, 
_ªsu…_lo
); \

444 }

	)

445 
DEFINST
(
DLW
, 0x29,

447 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

448 
DGPR_D
(
RT
), 
DNA
, DNA, 
DGPR
(
BS
), DNA)

450 
	#L_S_IMPL
 \

452 
w‹d_t
 
_ªsu…
; \

453 
md_Áu…_ty≥
 
_Áu…
; \

455 
_ªsu…
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

456 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

457 
	`DECLARE_FAULT
(
_Áu…
); \

458 
	`SET_FPR_L
(
FT
, 
_ªsu…
); \

459 }

	)

460 
DEFINST
(
L_S
, 0x2a,

462 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

463 
DFPR_L
(
FT
), 
DNA
, DNA, 
DGPR
(
BS
), DNA)

465 
	#L_D_IMPL
 \

467 
w‹d_t
 
_ªsu…_hi
, 
_ªsu…_lo
; \

468 
md_Áu…_ty≥
 
_Áu…
; \

470 i‡((
FT
) & 01) \

471 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

473 
_ªsu…_hi
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

474 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

475 
	`DECLARE_FAULT
(
_Áu…
); \

476 
_ªsu…_lo
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ 
OFS
 + 4, 
_Áu…
); \

477 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

478 
	`DECLARE_FAULT
(
_Áu…
); \

480 
	`SET_FPR_L
(
FT
, 
_ªsu…_hi
); \

481 
	`SET_FPR_L
((
FT
Ë+ 1, 
_ªsu…_lo
); \

482 }

	)

484 
DEFINST
(
L_D
, 0x2b,

486 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

487 
DFPR_D
(
FT
), 
DNA
, DNA, 
DGPR
(
BS
), DNA)

489 #i‡(!
deföed
(
MD_CROSS_ENDIAN
Ë&& deföed(
BYTES_BIG_ENDIAN
)Ë|| (deföed(MD_CROSS_ENDIANË&& deföed(
BYTES_LITTLE_ENDIAN
))

490 
	#LWL_IMPL
 \

492 
md_addr_t
 
_ãmp_bs
; \

493 
w‹d_t
 
_Ã_ãmp
; \

494 
md_Áu…_ty≥
 
_Áu…
; \

497 
_ãmp_bs
 = 
	`GPR
(
BS
); \

498 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WL_BASE
(
_ãmp_bs
 + 
OFS
), 
_Áu…
); \

499 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

500 
	`DECLARE_FAULT
(
_Áu…
); \

502 
	`SET_GPR
(
RT
, ((
	`GPR
(RTË& 
	`WL_PROT_MASK1
(
_ãmp_bs
 + 
OFS
)) \

503 | ((
_Ã_ãmp
 << (8 * 
	`WL_SIZE
(
_ãmp_bs
 + 
OFS
))) \

504 & ~
	`WL_PROT_MASK1
(
_ãmp_bs
 + 
OFS
)))); \

505 }

	)

506 
DEFINST
(
LWL
, 0x2c,

508 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

509 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

511 
	#LWR_IMPL
 \

513 
md_addr_t
 
_ãmp_bs
; \

514 
w‹d_t
 
_Ã_ãmp
; \

515 
md_Áu…_ty≥
 
_Áu…
; \

518 
_ãmp_bs
 = 
	`GPR
(
BS
); \

519 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WR_BASE
(
_ãmp_bs
 + 
OFS
), 
_Áu…
); \

520 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

521 
	`DECLARE_FAULT
(
_Áu…
); \

523 
	`SET_GPR
(
RT
, ((
	`GPR
(RTË& ~
	`WR_PROT_MASK1
(
_ãmp_bs
 + 
OFS
)) \

524 | ((
_Ã_ãmp
 >> (8 * (4 - 
	`WR_SIZE
(
_ãmp_bs
 + 
OFS
)))) \

525 & 
	`WR_PROT_MASK1
(
_ãmp_bs
 + 
OFS
)))); \

526 }

	)

527 
DEFINST
(
LWR
, 0x2d,

529 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

530 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

532 
	#LWL_IMPL
 \

534 
md_addr_t
 
_ãmp_bs
; \

535 
w‹d_t
 
_Ã_ãmp
; \

536 
md_Áu…_ty≥
 
_Áu…
; \

539 
_ãmp_bs
 = 
	`GPR
(
BS
); \

540 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WL_BASE
(
_ãmp_bs
 + 
OFS
), 
_Áu…
); \

541 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

542 
	`DECLARE_FAULT
(
_Áu…
); \

544 
	`SET_GPR
(
RT
, ((
	`GPR
(RTË& 
	`WR_PROT_MASK1
(
_ãmp_bs
 + 
OFS
)) \

545 | ((
_Ã_ãmp
 << (8 * (
	`WL_SIZE
(
_ãmp_bs
 + 
OFS
)-1))) \

546 & ~
	`WR_PROT_MASK1
(
_ãmp_bs
 + 
OFS
)))); \

547 }

	)

548 
DEFINST
(
LWL
, 0x2c,

550 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

551 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

553 
	#LWR_IMPL
 \

555 
md_addr_t
 
_ãmp_bs
; \

556 
w‹d_t
 
_Ã_ãmp
; \

557 
md_Áu…_ty≥
 
_Áu…
; \

560 
_ãmp_bs
 = 
	`GPR
(
BS
); \

561 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WR_BASE
(
_ãmp_bs
 + 
OFS
), 
_Áu…
); \

562 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

563 
	`DECLARE_FAULT
(
_Áu…
); \

565 
	`SET_GPR
(
RT
, ((
	`GPR
(RTË& ~
	`WL_PROT_MASK2
(
_ãmp_bs
 + 
OFS
)) \

566 | ((
_Ã_ãmp
 >> (8 * (
	`WR_SIZE
(
_ãmp_bs
 + 
OFS
)-1))) \

567 & 
	`WL_PROT_MASK2
(
_ãmp_bs
 + 
OFS
)))); \

568 }

	)

569 
DEFINST
(
LWR
, 0x2d,

571 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

572 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

576 
	#LWL_IMPL
 \

578 
md_addr_t
 
_ãmp_bs
; \

579 
w‹d_t
 
_Ã_ãmp
; \

580 
md_Áu…_ty≥
 
_Áu…
; \

583 
_ãmp_bs
 = 
	`GPR
(
BS
); \

584 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WL_BASE
(
_ãmp_bs
 + 
OFS
), 
_Áu…
); \

585 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

586 
	`DECLARE_FAULT
(
_Áu…
); \

588 
	`SET_GPR
(
RT
, ((
	`GPR
(RTË& 
	`WL_PROT_MASK
(
_ãmp_bs
 + 
OFS
)) | \

589 (
_Ã_ãmp
 & ~
	`WL_PROT_MASK
(
_ãmp_bs
 + 
OFS
)))); \

590 }

	)

591 
DEFINST
(
LWL
, 0x2c,

593 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

594 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

596 
DEFINST
(
LWL
, 0x2c,

598 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

599 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA,

600 (
ss_Ã_ãmp
 = 
READ_WORD
(
WL_BASE
(
GPR
(
BS
Ë+ 
OFS
)),

601 
SET_GPR
(
RT
, ((
GPR
(RTË& 
WL_PROT_MASK1
(GPR(
BS
Ë+ 
OFS
)) |

602 ((
ss_Ã_ãmp
 << (8 * 
WL_SIZE
(
GPR
(
BS
Ë+ 
OFS
)))

603 & ~
WL_PROT_MASK1
(
GPR
(
BS
Ë+ 
OFS
))))))

607 
	#LWR_IMPL
 \

609 
md_addr_t
 
_ãmp_bs
; \

610 
w‹d_t
 
_Ã_ãmp
; \

611 
md_Áu…_ty≥
 
_Áu…
; \

614 
_ãmp_bs
 = 
	`GPR
(
BS
); \

615 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WR_BASE
(
_ãmp_bs
 + 
OFS
), 
_Áu…
); \

616 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

617 
	`DECLARE_FAULT
(
_Áu…
); \

619 
	`SET_GPR
(
RT
, ((
	`GPR
(RTË& 
	`WR_PROT_MASK
(
_ãmp_bs
 + 
OFS
)) | \

620 (
_Ã_ãmp
 & ~
	`WR_PROT_MASK
(
_ãmp_bs
 + 
OFS
)))); \

621 }

	)

622 
DEFINST
(
LWR
, 0x2d,

624 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

625 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA)

627 
DEFINST
(
LWR
, 0x2d,

629 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_DISP
,

630 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), DNA,

631 (
ss_Ã_ãmp
 = 
READ_WORD
(
WR_BASE
(
GPR
(
BS
Ë+ 
OFS
)),

632 
SET_GPR
(
RT
, ((
GPR
(RTË& ~
WR_PROT_MASK1
(GPR(
BS
Ë+ 
OFS
)) |

633 ((
ss_Ã_ãmp
 >> (8 * (4 - 
WR_SIZE
(
GPR
(
BS
Ë+ 
OFS
))))

634 & 
WR_PROT_MASK1
(
GPR
(
BS
Ë+ 
OFS
))))))

637 
	#SB_IMPL
 \

639 
byã_t
 
_§c
; \

640 
md_Áu…_ty≥
 
_Áu…
; \

642 
_§c
 = (
byã_t
)(
w‹d_t
)
	`GPR
(
RT
); \

643 
	`WRITE_BYTE
(
_§c
, 
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

644 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

645 
	`DECLARE_FAULT
(
_Áu…
); \

646 }

	)

647 
DEFINST
(
SB
, 0x30,

649 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

650 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

652 
	#SH_IMPL
 \

654 
hÆf_t
 
_§c
; \

655 
md_Áu…_ty≥
 
_Áu…
; \

657 
_§c
 = (
hÆf_t
)(
w‹d_t
)
	`GPR
(
RT
); \

658 
	`WRITE_HALF
(
_§c
, 
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

659 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

660 
	`DECLARE_FAULT
(
_Áu…
); \

661 }

	)

662 
DEFINST
(
SH
, 0x32,

664 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

665 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

667 
	#SW_IMPL
 \

669 
w‹d_t
 
_§c
; \

670 
md_Áu…_ty≥
 
_Áu…
; \

672 
_§c
 = (
w‹d_t
)
	`GPR
(
RT
); \

673 
	`WRITE_WORD
(
_§c
, 
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

674 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

675 
	`DECLARE_FAULT
(
_Áu…
); \

676 }

	)

677 
DEFINST
(
SW
, 0x34,

679 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

680 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

683 
	#DSW_IMPL
 \

685 
md_Áu…_ty≥
 
_Áu…
; \

687 i‡((
RT
) & 01) \

688 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

690 
	`WRITE_WORD
(
	`GPR
(
RT
), GPR(
BS
Ë+ 
OFS
, 
_Áu…
); \

691 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

692 
	`DECLARE_FAULT
(
_Áu…
); \

693 
	`WRITE_WORD
(
	`GPR
((
RT
Ë+ 1), GPR(
BS
Ë+ 
OFS
 + 4, 
_Áu…
); \

694 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

695 
	`DECLARE_FAULT
(
_Áu…
); \

696 }

	)

697 
DEFINST
(
DSW
, 0x35,

699 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

700 
DNA
, DNA, 
DGPR_D
(
RT
), 
DGPR
(
BS
), DNA)

703 
	#DSZ_IMPL
 \

705 
md_Áu…_ty≥
 
_Áu…
; \

707 
	`WRITE_WORD
(
	`GPR
(0), GPR(
BS
Ë+ 
OFS
, 
_Áu…
); \

708 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

709 
	`DECLARE_FAULT
(
_Áu…
); \

710 
	`WRITE_WORD
(
	`GPR
(0), GPR(
BS
Ë+ 
OFS
 + 4, 
_Áu…
); \

711 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

712 
	`DECLARE_FAULT
(
_Áu…
); \

713 }

	)

714 
DEFINST
(
DSZ
, 0x38,

716 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

717 
DNA
, DNA, DNA, 
DGPR
(
BS
), DNA)

719 
	#S_S_IMPL
 \

721 
md_Áu…_ty≥
 
_Áu…
; \

723 
	`WRITE_WORD
(
	`FPR_L
(
FT
), 
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

724 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

725 
	`DECLARE_FAULT
(
_Áu…
); \

726 }

	)

727 
DEFINST
(
S_S
, 0x36,

729 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

730 
DNA
, DNA, 
DFPR_L
(
FT
), 
DGPR
(
BS
), DNA)

733 
	#S_D_IMPL
 \

735 
md_Áu…_ty≥
 
_Áu…
; \

737 i‡((
FT
) & 01) \

738 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

740 
	`WRITE_WORD
(
	`FPR_L
(
FT
), 
	`GPR
(
BS
Ë+ 
OFS
, 
_Áu…
); \

741 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

742 
	`DECLARE_FAULT
(
_Áu…
); \

743 
	`WRITE_WORD
(
	`FPR_L
((
FT
)+1), 
	`GPR
(
BS
Ë+ 
OFS
 + 4, 
_Áu…
); \

744 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

745 
	`DECLARE_FAULT
(
_Áu…
); \

746 }

	)

747 
DEFINST
(
S_D
, 0x37,

749 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

750 
DNA
, DNA, 
DFPR_D
(
FT
), 
DGPR
(
BS
), DNA)

752 #i‡(!
deföed
(
MD_CROSS_ENDIAN
Ë&& deföed(
BYTES_BIG_ENDIAN
)Ë|| (deföed(MD_CROSS_ENDIANË&& deföed(
BYTES_LITTLE_ENDIAN
))

753 
	#SWL_IMPL
 \

755 
w‹d_t
 
_Ã_ãmp
; \

756 
md_Áu…_ty≥
 
_Áu…
; \

758 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WL_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

759 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

760 
	`DECLARE_FAULT
(
_Áu…
); \

762 
_Ã_ãmp
 = (((
	`GPR
(
RT
Ë>> (8 * 
	`WL_SIZE
(GPR(
BS
Ë+ 
OFS
))) \

763 & 
	`WL_PROT_MASK2
(
	`GPR
(
BS
Ë+ 
OFS
)) \

764 | (
_Ã_ãmp
 & ~
	`WL_PROT_MASK2
(
	`GPR
(
BS
Ë+ 
OFS
))); \

765 
	`WRITE_WORD
(
_Ã_ãmp
, 
	`WL_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

766 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

767 
	`DECLARE_FAULT
(
_Áu…
); \

768 }

	)

769 
DEFINST
(
SWL
, 0x39,

771 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

772 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

774 
	#SWR_IMPL
 \

776 
w‹d_t
 
_Ã_ãmp
; \

777 
md_Áu…_ty≥
 
_Áu…
; \

779 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WR_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

780 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

781 
	`DECLARE_FAULT
(
_Áu…
); \

783 
_Ã_ãmp
 = (((
	`GPR
(
RT
Ë<< (8 * (4 - 
	`WR_SIZE
(GPR(
BS
Ë+ 
OFS
)))) \

784 & ~
	`WR_PROT_MASK2
(
	`GPR
(
BS
Ë+ 
OFS
)) \

785 | (
_Ã_ãmp
 & 
	`WR_PROT_MASK2
(
	`GPR
(
BS
Ë+ 
OFS
))); \

786 
	`WRITE_WORD
(
_Ã_ãmp
, 
	`WR_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

787 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

788 
	`DECLARE_FAULT
(
_Áu…
); \

789 }

	)

790 
DEFINST
(
SWR
, 0x3a,

792 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

793 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

795 
	#SWL_IMPL
 \

797 
w‹d_t
 
_Ã_ãmp
; \

798 
md_Áu…_ty≥
 
_Áu…
; \

800 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WL_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

801 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

802 
	`DECLARE_FAULT
(
_Áu…
); \

804 
_Ã_ãmp
 = (((
	`GPR
(
RT
Ë>> (8 * (4 - 
	`WR_SIZE
(GPR(
BS
Ë+ 
OFS
)))) \

805 & 
	`WR_PROT_MASK2
(
	`GPR
(
BS
Ë+ 
OFS
)) \

806 | (
_Ã_ãmp
 & ~
	`WR_PROT_MASK2
(
	`GPR
(
BS
Ë+ 
OFS
))); \

807 
	`WRITE_WORD
(
_Ã_ãmp
, 
	`WL_BASE
(
	`GPR
(
BS
)+
OFS
), 
_Áu…
); \

808 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

809 
	`DECLARE_FAULT
(
_Áu…
); \

810 }

	)

811 
DEFINST
(
SWL
, 0x39,

813 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

814 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

816 
	#SWR_IMPL
 \

818 
w‹d_t
 
_Ã_ãmp
; \

819 
md_Áu…_ty≥
 
_Áu…
; \

821 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WR_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

822 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

823 
	`DECLARE_FAULT
(
_Áu…
); \

825 
_Ã_ãmp
 = (((
	`GPR
(
RT
Ë<< (8 * (4 - 
	`WL_SIZE
(GPR(
BS
Ë+ 
OFS
)))) \

826 & ~
	`WL_PROT_MASK1
(
	`GPR
(
BS
Ë+ 
OFS
)) \

827 | (
_Ã_ãmp
 & 
	`WL_PROT_MASK1
(
	`GPR
(
BS
Ë+ 
OFS
))); \

828 
	`WRITE_WORD
(
_Ã_ãmp
, 
	`WR_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

829 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

830 
	`DECLARE_FAULT
(
_Áu…
); \

831 }

	)

832 
DEFINST
(
SWR
, 0x3a,

834 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

835 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

839 
	#SWL_IMPL
 \

841 
w‹d_t
 
_Ã_ãmp
; \

842 
md_Áu…_ty≥
 
_Áu…
; \

844 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WL_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

845 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

846 
	`DECLARE_FAULT
(
_Áu…
); \

848 
_Ã_ãmp
 = ((
	`GPR
(
RT
Ë& ~
	`WL_PROT_MASK
(GPR(
BS
Ë+ 
OFS
)) | \

849 (
_Ã_ãmp
 & 
	`WL_PROT_MASK
(
	`GPR
(
BS
Ë+ 
OFS
))); \

850 
	`WRITE_WORD
(
_Ã_ãmp
, 
	`WL_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

851 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

852 
	`DECLARE_FAULT
(
_Áu…
); \

853 }

	)

854 
DEFINST
(
SWL
, 0x39,

856 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

857 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

859 
DEFINST
(
SWL
, 0x39,

861 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

862 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA,

863 (
ss_Ã_ãmp
 = 
READ_WORD
(
WL_BASE
(
GPR
(
BS
Ë+ 
OFS
)),

864 
ss_Ã_ãmp
 = (((
GPR
(
RT
Ë>> (8 * 
WL_SIZE
(GPR(
BS
Ë+ 
OFS
)))

865 & 
WL_PROT_MASK2
(
GPR
(
BS
Ë+ 
OFS
)) |

866 (
ss_Ã_ãmp
 & ~
WL_PROT_MASK2
(
GPR
(
BS
Ë+ 
OFS
))),

867 
WRITE_WORD
(
ss_Ã_ãmp
, 
WL_BASE
(
GPR
(
BS
Ë+ 
OFS
))))

871 
	#SWR_IMPL
 \

873 
w‹d_t
 
_Ã_ãmp
; \

874 
md_Áu…_ty≥
 
_Áu…
; \

876 
_Ã_ãmp
 = 
	`READ_WORD
(
	`WR_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

877 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

878 
	`DECLARE_FAULT
(
_Áu…
); \

880 
_Ã_ãmp
 = ((
	`GPR
(
RT
Ë& ~
	`WR_PROT_MASK
(GPR(
BS
Ë+ 
OFS
)) | \

881 (
_Ã_ãmp
 & 
	`WR_PROT_MASK
(
	`GPR
(
BS
Ë+ 
OFS
))); \

882 
	`WRITE_WORD
(
_Ã_ãmp
, 
	`WR_BASE
(
	`GPR
(
BS
Ë+ 
OFS
), 
_Áu…
); \

883 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

884 
	`DECLARE_FAULT
(
_Áu…
); \

885 }

	)

886 
DEFINST
(
SWR
, 0x3a,

888 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

889 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA)

891 
DEFINST
(
SWR
, 0x3a,

893 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_DISP
,

894 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), DNA,

895 (
ss_Ã_ãmp
 = 
READ_WORD
(
WR_BASE
(
GPR
(
BS
)+
OFS
)),

896 
ss_Ã_ãmp
 = (((
GPR
(
RT
Ë<< (8 * (4 - 
WR_SIZE
(GPR(
BS
Ë+ 
OFS
))))

897 & ~
WR_PROT_MASK2
(
GPR
(
BS
)+
OFS
)) |

898 (
ss_Ã_ãmp
 & 
WR_PROT_MASK2
(
GPR
(
BS
)+
OFS
))),

899 
WRITE_WORD
(
ss_Ã_ãmp
, 
WR_BASE
(
GPR
(
BS
)+
OFS
))))

904 
	#LB_RR_IMPL
 \

906 
sbyã_t
 
_ªsu…
; \

907 
md_Áu…_ty≥
 
_Áu…
; \

909 
_ªsu…
 = 
	`READ_BYTE
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

910 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

911 
	`DECLARE_FAULT
(
_Áu…
); \

913 
	`SET_GPR
(
RT
, (
w‹d_t
)(
sw‹d_t
)
_ªsu…
); \

914 }

	)

915 
DEFINST
(
LB_RR
, 0xc0,

917 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

918 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), 
	$DGPR
(
RD
))

920 
	#LBU_RR_IMPL
 \

922 
byã_t
 
_ªsu…
; \

923 
md_Áu…_ty≥
 
_Áu…
; \

925 
_ªsu…
 = 
	`READ_BYTE
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

926 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

927 
	`DECLARE_FAULT
(
_Áu…
); \

929 
	`SET_GPR
(
RT
, (
w‹d_t
)
_ªsu…
); \

930 
	}

	)
}

931 
DEFINST
(
LBU_RR
, 0xc1,

933 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

934 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), 
	$DGPR
(
RD
))

936 
	#LH_RR_IMPL
 \

938 
shÆf_t
 
_ªsu…
; \

939 
md_Áu…_ty≥
 
_Áu…
; \

941 
_ªsu…
 = 
	`READ_HALF
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

942 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

943 
	`DECLARE_FAULT
(
_Áu…
); \

945 
	`SET_GPR
(
RT
, (
w‹d_t
)(
sw‹d_t
)
_ªsu…
); \

946 
	}

	)
}

947 
DEFINST
(
LH_RR
, 0xc2,

949 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

950 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), 
	$DGPR
(
RD
))

952 
	#LHU_RR_IMPL
 \

954 
hÆf_t
 
_ªsu…
; \

955 
md_Áu…_ty≥
 
_Áu…
; \

957 
_ªsu…
 = 
	`READ_HALF
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

958 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

959 
	`DECLARE_FAULT
(
_Áu…
); \

961 
	`SET_GPR
(
RT
, (
w‹d_t
)
_ªsu…
); \

962 
	}

	)
}

963 
DEFINST
(
LHU_RR
, 0xc3,

965 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

966 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), 
	$DGPR
(
RD
))

968 
	#LW_RR_IMPL
 \

970 
w‹d_t
 
_ªsu…
; \

971 
md_Áu…_ty≥
 
_Áu…
; \

973 
_ªsu…
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

974 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

975 
	`DECLARE_FAULT
(
_Áu…
); \

977 
	`SET_GPR
(
RT
, 
_ªsu…
); \

978 
	}

	)
}

979 
DEFINST
(
LW_RR
, 0xc4,

981 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

982 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), 
	$DGPR
(
RD
))

984 
	#DLW_RR_IMPL
 \

986 
w‹d_t
 
_ªsu…_hi
, 
_ªsu…_lo
; \

987 
md_Áu…_ty≥
 
_Áu…
; \

989 i‡((
RT
) & 01) \

990 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
) \

992 
_ªsu…_hi
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

993 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

994 
	`DECLARE_FAULT
(
_Áu…
); \

995 
_ªsu…_lo
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

996 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

997 
	`DECLARE_FAULT
(
_Áu…
); \

999 
	`SET_GPR
(
RT
, 
_ªsu…_hi
); \

1000 
	`SET_GPR
((
RT
Ë+ 1, 
_ªsu…_lo
); \

1001 
	}

	)
}

1002 
DEFINST
(
DLW_RR
, 0xce,

1004 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

1005 
DGPR_D
(
RT
), 
DNA
, DNA, 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1007 
	#L_S_RR_IMPL
 \

1009 
w‹d_t
 
_ªsu…
; \

1010 
md_Áu…_ty≥
 
_Áu…
; \

1012 
_ªsu…
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1013 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1014 
	`DECLARE_FAULT
(
_Áu…
); \

1016 
	`SET_FPR_L
(
FT
, 
_ªsu…
); \

1017 
	}

	)
}

1018 
DEFINST
(
L_S_RR
, 0xc5,

1020 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

1021 
DFPR_L
(
FT
), 
DNA
, DNA, 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1023 
	#L_D_RR_IMPL
 \

1025 
w‹d_t
 
_ªsu…_hi
, 
_ªsu…_lo
; \

1026 
md_Áu…_ty≥
 
_Áu…
; \

1028 i‡((
FT
) & 01) \

1029 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1031 
_ªsu…_hi
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1032 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1033 
	`DECLARE_FAULT
(
_Áu…
); \

1034 
_ªsu…_lo
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1035 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1036 
	`DECLARE_FAULT
(
_Áu…
); \

1038 
	`SET_FPR_L
(
FT
, 
_ªsu…_hi
); \

1039 
	`SET_FPR_L
((
FT
Ë+ 1, 
_ªsu…_lo
); \

1040 
	}

	)
}

1041 
DEFINST
(
L_D_RR
, 0xcf,

1043 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

1044 
DFPR_D
(
FT
), 
DNA
, DNA, 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1046 
	#SB_RR_IMPL
 \

1048 
byã_t
 
_§c
; \

1049 
md_Áu…_ty≥
 
_Áu…
; \

1051 
_§c
 = (
byã_t
)(
w‹d_t
)
	`GPR
(
RT
); \

1052 
	`WRITE_BYTE
(
_§c
, 
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1053 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1054 
	`DECLARE_FAULT
(
_Áu…
); \

1055 
	}

	)
}

1056 
DEFINST
(
SB_RR
, 0xc6,

1058 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1059 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), 
	$DGPR
(
RD
))

1061 
	#SH_RR_IMPL
 \

1063 
hÆf_t
 
_§c
; \

1064 
md_Áu…_ty≥
 
_Áu…
; \

1066 
_§c
 = (
hÆf_t
)(
w‹d_t
)
	`GPR
(
RT
); \

1067 
	`WRITE_HALF
(
_§c
, 
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1068 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1069 
	`DECLARE_FAULT
(
_Áu…
); \

1070 
	}

	)
}

1071 
DEFINST
(
SH_RR
, 0xc7,

1073 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1074 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), 
	$DGPR
(
RD
))

1076 
	#SW_RR_IMPL
 \

1078 
w‹d_t
 
_§c
; \

1079 
md_Áu…_ty≥
 
_Áu…
; \

1081 
_§c
 = (
w‹d_t
)
	`GPR
(
RT
); \

1082 
	`WRITE_WORD
(
_§c
, 
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1083 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1084 
	`DECLARE_FAULT
(
_Áu…
); \

1085 
	}

	)
}

1086 
DEFINST
(
SW_RR
, 0xc8,

1088 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1089 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), 
	$DGPR
(
RD
))

1092 
	#DSW_RR_IMPL
 \

1094 
md_Áu…_ty≥
 
_Áu…
; \

1096 i‡((
RT
) & 01) \

1097 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1099 
	`WRITE_WORD
(
	`GPR
(
RT
), GPR(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1100 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1101 
	`DECLARE_FAULT
(
_Áu…
); \

1102 
	`WRITE_WORD
(
	`GPR
((
RT
)+1), GPR(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1103 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1104 
	`DECLARE_FAULT
(
_Áu…
); \

1105 
	}

	)
}

1106 
DEFINST
(
DSW_RR
, 0xd0,

1108 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1109 
DNA
, DNA, 
DGPR_D
(
RT
), 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1112 
	#DSZ_RR_IMPL
 \

1114 
md_Áu…_ty≥
 
_Áu…
; \

1116 
	`WRITE_WORD
(
	`GPR
(0), GPR(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1117 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1118 
	`DECLARE_FAULT
(
_Áu…
); \

1119 
	`WRITE_WORD
(
	`GPR
(0), GPR(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1120 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1121 
	`DECLARE_FAULT
(
_Áu…
); \

1122 
	}

	)
}

1123 
DEFINST
(
DSZ_RR
, 0xd1,

1125 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1126 
DNA
, DNA, DNA, 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1128 
	#S_S_RR_IMPL
 \

1130 
md_Áu…_ty≥
 
_Áu…
; \

1132 
	`WRITE_WORD
(
	`FPR_L
(
FT
), 
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1133 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1134 
	`DECLARE_FAULT
(
_Áu…
); \

1135 
	}

	)
}

1136 
DEFINST
(
S_S_RR
, 0xc9,

1138 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1139 
DNA
, DNA, 
DFPR_L
(
FT
), 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1142 
	#S_D_RR_IMPL
 \

1144 
md_Áu…_ty≥
 
_Áu…
; \

1146 i‡((
FT
) & 01) \

1147 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1149 
	`WRITE_WORD
(
	`FPR_L
(
FT
), 
	`GPR
(
BS
Ë+ GPR(
RD
), 
_Áu…
); \

1150 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1151 
	`DECLARE_FAULT
(
_Áu…
); \

1152 
	`WRITE_WORD
(
	`FPR_L
((
FT
)+1), 
	`GPR
(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1153 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1154 
	`DECLARE_FAULT
(
_Áu…
); \

1155 
	}

	)
}

1156 
DEFINST
(
S_D_RR
, 0xd2,

1158 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1159 
DNA
, DNA, 
DFPR_D
(
FT
), 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1164 
	#L_S_RR_R2_IMPL
 \

1166 
w‹d_t
 
_ªsu…
; \

1167 
md_Áu…_ty≥
 
_Áu…
; \

1169 
_ªsu…
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1170 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1171 
	`DECLARE_FAULT
(
_Áu…
); \

1173 
	`SET_FPR_L
(
FT
, 
_ªsu…
); \

1174 
	}

	)
}

1175 
DEFINST
(
L_S_RR_R2
, 0xca,

1177 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

1178 
DFPR_L
(
FT
), 
DNA
, DNA, 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1182 
	#S_S_RR_R2_IMPL
 \

1184 
md_Áu…_ty≥
 
_Áu…
; \

1186 
	`WRITE_WORD
(
	`FPR_L
(
FT
), 
	`GPR
(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1187 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1188 
	`DECLARE_FAULT
(
_Áu…
); \

1189 
	}

	)
}

1190 
DEFINST
(
S_S_RR_R2
, 0xcb,

1192 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1193 
DNA
, DNA, 
DFPR_L
(
FT
), 
DGPR
(
BS
), 
	$DGPR
(
RD
))

1196 
	#LW_RR_R2_IMPL
 \

1198 
w‹d_t
 
_ªsu…
; \

1199 
md_Áu…_ty≥
 
_Áu…
; \

1201 
_ªsu…
 = 
	`READ_WORD
(
	`GPR
(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1202 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1203 
	`DECLARE_FAULT
(
_Áu…
); \

1205 
	`SET_GPR
(
RT
, 
_ªsu…
); \

1206 
	}

	)
}

1207 
DEFINST
(
LW_RR_R2
, 0xcc,

1209 
RdP‹t
, 
F_MEM
|
F_LOAD
|
F_RR
,

1210 
DGPR
(
RT
), 
DNA
, DNA, DGPR(
BS
), 
	$DGPR
(
RD
))

1213 
	#SW_RR_R2_IMPL
 \

1215 
md_Áu…_ty≥
 
_Áu…
; \

1217 
	`WRITE_WORD
(
	`GPR
(
RT
), GPR(
BS
Ë+ GPR(
RD
Ë+ 4, 
_Áu…
); \

1218 i‡(
_Áu…
 !
md_Áu…_n⁄e
) \

1219 
	`DECLARE_FAULT
(
_Áu…
); \

1220 
	}

	)
}

1221 
DEFINST
(
SW_RR_R2
, 0xcd,

1223 
WrP‹t
, 
F_MEM
|
F_STORE
|
F_RR
,

1224 
DNA
, DNA, 
DGPR
(
RT
), DGPR(
BS
), 
	$DGPR
(
RD
))

1231 
	#ADD_IMPL
 \

1233 i‡(
	`OVER
(
	`GPR
(
RS
), GPR(
RT
))) \

1234 
	`DECLARE_FAULT
(
md_Áu…_ovîÊow
); \

1236 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë+ GPR(
RT
)); \

1237 
	}

	)
}

1238 
DEFINST
(
ADD
, 0x40,

1240 
I¡ALU
, 
F_ICOMP
,

1241 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1243 
	#ADDI_IMPL
 \

1245 i‡(
	`OVER
(
	`GPR
(
RS
), 
IMM
)) \

1246 
	`DECLARE_FAULT
(
md_Áu…_ovîÊow
); \

1248 
	`SET_GPR
(
RT
, 
	`GPR
(
RS
Ë+ 
IMM
); \

1249 }

	)

1250 
DEFINST
(
ADDI
, 0x41,

1252 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1253 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1255 
	#ADDU_IMPL
 \

1257 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë+ GPR(
RT
)); \

1258 }

	)

1259 
DEFINST
(
ADDU
, 0x42,

1261 
I¡ALU
, 
F_ICOMP
,

1262 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1264 
	#ADDIU_IMPL
 \

1266 
	`SET_GPR
(
RT
, 
	`GPR
(
RS
Ë+ 
IMM
); \

1267 }

	)

1268 
DEFINST
(
ADDIU
, 0x43,

1270 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1271 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1273 
	#SUB_IMPL
 \

1275 i‡(
	`UNDER
(
	`GPR
(
RS
), GPR(
RT
))) \

1276 
	`DECLARE_FAULT
(
md_Áu…_ovîÊow
); \

1278 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë- GPR(
RT
)); \

1279 }

	)

1280 
DEFINST
(
SUB
, 0x44,

1282 
I¡ALU
, 
F_ICOMP
,

1283 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1285 
	#SUBU_IMPL
 \

1287 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë- GPR(
RT
)); \

1288 }

	)

1289 
DEFINST
(
SUBU
, 0x45,

1291 
I¡ALU
, 
F_ICOMP
,

1292 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1294 
	#MULT_IMPL
 \

1296 
boﬁ_t
 
_sign1
, 
_sign2
; \

1297 
_i
; \

1298 
sw‹d_t
 
_›1
, 
_›2
; \

1301 
_sign1
 = 
_sign2
 = 
FALSE
; \

1302 
	`SET_HI
(0); \

1303 
	`SET_LO
(0); \

1304 
_›1
 = 
	`GPR
(
RS
); \

1305 
_›2
 = 
	`GPR
(
RT
); \

1309 i‡(
_›1
 & 020000000000) \

1311 
_sign1
 = 
TRUE
; \

1312 
_›1
 = (~_op1) + 1; \

1314 i‡(
_›2
 & 020000000000) \

1316 
_sign2
 = 
TRUE
; \

1317 
_›2
 = (~_op2) + 1; \

1319 i‡(
_›1
 & 020000000000) \

1320 
	`SET_LO
(
_›2
); \

1322 
_i
 = 0; _i < 31; _i++) \

1324 
	`SET_HI
(
HI
 << 1); \

1325 
	`SET_HI
(
HI
 + 
	`exåa˘l
(
LO
, 31, 1)); \

1326 
	`SET_LO
(
LO
 << 1); \

1327 i‡((
	`exåa˘l
(
_›1
, 30 - 
_i
, 1)) == 1) \

1329 i‡((()037777777777 - ()
LO
Ë< ()
_›2
)\

1331 
	`SET_HI
(
HI
 + 1); \

1333 
	`SET_LO
(
LO
 + 
_›2
); \

1338 i‡(
_sign1
 ^ 
_sign2
) \

1340 
	`SET_LO
(~
LO
); \

1341 
	`SET_HI
(~
HI
); \

1342 i‡(()
LO
 == 037777777777) \

1344 
	`SET_HI
(
HI
 + 1); \

1346 
	`SET_LO
(
LO
 + 1); \

1348 }

	)

1349 
DEFINST
(
MULT
, 0x46,

1351 
I¡MULT
, 
F_ICOMP
|
F_LONGLAT
,

1352 
DHI
, 
DLO
, 
DGPR
(
RT
), DGPR(
RS
), 
DNA
)

1354 
	#MULTU_IMPL
 \

1356 
_i
; \

1359 
	`SET_HI
(0); \

1360 
	`SET_LO
(0); \

1361 i‡(
	`GPR
(
RS
) & 020000000000) \

1362 
	`SET_LO
(
	`GPR
(
RT
)); \

1364 
_i
 = 0; _i < 31; _i++) \

1366 
	`SET_HI
(
HI
 << 1); \

1367 
	`SET_HI
(
HI
 + 
	`exåa˘l
(
LO
, 31, 1)); \

1368 
	`SET_LO
(
LO
 << 1); \

1369 i‡((
	`exåa˘l
(
	`GPR
(
RS
), 30 - 
_i
, 1)) == 1) \

1371 i‡((()037777777777 - ()
LO
Ë< ()
	`GPR
(
RT
))\

1373 
	`SET_HI
(
HI
 + 1); \

1375 
	`SET_LO
(
LO
 + 
	`GPR
(
RT
)); \

1378 }

	)

1379 
DEFINST
(
MULTU
, 0x47,

1381 
I¡MULT
, 
F_ICOMP
|
F_LONGLAT
,

1382 
DHI
, 
DLO
, 
DGPR
(
RT
), DGPR(
RS
), 
DNA
)

1384 
	#DIV_IMPL
 \

1386 i‡(
	`GPR
(
RT
) == 0) \

1387 
	`DECLARE_FAULT
(
md_Áu…_div0
); \

1389 
	`SET_LO
(
	`GPR
(
RS
Ë/ GPR(
RT
)); \

1390 
	`SET_HI
(
	`GPR
(
RS
Ë% GPR(
RT
)); \

1391 }

	)

1392 
DEFINST
(
DIV
, 0x48,

1394 
I¡DIV
, 
F_ICOMP
|
F_LONGLAT
,

1395 
DHI
, 
DLO
, 
DGPR
(
RT
), DGPR(
RS
), 
DNA
)

1397 
	#DIVU_IMPL
 \

1399 i‡(
	`GPR
(
RT
) == 0) \

1400 
	`DECLARE_FAULT
(
md_Áu…_div0
); \

1402 
	`SET_LO
((()
	`GPR
(
RS
)Ë/ (()GPR(
RT
))); \

1403 
	`SET_HI
((()
	`GPR
(
RS
)Ë% (()GPR(
RT
))); \

1404 }

	)

1405 
DEFINST
(
DIVU
, 0x49,

1407 
I¡DIV
, 
F_ICOMP
|
F_LONGLAT
,

1408 
DHI
, 
DLO
, 
DGPR
(
RT
), DGPR(
RS
), 
DNA
)

1410 
	#MFHI_IMPL
 \

1412 
	`SET_GPR
(
RD
, 
HI
); \

1413 }

	)

1414 
DEFINST
(
MFHI
, 0x4a,

1416 
I¡ALU
, 
F_ICOMP
,

1417 
DGPR
(
RD
), 
DNA
, 
DHI
, DNA, DNA)

1419 
	#MTHI_IMPL
 \

1421 
	`SET_HI
(
	`GPR
(
RS
)); \

1422 }

	)

1423 
DEFINST
(
MTHI
, 0x4b,

1425 
I¡ALU
, 
F_ICOMP
,

1426 
DHI
, 
DNA
, 
DGPR
(
RS
), DNA, DNA)

1428 
	#MFLO_IMPL
 \

1430 
	`SET_GPR
(
RD
, 
LO
); \

1431 }

	)

1432 
DEFINST
(
MFLO
, 0x4c,

1434 
I¡ALU
, 
F_ICOMP
,

1435 
DGPR
(
RD
), 
DNA
, 
DLO
, DNA, DNA)

1437 
	#MTLO_IMPL
 \

1439 
	`SET_LO
(
	`GPR
(
RS
)); \

1440 }

	)

1441 
DEFINST
(
MTLO
, 0x4d,

1443 
I¡ALU
, 
F_ICOMP
,

1444 
DLO
, 
DNA
, 
DGPR
(
RS
), DNA, DNA)

1447 
	#AND__IMPL
 \

1449 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë& GPR(
RT
)); \

1450 }

	)

1451 
DEFINST
(
AND_
, 0x4e,

1453 
I¡ALU
, 
F_ICOMP
,

1454 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1456 
	#ANDI_IMPL
 \

1458 
	`SET_GPR
(
RT
, 
	`GPR
(
RS
Ë& 
UIMM
); \

1459 }

	)

1460 
DEFINST
(
ANDI
, 0x4f,

1462 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1463 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1465 
	#OR_IMPL
 \

1467 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë| GPR(
RT
)); \

1468 }

	)

1469 
DEFINST
(
OR
, 0x50,

1471 
I¡ALU
, 
F_ICOMP
,

1472 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1474 
	#ORI_IMPL
 \

1476 
	`SET_GPR
(
RT
, 
	`GPR
(
RS
Ë| 
UIMM
); \

1477 }

	)

1478 
DEFINST
(
ORI
, 0x51,

1480 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1481 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1483 
	#XOR_IMPL
 \

1485 
	`SET_GPR
(
RD
, 
	`GPR
(
RS
Ë^ GPR(
RT
)); \

1486 }

	)

1487 
DEFINST
(
XOR
, 0x52,

1489 
I¡ALU
, 
F_ICOMP
,

1490 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1492 
	#XORI_IMPL
 \

1494 
	`SET_GPR
(
RT
, 
	`GPR
(
RS
Ë^ 
UIMM
); \

1495 }

	)

1496 
DEFINST
(
XORI
, 0x53,

1498 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1499 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1501 
	#NOR_IMPL
 \

1503 
	`SET_GPR
(
RD
, ~(
	`GPR
(
RS
Ë| GPR(
RT
))); \

1504 }

	)

1505 
DEFINST
(
NOR
, 0x54,

1507 
I¡ALU
, 
F_ICOMP
,

1508 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1510 
	#SLL_IMPL
 \

1512 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
Ë<< 
SHAMT
); \

1513 }

	)

1514 
DEFINST
(
SLL
, 0x55,

1516 
I¡ALU
, 
F_ICOMP
,

1517 
DGPR
(
RD
), 
DNA
, DGPR(
RT
), DNA, DNA)

1519 
	#SLLV_IMPL
 \

1521 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
Ë<< (GPR(
RS
) & 037)); \

1522 }

	)

1523 
DEFINST
(
SLLV
, 0x56,

1525 
I¡ALU
, 
F_ICOMP
,

1526 
DGPR
(
RD
), 
DNA
, DGPR(
RT
), DGPR(
RS
), DNA)

1528 #ifde‡
FAST_SRL


1529 
	#SRL_IMPL
 \

1531 
	`SET_GPR
(
RD
, (()
	`GPR
(
RT
)Ë>> 
SHAMT
); \

1532 }

	)

1534 
	#SRL_IMPL
 \

1538 i‡((
SHAMT
) != 0) \

1540 
w‹d_t
 
_rd
; \

1542 
_rd
 = ((()
	`GPR
(
RT
)) >> 1) & ~0x80000000; \

1543 
	`SET_GPR
(
RD
, (
_rd
 >> ((
SHAMT
) - 1))); \

1547 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
)); \

1549 }

	)

1551 
DEFINST
(
SRL
, 0x57,

1553 
I¡ALU
, 
F_ICOMP
,

1554 
DGPR
(
RD
), 
DNA
, DGPR(
RT
), DNA, DNA)

1556 #ifde‡
FAST_SRL


1557 
	#SRLV_IMPL
 \

1559 
	`SET_GPR
(
RD
, (()
	`GPR
(
RT
)Ë>> (GPR(
RS
) & 037)); \

1560 }

	)

1562 
	#SRLV_IMPL
 \

1564 
_shamt
 = 
	`GPR
(
RS
) & 037; \

1568 i‡(
_shamt
 != 0) \

1570 
w‹d_t
 
_rd
; \

1572 
_rd
 = ((()
	`GPR
(
RT
)) >> 1) & ~0x80000000; \

1573 
	`SET_GPR
(
RD
, (
_rd
 >> (
_shamt
 - 1))); \

1577 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
)); \

1579 }

	)

1581 
DEFINST
(
SRLV
, 0x58,

1583 
I¡ALU
, 
F_ICOMP
,

1584 
DGPR
(
RD
), 
DNA
, DGPR(
RT
), DGPR(
RS
), DNA)

1586 #ifde‡
FAST_SRA


1587 
	#SRA_IMPL
 \

1589 
	`SET_GPR
(
RD
, ((sig√d)
	`GPR
(
RT
)Ë>> 
SHAMT
); \

1590 }

	)

1592 
	#SRA_IMPL
 \

1594 
_i
; \

1599 i‡(
	`GPR
(
RT
) & 0x80000000) \

1601 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
)); \

1602 
_i
 = 0; _ò< 
SHAMT
; _i++) \

1604 
	`SET_GPR
(
RD
, (
	`GPR
(RD) >> 1) | 0x80000000); \

1609 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
Ë>> 
SHAMT
); \

1611 }

	)

1613 
DEFINST
(
SRA
, 0x59,

1615 
I¡ALU
, 
F_ICOMP
,

1616 
DGPR
(
RD
), 
DNA
, DGPR(
RT
), DNA, DNA)

1618 #ifde‡
FAST_SRA


1619 
	#SRAV_IMPL
 \

1621 
	`SET_GPR
(
RD
, ((sig√d)
	`GPR
(
RT
)Ë>> (GPR(
RS
) & 037)); \

1622 }

	)

1624 
	#SRAV_IMPL
 \

1626 
_i
; \

1627 
_shamt
 = 
	`GPR
(
RS
) & 037; \

1632 i‡(
	`GPR
(
RT
) & 0x80000000) \

1634 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
)); \

1635 
_i
 = 0; _ò< 
_shamt
; _i++) \

1637 
	`SET_GPR
(
RD
, (
	`GPR
(RD) >> 1) | 0x80000000); \

1642 
	`SET_GPR
(
RD
, 
	`GPR
(
RT
Ë>> 
_shamt
); \

1644 }

	)

1646 
DEFINST
(
SRAV
, 0x5a,

1648 
I¡ALU
, 
F_ICOMP
,

1649 
DGPR
(
RD
), 
DNA
, DGPR(
RT
), DGPR(
RS
), DNA)

1651 
	#SLT_IMPL
 \

1653 i‡(
	`GPR
(
RS
Ë< GPR(
RT
)) \

1654 
	`SET_GPR
(
RD
, 1); \

1656 
	`SET_GPR
(
RD
, 0); \

1657 }

	)

1658 
DEFINST
(
SLT
, 0x5b,

1660 
I¡ALU
, 
F_ICOMP
,

1661 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1663 
	#SLTI_IMPL
 \

1665 i‡(
	`GPR
(
RS
Ë< 
IMM
) \

1666 
	`SET_GPR
(
RT
, 1); \

1668 
	`SET_GPR
(
RT
, 0); \

1669 }

	)

1670 
DEFINST
(
SLTI
, 0x5c,

1672 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1673 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1675 
	#SLTU_IMPL
 \

1677 i‡((()
	`GPR
(
RS
)Ë< (()GPR(
RT
))) \

1678 
	`SET_GPR
(
RD
, 1); \

1680 
	`SET_GPR
(
RD
, 0); \

1681 }

	)

1682 
DEFINST
(
SLTU
, 0x5d,

1684 
I¡ALU
, 
F_ICOMP
,

1685 
DGPR
(
RD
), 
DNA
, DGPR(
RS
), DGPR(
RT
), DNA)

1687 
	#SLTIU_IMPL
 \

1689 i‡(()
	`GPR
(
RS
Ë< ()
IMM
) \

1690 
	`SET_GPR
(
RT
, 1); \

1692 
	`SET_GPR
(
RT
, 0); \

1693 }

	)

1694 
DEFINST
(
SLTIU
, 0x5e,

1696 
I¡ALU
, 
F_ICOMP
|
F_IMM
,

1697 
DGPR
(
RT
), 
DNA
, DGPR(
RS
), DNA, DNA)

1704 
	#FADD_S_IMPL
 \

1706 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1707 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1709 
	`SET_FPR_F
(
FD
, 
	`FPR_F
(
FS
Ë+ FPR_F(
FT
)); \

1710 }

	)

1711 
DEFINST
(
FADD_S
, 0x70,

1713 
FlﬂtADD
, 
F_FCOMP
,

1714 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DFPR_F(
FT
), DNA)

1716 
	#FADD_D_IMPL
 \

1718 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1719 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1721 
	`SET_FPR_D
(
FD
, 
	`FPR_D
(
FS
Ë+ FPR_D(
FT
)); \

1722 }

	)

1723 
DEFINST
(
FADD_D
, 0x71,

1725 
FlﬂtADD
, 
F_FCOMP
,

1726 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DFPR_D(
FT
), DNA)

1728 
	#FSUB_S_IMPL
 \

1730 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1731 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1733 
	`SET_FPR_F
(
FD
, 
	`FPR_F
(
FS
Ë- FPR_F(
FT
)); \

1734 }

	)

1735 
DEFINST
(
FSUB_S
, 0x72,

1737 
FlﬂtADD
, 
F_FCOMP
,

1738 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DFPR_F(
FT
), DNA)

1740 
	#FSUB_D_IMPL
 \

1742 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1743 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1745 
	`SET_FPR_D
(
FD
, 
	`FPR_D
(
FS
Ë- FPR_D(
FT
)); \

1746 }

	)

1747 
DEFINST
(
FSUB_D
, 0x73,

1749 
FlﬂtADD
, 
F_FCOMP
,

1750 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DFPR_D(
FT
), DNA)

1752 
	#FMUL_S_IMPL
 \

1754 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1755 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1757 
	`SET_FPR_F
(
FD
, 
	`FPR_F
(
FS
Ë* FPR_F(
FT
)); \

1758 }

	)

1759 
DEFINST
(
FMUL_S
, 0x74,

1761 
FlﬂtMULT
, 
F_FCOMP
|
F_LONGLAT
,

1762 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DFPR_F(
FT
), DNA)

1764 
	#FMUL_D_IMPL
 \

1766 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1767 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1769 
	`SET_FPR_D
(
FD
, 
	`FPR_D
(
FS
Ë* FPR_D(
FT
)); \

1770 }

	)

1771 
DEFINST
(
FMUL_D
, 0x75,

1773 
FlﬂtMULT
, 
F_FCOMP
|
F_LONGLAT
,

1774 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DFPR_D(
FT
), DNA)

1776 
	#FDIV_S_IMPL
 \

1778 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1779 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1781 
	`SET_FPR_F
(
FD
, 
	`FPR_F
(
FS
Ë/ FPR_F(
FT
)); \

1782 }

	)

1783 
DEFINST
(
FDIV_S
, 0x76,

1785 
FlﬂtDIV
, 
F_FCOMP
|
F_LONGLAT
,

1786 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DFPR_F(
FT
), DNA)

1788 
	#FDIV_D_IMPL
 \

1790 i‡(((
FD
Ë& 01Ë|| ((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1791 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1793 
	`SET_FPR_D
(
FD
, 
	`FPR_D
(
FS
Ë/ FPR_D(
FT
)); \

1794 }

	)

1795 
DEFINST
(
FDIV_D
, 0x77,

1797 
FlﬂtDIV
, 
F_FCOMP
|
F_LONGLAT
,

1798 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DFPR_D(
FT
), DNA)

1800 
	#FABS_S_IMPL
 \

1802 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1803 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1805 
	`SET_FPR_F
(
FD
, (
sÊﬂt_t
)
	`Ábs
((
dÊﬂt_t
)
	`FPR_F
(
FS
))); \

1806 }

	)

1807 
DEFINST
(
FABS_S
, 0x78,

1809 
FlﬂtADD
, 
F_FCOMP
,

1810 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DNA, DNA)

1812 
	#FABS_D_IMPL
 \

1814 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1815 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1817 
	`SET_FPR_D
(
FD
, 
	`Ábs
(
	`FPR_D
(
FS
))); \

1818 }

	)

1819 
DEFINST
(
FABS_D
, 0x79,

1821 
FlﬂtADD
, 
F_FCOMP
,

1822 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DNA, DNA)

1824 
	#FMOV_S_IMPL
 \

1826 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1827 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1829 
	`SET_FPR_F
(
FD
, 
	`FPR_F
(
FS
)); \

1830 }

	)

1831 
DEFINST
(
FMOV_S
, 0x7a,

1833 
FlﬂtADD
, 
F_FCOMP
,

1834 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DNA, DNA)

1836 
	#FMOV_D_IMPL
 \

1838 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1839 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1841 
	`SET_FPR_D
(
FD
, 
	`FPR_D
(
FS
)); \

1842 }

	)

1843 
DEFINST
(
FMOV_D
, 0x7b,

1845 
FlﬂtADD
, 
F_FCOMP
,

1846 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DNA, DNA)

1848 
	#FNEG_S_IMPL
 \

1850 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1851 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1853 
	`SET_FPR_F
(
FD
, -
	`FPR_F
(
FS
)); \

1854 }

	)

1855 
DEFINST
(
FNEG_S
, 0x7c,

1857 
FlﬂtADD
, 
F_FCOMP
,

1858 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DNA, DNA)

1860 
	#FNEG_D_IMPL
 \

1862 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1863 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1865 
	`SET_FPR_D
(
FD
, -
	`FPR_D
(
FS
)); \

1866 }

	)

1867 
DEFINST
(
FNEG_D
, 0x7d,

1869 
FlﬂtADD
, 
F_FCOMP
,

1870 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DNA, DNA)

1872 
	#CVT_S_D_IMPL
 \

1874 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1875 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1877 
	`SET_FPR_F
(
FD
, ()
	`FPR_D
(
FS
)); \

1878 }

	)

1879 
DEFINST
(
CVT_S_D
, 0x80,

1881 
FlﬂtCVT
, 
F_FCOMP
,

1882 
DFPR_F
(
FD
), 
DNA
, 
DFPR_D
(
FS
), DNA, DNA)

1884 
	#CVT_S_W_IMPL
 \

1886 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1887 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1889 
	`SET_FPR_F
(
FD
, ()
	`FPR_L
(
FS
)); \

1890 }

	)

1891 
DEFINST
(
CVT_S_W
, 0x81,

1893 
FlﬂtCVT
, 
F_FCOMP
,

1894 
DFPR_F
(
FD
), 
DNA
, 
DFPR_L
(
FS
), DNA, DNA)

1896 
	#CVT_D_S_IMPL
 \

1898 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1899 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1901 
	`SET_FPR_D
(
FD
, (
dÊﬂt_t
)
	`FPR_F
(
FS
)); \

1902 }

	)

1903 
DEFINST
(
CVT_D_S
, 0x82,

1905 
FlﬂtCVT
, 
F_FCOMP
,

1906 
DFPR_D
(
FD
), 
DNA
, 
DFPR_F
(
FS
), DNA, DNA)

1908 
	#CVT_D_W_IMPL
 \

1910 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1911 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1913 
	`SET_FPR_D
(
FD
, (
dÊﬂt_t
)
	`FPR_L
(
FS
)); \

1914 }

	)

1915 
DEFINST
(
CVT_D_W
, 0x83,

1917 
FlﬂtCVT
, 
F_FCOMP
,

1918 
DFPR_D
(
FD
), 
DNA
, 
DFPR_L
(
FS
), DNA, DNA)

1920 
	#CVT_W_S_IMPL
 \

1922 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1923 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1925 
	`SET_FPR_L
(
FD
, (
sw‹d_t
)
	`FPR_F
(
FS
)); \

1926 }

	)

1927 
DEFINST
(
CVT_W_S
, 0x84,

1929 
FlﬂtCVT
, 
F_FCOMP
,

1930 
DFPR_L
(
FD
), 
DNA
, 
DFPR_F
(
FS
), DNA, DNA)

1932 
	#CVT_W_D_IMPL
 \

1934 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

1935 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1937 
	`SET_FPR_L
(
FD
, (
sw‹d_t
)
	`FPR_D
(
FS
)); \

1938 }

	)

1939 
DEFINST
(
CVT_W_D
, 0x85,

1941 
FlﬂtCVT
, 
F_FCOMP
,

1942 
DFPR_L
(
FD
), 
DNA
, 
DFPR_D
(
FS
), DNA, DNA)

1944 
	#C_EQ_S_IMPL
 \

1946 i‡(((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1947 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1949 
	`SET_FCC
(
	`FPR_F
(
FS
Ë=FPR_F(
FT
)); \

1950 }

	)

1951 
DEFINST
(
C_EQ_S
, 0x90,

1953 
FlﬂtCMP
, 
F_FCOMP
,

1954 
DFCC
, 
DNA
, 
DFPR_F
(
FS
), DFPR_F(
FT
), DNA)

1956 
	#C_EQ_D_IMPL
 \

1958 i‡(((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1959 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1961 
	`SET_FCC
(
	`FPR_D
(
FS
Ë=FPR_D(
FT
)); \

1962 }

	)

1963 
DEFINST
(
C_EQ_D
, 0x91,

1965 
FlﬂtCMP
, 
F_FCOMP
,

1966 
DFCC
, 
DNA
, 
DFPR_D
(
FS
), DFPR_D(
FT
), DNA)

1968 
	#C_LT_S_IMPL
 \

1970 i‡(((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1971 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1973 
	`SET_FCC
(
	`FPR_F
(
FS
Ë< FPR_F(
FT
)); \

1974 }

	)

1975 
DEFINST
(
C_LT_S
, 0x92,

1977 
FlﬂtCMP
, 
F_FCOMP
,

1978 
DFCC
, 
DNA
, 
DFPR_F
(
FS
), DFPR_F(
FT
), DNA)

1980 
	#C_LT_D_IMPL
 \

1982 i‡(((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1983 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1985 
	`SET_FCC
(
	`FPR_D
(
FS
Ë< FPR_D(
FT
)); \

1986 }

	)

1987 
DEFINST
(
C_LT_D
, 0x93,

1989 
FlﬂtCMP
, 
F_FCOMP
,

1990 
DFCC
, 
DNA
, 
DFPR_D
(
FS
), DFPR_D(
FT
), DNA)

1992 
	#C_LE_S_IMPL
 \

1994 i‡(((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

1995 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

1997 
	`SET_FCC
(
	`FPR_F
(
FS
Ë<FPR_F(
FT
)); \

1998 }

	)

1999 
DEFINST
(
C_LE_S
, 0x94,

2001 
FlﬂtCMP
, 
F_FCOMP
,

2002 
DFCC
, 
DNA
, 
DFPR_F
(
FS
), DFPR_F(
FT
), DNA)

2004 
	#C_LE_D_IMPL
 \

2006 i‡(((
FS
Ë& 01Ë|| ((
FT
) & 01)) \

2007 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

2009 
	`SET_FCC
(
	`FPR_D
(
FS
Ë<FPR_D(
FT
)); \

2010 }

	)

2011 
DEFINST
(
C_LE_D
, 0x95,

2013 
FlﬂtCMP
, 
F_FCOMP
,

2014 
DFCC
, 
DNA
, 
DFPR_D
(
FS
), DFPR_D(
FT
), DNA)

2016 
	#FSQRT_S_IMPL
 \

2018 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

2019 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

2021 
	`SET_FPR_F
(
FD
, (
sÊﬂt_t
)
	`sqπ
((
dÊﬂt_t
)
	`FPR_F
(
FS
))); \

2022 }

	)

2023 
DEFINST
(
FSQRT_S
, 0x96,

2025 
FlﬂtSQRT
, 
F_FCOMP
|
F_LONGLAT
,

2026 
DFPR_F
(
FD
), 
DNA
, DFPR_F(
FS
), DNA, DNA)

2028 
	#FSQRT_D_IMPL
 \

2030 i‡(((
FD
Ë& 01Ë|| ((
FS
) & 01)) \

2031 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

2033 
	`SET_FPR_D
(
FD
, 
	`sqπ
(
	`FPR_D
(
FS
))); \

2034 }

	)

2035 
DEFINST
(
FSQRT_D
, 0x97,

2037 
FlﬂtSQRT
, 
F_FCOMP
|
F_LONGLAT
,

2038 
DFPR_D
(
FD
), 
DNA
, DFPR_D(
FS
), DNA, DNA)

2045 
	#SYSCALL_IMPL
 \

2047 
	`SYSCALL
(
ö°
); \

2048 }

	)

2049 
DEFINST
(
SYSCALL
, 0xa0,

2051 
NA
, 
F_TRAP
,

2052 
DNA
, DNA, DNA, DNA, DNA)

2054 
	#BREAK_IMPL
 \

2059 
	`DECLARE_FAULT
(
md_Áu…_bªak
); \

2060 }

	)

2062 
DEFINST
(
BREAK
, 0xa1,

2064 
NA
, 
F_TRAP
,

2065 
DNA
, DNA, DNA, DNA, DNA)

2067 
	#LUI_IMPL
 \

2069 
	`SET_GPR
(
RT
, 
UIMM
 << 16); \

2070 }

	)

2071 
DEFINST
(
LUI
, 0xa2,

2073 
I¡ALU
, 
F_ICOMP
,

2074 
DGPR
(
RT
), 
DNA
, DNA, DNA, DNA)

2076 
	#MFC1_IMPL
 \

2078 
	`SET_GPR
(
RT
, 
	`FPR_L
(
FS
)); \

2079 }

	)

2080 
DEFINST
(
MFC1
, 0xa3,

2082 
I¡ALU
, 
F_ICOMP
,

2083 
DGPR
(
RT
), 
DNA
, 
DFPR_L
(
FS
), DNA, DNA)

2085 
	#DMFC1_IMPL
 \

2087 i‡(((
RT
Ë& 01Ë|| ((
FS
) & 01)) \

2088 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

2090 
	`SET_GPR
(
RT
, 
	`FPR_L
(
FS
)); \

2091 
	`SET_GPR
((
RT
)+1, 
	`FPR_L
((
FS
)+1)); \

2092 }

	)

2093 
DEFINST
(
DMFC1
, 0xa7,

2095 
I¡ALU
, 
F_ICOMP
,

2096 
DGPR_D
(
RT
), 
DNA
, 
DFPR_D
(
FS
), DNA, DNA)

2098 
	#CFC1_IMPL
 \

2101 }

	)

2102 
DEFINST
(
CFC1
, 0xa4,

2104 
I¡ALU
, 
F_ICOMP
,

2105 
DNA
, DNA, DNA, DNA, DNA)

2107 
	#MTC1_IMPL
 \

2109 
	`SET_FPR_L
(
FS
, 
	`GPR
(
RT
)); \

2110 }

	)

2111 
DEFINST
(
MTC1
, 0xa5,

2113 
I¡ALU
, 
F_ICOMP
,

2114 
DFPR_L
(
FS
), 
DNA
, 
DGPR
(
RT
), DNA, DNA)

2116 
	#DMTC1_IMPL
 \

2118 i‡(((
FS
Ë& 01Ë|| ((
RT
) & 01)) \

2119 
	`DECLARE_FAULT
(
md_Áu…_Æignmít
); \

2121 
	`SET_FPR_L
(
FS
, 
	`GPR
(
RT
)); \

2122 
	`SET_FPR_L
((
FS
)+1, 
	`GPR
((
RT
)+1)); \

2123 }

	)

2124 
DEFINST
(
DMTC1
, 0xa8,

2126 
I¡ALU
, 
F_ICOMP
,

2127 
DFPR_D
(
FS
), 
DNA
, 
DGPR_D
(
RT
), DNA, DNA)

2129 
	#CTC1_IMPL
 \

2132 }

	)

2133 
DEFINST
(
CTC1
, 0xa6,

2135 
I¡ALU
, 
F_ICOMP
,

2136 
DNA
, DNA, DNA, DNA, DNA)

2140 #unde‡
NOP_IMPL


2141 #unde‡
JUMP_IMPL


2142 #unde‡
JAL_IMPL


2143 #unde‡
JR_IMPL


2144 #unde‡
JALR_IMPL


2145 #unde‡
BEQ_IMPL


2146 #unde‡
BNE_IMPL


2147 #unde‡
BLEZ_IMPL


2148 #unde‡
BGTZ_IMPL


2149 #unde‡
BLTZ_IMPL


2150 #unde‡
BGEZ_IMPL


2151 #unde‡
BC1F_IMPL


2152 #unde‡
BC1T_IMPL


2153 #unde‡
LB_IMPL


2154 #unde‡
LBU_IMPL


2155 #unde‡
LH_IMPL


2156 #unde‡
LHU_IMPL


2157 #unde‡
LW_IMPL


2158 #unde‡
DLW_IMPL


2159 #unde‡
L_S_IMPL


2160 #unde‡
L_D_IMPL


2161 #unde‡
SB_IMPL


2162 #unde‡
SH_IMPL


2163 #unde‡
SW_IMPL


2164 #unde‡
DSW_IMPL


2165 #unde‡
DSZ_IMPL


2166 #unde‡
S_S_IMPL


2167 #unde‡
S_D_IMPL


2168 #unde‡
LB_RR_IMPL


2169 #unde‡
LBU_RR_IMPL


2170 #unde‡
LH_RR_IMPL


2171 #unde‡
LHU_RR_IMPL


2172 #unde‡
LW_RR_IMPL


2173 #unde‡
DLW_RR_IMPL


2174 #unde‡
L_S_RR_IMPL


2175 #unde‡
L_D_RR_IMPL


2176 #unde‡
SB_RR_IMPL


2177 #unde‡
SH_RR_IMPL


2178 #unde‡
SW_RR_IMPL


2179 #unde‡
DSW_RR_IMPL


2180 #unde‡
DSZ_RR_IMPL


2181 #unde‡
S_S_RR_IMPL


2182 #unde‡
S_D_RR_IMPL


2183 #unde‡
L_S_RR_R2_IMPL


2184 #unde‡
S_S_RR_R2_IMPL


2185 #unde‡
LW_RR_R2_IMPL


2186 #unde‡
SW_RR_R2_IMPL


2187 #unde‡
ADD_IMPL


2188 #unde‡
ADDI_IMPL


2189 #unde‡
ADDU_IMPL


2190 #unde‡
ADDIU_IMPL


2191 #unde‡
SUB_IMPL


2192 #unde‡
SUBU_IMPL


2193 #unde‡
MULT_IMPL


2194 #unde‡
MULTU_IMPL


2195 #unde‡
DIV_IMPL


2196 #unde‡
DIVU_IMPL


2197 #unde‡
MFHI_IMPL


2198 #unde‡
MTHI_IMPL


2199 #unde‡
MFLO_IMPL


2200 #unde‡
MTLO_IMPL


2201 #unde‡
AND__IMPL


2202 #unde‡
ANDI_IMPL


2203 #unde‡
OR_IMPL


2204 #unde‡
ORI_IMPL


2205 #unde‡
XOR_IMPL


2206 #unde‡
XORI_IMPL


2207 #unde‡
NOR_IMPL


2208 #unde‡
SLL_IMPL


2209 #unde‡
SLLV_IMPL


2210 #unde‡
SRL_IMPL


2211 #unde‡
SRLV_IMPL


2212 #unde‡
SRA_IMPL


2213 #unde‡
SRAV_IMPL


2214 #unde‡
SLT_IMPL


2215 #unde‡
SLTI_IMPL


2216 #unde‡
SLTU_IMPL


2217 #unde‡
SLTIU_IMPL


2218 #unde‡
FADD_S_IMPL


2219 #unde‡
FADD_D_IMPL


2220 #unde‡
FSUB_S_IMPL


2221 #unde‡
FSUB_D_IMPL


2222 #unde‡
FMUL_S_IMPL


2223 #unde‡
FMUL_D_IMPL


2224 #unde‡
FDIV_S_IMPL


2225 #unde‡
FDIV_D_IMPL


2226 #unde‡
FABS_S_IMPL


2227 #unde‡
FABS_D_IMPL


2228 #unde‡
FMOV_S_IMPL


2229 #unde‡
FMOV_D_IMPL


2230 #unde‡
FNEG_S_IMPL


2231 #unde‡
FNEG_D_IMPL


2232 #unde‡
CVT_S_D_IMPL


2233 #unde‡
CVT_S_W_IMPL


2234 #unde‡
CVT_D_S_IMPL


2235 #unde‡
CVT_D_W_IMPL


2236 #unde‡
CVT_W_S_IMPL


2237 #unde‡
CVT_W_D_IMPL


2238 #unde‡
C_EQ_S_IMPL


2239 #unde‡
C_EQ_D_IMPL


2240 #unde‡
C_LT_S_IMPL


2241 #unde‡
C_LT_D_IMPL


2242 #unde‡
C_LE_S_IMPL


2243 #unde‡
C_LE_D_IMPL


2244 #unde‡
FSQRT_S_IMPL


2245 #unde‡
FSQRT_D_IMPL


2246 #unde‡
SYSCALL_IMPL


2247 #unde‡
BREAK_IMPL


2248 #unde‡
LUI_IMPL


2249 #unde‡
MFC1_IMPL


2250 #unde‡
DMFC1_IMPL


2251 #unde‡
CFC1_IMPL


2252 #unde‡
MTC1_IMPL


2253 #unde‡
DMTC1_IMPL


2254 #unde‡
CTC1_IMPL


2256 #unde‡
DEFINST


2257 #unde‡
DEFLINK


2258 #unde‡
CONNECT


	@sharedbus.h

1 #i‚de‡
__BUS_SCHEDULE_H


2 
	#__BUS_SCHEDULE_H


	)

4 
	tuŒ
;

5 
	tuöt
;

8 
	#PARTITION_CORE
 -1

	)

10 
	mSCHED_TYPE_1
 = 0,

11 
	mSCHED_TYPE_2
,

12 
	mSCHED_TYPE_3


13 } 
	tsched_ty≥
;

15 
	sc‹e_sched
 {

16 
uŒ
 
	m°¨t_time
;

17 
uöt
 
	möãrvÆ
;

18 
uöt
 
	m¶Ÿ_Àn
;

20 
c‹e_sched
 
	tc‹e_sched_s
;

21 
c‹e_sched
* 
	tc‹e_sched_p
;

23 
	s£gmít
 {

24 
uŒ
 
	m£g_°¨t
;

25 
uŒ
 
	m£g_íd
;

26 
c‹e_sched_p
* 
	m≥r_c‹e_sched
;

28 
£gmít
 
	t£gmít_s
;

29 
£gmít
* 
	t£gmít_p
;

31 
	sscheduÀ
 {

32 
sched_ty≥
 
	mty≥
;

33 
£gmít_p
* 
	m£g_li°
;

34 
uöt
 
	mn_£gmíts
;

35 
uöt
 
	mn_c‹es
;

39 
scheduÀ
 
	tsched_s
;

40 
scheduÀ
* 
	tsched_p
;

42 
¥öt_TDMA_sched
();

43 
£gmít_p
 
föd_£gmít
(£gmít_p* 
hód_£g
, 
n£gs
, 
uŒ
 
°¨t_time
);

44 
sched_p
 
gëScheduÀ
();

45 
£tScheduÀ
(* 
sched_fûe
);

46 
uöt
 
compuã_bus_dñay
(
uŒ
 
°¨t_time
, uöà
nc‹e
);

	@
1
.
0
70
793
bitmap.h
bpred.c
bpred.h
cache.c
cache.h
config.h
decode_cfg.h
dlite.c
dlite.h
eio.c
eio.h
endian.c
endian.h
eval.c
eval.h
eventq.c
eventq.h
host.h
libexo/exo-test.c
libexo/exolex.c
libexo/libexo.c
libexo/libexo.h
loader.c
loader.h
machine.c
machine.h
main.c
memory.c
memory.h
misc.c
misc.h
options.c
options.h
ptrace.c
ptrace.h
range.c
range.h
regs.c
regs.h
resource.c
resource.h
sim-bpred.c
sim-cache.c
sim-eio.c
sim-fast.c
sim-outorder.c
sim-profile.c
sim-safe-new.c
sim-safe-orig.c
sim-safe.c
sim.h
stats.c
stats.h
symbol.c
symbol.h
syscall.c
syscall.h
sysprobe.c
target-pisa/config.h
target-pisa/configbig.h
target-pisa/configlit.h
target-pisa/ecoff.h
target-pisa/loader.c
target-pisa/pisa.c
target-pisa/pisa.h
target-pisa/symbol.c
target-pisa/syscall.c
version.h
machine.def
sharedbus.h
